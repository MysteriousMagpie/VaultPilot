"use strict";var e=require("obsidian");function t(e,t,n,i){return new(n||(n=Promise))(function(o,a){function s(e){try{l(i.next(e))}catch(e){a(e)}}function r(e){try{l(i.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n(function(e){e(t)})).then(s,r)}l((i=i.apply(e,t||[])).next())})}"function"==typeof SuppressedError&&SuppressedError;const n={enableVaultManagement:!0,autoSyncVaultStructure:!1,searchResultsLimit:50,enableSmartSearch:!0,batchOperationTimeout:3e4,showVaultStats:!0,maxSearchResults:100,defaultSearchType:"content",enableFileOperations:!0,confirmDestructiveOperations:!0,autoBackupBeforeOperations:!1};const i={backendUrl:"http://localhost:8000",apiKey:"",enableWebSocket:!0,enableCopilot:!0,enableAutoComplete:!1,defaultAgent:"",defaultMode:"ask",chatHistoryLimit:100,debugMode:!1,showIntentDebug:!1,vaultManagement:n,modelSelection:{enabled:!0,devpipePath:"../dev-pipe",monitoringInterval:3e4,fallbackEnabled:!0,cacheDuration:3e5,retryAttempts:3,timeout:3e4,debugMode:!1,userPreferences:{priority:"balanced",maxCostPerRequest:.5,preferredProviders:[],qualityThreshold:.7}}};class o extends e.PluginSettingTab{constructor(e,t){super(e,t),this.plugin=t}display(){const{containerEl:o}=this;o.empty(),o.createEl("h2",{text:"VaultPilot Settings"}),o.createEl("p",{text:"Configure your connection to EvoAgentX backend and AI features."}),o.createEl("h3",{text:"Connection"}),new e.Setting(o).setName("Backend URL").setDesc("URL of EvoAgentX backend server").addText(e=>e.setPlaceholder("http://localhost:8000").setValue(this.plugin.settings.backendUrl).onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.backendUrl=e,yield this.plugin.saveSettings()}))),new e.Setting(o).setName("API Key").setDesc("Optional API key for authentication (if required by backend)").addText(e=>e.setPlaceholder("Enter API key...").setValue(this.plugin.settings.apiKey||"").onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.apiKey=e,yield this.plugin.saveSettings()}))),new e.Setting(o).setName("Connection Test").setDesc("Test connection to EvoAgentX backend").addButton(e=>e.setButtonText("Test Connection").onClick(()=>t(this,void 0,void 0,function*(){yield this.testConnection()}))),o.createEl("h3",{text:"Features"}),new e.Setting(o).setName("Enable WebSocket").setDesc("Enable real-time communication for live updates and progress tracking").addToggle(e=>e.setValue(this.plugin.settings.enableWebSocket).onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.enableWebSocket=e,yield this.plugin.saveSettings(),e?this.plugin.connectWebSocket():this.plugin.disconnectWebSocket()}))),new e.Setting(o).setName("Enable Copilot").setDesc("Enable AI-powered text completion and suggestions").addToggle(e=>e.setValue(this.plugin.settings.enableCopilot).onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.enableCopilot=e,yield this.plugin.saveSettings()}))),new e.Setting(o).setName("Enable Auto-Complete").setDesc("Automatically suggest completions after sentence endings and new lines (with 10s cooldown)").addToggle(e=>e.setValue(this.plugin.settings.enableAutoComplete).onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.enableAutoComplete=e,yield this.plugin.saveSettings()}))),o.createEl("h3",{text:"Agent Configuration"}),new e.Setting(o).setName("Default Agent").setDesc("Default agent to use for chat and workflows (leave empty for auto-selection)").addText(e=>e.setPlaceholder("Agent ID or name...").setValue(this.plugin.settings.defaultAgent||"").onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.defaultAgent=e,yield this.plugin.saveSettings()}))),new e.Setting(o).setName("Default Chat Mode").setDesc("Default mode for new chat sessions: Ask for simple Q&A, Agent for complex workflows").addDropdown(e=>e.addOption("ask","Ask Mode - Simple Q&A").addOption("agent","Agent Mode - Complex Workflows").setValue(this.plugin.settings.defaultMode).onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.defaultMode=e,yield this.plugin.saveSettings()}))),new e.Setting(o).setName("Chat History Limit").setDesc("Maximum number of chat messages to keep in history").addSlider(e=>e.setLimits(10,500,10).setValue(this.plugin.settings.chatHistoryLimit).setDynamicTooltip().onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.chatHistoryLimit=e,yield this.plugin.saveSettings()}))),o.createEl("h3",{text:"Advanced"}),new e.Setting(o).setName("Debug Mode").setDesc("Enable debug logging and additional developer features").addToggle(e=>e.setValue(this.plugin.settings.debugMode).onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.debugMode=e,yield this.plugin.saveSettings()}))),new e.Setting(o).setName("Show Intent Debug Overlay").setDesc("Display automatic intent detection in chat (Ask vs Agent mode)").addToggle(e=>e.setValue(this.plugin.settings.showIntentDebug).onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.showIntentDebug=e,yield this.plugin.saveSettings()}))),o.createEl("h3",{text:"Vault Management"}),function(i,o){i.createEl("h2",{text:"Vault Management"}),i.createEl("p",{text:"Configure AI-powered vault structure analysis and file operations."}),new e.Setting(i).setName("Enable Vault Management").setDesc("Enable AI-powered vault structure analysis and file operations").addToggle(e=>{var i,a;return e.setValue(null===(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.enableVaultManagement)||void 0===a||a).onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.enableVaultManagement=e,yield o.saveSettings(),e?o.initializeVaultManagement():o.disableVaultManagement()}))}),new e.Setting(i).setName("Auto Sync Vault Structure").setDesc("Automatically update vault structure analysis when files change").addToggle(e=>{var i,a;return e.setValue(null!==(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.autoSyncVaultStructure)&&void 0!==a&&a).onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.autoSyncVaultStructure=e,yield o.saveSettings()}))}),new e.Setting(i).setName("Enable Smart Search").setDesc("Use AI-powered search with context and insights").addToggle(e=>{var i,a;return e.setValue(null===(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.enableSmartSearch)||void 0===a||a).onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.enableSmartSearch=e,yield o.saveSettings()}))}),new e.Setting(i).setName("Search Results Limit").setDesc("Maximum number of search results to display").addSlider(e=>{var i,a;return e.setLimits(10,200,10).setValue(null!==(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.searchResultsLimit)&&void 0!==a?a:50).setDynamicTooltip().onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.searchResultsLimit=e,yield o.saveSettings()}))}),new e.Setting(i).setName("Default Search Type").setDesc("Default search mode for smart search").addDropdown(e=>{var i,a;return e.addOption("content","Content Search").addOption("filename","Filename Search").addOption("tags","Tag Search").addOption("links","Link Search").addOption("comprehensive","Comprehensive Search").setValue(null!==(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.defaultSearchType)&&void 0!==a?a:"content").onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.defaultSearchType=e,yield o.saveSettings()}))}),new e.Setting(i).setName("Enable File Operations").setDesc("Allow file creation, deletion, and modification through the interface").addToggle(e=>{var i,a;return e.setValue(null===(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.enableFileOperations)||void 0===a||a).onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.enableFileOperations=e,yield o.saveSettings()}))}),new e.Setting(i).setName("Confirm Destructive Operations").setDesc("Show confirmation dialog for file deletion and destructive operations").addToggle(e=>{var i,a;return e.setValue(null===(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.confirmDestructiveOperations)||void 0===a||a).onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.confirmDestructiveOperations=e,yield o.saveSettings()}))}),new e.Setting(i).setName("Auto Backup Before Operations").setDesc("Automatically create backups before destructive file operations").addToggle(e=>{var i,a;return e.setValue(null!==(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.autoBackupBeforeOperations)&&void 0!==a&&a).onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.autoBackupBeforeOperations=e,yield o.saveSettings()}))}),new e.Setting(i).setName("Batch Operation Timeout").setDesc("Timeout for batch operations in milliseconds").addText(e=>{var i,a;return e.setPlaceholder("30000").setValue(String(null!==(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.batchOperationTimeout)&&void 0!==a?a:3e4)).onChange(e=>t(this,void 0,void 0,function*(){const t=parseInt(e)||3e4;o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.batchOperationTimeout=t,yield o.saveSettings()}))}),new e.Setting(i).setName("Show Vault Statistics").setDesc("Display vault statistics in modals and interfaces").addToggle(e=>{var i,a;return e.setValue(null===(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.showVaultStats)||void 0===a||a).onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.showVaultStats=e,yield o.saveSettings()}))}),new e.Setting(i).setName("Test Vault Management Connection").setDesc("Test connection to vault management endpoints").addButton(e=>e.setButtonText("Test Connection").setCta().onClick(()=>t(this,void 0,void 0,function*(){if(!o.vaultClient)return e.setButtonText("Not Available"),void setTimeout(()=>e.setButtonText("Test Connection"),2e3);e.setButtonText("Testing..."),e.setDisabled(!0);try{(yield o.vaultClient.testConnection()).success?e.setButtonText("✅ Connected"):e.setButtonText("❌ Failed")}catch(t){e.setButtonText("❌ Error")}e.setDisabled(!1),setTimeout(()=>e.setButtonText("Test Connection"),3e3)}))),i.createEl("h3",{text:"Advanced Vault Management"}),new e.Setting(i).setName("Maximum Search Results").setDesc("Absolute maximum number of search results to fetch from backend").addSlider(e=>{var i,a;return e.setLimits(50,500,25).setValue(null!==(a=null===(i=o.settings.vaultManagement)||void 0===i?void 0:i.maxSearchResults)&&void 0!==a?a:100).setDynamicTooltip().onChange(e=>t(this,void 0,void 0,function*(){o.settings.vaultManagement||(o.settings.vaultManagement=Object.assign({},n)),o.settings.vaultManagement.maxSearchResults=e,yield o.saveSettings()}))}),new e.Setting(i).setName("Reset Vault Management Settings").setDesc("Reset all vault management settings to their default values").addButton(e=>e.setButtonText("Reset to Defaults").setWarning().onClick(()=>t(this,void 0,void 0,function*(){o.settings.vaultManagement=Object.assign({},n),yield o.saveSettings();const e=o.app.setting.activeTab;e&&e.display&&e.display()})))}(o,this.plugin),o.createEl("h3",{text:"Model Selection"}),new e.Setting(o).setName("Enable Model Selection").setDesc("Enable intelligent AI model selection based on task type and requirements").addToggle(e=>{var n,o;return e.setValue(null===(o=null===(n=this.plugin.settings.modelSelection)||void 0===n?void 0:n.enabled)||void 0===o||o).onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.modelSelection||(this.plugin.settings.modelSelection=i.modelSelection),this.plugin.settings.modelSelection.enabled=e,yield this.plugin.saveSettings(),e?yield this.plugin.initializeModelSelection():yield this.plugin.disconnectModelSelection()}))}),new e.Setting(o).setName("DevPipe Path").setDesc("Path to the DevPipe communication directory").addText(e=>{var n,o;return e.setPlaceholder("../dev-pipe").setValue(null!==(o=null===(n=this.plugin.settings.modelSelection)||void 0===n?void 0:n.devpipePath)&&void 0!==o?o:"../dev-pipe").onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.modelSelection||(this.plugin.settings.modelSelection=i.modelSelection),this.plugin.settings.modelSelection.devpipePath=e,yield this.plugin.saveSettings()}))}),new e.Setting(o).setName("Priority Mode").setDesc("How to prioritize model selection: performance, cost, or balanced").addDropdown(e=>{var n,o;return e.addOption("performance","Performance - Best quality models").addOption("cost","Cost - Most economical models").addOption("balanced","Balanced - Optimal quality/cost ratio").setValue(null!==(o=null===(n=this.plugin.settings.modelSelection)||void 0===n?void 0:n.userPreferences.priority)&&void 0!==o?o:"balanced").onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.modelSelection||(this.plugin.settings.modelSelection=i.modelSelection),this.plugin.settings.modelSelection.userPreferences.priority=e,yield this.plugin.saveSettings()}))}),new e.Setting(o).setName("Max Cost Per Request").setDesc("Maximum cost per AI request (in USD)").addSlider(e=>{var n,o;return e.setLimits(.01,2,.01).setValue(null!==(o=null===(n=this.plugin.settings.modelSelection)||void 0===n?void 0:n.userPreferences.maxCostPerRequest)&&void 0!==o?o:.5).setDynamicTooltip().onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.modelSelection||(this.plugin.settings.modelSelection=i.modelSelection),this.plugin.settings.modelSelection.userPreferences.maxCostPerRequest=e,yield this.plugin.saveSettings()}))}),new e.Setting(o).setName("Model Selection Debug").setDesc("Enable debug logging for model selection decisions").addToggle(e=>{var n,o;return e.setValue(null!==(o=null===(n=this.plugin.settings.modelSelection)||void 0===n?void 0:n.debugMode)&&void 0!==o&&o).onChange(e=>t(this,void 0,void 0,function*(){this.plugin.settings.modelSelection||(this.plugin.settings.modelSelection=i.modelSelection),this.plugin.settings.modelSelection.debugMode=e,yield this.plugin.saveSettings()}))}),o.createEl("h2",{text:"Help & Documentation"}),o.createEl("h3",{text:"Information"});o.createEl("div",{cls:"setting-item-description"}).innerHTML="\n      <p><strong>VaultPilot v1.0.0</strong></p>\n      <p>Comprehensive EvoAgentX integration for Obsidian</p>\n      <p>Features: AI Chat, Copilot, Workflows, Vault Analysis, Task Planning</p>\n      <p>For help and documentation, visit the GitHub repository.</p>\n    "}testConnection(){return t(this,void 0,void 0,function*(){var t;const n=new e.Notice("Testing connection...",0);try{let i=yield this.plugin.apiClient.healthCheck();if(!i.success&&(null===(t=i.error)||void 0===t?void 0:t.includes("400"))){console.warn("Main health check failed with 400, trying alternative method");const e=yield this.plugin.apiClient.simpleHealthCheck();e.success&&e.data&&(i={success:!0,data:{status:e.data.status,version:"unknown"}})}n.hide(),i.success?new e.Notice("✅ Connection successful!",3e3):new e.Notice(`❌ Connection failed: ${i.error}`,5e3)}catch(t){n.hide(),new e.Notice(`❌ Connection error: ${t instanceof Error?t.message:"Unknown error"}`,5e3)}})}}const a="vaultpilot-view";class s extends e.ItemView{constructor(e,t){super(e),this.plugin=t}getViewType(){return a}getDisplayText(){return"VaultPilot"}getIcon(){return"bot"}onOpen(){return t(this,void 0,void 0,function*(){const e=this.containerEl;e.empty(),e.addClass("vaultpilot-view");const t=e.createEl("div",{cls:"vaultpilot-header"});t.createEl("h2",{text:"🤖 VaultPilot"}),t.createEl("p",{text:"Your AI assistant for Obsidian",cls:"vaultpilot-subtitle"}),this.statusEl=e.createEl("div",{cls:"vaultpilot-status"}),this.updateStatus(),this.quickActionsEl=e.createEl("div",{cls:"vaultpilot-quick-actions"}),this.createQuickActions(),this.vaultStatsEl=e.createEl("div",{cls:"vaultpilot-vault-stats"}),this.updateVaultStats();const n=e.createEl("div",{cls:"vaultpilot-activities"});n.createEl("h3",{text:"Recent Activities"}),n.createEl("p",{text:"Activity tracking coming soon...",cls:"vaultpilot-placeholder"}),this.addStyles()})}updateStatus(){this.statusEl.empty(),this.statusEl.createEl("h3",{text:"Connection Status"});const e=this.statusEl.createEl("div",{cls:"vaultpilot-status-container"}),t=e.createEl("div",{cls:"vaultpilot-status-item"});t.createEl("span",{text:"Backend: "});const n=t.createEl("span",{cls:"vaultpilot-status-indicator",text:"Checking..."}),i=e.createEl("div",{cls:"vaultpilot-status-item"});i.createEl("span",{text:"WebSocket: "}),i.createEl("span",{cls:"vaultpilot-status-indicator",text:this.plugin.isWebSocketConnected()?"🟢 Connected":"🔴 Disconnected"}),this.checkBackendStatus(n)}checkBackendStatus(e){return t(this,void 0,void 0,function*(){var t;try{let n=yield this.plugin.apiClient.healthCheck();if(!n.success&&(null===(t=n.error)||void 0===t?void 0:t.includes("400"))){const e=yield this.plugin.apiClient.simpleHealthCheck();e.success&&e.data&&(n={success:!0,data:{status:e.data.status,version:"unknown"}})}n.success?(e.textContent="🟢 Connected",e.className="vaultpilot-status-indicator vaultpilot-status-connected"):(e.textContent="🔴 Error",e.className="vaultpilot-status-indicator vaultpilot-status-error")}catch(t){e.textContent="🔴 Offline",e.className="vaultpilot-status-indicator vaultpilot-status-offline"}})}createQuickActions(){this.quickActionsEl.empty(),this.quickActionsEl.createEl("h3",{text:"Quick Actions"});const t=this.quickActionsEl.createEl("div",{cls:"vaultpilot-actions-grid"});t.createEl("button",{text:"💬 Open Chat",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openChatModal();t.createEl("button",{text:"📊 Open Dashboard",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.activateFullTabView();t.createEl("button",{text:"⚙️ Execute Workflow",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openWorkflowModal();t.createEl("button",{text:"🔍 Analyze Vault",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.analyzeVault();t.createEl("button",{text:"✨ Get Completion",cls:"vaultpilot-action-button"}).onclick=()=>{const t=this.app.workspace.getActiveViewOfType(e.MarkdownView);t?this.plugin.getCopilotCompletion(t.editor):new e.Notice("No active editor found")};this.quickActionsEl.createEl("button",{text:"🔄 Refresh Status",cls:"vaultpilot-refresh-button"}).onclick=()=>{this.updateStatus(),this.updateVaultStats()}}updateVaultStats(){this.vaultStatsEl.empty(),this.vaultStatsEl.createEl("h3",{text:"Vault Statistics"});const t=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-stats-container"}),n=this.app.vault.getFiles(),i=this.app.vault.getMarkdownFiles();[{label:"Total Files",value:n.length.toString()},{label:"Markdown Files",value:i.length.toString()},{label:"Folders",value:this.app.vault.getAllLoadedFiles().filter(t=>t instanceof e.TFolder).length.toString()}].forEach(e=>{const n=t.createEl("div",{cls:"vaultpilot-stat-item"});n.createEl("div",{text:e.value,cls:"vaultpilot-stat-value"}),n.createEl("div",{text:e.label,cls:"vaultpilot-stat-label"})}),this.loadAgentInfo()}loadAgentInfo(){return t(this,void 0,void 0,function*(){try{console.log("VaultPilot: Loading agents in view...");const e=yield this.plugin.apiClient.getAgents();if(console.log("VaultPilot: getAgents response in view:",e),e.success&&e.data){let t=[];if(Array.isArray(e.data))t=e.data;else if(e.data&&"object"==typeof e.data){const n=e.data;n.agents&&Array.isArray(n.agents)?(t=n.agents,console.log("VaultPilot: Found agents array in view, using response.data.agents")):n.data&&Array.isArray(n.data)?(t=n.data,console.log("VaultPilot: Found nested data in view, using response.data.data")):console.warn("VaultPilot: Unexpected response format:",typeof e.data,e.data)}const n=t.length,i=t.filter(e=>e.active).length,o=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-agent-stats"});o.createEl("h4",{text:"Available Agents"});o.createEl("div",{cls:"vaultpilot-agent-info"}).createEl("span",{text:`${i}/${n} active`})}}catch(e){console.error("Failed to load agents in view:",e)}})}addStyles(){if(!document.getElementById("vaultpilot-view-styles")){const e=document.createElement("style");e.id="vaultpilot-view-styles",e.textContent="\n        .vaultpilot-view {\n          padding: 20px;\n        }\n        .vaultpilot-header {\n          text-align: center;\n          margin-bottom: 30px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-subtitle {\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-status,\n        .vaultpilot-quick-actions,\n        .vaultpilot-vault-stats,\n        .vaultpilot-activities {\n          margin-bottom: 25px;\n        }\n        .vaultpilot-status h3,\n        .vaultpilot-quick-actions h3,\n        .vaultpilot-vault-stats h3,\n        .vaultpilot-activities h3 {\n          margin-bottom: 15px;\n          color: var(--text-normal);\n          border-bottom: 1px solid var(--background-modifier-border);\n          padding-bottom: 5px;\n        }\n        .vaultpilot-status-container {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n        .vaultpilot-status-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .vaultpilot-status-indicator {\n          font-weight: 500;\n        }\n        .vaultpilot-status-connected {\n          color: var(--color-green);\n        }\n        .vaultpilot-status-error,\n        .vaultpilot-status-offline {\n          color: var(--color-red);\n        }\n        .vaultpilot-actions-grid {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 10px;\n          margin-bottom: 15px;\n        }\n        .vaultpilot-action-button {\n          padding: 12px 8px;\n          background: var(--interactive-normal);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          color: var(--text-normal);\n          cursor: pointer;\n          font-size: 13px;\n          transition: background-color 0.2s;\n        }\n        .vaultpilot-action-button:hover {\n          background: var(--interactive-hover);\n        }\n        .vaultpilot-refresh-button {\n          width: 100%;\n          padding: 8px;\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          border: none;\n          border-radius: 6px;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        .vaultpilot-stats-container {\n          display: grid;\n          grid-template-columns: repeat(3, 1fr);\n          gap: 15px;\n        }\n        .vaultpilot-stat-item {\n          text-align: center;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-stat-value {\n          font-size: 24px;\n          font-weight: bold;\n          color: var(--text-accent);\n          margin-bottom: 5px;\n        }\n        .vaultpilot-stat-label {\n          font-size: 12px;\n          color: var(--text-muted);\n        }\n        .vaultpilot-agent-stats {\n          margin-top: 15px;\n          padding: 10px;\n          background: var(--background-primary-alt);\n          border-radius: 6px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-agent-stats h4 {\n          margin: 0 0 8px 0;\n          font-size: 14px;\n        }\n        .vaultpilot-agent-info {\n          font-size: 12px;\n          color: var(--text-muted);\n        }\n        .vaultpilot-placeholder {\n          color: var(--text-muted);\n          font-style: italic;\n          text-align: center;\n          padding: 20px;\n        }\n      ",document.head.appendChild(e)}}onClose(){return t(this,void 0,void 0,function*(){})}}const r="vaultpilot-full-tab-view";class l extends e.ItemView{constructor(e,t){super(e),this.plugin=t}getViewType(){return r}getDisplayText(){return"VaultPilot Dashboard"}getIcon(){return"layout-dashboard"}onOpen(){return t(this,void 0,void 0,function*(){const e=this.containerEl;e.empty(),e.addClass("vaultpilot-full-tab-view"),e.style.height="100%",e.style.overflow="hidden";const t=e.createEl("div",{cls:"vaultpilot-main-layout"}),n=t.createEl("div",{cls:"vaultpilot-left-sidebar"});this.createLeftSidebar(n);const i=t.createEl("div",{cls:"vaultpilot-main-content"});this.createMainContent(i);const o=t.createEl("div",{cls:"vaultpilot-right-sidebar"});this.createRightSidebar(o),this.addFullTabStyles()})}createLeftSidebar(e){const t=e.createEl("div",{cls:"vaultpilot-sidebar-header"});t.createEl("h2",{text:"🤖 VaultPilot"}),t.createEl("p",{text:"AI Assistant Dashboard",cls:"vaultpilot-subtitle"}),this.statusEl=e.createEl("div",{cls:"vaultpilot-status"}),this.updateStatus(),this.quickActionsEl=e.createEl("div",{cls:"vaultpilot-quick-actions"}),this.createQuickActions(),this.vaultStatsEl=e.createEl("div",{cls:"vaultpilot-vault-stats"}),this.updateVaultStats()}createMainContent(e){const t=e.createEl("div",{cls:"vaultpilot-tab-nav"}),n=t.createEl("button",{text:"💬 Chat",cls:"vaultpilot-tab-button active"}),i=t.createEl("button",{text:"⚙️ Workflows",cls:"vaultpilot-tab-button"}),o=t.createEl("button",{text:"📊 Analytics",cls:"vaultpilot-tab-button"}),a=e.createEl("div",{cls:"vaultpilot-tab-content"});this.chatEl=a.createEl("div",{cls:"vaultpilot-chat-section active"}),this.createChatSection(this.chatEl),this.workflowEl=a.createEl("div",{cls:"vaultpilot-workflow-section"}),this.createWorkflowSection(this.workflowEl);const s=a.createEl("div",{cls:"vaultpilot-analytics-section"});this.createAnalyticsSection(s),n.onclick=()=>this.switchTab("chat",n),i.onclick=()=>this.switchTab("workflow",i),o.onclick=()=>this.switchTab("analytics",o)}createRightSidebar(e){const t=e.createEl("div",{cls:"vaultpilot-recent-files"});t.createEl("h3",{text:"Recent Files"}),this.updateRecentFiles(t);const n=e.createEl("div",{cls:"vaultpilot-agent-status"});n.createEl("h3",{text:"Agent Status"}),this.updateAgentStatus(n);const i=e.createEl("div",{cls:"vaultpilot-activity-feed"});i.createEl("h3",{text:"Activity Feed"}),this.createActivityFeed(i)}createChatSection(e){const t=e.createEl("div",{cls:"vaultpilot-chat-content"});t.createEl("div",{cls:"vaultpilot-chat-header"}).createEl("h3",{text:"AI Chat Interface"});const n=t.createEl("div",{cls:"vaultpilot-chat-history"});n.createEl("div",{text:"Welcome! Start a conversation with your AI assistant.",cls:"vaultpilot-chat-welcome"});const i=t.createEl("div",{cls:"vaultpilot-chat-input"}),o=i.createEl("textarea",{placeholder:"Type your message here...",cls:"vaultpilot-chat-textarea"}),a=i.createEl("button",{text:"Send",cls:"vaultpilot-chat-send-button"});a.onclick=()=>{const e=o.value.trim();e&&(this.sendChatMessage(e,n),o.value="")},o.onkeydown=e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),a.click())}}createWorkflowSection(e){const t=e.createEl("div",{cls:"vaultpilot-workflow-content"});t.createEl("div",{cls:"vaultpilot-workflow-header"}).createEl("h3",{text:"Workflow Management"});const n=t.createEl("div",{cls:"vaultpilot-workflow-grid"});[{name:"Analyze Vault",icon:"🔍",description:"Analyze your vault structure and content"},{name:"Generate Summary",icon:"📝",description:"Create summaries of your notes"},{name:"Link Analysis",icon:"🔗",description:"Analyze note connections and relationships"},{name:"Tag Management",icon:"🏷️",description:"Organize and manage your tags"},{name:"Daily Planning",icon:"📅",description:"Plan your day based on your notes"},{name:"Knowledge Graph",icon:"🕸️",description:"Visualize your knowledge connections"},{name:"Content Search",icon:"🔎",description:"Advanced search across your vault"},{name:"Note Templates",icon:"📄",description:"Create and manage note templates"},{name:"Link Assistant",icon:"🔗",description:"Intelligent link suggestions and management"}].forEach(e=>{const t=n.createEl("div",{cls:"vaultpilot-workflow-card"});t.createEl("div",{text:e.icon,cls:"vaultpilot-workflow-icon"}),t.createEl("h4",{text:e.name}),t.createEl("p",{text:e.description});t.createEl("button",{text:"Run",cls:"vaultpilot-workflow-run-button"}).onclick=()=>this.runWorkflow(e.name)})}createAnalyticsSection(e){const t=e.createEl("div",{cls:"vaultpilot-analytics-content"});t.createEl("div",{cls:"vaultpilot-analytics-header"}).createEl("h3",{text:"Vault Analytics"});const n=t.createEl("div",{cls:"vaultpilot-charts-container"}),i=n.createEl("div",{cls:"vaultpilot-chart-card"});i.createEl("h4",{text:"File Type Distribution"}),i.createEl("div",{text:"Chart visualization coming soon...",cls:"vaultpilot-chart-placeholder"});const o=n.createEl("div",{cls:"vaultpilot-chart-card"});o.createEl("h4",{text:"Note Creation Timeline"}),o.createEl("div",{text:"Timeline visualization coming soon...",cls:"vaultpilot-chart-placeholder"});const a=n.createEl("div",{cls:"vaultpilot-chart-card"});a.createEl("h4",{text:"Tag Usage"}),a.createEl("div",{text:"Tag analytics coming soon...",cls:"vaultpilot-chart-placeholder"});const s=n.createEl("div",{cls:"vaultpilot-chart-card"});s.createEl("h4",{text:"Word Count Analysis"}),s.createEl("div",{text:"Word count visualization coming soon...",cls:"vaultpilot-chart-placeholder"});const r=n.createEl("div",{cls:"vaultpilot-chart-card"});r.createEl("h4",{text:"Link Density"}),r.createEl("div",{text:"Link analysis coming soon...",cls:"vaultpilot-chart-placeholder"});const l=n.createEl("div",{cls:"vaultpilot-chart-card"});l.createEl("h4",{text:"Activity Heatmap"}),l.createEl("div",{text:"Activity heatmap coming soon...",cls:"vaultpilot-chart-placeholder"})}switchTab(e,t){var n;this.containerEl.querySelectorAll(".vaultpilot-tab-button").forEach(e=>{e.removeClass("active")}),this.containerEl.querySelectorAll(".vaultpilot-chat-section, .vaultpilot-workflow-section, .vaultpilot-analytics-section").forEach(e=>{e.removeClass("active")}),t.addClass("active"),"chat"===e?this.chatEl.addClass("active"):"workflow"===e?this.workflowEl.addClass("active"):"analytics"===e&&(null===(n=this.containerEl.querySelector(".vaultpilot-analytics-section"))||void 0===n||n.addClass("active"))}sendChatMessage(e,n){return t(this,void 0,void 0,function*(){n.createEl("div",{cls:"vaultpilot-chat-message user"}).createEl("div",{text:e});const t=n.createEl("div",{cls:"vaultpilot-chat-message assistant thinking"});t.createEl("div",{text:"Thinking..."}),n.scrollTop=n.scrollHeight;try{const i=yield this.plugin.apiClient.sendChat({message:e,context:null});if(t.remove(),i.success&&i.data){n.createEl("div",{cls:"vaultpilot-chat-message assistant"}).createEl("div",{text:i.data.response})}else{n.createEl("div",{cls:"vaultpilot-chat-message error"}).createEl("div",{text:"Error: Could not get response from AI"})}}catch(e){t.remove();n.createEl("div",{cls:"vaultpilot-chat-message error"}).createEl("div",{text:"Error: Connection failed"})}n.scrollTop=n.scrollHeight})}runWorkflow(n){return t(this,void 0,void 0,function*(){var t,i;new e.Notice(`Running workflow: ${n}`);try{switch(n){case"Analyze Vault":yield this.runAnalyzeVaultWorkflow();break;case"Daily Planning":yield this.plugin.planMyDay();break;case"Generate Summary":yield this.runSummaryWorkflow();break;case"Link Analysis":yield this.runLinkAnalysisWorkflow();break;case"Content Search":yield this.runContentSearchWorkflow();break;default:yield this.runGenericWorkflow(n)}}catch(o){console.error(`Error running workflow: ${n}:`,o),(null===(t=o.message)||void 0===t?void 0:t.includes("Not Found"))||(null===(i=o.message)||void 0===i?void 0:i.includes("404"))?new e.Notice(`${n} workflow requires server-side implementation. Please check server configuration.`):new e.Notice(`Error running workflow: ${n} - ${o.message}`)}})}runAnalyzeVaultWorkflow(){return t(this,void 0,void 0,function*(){var t;if(this.plugin.vaultClient)try{const t=yield this.plugin.vaultClient.getVaultStructure({include_content:!1,max_depth:3});new e.Notice(`Vault analysis complete! Found ${t.total_files} files in ${t.total_folders} folders.`)}catch(e){if(!(null===(t=e.message)||void 0===t?void 0:t.includes("Not Found")))throw e;yield this.runLocalVaultAnalysis()}else yield this.runLocalVaultAnalysis()})}runLocalVaultAnalysis(){return t(this,void 0,void 0,function*(){const t=this.app.vault.getFiles(),n=this.app.vault.getMarkdownFiles(),i=this.app.vault.getAllLoadedFiles().filter(t=>t instanceof e.TFolder).length;new e.Notice(`Local vault analysis: ${n.length} markdown files, ${t.length} total files, ${i} folders.`)})}runSummaryWorkflow(){return t(this,void 0,void 0,function*(){try{const t=this.app.workspace.getActiveFile();if(!t)return void new e.Notice("Please open a file to summarize");const n=yield this.app.vault.read(t),i=yield this.plugin.apiClient.runWorkflow({message:"Please create a comprehensive summary of this content",context:n});if(!i.success||!i.data)throw new Error(i.error||"Summary generation failed");new e.Notice("Summary generated successfully!")}catch(e){throw new Error(`Summary workflow failed: ${e.message}`)}})}runLinkAnalysisWorkflow(){return t(this,void 0,void 0,function*(){const t=this.app.vault.getMarkdownFiles();let n=0,i=new Set;for(const e of t){const t=(yield this.app.vault.read(e)).match(/\[\[([^\]]+)\]\]/g);t&&(n+=t.length,t.forEach(e=>{const t=e.slice(2,-2);i.add(t)}))}const o=t.length-i.size;new e.Notice(`Link analysis: ${n} total links, ${i.size} linked files, ${o} orphaned files.`)})}runContentSearchWorkflow(){return t(this,void 0,void 0,function*(){this.plugin.vaultClient&&this.plugin.openSmartSearchModal?this.plugin.openSmartSearchModal("","comprehensive"):new e.Notice("Content search requires vault management features. Please enable in settings.")})}runGenericWorkflow(n){return t(this,void 0,void 0,function*(){var t,i;try{const t=yield this.plugin.apiClient.runWorkflow({message:`Execute workflow: ${n}`,context:null});if(!t.success||!t.data)throw new Error(t.error||"Workflow execution failed");new e.Notice(`${n} completed successfully!`)}catch(o){if(!(null===(t=o.message)||void 0===t?void 0:t.includes("Not Found"))&&!(null===(i=o.message)||void 0===i?void 0:i.includes("404")))throw o;new e.Notice(`${n} workflow is not yet implemented on the server. Coming soon!`)}})}updateStatus(){this.statusEl.empty(),this.statusEl.createEl("h3",{text:"Connection Status"});const e=this.statusEl.createEl("div",{cls:"vaultpilot-status-container"}),t=e.createEl("div",{cls:"vaultpilot-status-item"});t.createEl("span",{text:"Backend: "});const n=t.createEl("span",{cls:"vaultpilot-status-indicator",text:"Checking..."}),i=e.createEl("div",{cls:"vaultpilot-status-item"});i.createEl("span",{text:"WebSocket: "}),i.createEl("span",{cls:"vaultpilot-status-indicator",text:this.plugin.isWebSocketConnected()?"🟢 Connected":"🔴 Disconnected"}),this.checkBackendStatus(n)}checkBackendStatus(e){return t(this,void 0,void 0,function*(){var t;try{let n=yield this.plugin.apiClient.healthCheck();if(!n.success&&(null===(t=n.error)||void 0===t?void 0:t.includes("400"))){const e=yield this.plugin.apiClient.simpleHealthCheck();e.success&&e.data&&(n={success:!0,data:{status:e.data.status,version:"unknown"}})}n.success?(e.textContent="🟢 Connected",e.className="vaultpilot-status-indicator vaultpilot-status-connected"):(e.textContent="🔴 Error",e.className="vaultpilot-status-indicator vaultpilot-status-error")}catch(t){e.textContent="🔴 Offline",e.className="vaultpilot-status-indicator vaultpilot-status-offline"}})}createQuickActions(){this.quickActionsEl.empty(),this.quickActionsEl.createEl("h3",{text:"Quick Actions"});const e=this.quickActionsEl.createEl("div",{cls:"vaultpilot-actions-grid"});e.createEl("button",{text:"🔄 Refresh",cls:"vaultpilot-action-button"}).onclick=()=>{this.updateStatus(),this.updateVaultStats()};e.createEl("button",{text:"📋 Sidebar View",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.activateView();e.createEl("button",{text:"💬 Modal Chat",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openChatModal();e.createEl("button",{text:"⚙️ Workflows",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openWorkflowModal()}updateVaultStats(){this.vaultStatsEl.empty(),this.vaultStatsEl.createEl("h3",{text:"Vault Statistics"});const t=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-stats-container"}),n=this.app.vault.getFiles(),i=this.app.vault.getMarkdownFiles();[{label:"Total Files",value:n.length.toString()},{label:"Markdown Files",value:i.length.toString()},{label:"Folders",value:this.app.vault.getAllLoadedFiles().filter(t=>t instanceof e.TFolder).length.toString()}].forEach(e=>{const n=t.createEl("div",{cls:"vaultpilot-stat-item"});n.createEl("div",{text:e.value,cls:"vaultpilot-stat-value"}),n.createEl("div",{text:e.label,cls:"vaultpilot-stat-label"})})}updateRecentFiles(e){this.app.vault.getMarkdownFiles().sort((e,t)=>t.stat.mtime-e.stat.mtime).slice(0,5).forEach(t=>{const n=e.createEl("div",{cls:"vaultpilot-recent-file"});n.createEl("span",{text:t.basename}),n.onclick=()=>{this.app.workspace.openLinkText(t.path,"",!1)}})}updateAgentStatus(e){this.loadAgentInfo(e)}loadAgentInfo(e){return t(this,void 0,void 0,function*(){try{console.log("VaultPilot: Loading agents in full-tab-view...");const t=yield this.plugin.apiClient.getAgents();if(console.log("VaultPilot: getAgents response in full-tab-view:",t),t.success&&t.data&&e){let n=[];if(Array.isArray(t.data))n=t.data;else if(t.data&&"object"==typeof t.data){const e=t.data;e.agents&&Array.isArray(e.agents)?(n=e.agents,console.log("VaultPilot: Found agents array in full-tab-view, using response.data.agents")):e.data&&Array.isArray(e.data)?(n=e.data,console.log("VaultPilot: Found nested data in full-tab-view, using response.data.data")):console.warn("VaultPilot: Unexpected response format:",typeof t.data,t.data)}const i=n.length,o=n.filter(e=>e.active).length,a=e.createEl("div",{cls:"vaultpilot-agent-info"});a.createEl("div",{text:`${o}/${i} active`}),n.forEach(e=>{const t=a.createEl("div",{cls:"vaultpilot-agent-item"});t.createEl("span",{text:e.name}),t.createEl("span",{text:e.active?"🟢":"🔴",cls:"vaultpilot-agent-status"})})}}catch(e){console.error("Failed to load agents in full tab view:",e)}})}createActivityFeed(e){[{time:"Just now",activity:"VaultPilot started"},{time:"5 min ago",activity:"Connection established"},{time:"1 hour ago",activity:"Last vault analysis"}].forEach(t=>{const n=e.createEl("div",{cls:"vaultpilot-activity-item"});n.createEl("div",{text:t.activity}),n.createEl("div",{text:t.time,cls:"vaultpilot-activity-time"})})}addFullTabStyles(){if(!document.getElementById("vaultpilot-full-tab-styles")){const e=document.createElement("style");e.id="vaultpilot-full-tab-styles",e.textContent='\n        /* Ensure the full tab view fills available space */\n        .workspace-leaf-content[data-type="vaultpilot-full-tab-view"] {\n          height: 100%;\n        }\n        .vaultpilot-full-tab-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        .vaultpilot-main-layout {\n          display: flex;\n          flex: 1;\n          gap: 1px;\n          background: var(--background-modifier-border);\n          min-height: 0;\n        }\n        .vaultpilot-left-sidebar {\n          width: 250px;\n          background: var(--background-primary);\n          padding: 16px;\n          overflow-y: auto;\n        }\n        .vaultpilot-main-content {\n          flex: 1;\n          background: var(--background-primary);\n          display: flex;\n          flex-direction: column;\n          min-height: 0;\n        }\n        .vaultpilot-right-sidebar {\n          width: 250px;\n          background: var(--background-primary);\n          padding: 16px;\n          overflow-y: auto;\n        }\n        .vaultpilot-sidebar-header {\n          text-align: center;\n          margin-bottom: 20px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-tab-nav {\n          display: flex;\n          background: var(--background-secondary);\n          border-bottom: 1px solid var(--background-modifier-border);\n          flex-shrink: 0;\n        }\n        .vaultpilot-tab-button {\n          flex: 1;\n          padding: 12px 16px;\n          background: transparent;\n          border: none;\n          color: var(--text-muted);\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n        .vaultpilot-tab-button:hover {\n          background: var(--background-modifier-hover);\n        }\n        .vaultpilot-tab-button.active {\n          background: var(--background-primary);\n          color: var(--text-normal);\n          border-bottom: 2px solid var(--interactive-accent);\n        }\n        .vaultpilot-tab-content {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          min-height: 0;\n          height: 100%;\n        }\n        /* Sections just flex-grow and hold their children */\n        .vaultpilot-chat-section,\n        .vaultpilot-workflow-section,\n        .vaultpilot-analytics-section {\n          display: none;           /* hidden by default */\n          flex: 1 1 0;             /* flex-grow, flex-shrink, base 0 */\n          flex-direction: column;\n          min-height: 0;           /* allow children to shrink/scroll */\n        }\n\n        /* Active section shows and flexes */\n        .vaultpilot-chat-section.active,\n        .vaultpilot-workflow-section.active,\n        .vaultpilot-analytics-section.active {\n          display: flex;           /* show & flex when active */\n        }\n\n        /* Content panels handle the scrolling */\n        .vaultpilot-chat-content,\n        .vaultpilot-workflow-content,\n        .vaultpilot-analytics-content {\n          flex: 1 1 0;             /* fill remaining space */\n          min-height: 0;           /* critical to allow overflow */\n          overflow-y: auto;        /* now *this* container scrolls */\n          padding: 16px;\n        }\n\n        /* keep special chat gaps */\n        .vaultpilot-chat-content {\n          display: flex;\n          flex-direction: column;\n          gap: 16px;\n        }\n        .vaultpilot-chat-history {\n          flex: 1;\n          overflow-y: auto;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          padding: 16px;\n          background: var(--background-secondary);\n          min-height: 0;\n        }\n        .vaultpilot-chat-input {\n          display: flex;\n          gap: 8px;\n        }\n        .vaultpilot-chat-textarea {\n          flex: 1;\n          min-height: 60px;\n          padding: 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n          resize: vertical;\n        }\n        .vaultpilot-chat-send-button {\n          padding: 8px 16px;\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          border: none;\n          border-radius: 6px;\n          cursor: pointer;\n          height: fit-content;\n          align-self: flex-end;\n        }\n        .vaultpilot-chat-message {\n          margin-bottom: 12px;\n          padding: 8px 12px;\n          border-radius: 8px;\n          max-width: 80%;\n        }\n        .vaultpilot-chat-message.user {\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          margin-left: auto;\n        }\n        .vaultpilot-chat-message.assistant {\n          background: var(--background-primary);\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-chat-message.thinking {\n          opacity: 0.7;\n          font-style: italic;\n        }\n        .vaultpilot-chat-message.error {\n          background: var(--background-modifier-error);\n          color: var(--text-error);\n        }\n        .vaultpilot-chat-header,\n        .vaultpilot-workflow-header,\n        .vaultpilot-analytics-header {\n          margin-bottom: 16px;\n          padding-bottom: 8px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-chat-header h3,\n        .vaultpilot-workflow-header h3,\n        .vaultpilot-analytics-header h3 {\n          margin: 0;\n          color: var(--text-normal);\n        }\n        .vaultpilot-workflow-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n          gap: 16px;\n          align-content: start;\n          padding: 0;\n          margin: 0;\n          width: 100%;\n        }\n        .vaultpilot-workflow-card {\n          background: var(--background-secondary);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          padding: 16px;\n          text-align: center;\n          transition: all 0.2s ease;\n        }\n        .vaultpilot-workflow-card:hover {\n          border-color: var(--interactive-accent);\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n        }\n        .vaultpilot-workflow-icon {\n          font-size: 32px;\n          margin-bottom: 8px;\n        }\n        .vaultpilot-workflow-run-button {\n          margin-top: 8px;\n          padding: 6px 12px;\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n        .vaultpilot-charts-container {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n          gap: 16px;\n          align-content: start;\n          padding: 0;\n          margin: 0;\n          width: 100%;\n        }\n        .vaultpilot-chart-card {\n          background: var(--background-secondary);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          padding: 16px;\n          transition: all 0.2s ease;\n        }\n        .vaultpilot-chart-card:hover {\n          border-color: var(--interactive-accent);\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n        }\n        .vaultpilot-chart-placeholder {\n          text-align: center;\n          color: var(--text-muted);\n          font-style: italic;\n          padding: 20px;\n        }\n        .vaultpilot-recent-file {\n          padding: 4px 8px;\n          margin-bottom: 4px;\n          border-radius: 4px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        .vaultpilot-recent-file:hover {\n          background: var(--background-modifier-hover);\n        }\n        .vaultpilot-agent-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 4px 0;\n        }\n        .vaultpilot-activity-item {\n          margin-bottom: 8px;\n          padding: 6px 0;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-activity-time {\n          font-size: 11px;\n          color: var(--text-muted);\n          margin-top: 2px;\n        }\n        /* Inherit styles from original view */\n        .vaultpilot-status,\n        .vaultpilot-quick-actions,\n        .vaultpilot-vault-stats {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-status h3,\n        .vaultpilot-quick-actions h3,\n        .vaultpilot-vault-stats h3 {\n          margin-bottom: 12px;\n          color: var(--text-normal);\n          border-bottom: 1px solid var(--background-modifier-border);\n          padding-bottom: 4px;\n          font-size: 14px;\n        }\n        .vaultpilot-status-container {\n          display: flex;\n          flex-direction: column;\n          gap: 6px;\n        }\n        .vaultpilot-status-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          font-size: 12px;\n        }\n        .vaultpilot-status-indicator {\n          font-weight: 500;\n          font-size: 11px;\n        }\n        .vaultpilot-status-connected {\n          color: var(--color-green);\n        }\n        .vaultpilot-status-error,\n        .vaultpilot-status-offline {\n          color: var(--color-red);\n        }\n        .vaultpilot-actions-grid {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 8px;\n        }\n        .vaultpilot-action-button {\n          padding: 8px 6px;\n          background: var(--interactive-normal);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          color: var(--text-normal);\n          cursor: pointer;\n          font-size: 11px;\n          transition: background-color 0.2s;\n        }\n        .vaultpilot-action-button:hover {\n          background: var(--interactive-hover);\n        }\n        .vaultpilot-stats-container {\n          display: grid;\n          grid-template-columns: 1fr;\n          gap: 8px;\n        }\n        .vaultpilot-stat-item {\n          text-align: center;\n          padding: 8px;\n          background: var(--background-secondary);\n          border-radius: 4px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-stat-value {\n          font-size: 18px;\n          font-weight: bold;\n          color: var(--text-accent);\n          margin-bottom: 2px;\n        }\n        .vaultpilot-stat-label {\n          font-size: 10px;\n          color: var(--text-muted);\n        }\n      ',document.head.appendChild(e)}}onClose(){return t(this,void 0,void 0,function*(){})}}let c;function d(){return t(this,void 0,void 0,function*(){const e=c.workspace.getActiveFile();if(!e)return null;return(yield c.vault.read(e)).slice(0,8e3)})}class u extends e.Modal{constructor(e,t){super(e),this.currentConversationId=null,this.messages=[],this.plugin=t}onOpen(){const{contentEl:e}=this;e.empty(),e.addClass("vaultpilot-chat-modal");const t=e.createEl("div",{cls:"vaultpilot-chat-header"});t.createEl("h2",{text:"🤖 VaultPilot Chat"});const n=t.createEl("div",{cls:"vaultpilot-chat-toolbar"});n.createEl("div",{cls:"vaultpilot-auto-mode-info",text:"⚡ Automatic mode detection enabled"});n.createEl("button",{text:"Clear Chat",cls:"mod-cta"}).onclick=()=>this.clearChat();const i=n.createEl("select",{cls:"vaultpilot-agent-select"});i.createEl("option",{text:"Auto-select Agent",value:""}),this.loadAgents(i),this.chatContainer=e.createEl("div",{cls:"vaultpilot-chat-container"}),this.messagesEl=this.chatContainer.createEl("div",{cls:"vaultpilot-chat-messages"}),this.inputContainer=this.chatContainer.createEl("div",{cls:"vaultpilot-chat-input-container"}),this.inputEl=this.inputContainer.createEl("input",{type:"text",placeholder:"Ask a question or describe what you want to accomplish...",cls:"vaultpilot-chat-input"}),this.sendButton=this.inputContainer.createEl("button",{text:"Send",cls:"mod-cta vaultpilot-send-button"}),this.inputEl.addEventListener("keydown",e=>{"Enter"!==e.key||e.shiftKey||(e.preventDefault(),this.sendMessage())}),this.sendButton.onclick=()=>this.sendMessage(),this.inputEl.focus(),this.loadConversationHistory(),this.addStyles()}loadAgents(e){return t(this,void 0,void 0,function*(){try{console.log("VaultPilot: Loading agents...");const t=yield this.plugin.apiClient.getAgents();if(console.log("VaultPilot: getAgents response:",t),t.success&&t.data){console.log("VaultPilot: response.data type:",typeof t.data),console.log("VaultPilot: response.data content:",t.data);let n=[];if(Array.isArray(t.data))n=t.data;else if(t.data&&"object"==typeof t.data){const e=t.data;e.agents&&Array.isArray(e.agents)?n=e.agents:e.data&&Array.isArray(e.data)&&(n=e.data)}if(n.length>0)console.log("VaultPilot: Found",n.length,"agents"),n.forEach(t=>{e.createEl("option",{text:t.name,value:t.id})});else{console.log("VaultPilot: No agents found in response");e.createEl("option",{text:"No agents available",value:""}).disabled=!0}}else console.error("Failed to load agents: API returned error or no data:",t)}catch(e){console.error("Failed to load agents:",e)}})}loadConversationHistory(){return t(this,void 0,void 0,function*(){if(this.currentConversationId)try{const e=yield this.plugin.apiClient.getConversationHistory(this.currentConversationId);e.success&&e.data&&(this.messages=e.data.messages,this.renderMessages())}catch(e){console.error("Failed to load conversation history:",e)}})}sendMessage(){return t(this,void 0,void 0,function*(){const t=this.inputEl.value.trim();if(t){this.inputEl.disabled=!0,this.sendButton.disabled=!0,this.sendButton.textContent="Sending...",this.addMessage("user",t),this.inputEl.value="";try{const[n,i]=yield Promise.all([d(),this.plugin.apiClient.classifyIntent(t)]),o={message:t,context:n};let a;this.plugin.settings.showIntentDebug&&this.showIntentDebug(i.intent),"agent"===i.intent?(a=yield this.plugin.apiClient.runWorkflow(o),a.success&&a.data?this.addMessage("assistant",`⚙️ Agent Mode (auto-detected)\n\n${a.data.result}`):this.addMessage("assistant",`Error in agent mode: ${a.error||"Failed to get response"}`)):(a=yield this.plugin.apiClient.sendChat(o,{conversation_id:this.currentConversationId||void 0,agent_id:this.getSelectedAgent()}),a.success&&a.data?(this.currentConversationId=a.data.conversation_id,this.addMessage("assistant",a.data.response)):this.addMessage("assistant",`Error: ${a.error||"Failed to get response"}`)),(null==n?void 0:n.length)||new e.Notice("⚠️ No vault content was sent; replies may be generic."),a.success||new e.Notice(`Chat error: ${a.error}`)}catch(t){const n=t instanceof Error?t.message:"Unknown error";this.addMessage("assistant",`Error: ${n}`),new e.Notice(`Chat error: ${n}`)}finally{this.inputEl.disabled=!1,this.sendButton.disabled=!1,this.sendButton.textContent="Send",this.inputEl.focus()}}})}getSelectedAgent(){const e=this.contentEl.querySelector(".vaultpilot-agent-select");return(null==e?void 0:e.value)||void 0}addMessage(e,t){const n={role:e,content:t,timestamp:(new Date).toISOString()};this.messages.push(n),this.renderMessage(n),this.scrollToBottom()}renderMessages(){this.messagesEl.empty(),this.messages.forEach(e=>this.renderMessage(e)),this.scrollToBottom()}renderMessage(e){const t=this.messagesEl.createEl("div",{cls:`vaultpilot-message vaultpilot-message-${e.role}`});t.createEl("div",{cls:"vaultpilot-message-role",text:"user"===e.role?"You":"VaultPilot"});t.createEl("div",{cls:"vaultpilot-message-content"}).innerHTML=this.renderMarkdown(e.content),e.timestamp&&t.createEl("div",{cls:"vaultpilot-message-time",text:new Date(e.timestamp).toLocaleTimeString()})}renderMarkdown(e){return e.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/`(.*?)`/g,"<code>$1</code>").replace(/\n/g,"<br>")}scrollToBottom(){this.messagesEl.scrollTop=this.messagesEl.scrollHeight}clearChat(){this.messages=[],this.currentConversationId=null,this.messagesEl.empty(),new e.Notice("Chat cleared")}addStyles(){if(!document.getElementById("vaultpilot-chat-styles")){const e=document.createElement("style");e.id="vaultpilot-chat-styles",e.textContent="\n        .vaultpilot-chat-modal {\n          width: 600px;\n          height: 700px;\n        }\n        .vaultpilot-chat-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 15px;\n          padding-bottom: 10px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-chat-toolbar {\n          display: flex;\n          gap: 10px;\n          align-items: center;\n          flex-wrap: wrap;\n        }\n        .vaultpilot-auto-mode-info {\n          margin-right: 15px;\n          padding: 8px 12px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-secondary);\n          font-size: 0.85em;\n          color: var(--text-muted);\n          display: flex;\n          align-items: center;\n          gap: 6px;\n        }\n        .vaultpilot-agent-select {\n          padding: 4px 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-chat-container {\n          display: flex;\n          flex-direction: column;\n          height: calc(100% - 80px);\n        }\n        .vaultpilot-chat-messages {\n          flex: 1;\n          overflow-y: auto;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          margin-bottom: 15px;\n          background: var(--background-secondary);\n        }\n        .vaultpilot-message {\n          margin-bottom: 15px;\n          padding: 10px;\n          border-radius: 8px;\n        }\n        .vaultpilot-message-user {\n          background: var(--background-primary-alt);\n          margin-left: 20px;\n        }\n        .vaultpilot-message-assistant {\n          background: var(--background-primary);\n          margin-right: 20px;\n        }\n        .vaultpilot-message-role {\n          font-weight: bold;\n          margin-bottom: 5px;\n          color: var(--text-accent);\n        }\n        .vaultpilot-message-content {\n          line-height: 1.4;\n          color: var(--text-normal);\n          user-select: text;\n        }\n        .vaultpilot-message-time {\n          font-size: 0.8em;\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-chat-input-container {\n          display: flex;\n          gap: 10px;\n        }\n        .vaultpilot-chat-input {\n          flex: 1;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-send-button {\n          padding: 10px 20px;\n        }\n        .vaultpilot-intent-debug {\n          background: var(--background-modifier-success);\n          color: var(--text-normal);\n          padding: 8px 12px;\n          border-radius: 4px;\n          margin: 8px 0;\n          font-size: 0.85em;\n          text-align: center;\n          border: 1px solid var(--background-modifier-border-hover);\n          animation: fadeInOut 3s ease-in-out;\n        }\n        @keyframes fadeInOut {\n          0% { opacity: 0; transform: translateY(-10px); }\n          10% { opacity: 1; transform: translateY(0); }\n          90% { opacity: 1; transform: translateY(0); }\n          100% { opacity: 0; transform: translateY(-10px); }\n        }\n      ",document.head.appendChild(e)}}showIntentDebug(e){const t=this.messagesEl.createEl("div",{cls:"vaultpilot-intent-debug",text:"🔍 Intent detected: "+("agent"===e?"⚙️ Agent Mode":"💬 Ask Mode")});setTimeout(()=>{t.remove()},3e3)}onClose(){const{contentEl:e}=this;e.empty()}}class h extends e.Modal{constructor(e,t){super(e),this.isExecuting=!1,this.plugin=t}onOpen(){const{contentEl:e}=this;e.empty(),e.addClass("vaultpilot-workflow-modal");const t=e.createEl("div",{cls:"vaultpilot-workflow-header"});t.createEl("h2",{text:"⚙️ Workflow Execution"}),t.createEl("p",{text:"Define a goal and let VaultPilot create and execute a comprehensive workflow to achieve it.",cls:"vaultpilot-workflow-description"});const n=e.createEl("div",{cls:"vaultpilot-workflow-form"}),i=n.createEl("div",{cls:"vaultpilot-form-group"});i.createEl("label",{text:"Goal *",cls:"vaultpilot-form-label"}),this.goalInput=i.createEl("textarea",{placeholder:'e.g., "Create a comprehensive study plan for machine learning based on my notes"',cls:"vaultpilot-goal-input"});const o=n.createEl("div",{cls:"vaultpilot-form-group"});o.createEl("label",{text:"Additional Context (optional)",cls:"vaultpilot-form-label"}),this.contextInput=o.createEl("textarea",{placeholder:"Provide any additional context, constraints, or requirements...",cls:"vaultpilot-context-input"});const a=n.createEl("div",{cls:"vaultpilot-form-group"});a.createEl("label",{text:"Vault Integration",cls:"vaultpilot-form-label"});const s=a.createEl("label",{cls:"vaultpilot-checkbox-label"}),r=s.createEl("input",{type:"checkbox"});s.createSpan({text:"Include active file content"});const l=a.createEl("label",{cls:"vaultpilot-checkbox-label"}),c=l.createEl("input",{type:"checkbox"});l.createSpan({text:"Include all vault files (may take longer)"}),this.executeButton=n.createEl("button",{text:"Execute Workflow",cls:"mod-cta vaultpilot-execute-button"}),this.executeButton.onclick=()=>this.executeWorkflow(r.checked,c.checked),this.progressContainer=e.createEl("div",{cls:"vaultpilot-progress-container"}),this.progressContainer.style.display="none",this.resultsContainer=e.createEl("div",{cls:"vaultpilot-results-container"}),this.resultsContainer.style.display="none",this.goalInput.focus(),this.addStyles()}executeWorkflow(n,i){return t(this,void 0,void 0,function*(){const t=this.goalInput.value.trim();if(t){this.isExecuting=!0,this.executeButton.disabled=!0,this.executeButton.textContent="Executing...",this.progressContainer.style.display="block",this.resultsContainer.style.display="none";try{let e="";if(n){const t=this.app.workspace.getActiveFile();if(t){const n=yield this.app.vault.read(t);e+=`=== ${t.name} ===\n${n}\n\n`}}if(i){const t=this.app.vault.getMarkdownFiles();for(const n of t.slice(0,20)){const t=yield this.app.vault.read(n);e+=`=== ${n.name} ===\n${t}\n\n`}}const o={goal:t,context:this.contextInput.value.trim()||void 0,vault_content:e||void 0};this.plugin.isWebSocketConnected()&&this.setupProgressListener();const a=yield this.plugin.apiClient.executeWorkflow(o);if(!a.success||!a.data)throw new Error(a.error||"Workflow execution failed");yield this.displayResults(a.data)}catch(t){const n=t instanceof Error?t.message:"Unknown error";new e.Notice(`Workflow error: ${n}`),this.displayError(n)}finally{this.isExecuting=!1,this.executeButton.disabled=!1,this.executeButton.textContent="Execute Workflow"}}else new e.Notice("Please enter a goal for the workflow")})}setupProgressListener(){this.displayProgress("Analyzing goal and context..."),setTimeout(()=>{this.displayProgress("Planning workflow steps...")},1e3),setTimeout(()=>{this.displayProgress("Executing workflow...")},2e3)}displayProgress(e){this.progressContainer.innerHTML=`\n      <div class="vaultpilot-progress-item">\n        <div class="vaultpilot-progress-spinner"></div>\n        <span>${e}</span>\n      </div>\n    `}displayResults(e){return t(this,void 0,void 0,function*(){this.progressContainer.style.display="none",this.resultsContainer.style.display="block",this.resultsContainer.empty();const t=this.resultsContainer.createEl("div",{cls:"vaultpilot-results-header"});t.createEl("h3",{text:"✅ Workflow Completed"}),t.createEl("p",{text:`Execution time: ${e.execution_time}s`,cls:"vaultpilot-execution-time"});const n=this.resultsContainer.createEl("div",{cls:"vaultpilot-result-content"});n.createEl("h4",{text:"Result"});if(n.createEl("div",{cls:"vaultpilot-result-text"}).innerHTML=this.renderMarkdown(e.result),e.steps_taken&&e.steps_taken.length>0){const t=this.resultsContainer.createEl("div",{cls:"vaultpilot-steps-container"});t.createEl("h4",{text:"Steps Taken"});const n=t.createEl("ol",{cls:"vaultpilot-steps-list"});e.steps_taken.forEach(e=>{n.createEl("li",{text:e})})}if(e.artifacts&&e.artifacts.length>0){const t=this.resultsContainer.createEl("div",{cls:"vaultpilot-artifacts-container"});t.createEl("h4",{text:"Generated Artifacts"}),e.artifacts.forEach((e,n)=>{const i=t.createEl("div",{cls:"vaultpilot-artifact"});i.createEl("h5",{text:e.title}),i.createEl("p",{text:`Type: ${e.type}`,cls:"vaultpilot-artifact-type"});i.createEl("button",{text:"Save as Note",cls:"mod-cta"}).onclick=()=>this.saveArtifactAsNote(e,n)})}this.resultsContainer.createEl("div",{cls:"vaultpilot-results-actions"}).createEl("button",{text:"Save Complete Results as Note",cls:"mod-cta"}).onclick=()=>this.saveCompleteResultsAsNote(e)})}saveArtifactAsNote(n,i){return t(this,void 0,void 0,function*(){try{const t=`${n.title.replace(/[^a-zA-Z0-9\s]/g,"")}.md`,i=`# ${n.title}\n\n${n.content}`;yield this.app.vault.create(t,i),new e.Notice(`Artifact saved as ${t}`)}catch(t){new e.Notice(`Failed to save artifact: ${t instanceof Error?t.message:"Unknown error"}`)}})}saveCompleteResultsAsNote(n){return t(this,void 0,void 0,function*(){try{const t=`VaultPilot Workflow Results ${(new Date).toISOString().split("T")[0]}.md`;let i="# VaultPilot Workflow Results\n\n";i+=`**Goal:** ${this.goalInput.value}\n\n`,i+=`**Execution Time:** ${n.execution_time}s\n\n`,i+=`## Result\n\n${n.result}\n\n`,n.steps_taken&&n.steps_taken.length>0&&(i+="## Steps Taken\n\n",n.steps_taken.forEach((e,t)=>{i+=`${t+1}. ${e}\n`}),i+="\n"),n.artifacts&&n.artifacts.length>0&&(i+="## Generated Artifacts\n\n",n.artifacts.forEach(e=>{i+=`### ${e.title}\n\n${e.content}\n\n`})),yield this.app.vault.create(t,i),new e.Notice(`Complete results saved as ${t}`)}catch(t){new e.Notice(`Failed to save results: ${t instanceof Error?t.message:"Unknown error"}`)}})}displayError(e){this.progressContainer.style.display="none",this.resultsContainer.style.display="block",this.resultsContainer.innerHTML=`\n      <div class="vaultpilot-error">\n        <h3>❌ Workflow Failed</h3>\n        <p>${e}</p>\n      </div>\n    `}renderMarkdown(e){return e.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/`(.*?)`/g,"<code>$1</code>").replace(/\n/g,"<br>")}addStyles(){if(!document.getElementById("vaultpilot-workflow-styles")){const e=document.createElement("style");e.id="vaultpilot-workflow-styles",e.textContent="\n        .vaultpilot-workflow-modal {\n          width: 700px;\n          max-height: 80vh;\n          overflow-y: auto;\n        }\n        .vaultpilot-workflow-header {\n          margin-bottom: 20px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-workflow-description {\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-form-group {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-form-label {\n          display: block;\n          margin-bottom: 8px;\n          font-weight: 500;\n          color: var(--text-normal);\n        }\n        .vaultpilot-goal-input,\n        .vaultpilot-context-input {\n          width: 100%;\n          min-height: 80px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n          resize: vertical;\n        }\n        .vaultpilot-checkbox-label {\n          display: block;\n          margin-bottom: 8px;\n          cursor: pointer;\n        }\n        .vaultpilot-checkbox-label input {\n          margin-right: 8px;\n        }\n        .vaultpilot-execute-button {\n          width: 100%;\n          padding: 12px;\n          font-size: 16px;\n        }\n        .vaultpilot-progress-container {\n          margin: 20px 0;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-progress-item {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n        }\n        .vaultpilot-progress-spinner {\n          width: 16px;\n          height: 16px;\n          border: 2px solid var(--background-modifier-border);\n          border-top: 2px solid var(--text-accent);\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n        }\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n        .vaultpilot-results-container {\n          margin-top: 20px;\n        }\n        .vaultpilot-results-header {\n          margin-bottom: 15px;\n        }\n        .vaultpilot-execution-time {\n          color: var(--text-muted);\n          font-size: 0.9em;\n        }\n        .vaultpilot-result-content {\n          margin-bottom: 20px;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-result-text {\n          line-height: 1.5;\n          color: var(--text-normal);\n        }\n        .vaultpilot-steps-container,\n        .vaultpilot-artifacts-container {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-steps-list {\n          padding-left: 20px;\n        }\n        .vaultpilot-artifact {\n          margin-bottom: 15px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary-alt);\n        }\n        .vaultpilot-artifact-type {\n          color: var(--text-muted);\n          font-size: 0.9em;\n          margin-bottom: 10px;\n        }\n        .vaultpilot-results-actions {\n          margin-top: 20px;\n          text-align: center;\n        }\n        .vaultpilot-error {\n          padding: 20px;\n          background: var(--background-primary-alt);\n          border: 1px solid var(--color-red);\n          border-radius: 8px;\n          color: var(--color-red);\n        }\n      ",document.head.appendChild(e)}}onClose(){const{contentEl:e}=this;e.empty()}}class p{constructor(e,t){this.wsCallbacks=new Map,this.baseUrl=e.replace(/\/$/,""),this.apiKey=t}makeRequest(e){return t(this,arguments,void 0,function*(e,t={}){const n=`${this.baseUrl}${e}`,i=Object.assign({"Content-Type":"application/json",Accept:"application/json"},t.headers||{});this.apiKey&&(i.Authorization=`Bearer ${this.apiKey}`);try{const e=yield fetch(n,Object.assign(Object.assign({},t),{headers:i,mode:"cors",credentials:"omit"}));let o;const a=e.headers.get("content-type");if(o=a&&a.includes("application/json")?yield e.json():yield e.text(),!e.ok){const t="object"==typeof o&&o.error?o.error:`HTTP ${e.status}: ${e.statusText}`;return console.error(`API Error [${e.status}]:`,t),{success:!1,error:t}}return{success:!0,data:"string"==typeof o?{message:o}:o}}catch(e){return console.error("API Request Error:",e),{success:!1,error:e instanceof Error?e.message:"Unknown error occurred"}}})}healthCheck(){return t(this,void 0,void 0,function*(){console.log(`VaultPilot: Attempting health check to ${this.baseUrl}/status`);const e=yield this.makeRequest("/status",{method:"GET"});return console.log("VaultPilot: Health check result:",e),e})}simpleHealthCheck(){return t(this,void 0,void 0,function*(){try{const e=`${this.baseUrl}/status`,t=yield fetch(e,{method:"HEAD",mode:"cors",credentials:"omit"});return t.ok||405===t.status?{success:!0,data:{status:"ok"}}:{success:!1,error:`Server responded with status ${t.status}`}}catch(e){return{success:!1,error:e instanceof Error?e.message:"Connection failed"}}})}chat(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/chat",{method:"POST",body:JSON.stringify(e)})})}getConversationHistory(e){return t(this,arguments,void 0,function*(e,t=50){const n={conversation_id:e,limit:t,include_messages:!0};return this.makeRequest("/api/obsidian/conversation/history",{method:"POST",body:JSON.stringify(n)})})}deleteConversation(e){return t(this,void 0,void 0,function*(){return this.makeRequest(`/api/obsidian/conversations/${e}`,{method:"DELETE"})})}getCopilotCompletion(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/copilot/complete",{method:"POST",body:JSON.stringify(e)})})}executeWorkflow(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/workflow",{method:"POST",body:JSON.stringify(e)})})}runWorkflow(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/workflow",{method:"POST",body:JSON.stringify({goal:e.message,context:e.context||void 0})})})}sendChat(e,n){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/chat",{method:"POST",body:JSON.stringify({message:e.message,vault_context:e.context||void 0,conversation_id:null==n?void 0:n.conversation_id,agent_id:null==n?void 0:n.agent_id,mode:"ask"})})})}getAgents(){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agents")})}createAgent(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agents/create",{method:"POST",body:JSON.stringify(e)})})}executeAgent(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agent/execute",{method:"POST",body:JSON.stringify(e)})})}analyzeVaultContext(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/vault/context",{method:"POST",body:JSON.stringify(e)})})}planTasks(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/planning/tasks",{method:"POST",body:JSON.stringify(e)})})}parseIntelligence(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/intelligence/parse",{method:"POST",body:JSON.stringify(e)})})}classifyIntent(e){return t(this,void 0,void 0,function*(){const t=yield this.makeRequest("/api/obsidian/intelligence/parse",{method:"POST",body:JSON.stringify({message:e})});return t.success&&t.data?t.data:{intent:"ask",confidence:.5}})}explainIntent(e){return t(this,void 0,void 0,function*(){const t=yield this.makeRequest("/api/obsidian/intelligence/parse",{method:"POST",body:JSON.stringify({message:e,include_debug:!0})});return t.success&&t.data?t.data:{intent:"ask",confidence:.5,reasoning:"Classification failed, defaulting to ask mode"}})}updateMemory(e){return t(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/memory/update",{method:"POST",body:JSON.stringify(e)})})}connectWebSocket(e){const t=this.baseUrl.replace("http","ws")+"/ws/obsidian";console.log(`VaultPilot: Attempting WebSocket connection to ${t}`),this.websocket=new WebSocket(t),this.websocket.onopen=()=>{var t;console.log("VaultPilot: WebSocket connected to EvoAgentX"),null===(t=e.onConnect)||void 0===t||t.call(e)},this.websocket.onmessage=t=>{var n,i,o,a,s,r,l;try{const l=JSON.parse(t.data);switch(console.log("VaultPilot: WebSocket message received:",l.type),l.type){case"chat":null===(n=e.onChat)||void 0===n||n.call(e,l.data);break;case"workflow_progress":null===(i=e.onWorkflowProgress)||void 0===i||i.call(e,l.data);break;case"copilot":null===(o=e.onCopilot)||void 0===o||o.call(e,l.data);break;case"vault_sync":null===(a=e.onVaultSync)||void 0===a||a.call(e,l.data);break;case"intent_debug":null===(s=e.onIntentDebug)||void 0===s||s.call(e,l.data);break;case"error":null===(r=e.onError)||void 0===r||r.call(e,l.data)}}catch(t){console.error("VaultPilot: Error parsing WebSocket message:",t),null===(l=e.onError)||void 0===l||l.call(e,"Failed to parse WebSocket message")}},this.websocket.onclose=t=>{var n;console.log("VaultPilot: WebSocket disconnected from EvoAgentX",t.code,t.reason),null===(n=e.onDisconnect)||void 0===n||n.call(e)},this.websocket.onerror=t=>{var n;console.error("VaultPilot: WebSocket error:",t),null===(n=e.onError)||void 0===n||n.call(e,"WebSocket connection error")}}disconnectWebSocket(){this.websocket&&(this.websocket.close(),this.websocket=void 0)}sendWebSocketMessage(e,t){this.websocket&&this.websocket.readyState===WebSocket.OPEN&&this.websocket.send(JSON.stringify({type:e,data:t}))}isWebSocketConnected(){var e;return(null===(e=this.websocket)||void 0===e?void 0:e.readyState)===WebSocket.OPEN}}function g(e){return e.match(/(<!-- vp:plan:start -->)([\s\S]*?)(<!-- vp:plan:end -->)/i)}function m(e){let t=/(^##\s+Schedule\b[^\n]*\n)([\s\S]*?)(?=\n##\s|$)/im,n=e.match(t);return n||(t=/(^##\s*(?:.*\s)?\bSchedule\b(?:\s.*)?$\n)([\s\S]*?)(?=\n##\s|$)/im,e.match(t))}class v{constructor(){this.logs=[],this.maxLogs=100}static getInstance(){return v.instance||(v.instance=new v),v.instance}log(e,t){const n=`[${(new Date).toISOString()}] ${e}${t?` | ${JSON.stringify(t)}`:""}`;console.log(n),this.logs.push(n),this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(-this.maxLogs))}error(e,t){const n=(new Date).toISOString(),i=t instanceof Error?{message:t.message,stack:t.stack,name:t.name}:t,o=`[${n}] ERROR: ${e}${i?` | ${JSON.stringify(i)}`:""}`;console.error(o),this.logs.push(o),this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(-this.maxLogs))}getLogs(){return[...this.logs]}clearLogs(){this.logs=[]}exportLogs(){return this.logs.join("\n")}analyzeApiClient(e){return e?{status:"available",available:!0,type:typeof e,methods:Object.getOwnPropertyNames(Object.getPrototypeOf(e)).filter(t=>"function"==typeof e[t]),hasPlanTasks:"function"==typeof e.planTasks,hasHealthCheck:"function"==typeof e.healthCheck}:{status:"null",available:!1}}testConnection(e){return t(this,void 0,void 0,function*(){try{if(this.log("🔗 Testing EvoAgentX connection..."),!e)throw new Error("API client is null or undefined");if(!e.healthCheck)throw new Error("API client does not have healthCheck method");const t=yield e.healthCheck();return this.log("✅ Connection test successful",t),{success:!0,result:t}}catch(e){return this.error("❌ Connection test failed",e),{success:!1,error:e instanceof Error?e.message:String(e)}}})}testTaskPlanning(e){return t(this,arguments,void 0,function*(e,t="Test note for schedule generation"){var n,i,o,a;try{if(this.log("📋 Testing task planning..."),!e)throw new Error("API client is null or undefined");if(!e.planTasks)throw new Error("API client does not have planTasks method");const s=yield e.planTasks({goal:"Create a test schedule",context:t,timeframe:"1 day"});return this.log("✅ Task planning test successful",{success:s.success,hasData:!!s.data,hasPlan:!!(null===(n=s.data)||void 0===n?void 0:n.plan),taskCount:(null===(a=null===(o=null===(i=s.data)||void 0===i?void 0:i.plan)||void 0===o?void 0:o.tasks)||void 0===a?void 0:a.length)||0}),{success:!0,result:s}}catch(e){return this.error("❌ Task planning test failed",e),{success:!1,error:e instanceof Error?e.message:String(e)}}})}}const f=v.getInstance();class y extends Error{constructor(e,t,n){super(e),this.name="VaultManagementError",this.code=t,this.feature=n}}class b{constructor(e,t){this.baseUrl=e,this.apiKey=t}getVaultStructure(e){return t(this,void 0,void 0,function*(){try{const t=yield this.makeRequest("/api/obsidian/vault/structure",{method:"POST",body:JSON.stringify(e)});if(404===t.status)return{vault_name:"Vault",total_files:0,total_folders:0,total_size:0,structure:{name:"vault",type:"folder",path:"/",children:[]},recent_files:[],orphaned_files:[]};if(!t.ok)throw new y(`Failed to get vault structure: ${t.statusText}`,"STRUCTURE_FETCH_FAILED","structure");return yield t.json()}catch(e){if(e instanceof y)throw e;throw this.handleVaultManagementError(e,"structure"),e}})}performFileOperation(e){return t(this,void 0,void 0,function*(){try{this.validateFileOperationRequest(e);const t=yield this.makeRequest("/api/obsidian/vault/file/operation",{method:"POST",body:JSON.stringify(e)});if(!t.ok)throw new y(`File operation failed: ${t.statusText}`,"FILE_OPERATION_FAILED","file-operations");const n=yield t.json();if(!n.success)throw new y(n.message||"File operation failed","FILE_OPERATION_FAILED","file-operations");return n}catch(e){throw this.handleVaultManagementError(e,"file-operations"),e}})}performBatchOperations(e){return t(this,void 0,void 0,function*(){try{if(!e.operations||0===e.operations.length)throw new y("No operations specified for batch request","INVALID_BATCH_REQUEST","batch-operations");e.operations.forEach((e,t)=>{try{this.validateFileOperationRequest(e)}catch(e){throw new y(`Invalid operation at index ${t}: ${e.message||e}`,"INVALID_BATCH_OPERATION","batch-operations")}});const t=yield this.makeRequest("/api/obsidian/vault/file/batch",{method:"POST",body:JSON.stringify(e)});if(!t.ok)throw new y(`Batch operations failed: ${t.statusText}`,"BATCH_OPERATION_FAILED","batch-operations");const n=yield t.json();if(!n.success)throw new y(n.message||"Batch operations failed","BATCH_OPERATION_FAILED","batch-operations");return n}catch(e){throw this.handleVaultManagementError(e,"batch-operations"),e}})}searchVault(e){return t(this,void 0,void 0,function*(){try{if(!e.query||0===e.query.trim().length)throw new y("Search query cannot be empty","INVALID_SEARCH_QUERY","search");const t=yield this.makeRequest("/api/obsidian/vault/search",{method:"POST",body:JSON.stringify(e)});if(!t.ok)throw new y(`Search failed: ${t.statusText}`,"SEARCH_FAILED","search");return yield t.json()}catch(e){throw this.handleVaultManagementError(e,"search"),e}})}organizeVault(e){return t(this,void 0,void 0,function*(){try{const t=yield this.makeRequest("/api/obsidian/vault/organize",{method:"POST",body:JSON.stringify(e)});if(!t.ok)throw new y(`Organization analysis failed: ${t.statusText}`,"ORGANIZATION_FAILED","organization");return yield t.json()}catch(e){throw this.handleVaultManagementError(e,"organization"),e}})}backupVault(e){return t(this,void 0,void 0,function*(){try{const t=yield this.makeRequest("/api/obsidian/vault/backup",{method:"POST",body:JSON.stringify(e)});if(!t.ok)throw new y(`Backup failed: ${t.statusText}`,"BACKUP_FAILED","backup");return yield t.json()}catch(e){throw this.handleVaultManagementError(e,"backup"),e}})}createFile(e,n){return t(this,arguments,void 0,function*(e,t,n=!1){return this.performFileOperation({operation:"create",file_path:e,content:t,backup:n})})}updateFile(e,n){return t(this,arguments,void 0,function*(e,t,n=!0){return this.performFileOperation({operation:"update",file_path:e,content:t,backup:n})})}deleteFile(e){return t(this,arguments,void 0,function*(e,t=!0){return this.performFileOperation({operation:"delete",file_path:e,backup:t})})}moveFile(e,n){return t(this,arguments,void 0,function*(e,t,n=!0){return this.performFileOperation({operation:"move",file_path:e,new_path:t,backup:n})})}copyFile(e,n){return t(this,void 0,void 0,function*(){return this.performFileOperation({operation:"copy",file_path:e,new_path:n})})}quickSearch(e){return t(this,arguments,void 0,function*(e,t=20){return this.searchVault({query:e,search_type:"comprehensive",max_results:t,include_content:!0})})}makeRequest(e){return t(this,arguments,void 0,function*(e,t={}){const n=`${this.baseUrl.replace(/\/$/,"")}${e}`,i=Object.assign({"Content-Type":"application/json"},t.headers||{});this.apiKey&&(i.Authorization=`Bearer ${this.apiKey}`);const o=Object.assign(Object.assign({},t),{headers:i});try{return yield fetch(n,o)}catch(e){throw new y(`Network request failed: ${e.message||e}`,"NETWORK_ERROR","api")}})}validateFileOperationRequest(e){if(!e.file_path||0===e.file_path.trim().length)throw new y("File path is required","INVALID_FILE_PATH","validation");if(!("move"!==e.operation&&"copy"!==e.operation||e.new_path&&0!==e.new_path.trim().length))throw new y("New path is required for move/copy operations","INVALID_NEW_PATH","validation");if(("create"===e.operation||"update"===e.operation)&&void 0===e.content)throw new y("Content is required for create/update operations","INVALID_CONTENT","validation")}handleVaultManagementError(t,n){console.error(`Vault management error in ${n}:`,t),t instanceof y?new e.Notice(`Vault ${n} error: ${t.message}`,5e3):new e.Notice(`Vault ${n} operation failed`,3e3)}testConnection(){return t(this,void 0,void 0,function*(){try{const e=yield this.makeRequest("/api/obsidian/vault/structure",{method:"POST",body:JSON.stringify({include_content:!1,max_depth:1})});return e.ok?{success:!0,message:"Vault management connection successful"}:{success:!1,message:`Connection failed: ${e.status} ${e.statusText}`}}catch(e){return{success:!1,message:`Connection error: ${e.message||e}`}}})}}class w{static detect(){const e={platform:"unknown",hasFileSystem:!1,hasWebSocket:!1,hasHTTP:!1,capabilities:[]};return"undefined"!=typeof window&&window.app&&window.app.workspace?e.platform="obsidian":"undefined"!=typeof window?e.platform="browser":void 0!==globalThis.process&&globalThis.process.versions&&globalThis.process.versions.node&&(e.platform="node"),e.hasHTTP="undefined"!=typeof fetch,e.hasWebSocket="undefined"!=typeof WebSocket,e.hasFileSystem=void 0!==globalThis.require&&"node"===e.platform,e.hasHTTP&&e.capabilities.push("http"),e.hasWebSocket&&e.capabilities.push("websocket"),e.hasFileSystem&&e.capabilities.push("filesystem"),e}static isObsidian(){return"obsidian"===this.detect().platform}static canUseFileSystem(){return this.detect().hasFileSystem}static canUseWebSocket(){return this.detect().hasWebSocket}static getOptimalTransport(){const e=this.detect();if(e.hasWebSocket)return"websocket";if(e.hasHTTP)return"http";if(e.hasFileSystem)return"filesystem";throw new Error("No suitable transport available")}}class C{constructor(e){this.isConnected=!1,this.messageId=1,this.pendingRequests=new Map,this.eventListeners=new Map,this.config=e,this.environment=w.detect(),this.serverUrl=e.server_url,this.config.debug_mode&&console.log("DevPipe Environment:",this.environment)}on(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}off(e,t){const n=this.eventListeners.get(e);if(n){const e=n.indexOf(t);e>-1&&n.splice(e,1)}}emit(e,t){const n=this.eventListeners.get(e);n&&n.forEach(e=>e(t))}initialize(){return t(this,void 0,void 0,function*(){try{if(!this.environment.hasHTTP)throw new Error("HTTP transport not available in this environment");yield this.testConnection(),this.isConnected=!0,this.emit("connected",{status:"connected",environment:this.environment.platform,transport:"http"}),this.config.debug_mode&&console.log("DevPipe client initialized successfully")}catch(e){throw this.emit("error",e),new Error(`Failed to initialize DevPipe client: ${e instanceof Error?e.message:"Unknown error"}`)}})}testConnection(){return t(this,void 0,void 0,function*(){try{const e=yield fetch(`${this.serverUrl}/api/v1/devpipe/health`,{method:"GET",headers:{"Content-Type":"application/json"},signal:AbortSignal.timeout(5e3)});if(!e.ok)throw new Error(`DevPipe server not accessible: ${e.status} ${e.statusText}`)}catch(e){if(e instanceof Error&&"TypeError"===e.name&&e.message.includes("Failed to fetch"))try{if((yield fetch(`${this.serverUrl}/status`,{method:"GET",headers:{"Content-Type":"application/json"},signal:AbortSignal.timeout(3e3)})).ok)return void console.warn("DevPipe endpoint not available, but backend is accessible")}catch(t){throw new Error(`DevPipe server not accessible and fallback failed: ${e.message}`)}throw e}})}sendMessage(e,n){return t(this,arguments,void 0,function*(e,t,n=3e4){if(!this.isConnected)throw new Error("DevPipe client not connected");const i=this.generateMessageId(),o={id:i,timestamp:(new Date).toISOString(),type:e,payload:t,sender:"vaultpilot-plugin",recipient:"evoagentx-backend",priority:"normal"};return new Promise((e,t)=>{const a=window.setTimeout(()=>{this.pendingRequests.delete(i),t(new Error(`Request timeout after ${n}ms`))},n);this.pendingRequests.set(i,{resolve:e,reject:t,timeout:a}),this.sendMessageToServer(o).catch(e=>{this.pendingRequests.delete(i),window.clearTimeout(a),t(e)})})})}sendMessageToServer(e){return t(this,void 0,void 0,function*(){try{const t=yield fetch(`${this.serverUrl}/api/v1/devpipe/message`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok)throw new Error(`DevPipe server error: ${t.status}`);const n=yield t.json();if(n.response&&n.response.id===e.id){const t=this.pendingRequests.get(e.id);t&&(window.clearTimeout(t.timeout),this.pendingRequests.delete(e.id),t.resolve(n.response.payload))}return this.config.debug_mode&&console.log("DevPipe message sent successfully:",e.type),n}catch(e){throw this.config.debug_mode&&console.error("Error sending DevPipe message:",e),e}})}generateMessageId(){return`msg_${Date.now()}_${this.messageId++}`}disconnect(){return t(this,void 0,void 0,function*(){const e=Array.from(this.pendingRequests.entries());for(const[t,n]of e)window.clearTimeout(n.timeout),n.reject(new Error("DevPipe client disconnected"));this.pendingRequests.clear(),this.isConnected=!1,this.emit("disconnected",{status:"disconnected"})})}isReady(){return this.isConnected}getPendingRequestCount(){return this.pendingRequests.size}}class k extends Error{constructor(e,t,n,i){super(t),this.name="ModelSelectionError",this.code=e,this.details=n,this.suggestions=i}}class S{constructor(e,t="",n={}){this.cachedHealth=[],this.lastHealthUpdate=0,this.eventListeners=new Map,this.config={devpipe_path:t,server_url:e,monitoring_interval:n.monitoring_interval||3e4,fallback_enabled:!1!==n.fallback_enabled,cache_duration:n.cache_duration||3e5,retry_attempts:n.retry_attempts||3,timeout:n.timeout||3e4,debug_mode:n.debug_mode||!1},this.devPipeClient=new C(this.config),this.userPreferences={priority:"balanced",max_cost_per_request:.5,preferred_providers:[],fallback_enabled:!0,quality_threshold:.7,timeout_preference:3e4},this.setupEventListeners()}setupEventListeners(){this.devPipeClient.on("connected",()=>{this.emit("connected",{status:"connected"})}),this.devPipeClient.on("disconnected",()=>{this.emit("disconnected",{status:"disconnected"})}),this.devPipeClient.on("health-updated",e=>{this.cachedHealth=e,this.lastHealthUpdate=Date.now(),this.emit("health-updated",e)}),this.devPipeClient.on("performance-metrics",e=>{this.emit("performance-metrics",e)})}initialize(){return t(this,void 0,void 0,function*(){try{yield this.devPipeClient.initialize(),yield this.refreshModelHealth(),this.startHealthMonitoring(),this.config.debug_mode&&console.log("ModelSelectionService initialized successfully")}catch(e){throw new Error(`Failed to initialize ModelSelectionService: ${e instanceof Error?e.message:"Unknown error"}`)}})}selectModel(e){return t(this,void 0,void 0,function*(){try{return yield this.performSelection(e)}catch(t){if(this.config.fallback_enabled)return yield this.fallbackSelection(e,t);throw t}})}performSelection(e){return t(this,void 0,void 0,function*(){if(!this.devPipeClient.isReady())throw new k("NO_HEALTHY_MODELS","DevPipe client not connected",{},["Check server connection","Retry initialization"]);const t=Object.assign(Object.assign({},e),{user_preferences:this.userPreferences,timeout_ms:e.timeout_ms||this.config.timeout});return yield this.devPipeClient.sendMessage("model-selection-request",t,this.config.timeout)})}fallbackSelection(e,n){return t(this,void 0,void 0,function*(){console.warn("Model selection failed, using fallback:",n);const t=this.getCachedSelection(e);return t||this.staticModelSelection(e)})}staticModelSelection(e){const t={"text-generation":{name:"gpt-3.5-turbo",cost:.002},"code-generation":{name:"gpt-4",cost:.03},chat:{name:"gpt-3.5-turbo",cost:.002},summarization:{name:"gpt-3.5-turbo",cost:.002},translation:{name:"gpt-3.5-turbo",cost:.002}},n=t[e.task_type]||t["text-generation"];return{selected_model:{id:n.name,name:n.name,provider:"openai",capabilities:[{type:e.task_type,score:.8}],cost_per_token:n.cost,max_tokens:4e3,response_time_avg_ms:2e3,availability_score:.9,quality_score:.8},reasoning:"Fallback selection due to service unavailability",fallback_models:[],estimated_cost:100*n.cost,estimated_time_ms:2e3,selection_metadata:{selection_time_ms:0,factors_considered:["fallback"],confidence_score:.5}}}getCachedSelection(e){return null}selectModel_OLD(e){return t(this,void 0,void 0,function*(){if(!this.devPipeClient.isReady())throw new k("NO_HEALTHY_MODELS","DevPipe client not connected",{},["Check server connection","Retry initialization"]);try{const t=Object.assign(Object.assign({},e),{user_preferences:this.userPreferences,timeout_ms:e.timeout_ms||this.config.timeout}),n=yield this.devPipeClient.sendMessage("model-selection-request",t,e.timeout_ms||this.config.timeout);return this.emit("model-selected",n),this.config.debug_mode&&console.log("Model selected:",n.selected_model.name,"for task:",e.task_type),n}catch(e){if(e instanceof Error){if(e.message.includes("timeout"))throw new k("TIMEOUT","Model selection request timed out",{originalError:e},["Increase timeout","Check server performance"]);if(e.message.includes("budget")||e.message.includes("cost"))throw new k("BUDGET_EXCEEDED","Request exceeds budget limits",{originalError:e},["Increase budget","Use lower cost models"])}throw new k("SERVICE_UNAVAILABLE","Model selection service unavailable",{originalError:e},["Check server status","Retry request"])}})}getModelHealth(){return t(this,void 0,void 0,function*(){return this.cachedHealth.length>0&&Date.now()-this.lastHealthUpdate<this.config.cache_duration?this.cachedHealth:yield this.refreshModelHealth()})}refreshModelHealth(){return t(this,void 0,void 0,function*(){try{const e=yield this.devPipeClient.sendMessage("health-check-request",{},1e4);return this.cachedHealth=e,this.lastHealthUpdate=Date.now(),e}catch(e){return this.config.debug_mode&&console.warn("Failed to refresh model health:",e),this.cachedHealth}})}updatePreferences(e){return t(this,void 0,void 0,function*(){this.userPreferences=Object.assign(Object.assign({},this.userPreferences),e);try{yield this.devPipeClient.sendMessage("preferences-update",this.userPreferences,5e3),this.emit("preferences-updated",this.userPreferences),this.config.debug_mode&&console.log("User preferences updated:",this.userPreferences)}catch(e){this.config.debug_mode&&console.warn("Failed to sync preferences with server:",e)}})}getPreferences(){return Object.assign({},this.userPreferences)}startHealthMonitoring(){this.config.monitoring_interval>0&&setInterval(()=>t(this,void 0,void 0,function*(){try{yield this.refreshModelHealth()}catch(e){this.config.debug_mode&&console.warn("Health monitoring failed:",e)}}),this.config.monitoring_interval)}on(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}off(e,t){const n=this.eventListeners.get(e);if(n){const e=n.indexOf(t);e>-1&&n.splice(e,1)}}emit(e,t){const n=this.eventListeners.get(e);n&&n.forEach(e=>{try{e(t)}catch(e){this.config.debug_mode&&console.error("Event listener error:",e)}})}selectForTask(e){return t(this,arguments,void 0,function*(e,t="medium"){return this.selectModel({task_type:e,quality_requirement:t})})}selectCostOptimized(e){return t(this,arguments,void 0,function*(e,t=.01){return this.selectModel({task_type:e,quality_requirement:"medium",max_cost:t})})}selectHighPerformance(e){return t(this,void 0,void 0,function*(){return this.selectModel({task_type:e,quality_requirement:"high"})})}isConnected(){return this.devPipeClient.isReady()}getConfig(){return Object.assign({},this.config)}disconnect(){return t(this,void 0,void 0,function*(){yield this.devPipeClient.disconnect()})}}class x extends e.Modal{constructor(e,t){super(e),this.plugin=t,this.vaultClient=t.vaultClient}setFocusPath(e){return this.focusPath=e,this}onOpen(){return t(this,void 0,void 0,function*(){var e,t;const{contentEl:n}=this;n.empty(),n.addClass("vault-structure-modal");const i=n.createEl("div",{cls:"modal-header"});i.createEl("h2",{text:"Vault Structure Analysis"});const o=i.createEl("button",{text:"🔄 Refresh",cls:"mod-cta"}),a=n.createDiv({cls:"vault-loading"});a.setText("🔍 Analyzing vault structure...");try{const e=yield this.vaultClient.getVaultStructure({include_content:!1,max_depth:5});a.remove(),this.renderStructure(n,e),o.onclick=()=>{this.onOpen()}}catch(i){if(a.remove(),console.error("Vault structure error:",i),(null===(e=i.message)||void 0===e?void 0:e.includes("Not Found"))||(null===(t=i.message)||void 0===t?void 0:t.includes("404")))this.renderFallbackStructure(n);else{n.createDiv({cls:"vault-error"}).setText("❌ Failed to load vault structure");n.createEl("button",{text:"Retry",cls:"mod-cta"}).onclick=()=>this.onOpen()}o.onclick=()=>{this.onOpen()}}})}renderStructure(e,t){e.createDiv({cls:"vault-stats"}).innerHTML=`\n      <div class="stat-grid">\n        <div class="stat-item">\n          <span class="stat-icon">📁</span>\n          <span class="stat-label">Files</span>\n          <span class="stat-value">${t.total_files}</span>\n        </div>\n        <div class="stat-item">\n          <span class="stat-icon">📂</span>\n          <span class="stat-label">Folders</span>\n          <span class="stat-value">${t.total_folders}</span>\n        </div>\n        <div class="stat-item">\n          <span class="stat-icon">💾</span>\n          <span class="stat-label">Size</span>\n          <span class="stat-value">${(t.total_size/1024/1024).toFixed(2)} MB</span>\n        </div>\n      </div>\n    `;const n=e.createDiv({cls:"vault-tree-container"});n.createEl("h3",{text:"Folder Structure"});const i=n.createDiv({cls:"vault-tree"});if(this.renderFolder(i,t.structure,0),t.recent_files.length>0){const n=e.createDiv({cls:"recent-files-container"});n.createEl("h3",{text:"Recent Files"});const i=n.createDiv({cls:"recent-files"});t.recent_files.slice(0,10).forEach(e=>{i.createDiv({cls:"recent-file"}).innerHTML=`\n          <span class="file-icon">📄</span>\n          <span class="file-name">${e.name}</span>\n          <span class="file-date">${new Date(e.modified).toLocaleDateString()}</span>\n        `})}if(t.orphaned_files.length>0){const n=e.createDiv({cls:"orphaned-files-container"});n.createEl("h3",{text:"⚠️ Orphaned Files"});const i=n.createDiv({cls:"orphaned-files"});t.orphaned_files.forEach(e=>{i.createDiv({cls:"orphaned-file"}).innerHTML=`\n          <span class="file-icon">🔗</span>\n          <span class="file-path">${e.path}</span>\n        `})}}renderFolder(e,t,n){const i=e.createDiv({cls:"folder-item",attr:{"data-level":n.toString()}});i.innerHTML=`\n      <span class="folder-toggle">▶</span>\n      <span class="folder-icon">📁</span>\n      <span class="folder-name">${t.name}</span>\n      <span class="folder-count">(${t.children.length})</span>\n    `;const o=e.createDiv({cls:"folder-children",attr:{style:"display: none;"}}),a=i.querySelector(".folder-toggle");a.onclick=()=>{const e="none"!==o.style.display;o.style.display=e?"none":"block",a.textContent=e?"▶":"▼"},t.children.forEach(e=>{if("folder"===e.type)this.renderFolder(o,e,n+1);else{o.createDiv({cls:"file-item",attr:{"data-level":(n+1).toString()}}).innerHTML=`\n          <span class="file-icon">📄</span>\n          <span class="file-name">${e.name}</span>\n          <span class="file-size">${(e.size/1024).toFixed(1)}KB</span>\n        `}})}renderFallbackStructure(e){const t=e.createDiv({cls:"vault-fallback"});t.createEl("h3",{text:"📁 Local Vault Analysis"}),t.createEl("p",{text:"Server-side vault management not available. Showing local analysis.",cls:"vault-fallback-message"});const n=this.plugin.app.vault.getFiles(),i=this.plugin.app.vault.getMarkdownFiles(),o=this.plugin.app.vault.getAllLoadedFiles().filter(e=>e.children).length;t.createDiv({cls:"vault-stats"}).innerHTML=`\n      <div class="stat-grid">\n        <div class="stat-item">\n          <span class="stat-icon">📁</span>\n          <span class="stat-label">Folders</span>\n          <span class="stat-value">${o}</span>\n        </div>\n        <div class="stat-item">\n          <span class="stat-icon">📄</span>\n          <span class="stat-label">Total Files</span>\n          <span class="stat-value">${n.length}</span>\n        </div>\n        <div class="stat-item">\n          <span class="stat-icon">📝</span>\n          <span class="stat-label">Markdown</span>\n          <span class="stat-value">${i.length}</span>\n        </div>\n        <div class="stat-item">\n          <span class="stat-icon">💾</span>\n          <span class="stat-label">Status</span>\n          <span class="stat-value">Local Only</span>\n        </div>\n      </div>\n    `;const a=t.createDiv({cls:"recent-files-container"});a.createEl("h3",{text:"Recent Files"});const s=i.sort((e,t)=>t.stat.mtime-e.stat.mtime).slice(0,10),r=a.createDiv({cls:"recent-files"});s.forEach(e=>{const t=r.createDiv({cls:"recent-file"});t.innerHTML=`\n        <span class="file-icon">📄</span>\n        <span class="file-name">${e.basename}</span>\n        <span class="file-date">${new Date(e.stat.mtime).toLocaleDateString()}</span>\n      `,t.onclick=()=>{this.plugin.app.workspace.openLinkText(e.path,"",!1),this.close()}});t.createDiv({cls:"vault-config-note"}).innerHTML="\n      <p><strong>💡 Enable Full Features:</strong> Configure vault management endpoints on your server to access advanced features like structure analysis, smart search, and file operations.</p>\n      <p>See the dev-pipe documentation for implementation details.</p>\n    "}onClose(){const{contentEl:e}=this;e.empty()}}class E extends e.Modal{constructor(e,t){super(e),this.plugin=t,this.vaultClient=t.vaultClient}setInitialQuery(e,t){return this.initialQuery=e,this.searchType=t,this}onOpen(){return t(this,void 0,void 0,function*(){const{contentEl:n}=this;n.empty(),n.addClass("smart-search-modal"),n.createEl("h2",{text:"🔍 Smart Vault Search"});const i=n.createDiv({cls:"search-form"}),o=i.createEl("input",{type:"text",placeholder:"Enter search query...",cls:"search-query-input"});this.initialQuery&&(o.value=this.initialQuery);const a=i.createEl("select",{cls:"search-type-select"});[{value:"comprehensive",label:"Comprehensive"},{value:"content",label:"Content"},{value:"filename",label:"Filename"},{value:"tags",label:"Tags"},{value:"links",label:"Links"}].forEach(e=>{const t=a.createEl("option",{value:e.value});t.textContent=e.label,e.value===(this.searchType||"comprehensive")&&(t.selected=!0)});const s=i.createEl("button",{text:"Search",cls:"mod-cta search-button"}),r=n.createDiv({cls:"search-results-container"}),l=()=>t(this,void 0,void 0,function*(){var t;const n=o.value.trim();if(!n)return void new e.Notice("Please enter a search query");s.textContent="Searching...",s.disabled=!0,r.empty();const i=r.createDiv({cls:"search-loading"});i.textContent="🔍 Searching vault...";try{const e=yield this.vaultClient.searchVault({query:n,search_type:a.value,max_results:(null===(t=this.plugin.settings.vaultManagement)||void 0===t?void 0:t.searchResultsLimit)||50,include_content:!0});i.remove(),this.renderSearchResults(r,e)}catch(e){i.textContent="❌ Search failed",console.error("Search error:",e)}finally{s.textContent="Search",s.disabled=!1}});s.onclick=l,o.addEventListener("keypress",e=>{"Enter"===e.key&&l()}),this.initialQuery&&l(),o.focus()})}renderSearchResults(e,t){if(e.createEl("h3",{text:`Search Results (${t.total_found})`}),t.insights){e.createDiv({cls:"search-insights"}).innerHTML=`\n        <div class="insights-header">🧠 AI Insights</div>\n        <div class="insights-content">${t.insights}</div>\n      `}if(0===t.results.length)return void e.createDiv({cls:"no-results",text:"No results found. Try a different search term or type."});const n=e.createDiv({cls:"search-results-list"});if(t.results.forEach(e=>{const t=n.createDiv({cls:"search-result"});t.innerHTML=`\n        <div class="result-header">\n          <span class="result-file-name">${e.file_name}</span>\n          <span class="result-match-type">${e.match_type}</span>\n          <span class="result-score">${(100*e.score).toFixed(0)}%</span>\n        </div>\n        <div class="result-path">${e.file_path}</div>\n        <div class="result-preview">${e.preview}</div>\n        ${e.matches.length>0?`\n          <div class="result-matches">\n            <strong>Matches:</strong> ${e.matches.join(", ")}\n          </div>\n        `:""}\n      `,t.onclick=()=>{this.app.workspace.openLinkText(e.file_path,""),this.close()}}),t.suggested_queries&&t.suggested_queries.length>0){const n=e.createDiv({cls:"suggested-queries"});n.createEl("h4",{text:"💡 Suggested Queries"});const i=n.createDiv({cls:"suggestions-list"});t.suggested_queries.forEach(e=>{i.createEl("button",{text:e,cls:"suggestion-button"}).onclick=()=>{const t=this.contentEl.querySelector(".search-query-input");t&&(t.value=e,t.dispatchEvent(new KeyboardEvent("keypress",{key:"Enter"})))}})}}onClose(){const{contentEl:e}=this;e.empty()}}class M extends e.Modal{constructor(e,t){super(e),this.plugin=t,this.vaultClient=t.vaultClient}setInitialPath(e){return this.initialPath=e,this}setOperation(e){return this.operation=e,this}onOpen(){return t(this,void 0,void 0,function*(){const{contentEl:t}=this;t.empty(),t.addClass("file-operations-modal"),t.createEl("h2",{text:"📁 File Operations Manager"}),new e.Setting(t).setName("Operation").setDesc("Select the file operation to perform").addDropdown(e=>e.addOption("create","Create File").addOption("update","Update File").addOption("delete","Delete File").addOption("move","Move File").addOption("copy","Copy File").setValue(this.operation||"create").onChange(e=>{this.operation=e,this.updateOperationForm()})),t.createDiv({cls:"operation-form"}),this.updateOperationForm()})}updateOperationForm(){const t=this.contentEl.querySelector(".operation-form");if(!t)return;t.empty();const n=this.operation||"create";new e.Setting(t).setName("File Path").setDesc("Path to the file (including filename)").addText(e=>e.setPlaceholder("path/to/file.md").setValue(this.initialPath||"").onChange(e=>this.initialPath=e)),"move"!==n&&"copy"!==n||new e.Setting(t).setName("New Path").setDesc("Destination path for the file").addText(e=>e.setPlaceholder("new/path/to/file.md")),"create"!==n&&"update"!==n||new e.Setting(t).setName("Content").setDesc("File content").addTextArea(e=>{e.setPlaceholder("Enter file content..."),"create"===n&&e.setValue("# New File\n\nContent goes here...")}),"create"!==n&&new e.Setting(t).setName("Create Backup").setDesc("Create a backup before performing the operation").addToggle(e=>e.setValue(!0)),new e.Setting(t).addButton(e=>e.setButtonText(`Execute ${n.charAt(0).toUpperCase()+n.slice(1)}`).setCta().onClick(()=>this.executeOperation()))}executeOperation(){return t(this,void 0,void 0,function*(){var t;const n=this.operation||"create",i=this.contentEl.querySelector('input[placeholder*="path/to/file"]'),o=this.contentEl.querySelector('input[placeholder*="new/path"]'),a=this.contentEl.querySelector("textarea"),s=this.contentEl.querySelector('input[type="checkbox"]');if(!(null==i?void 0:i.value))return void new e.Notice("File path is required");const r={operation:n,file_path:i.value,backup:null===(t=null==s?void 0:s.checked)||void 0===t||t};(null==o?void 0:o.value)&&(r.new_path=o.value),(null==a?void 0:a.value)&&(r.content=a.value);try{new e.Notice(`Performing ${n}...`);const t=yield this.vaultClient.performFileOperation(r);new e.Notice(`✅ ${n} successful: ${t.message}`),this.close()}catch(t){new e.Notice(`❌ ${n} failed: ${t.message}`)}})}onClose(){const{contentEl:e}=this;e.empty()}}var T,P,D,A;!function(e){e.HTTP="http",e.WEBSOCKET="websocket",e.FILESYSTEM="filesystem"}(T||(T={})),function(e){e.CONNECTED="connected",e.DISCONNECTED="disconnected",e.MESSAGE="message",e.ERROR="error",e.HEALTH_CHECK="health_check",e.RECONNECTING="reconnecting"}(P||(P={}));class R{constructor(e){this.state="closed",this.failureCount=0,this.lastFailureTime=0,this.nextAttempt=0,this.config=e}execute(e){return t(this,void 0,void 0,function*(){if("open"===this.state){if(Date.now()<this.nextAttempt)throw new Error("Circuit breaker is OPEN");this.state="half-open"}try{const t=yield e();return this.onSuccess(),t}catch(e){throw this.onFailure(),e}})}onSuccess(){this.failureCount=0,this.state="closed"}onFailure(){this.failureCount++,this.lastFailureTime=Date.now(),this.failureCount>=this.config.failureThreshold&&(this.state="open",this.nextAttempt=Date.now()+this.config.resetTimeout)}getState(){return this.state}}class N{constructor(e,t){this.eventListeners=new Map,this.connected=!1,this.initialized=!1,this.type=e,this.id=`${e}-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,this.config=t,this.healthStatus={status:"disconnected",lastCheck:Date.now(),latency:0,errorRate:0,consecutiveFailures:0,uptime:0},this.circuitBreaker=new R({failureThreshold:5,resetTimeout:3e4,monitoringPeriod:1e4}),this.metrics={messagesSent:0,messagesReceived:0,errors:0,totalLatency:0,lastActivity:Date.now()},this.debug(`Transport ${this.id} created`)}on(e,t){const n=e.toString();this.eventListeners.has(n)||this.eventListeners.set(n,[]),this.eventListeners.get(n).push(t)}off(e,t){const n=e.toString(),i=this.eventListeners.get(n);if(i){const e=i.indexOf(t);e>-1&&i.splice(e,1)}}emit(e,t){const n=e.toString(),i=this.eventListeners.get(n);i&&i.forEach(e=>{try{e(t)}catch(e){this.debug(`Error in event listener for ${n}:`,e)}})}performHealthCheck(){return t(this,void 0,void 0,function*(){const e=Date.now();try{yield this.doHealthCheck();const t=Date.now()-e;return this.healthStatus.status="healthy",this.healthStatus.latency=t,this.healthStatus.consecutiveFailures=0,this.healthStatus.lastCheck=Date.now(),this.emit(P.HEALTH_CHECK,{success:!0,latency:t}),{success:!0,latency:t,timestamp:Date.now()}}catch(t){this.healthStatus.status="failing",this.healthStatus.consecutiveFailures++,this.healthStatus.lastCheck=Date.now();const n=t instanceof Error?t.message:"Unknown error";return this.emit(P.HEALTH_CHECK,{success:!1,error:n}),{success:!1,error:n,latency:Date.now()-e,timestamp:Date.now()}}})}executeWithCircuitBreaker(e,n){return t(this,void 0,void 0,function*(){const t=Date.now();try{const n=yield this.circuitBreaker.execute(e),i=Date.now()-t;return this.updateMetrics(!0,i),n}catch(e){const i=Date.now()-t;throw this.updateMetrics(!1,i),this.debug(`Operation ${n} failed:`,e),e}})}updateMetrics(e,t){e?(this.metrics.messagesSent++,this.metrics.totalLatency+=t):this.metrics.errors++,this.metrics.lastActivity=Date.now()}generateMessageId(){return`msg-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}debug(e,...t){this.config.debug&&console.log(`[${this.type}:${this.id}] ${e}`,...t)}calculateReliability(){const e=this.metrics.messagesSent+this.metrics.errors;return 0===e?1:this.metrics.messagesSent/e}isAvailable(){return this.initialized&&"open"!==this.circuitBreaker.getState()}isConnected(){return this.connected&&this.isAvailable()}getHealthStatus(){return Object.assign({},this.healthStatus)}initialize(e){return t(this,void 0,void 0,function*(){this.config=Object.assign(Object.assign({},this.config),e),yield this.doInitialize(),this.initialized=!0,this.debug("Transport initialized")})}destroy(){return t(this,void 0,void 0,function*(){yield this.disconnect(),this.eventListeners.clear(),this.initialized=!1,this.debug("Transport destroyed")})}}class O{constructor(e){this.activeConnections=0,this.queue=[],this.maxConnections=e.maxConnections}acquire(e){return t(this,void 0,void 0,function*(){return new Promise((n,i)=>{const o=()=>t(this,void 0,void 0,function*(){this.activeConnections++;try{const t=yield e();n(t)}catch(e){i(e)}finally{if(this.activeConnections--,this.queue.length>0){const e=this.queue.shift();e&&e()}}});this.activeConnections<this.maxConnections?o():this.queue.push(o)})})}}class I extends N{constructor(e){super(T.HTTP,e),this.pendingRequests=new Map,this.messageQueue=[],this.processingQueue=!1,this.httpConfig=e.http||{enableSSE:!0,maxConnections:10,keepAlive:!0,compression:!0},this.connectionPool=new O({maxConnections:this.httpConfig.maxConnections||10,keepAlive:!1!==this.httpConfig.keepAlive,timeout:e.timeout})}doInitialize(){return t(this,void 0,void 0,function*(){if(!w.detect().hasHTTP)throw new Error("HTTP transport not supported in this environment");this.debug("HTTP transport initialized")})}connect(){return t(this,void 0,void 0,function*(){try{yield this.doHealthCheck(),this.httpConfig.enableSSE&&this.config.serverUrl&&(yield this.setupSSE()),this.connected=!0,this.healthStatus.status="healthy",this.emit(P.CONNECTED,{transport:this.type}),this.debug("HTTP transport connected")}catch(e){throw this.emit(P.ERROR,e),e}})}disconnect(){return t(this,void 0,void 0,function*(){const e=Array.from(this.pendingRequests.values());for(const t of e)clearTimeout(t.timeout),t.reject(new Error("Transport disconnected"));this.pendingRequests.clear(),this.sseConnection&&(this.sseConnection.close(),this.sseConnection=void 0),this.connected=!1,this.healthStatus.status="disconnected",this.emit(P.DISCONNECTED,{transport:this.type}),this.debug("HTTP transport disconnected")})}send(e){return t(this,void 0,void 0,function*(){if(!this.isConnected())throw new Error("HTTP transport not connected");return e.id||(e.id=this.generateMessageId()),e.timestamp=Date.now(),this.executeWithCircuitBreaker(()=>t(this,void 0,void 0,function*(){return this.sendHttpRequest(e)}),"http_send")})}sendHttpRequest(e){return t(this,void 0,void 0,function*(){return new Promise((t,n)=>{const i=setTimeout(()=>{this.pendingRequests.delete(e.id),n(new Error(`Request timeout after ${this.config.timeout}ms`))},this.config.timeout),o={id:e.id,message:e,resolve:n=>{clearTimeout(i),this.pendingRequests.delete(e.id),t(n)},reject:t=>{clearTimeout(i),this.pendingRequests.delete(e.id),n(t)},timeout:i,timestamp:Date.now()};this.pendingRequests.set(e.id,o),this.performHttpRequest(e,o)})})}performHttpRequest(e,n){return t(this,void 0,void 0,function*(){try{const i=yield this.connectionPool.acquire(()=>t(this,void 0,void 0,function*(){const t=yield fetch(`${this.config.serverUrl}/api/v1/devpipe/message`,{method:"POST",headers:Object.assign({"Content-Type":"application/json"},this.httpConfig.compression&&{"Accept-Encoding":"gzip, deflate"}),body:JSON.stringify(e)});if(!t.ok)throw new Error(`HTTP ${t.status}: ${t.statusText}`);return t.json()}));if(i&&i.id===e.id){const e={id:i.id,success:!0,payload:i.payload||i,timestamp:Date.now()};n.resolve(e)}else this.debug(`Waiting for async response for message ${e.id}`)}catch(e){n.reject(e instanceof Error?e:new Error("HTTP request failed"))}})}setupSSE(){return t(this,void 0,void 0,function*(){if(!this.config.serverUrl)throw new Error("Server URL required for SSE");return new Promise((e,t)=>{const n=`${this.config.serverUrl}/api/v1/devpipe/stream`;this.sseConnection=new EventSource(n),this.sseConnection.onopen=()=>{this.debug("SSE connection established"),e()},this.sseConnection.onmessage=e=>{try{const t=JSON.parse(e.data);this.handleSSEMessage(t)}catch(e){this.debug("Failed to parse SSE message:",e)}},this.sseConnection.onerror=e=>{var n;this.debug("SSE connection error:",e),(null===(n=this.sseConnection)||void 0===n?void 0:n.readyState)===EventSource.CONNECTING?this.emit(P.RECONNECTING,{transport:this.type}):(this.emit(P.ERROR,e),t(e))}})})}handleSSEMessage(e){if("response"===e.type&&e.id){const t=this.pendingRequests.get(e.id);if(t){const n={id:e.id,success:!1!==e.success,payload:e.payload,error:e.error,timestamp:Date.now()};t.resolve(n)}}else this.emit(P.MESSAGE,e)}doHealthCheck(){return t(this,void 0,void 0,function*(){if(!this.config.serverUrl)throw new Error("No server URL configured");const e=yield fetch(`${this.config.serverUrl}/api/v1/devpipe/health`,{method:"GET",headers:{"Content-Type":"application/json"},signal:AbortSignal.timeout(5e3)});if(!e.ok)throw new Error(`Health check failed: ${e.status} ${e.statusText}`)})}getCapabilities(){return{supportsRealtime:!!this.httpConfig.enableSSE,supportsBidirectional:!!this.httpConfig.enableSSE,supportsFileSystem:!1,supportsStreaming:!0,maxMessageSize:10485760,averageLatency:this.healthStatus.latency,maxConcurrentConnections:this.httpConfig.maxConnections||10,reliability:this.calculateReliability(),supportedEnvironments:["browser","node","obsidian"]}}}class ${constructor(e,t=[],n={}){this.reconnectAttempts=0,this.shouldReconnect=!0,this.url=e,this.protocols=t,this.options=n,this.maxReconnectAttempts=n.maxReconnectAttempts||10,this.reconnectDelay=n.reconnectDelay||1e3,this.connect()}connect(){try{this.ws=new WebSocket(this.url,this.protocols),this.ws.onopen=e=>{this.reconnectAttempts=0,this.onopen&&this.onopen(e)},this.ws.onclose=e=>{this.onclose&&this.onclose(e),this.shouldReconnect&&this.reconnectAttempts<this.maxReconnectAttempts&&setTimeout(()=>this.reconnect(),this.reconnectDelay*Math.pow(2,this.reconnectAttempts))},this.ws.onmessage=e=>{this.onmessage&&this.onmessage(e)},this.ws.onerror=e=>{this.onerror&&this.onerror(e)}}catch(e){this.onerror&&this.onerror(new Event("error"))}}reconnect(){this.shouldReconnect&&this.reconnectAttempts<this.maxReconnectAttempts&&(this.reconnectAttempts++,this.connect())}send(e){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)throw new Error("WebSocket not connected");this.ws.send(e)}close(){this.shouldReconnect=!1,this.ws&&this.ws.close()}get readyState(){return this.ws?this.ws.readyState:WebSocket.CLOSED}}class F extends N{constructor(e){super(T.WEBSOCKET,e),this.responseHandlers=new Map,this.wsConfig=e.websocket||{heartbeatInterval:3e4,reconnectDelay:1e3,maxReconnectAttempts:10,persistMessages:!1},this.messageQueue={messages:[],maxSize:1e3,persistToDisk:this.wsConfig.persistMessages||!1}}doInitialize(){return t(this,void 0,void 0,function*(){if(!w.detect().hasWebSocket)throw new Error("WebSocket transport not supported in this environment");this.debug("WebSocket transport initialized")})}connect(){return t(this,void 0,void 0,function*(){if(!this.config.serverUrl)throw new Error("Server URL required for WebSocket transport");return new Promise((e,t)=>{const n=this.config.serverUrl.replace(/^http/,"ws")+"/api/v1/devpipe/ws";this.websocket=new $(n,[],{connectionTimeout:this.config.timeout,debug:this.config.debug,maxReconnectAttempts:this.wsConfig.maxReconnectAttempts,reconnectDelay:this.wsConfig.reconnectDelay}),this.websocket.onopen=()=>{this.connected=!0,this.healthStatus.status="healthy",this.startHeartbeat(),this.emit(P.CONNECTED,{transport:this.type}),this.debug("WebSocket connected"),e()},this.websocket.onerror=e=>{this.debug("WebSocket error:",e),this.emit(P.ERROR,e),this.connected||t(new Error("Failed to connect WebSocket"))},this.websocket.onmessage=e=>{this.handleMessage(e.data)},this.websocket.onclose=()=>{this.connected=!1,this.healthStatus.status="disconnected",this.stopHeartbeat(),this.emit(P.DISCONNECTED,{transport:this.type}),this.debug("WebSocket disconnected")}})})}disconnect(){return t(this,void 0,void 0,function*(){const e=Array.from(this.responseHandlers.values());for(const t of e)clearTimeout(t.timeout),t.reject(new Error("Transport disconnected"));this.responseHandlers.clear(),this.stopHeartbeat(),this.websocket&&(this.websocket.close(),this.websocket=void 0),this.connected=!1,this.healthStatus.status="disconnected",this.emit(P.DISCONNECTED,{transport:this.type}),this.debug("WebSocket transport disconnected")})}send(e){return t(this,void 0,void 0,function*(){if(!this.isConnected())throw new Error("WebSocket transport not connected");return e.id||(e.id=this.generateMessageId()),e.timestamp=Date.now(),this.executeWithCircuitBreaker(()=>t(this,void 0,void 0,function*(){return this.sendWebSocketMessage(e)}),"websocket_send")})}sendWebSocketMessage(e){return t(this,void 0,void 0,function*(){return new Promise((t,n)=>{const i=setTimeout(()=>{this.responseHandlers.delete(e.id),n(new Error(`WebSocket request timeout after ${this.config.timeout}ms`))},this.config.timeout),o={resolve:n=>{clearTimeout(i),this.responseHandlers.delete(e.id),t(n)},reject:t=>{clearTimeout(i),this.responseHandlers.delete(e.id),n(t)},timeout:i,timestamp:Date.now()};this.responseHandlers.set(e.id,o);try{this.websocket.send(JSON.stringify(e))}catch(t){clearTimeout(i),this.responseHandlers.delete(e.id),n(t)}})})}handleMessage(e){try{const t=JSON.parse(e);if("pong"===t.type)return void this.debug("Received heartbeat pong");if("response"===t.type&&t.replyTo){const e=this.responseHandlers.get(t.replyTo);if(e){const n={id:t.id,success:!1!==t.success,payload:t.payload,error:t.error,timestamp:Date.now()};e.resolve(n)}}else if("health_pong"===t.type&&t.id){const e=this.responseHandlers.get(t.id);if(e){const n={id:t.id,success:!0,payload:{status:"healthy"},timestamp:Date.now()};e.resolve(n)}}else this.emit(P.MESSAGE,t)}catch(e){this.debug("Failed to handle WebSocket message:",e),this.emit(P.ERROR,e)}}startHeartbeat(){this.heartbeatInterval||(this.heartbeatInterval=setInterval(()=>{if(this.isConnected())try{this.websocket.send(JSON.stringify({type:"ping",timestamp:Date.now()}))}catch(e){this.debug("Failed to send heartbeat:",e)}},this.wsConfig.heartbeatInterval||3e4))}stopHeartbeat(){this.heartbeatInterval&&(clearInterval(this.heartbeatInterval),this.heartbeatInterval=void 0)}doHealthCheck(){return t(this,void 0,void 0,function*(){if(!this.isConnected())throw new Error("WebSocket not connected");return new Promise((e,t)=>{const n=setTimeout(()=>{t(new Error("Health check timeout"))},5e3),i=this.generateMessageId(),o={resolve:()=>{clearTimeout(n),e()},reject:e=>{clearTimeout(n),t(e)},timeout:n,timestamp:Date.now()};this.responseHandlers.set(i,o);try{this.websocket.send(JSON.stringify({type:"health_ping",id:i,timestamp:Date.now()}))}catch(e){clearTimeout(n),this.responseHandlers.delete(i),t(e)}})})}getCapabilities(){return{supportsRealtime:!0,supportsBidirectional:!0,supportsFileSystem:!1,supportsStreaming:!0,maxMessageSize:1048576,averageLatency:this.healthStatus.latency,maxConcurrentConnections:1,reliability:this.calculateReliability(),supportedEnvironments:["browser","node","obsidian"]}}}class V{constructor(e=5e3){this.locks=new Set,this.lockTimeout=e}acquireLock(e){return t(this,void 0,void 0,function*(){return new Promise((t,n)=>{const i=()=>{this.locks.has(e)?setTimeout(i,100):(this.locks.add(e),t())};setTimeout(()=>{n(new Error(`Failed to acquire lock for ${e} within ${this.lockTimeout}ms`))},this.lockTimeout),i()})})}releaseLock(e){this.locks.delete(e)}}class z{constructor(){this.watchers=new Map,this.callbacks=new Map}watch(e,n){this.callbacks.set(e,n);const i=setInterval(()=>t(this,void 0,void 0,function*(){try{if(yield this.fileExists(e)){const t=yield this.readFile(e);n(t),this.unwatch(e)}}catch(e){}}),500);this.watchers.set(e,i)}unwatch(e){const t=this.watchers.get(e);t&&(clearInterval(t),this.watchers.delete(e)),this.callbacks.delete(e)}fileExists(e){return t(this,void 0,void 0,function*(){var t,n,i;if("undefined"!=typeof window&&(null===(i=null===(n=null===(t=window.app)||void 0===t?void 0:t.vault)||void 0===n?void 0:n.adapter)||void 0===i?void 0:i.exists))return window.app.vault.adapter.exists(e);if(void 0!==globalThis.require)try{const t=globalThis.require("fs").promises;return yield t.access(e),!0}catch(e){return!1}return!1})}readFile(e){return t(this,void 0,void 0,function*(){var t,n,i;if("undefined"!=typeof window&&(null===(i=null===(n=null===(t=window.app)||void 0===t?void 0:t.vault)||void 0===n?void 0:n.adapter)||void 0===i?void 0:i.read))return window.app.vault.adapter.read(e);if(void 0!==globalThis.require){return globalThis.require("fs").promises.readFile(e,"utf-8")}throw new Error("File reading not supported in this environment")})}}class L extends N{constructor(e){super(T.FILESYSTEM,e),this.pendingRequests=new Map,this.messageQueue=[],this.fsConfig=e.filesystem||{watchInterval:500,lockTimeout:5e3,maxQueueSize:100},this.devPipePath=e.devPipePath||"./devpipe",this.fileWatcher=new z,this.lockManager=new V(this.fsConfig.lockTimeout)}doInitialize(){return t(this,void 0,void 0,function*(){if(!w.detect().hasFileSystem)throw new Error("FileSystem transport not supported in this environment");yield this.ensureDirectoryExists(this.devPipePath),this.debug("FileSystem transport initialized")})}connect(){return t(this,void 0,void 0,function*(){try{yield this.doHealthCheck(),this.setupIncomingMessageWatcher(),this.connected=!0,this.healthStatus.status="healthy",this.emit(P.CONNECTED,{transport:this.type}),this.debug("FileSystem transport connected")}catch(e){throw this.emit(P.ERROR,e),e}})}disconnect(){return t(this,void 0,void 0,function*(){const e=Array.from(this.pendingRequests.values());for(const t of e)clearTimeout(t.timeout),this.fileWatcher.unwatch(t.responseFile),t.reject(new Error("Transport disconnected"));this.pendingRequests.clear(),this.connected=!1,this.healthStatus.status="disconnected",this.emit(P.DISCONNECTED,{transport:this.type}),this.debug("FileSystem transport disconnected")})}send(e){return t(this,void 0,void 0,function*(){if(!this.isConnected())throw new Error("FileSystem transport not connected");return e.id||(e.id=this.generateMessageId()),e.timestamp=Date.now(),this.executeWithCircuitBreaker(()=>t(this,void 0,void 0,function*(){return this.sendFileMessage(e)}),"filesystem_send")})}sendFileMessage(e){return t(this,void 0,void 0,function*(){const t=`${this.devPipePath}/request_${e.id}.json`,n=`${this.devPipePath}/response_${e.id}.json`;return new Promise((i,o)=>{const a=setTimeout(()=>{this.pendingRequests.delete(e.id),this.fileWatcher.unwatch(n),o(new Error(`FileSystem request timeout after ${this.config.timeout}ms`))},this.config.timeout),s={id:e.id,message:e,resolve:t=>{clearTimeout(a),this.pendingRequests.delete(e.id),this.fileWatcher.unwatch(n),i(t)},reject:t=>{clearTimeout(a),this.pendingRequests.delete(e.id),this.fileWatcher.unwatch(n),o(t)},timeout:a,timestamp:Date.now(),requestFile:t,responseFile:n};this.pendingRequests.set(e.id,s),this.fileWatcher.watch(n,e=>{try{const t=JSON.parse(e),n={id:t.id,success:!1!==t.success,payload:t.payload,error:t.error,timestamp:Date.now()};s.resolve(n)}catch(e){s.reject(new Error("Failed to parse response file"))}}),this.writeRequestFile(t,e,s)})})}writeRequestFile(e,n,i){return t(this,void 0,void 0,function*(){try{yield this.lockManager.acquireLock(e),yield this.writeFile(e,JSON.stringify(n,null,2)),this.lockManager.releaseLock(e)}catch(t){this.lockManager.releaseLock(e),i.reject(t instanceof Error?t:new Error("Failed to write request file"))}})}setupIncomingMessageWatcher(){this.debug("Incoming message watcher setup completed")}ensureDirectoryExists(e){return t(this,void 0,void 0,function*(){var t,n,i;if("undefined"!=typeof window&&(null===(i=null===(n=null===(t=window.app)||void 0===t?void 0:t.vault)||void 0===n?void 0:n.adapter)||void 0===i?void 0:i.mkdir))try{yield window.app.vault.adapter.mkdir(e)}catch(e){}else if(void 0!==globalThis.require)try{const t=globalThis.require("fs").promises;yield t.mkdir(e,{recursive:!0})}catch(e){}})}writeFile(e,n){return t(this,void 0,void 0,function*(){var t,i,o;if("undefined"!=typeof window&&(null===(o=null===(i=null===(t=window.app)||void 0===t?void 0:t.vault)||void 0===i?void 0:i.adapter)||void 0===o?void 0:o.write))return window.app.vault.adapter.write(e,n);if(void 0!==globalThis.require){return globalThis.require("fs").promises.writeFile(e,n,"utf-8")}throw new Error("File writing not supported in this environment")})}readFile(e){return t(this,void 0,void 0,function*(){var t,n,i;if("undefined"!=typeof window&&(null===(i=null===(n=null===(t=window.app)||void 0===t?void 0:t.vault)||void 0===n?void 0:n.adapter)||void 0===i?void 0:i.read))return window.app.vault.adapter.read(e);if(void 0!==globalThis.require){return globalThis.require("fs").promises.readFile(e,"utf-8")}throw new Error("File reading not supported in this environment")})}doHealthCheck(){return t(this,void 0,void 0,function*(){const e=`${this.devPipePath}/health_check_${Date.now()}.tmp`;try{yield this.writeFile(e,"health_check");if("health_check"!==(yield this.readFile(e)))throw new Error("File content mismatch during health check");yield this.deleteFile(e)}catch(e){throw new Error(`FileSystem health check failed: ${e instanceof Error?e.message:"Unknown error"}`)}})}deleteFile(e){return t(this,void 0,void 0,function*(){var t,n,i;if("undefined"!=typeof window&&(null===(i=null===(n=null===(t=window.app)||void 0===t?void 0:t.vault)||void 0===n?void 0:n.adapter)||void 0===i?void 0:i.remove))try{yield window.app.vault.adapter.remove(e)}catch(e){}else if(void 0!==globalThis.require)try{const t=globalThis.require("fs").promises;yield t.unlink(e)}catch(e){}})}getCapabilities(){return{supportsRealtime:!1,supportsBidirectional:!0,supportsFileSystem:!0,supportsStreaming:!1,maxMessageSize:10485760,averageLatency:this.healthStatus.latency,maxConcurrentConnections:1,reliability:this.calculateReliability(),supportedEnvironments:["node","obsidian"]}}}class _{constructor(){this.metrics=new Map,this.latencyHistory=new Map,this.MAX_HISTORY_SIZE=100}recordLatency(e,t){const n=this.getOrCreateMetrics(e),i=this.getOrCreateHistory(e);i.push(t),i.length>this.MAX_HISTORY_SIZE&&i.shift(),n.averageLatency=i.reduce((e,t)=>e+t,0)/i.length,n.minLatency=Math.min(n.minLatency,t),n.maxLatency=Math.max(n.maxLatency,t),n.lastActivity=Date.now()}recordSuccess(e){const t=this.getOrCreateMetrics(e);t.totalRequests++,t.successfulRequests++,t.lastActivity=Date.now()}recordFailure(e,t){const n=this.getOrCreateMetrics(e);n.totalRequests++,n.failedRequests++,n.lastActivity=Date.now()}getMetrics(e){return this.getOrCreateMetrics(e)}getOrCreateMetrics(e){return this.metrics.has(e)||this.metrics.set(e,{totalRequests:0,successfulRequests:0,failedRequests:0,averageLatency:0,minLatency:1/0,maxLatency:0,uptime:0,lastActivity:Date.now()}),this.metrics.get(e)}getOrCreateHistory(e){return this.latencyHistory.has(e)||this.latencyHistory.set(e,[]),this.latencyHistory.get(e)}}class q{constructor(e){this.schedules=new Map,this.eventListeners=new Map,this.metricsCollector=e||new _}startMonitoring(e,t=3e4){const n={transport:e,interval:t,lastCheck:0,consecutiveFailures:0};this.schedules.set(e.id,n),e.on(P.HEALTH_CHECK,t=>{t.success?(this.metricsCollector.recordLatency(e.type,t.latency),this.metricsCollector.recordSuccess(e.type),n.consecutiveFailures=0):(this.metricsCollector.recordFailure(e.type,new Error(t.error||"Health check failed")),n.consecutiveFailures++),this.emit("health-updated",this.assessTransportHealth(e))}),this.monitoringInterval||this.startPeriodicChecks()}stopMonitoring(e){this.schedules.delete(e.id),0===this.schedules.size&&this.monitoringInterval&&(clearInterval(this.monitoringInterval),this.monitoringInterval=void 0)}assessTransportHealth(e){const t=this.metricsCollector.getMetrics(e.type),n=e.getHealthStatus();e.getCapabilities();const i=this.calculateAvailabilityScore(e),o=this.calculateLatencyScore(n.latency),a=this.calculateReliabilityScore(t),s=this.calculateErrorRateScore(t),r=.3*i+.25*o+.3*a+.15*s;let l,c;return l=r>=.9?"excellent":r>=.7?"good":r>=.5?"fair":r>=.3?"poor":"failing",c=r>=.7?"use":r>=.4?"monitor":"avoid",{transport:e.type,score:r,status:l,metrics:{availability:i,latency:o,reliability:a,errorRate:1-s},recommendation:c}}calculateAvailabilityScore(e){if(!e.isAvailable())return 0;if(!e.isConnected())return.3;const t=this.schedules.get(e.id);if(!t)return.8;const n=Math.min(.1*t.consecutiveFailures,.5);return Math.max(1-n,0)}calculateLatencyScore(e){return e<=50?1:e<=200?.8:e<=1e3?.6:Math.max(.2,1-e/5e3)}calculateReliabilityScore(e){if(0===e.totalRequests)return.5;return e.successfulRequests/e.totalRequests}calculateErrorRateScore(e){if(0===e.totalRequests)return 1;const t=e.failedRequests/e.totalRequests;return Math.max(0,1-t)}startPeriodicChecks(){this.monitoringInterval=setInterval(()=>{const e=Date.now(),t=Array.from(this.schedules.values());for(const n of t)e-n.lastCheck>=n.interval&&(n.lastCheck=e,n.transport.performHealthCheck().catch(e=>{}))},5e3)}on(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}off(e,t){const n=this.eventListeners.get(e);if(n){const e=n.indexOf(t);e>-1&&n.splice(e,1)}}emit(e,t){const n=this.eventListeners.get(e);n&&n.forEach(n=>{try{n(t)}catch(t){console.error(`Error in health monitor event listener for ${e}:`,t)}})}getMetricsCollector(){return this.metricsCollector}}class H{constructor(e){this.criteria=e}calculateScore(e,n){return t(this,void 0,void 0,function*(){const t=e.getCapabilities(),i=e.getHealthStatus();let o=.5;(null==n?void 0:n.requiresRealtime)&&t.supportsRealtime&&(o+=.3),(null==n?void 0:n.maxLatency)&&t.averageLatency<=n.maxLatency&&(o+=.2),o=Math.min(o,1);const a=Math.max(0,1-t.averageLatency/5e3),s=t.reliability;let r=1;e.type===T.HTTP?r=.8:e.type===T.WEBSOCKET?r=.9:e.type===T.FILESYSTEM&&(r=1);let l=1;e.isAvailable()?e.isConnected()?"failing"===i.status?l=.1:"degraded"===i.status&&(l=.5):l=.3:l=0;const c=(a*this.criteria.latencyWeight+s*this.criteria.reliabilityWeight+o*this.criteria.capabilityWeight+r*this.criteria.costWeight)*l;return Math.max(0,Math.min(1,c))})}selectBest(e,n){return new Promise(i=>t(this,void 0,void 0,function*(){if(0===e.length)return void i(null);const o=yield Promise.all(e.map(e=>t(this,void 0,void 0,function*(){return{transport:e,score:yield this.calculateScore(e,n)}})));o.sort((e,t)=>t.score-e.score),i(o[0].transport)}))}}class W{constructor(e){this.transports=new Map,this.eventListeners=new Map,this.failoverInProgress=!1,this.config=e,this.fallbackChain=e.fallbackChain||[T.WEBSOCKET,T.HTTP,T.FILESYSTEM],this.healthMonitor=new q,this.selector=new H(e.selectionCriteria),this.initializeTransports(),this.setupHealthMonitoring()}initializeTransports(){return t(this,void 0,void 0,function*(){const e=w.detect(),t=new I(this.config.transportConfigs.http);if(yield t.initialize(this.config.transportConfigs.http),this.transports.set(T.HTTP,t),e.hasWebSocket&&this.config.transportConfigs.websocket){const e=new F(this.config.transportConfigs.websocket);yield e.initialize(this.config.transportConfigs.websocket),this.transports.set(T.WEBSOCKET,e)}if(e.hasFileSystem&&this.config.transportConfigs.filesystem){const e=new L(this.config.transportConfigs.filesystem);yield e.initialize(this.config.transportConfigs.filesystem),this.transports.set(T.FILESYSTEM,e)}const n=Array.from(this.transports.values());for(const e of n)this.setupTransportEventHandlers(e);this.debug(`Initialized ${this.transports.size} transports`)})}setupTransportEventHandlers(e){e.on(P.CONNECTED,()=>{this.debug(`Transport ${e.type} connected`),this.emit("transport_connected",{transport:e.type})}),e.on(P.DISCONNECTED,()=>{this.debug(`Transport ${e.type} disconnected`),this.emit("transport_disconnected",{transport:e.type}),this.activeTransport===e&&!1!==this.config.autoFailover&&this.handleTransportFailure(e)}),e.on(P.ERROR,t=>{this.debug(`Transport ${e.type} error:`,t),this.emit("transport_error",{transport:e.type,error:t})}),e.on(P.MESSAGE,e=>{this.emit("message",e)})}setupHealthMonitoring(){const e=Array.from(this.transports.values());for(const t of e)this.healthMonitor.startMonitoring(t,this.config.healthCheckInterval||3e4);this.healthMonitor.on("health-updated",e=>{var t;this.emit("health_updated",e),(null===(t=this.activeTransport)||void 0===t?void 0:t.type)!==e.transport||"avoid"!==e.recommendation||this.failoverInProgress||this.selectOptimalTransport()})}selectOptimalTransport(e){return t(this,void 0,void 0,function*(){const t=Array.from(this.transports.values()).filter(e=>e.isAvailable());if(0===t.length)throw new Error("No available transports");const n=yield this.selector.selectBest(t,e);if(!n)throw new Error("No suitable transport found");return this.activeTransport!==n&&(yield this.switchTransport(n,"optimization")),n})}switchTransport(e,n){return t(this,void 0,void 0,function*(){const t=this.activeTransport;try{this.debug(`Switching transport from ${(null==t?void 0:t.type)||"none"} to ${e.type} (${n})`),e.isConnected()||(yield e.connect()),this.activeTransport=e,t&&t!==e&&t.disconnect().catch(e=>{this.debug(`Error disconnecting old transport ${t.type}:`,e)}),this.emit("transport_switched",{from:null==t?void 0:t.type,to:e.type,reason:n})}catch(e){throw t&&t.isConnected()&&(this.activeTransport=t),e}})}handleTransportFailure(e){return t(this,void 0,void 0,function*(){if(!this.failoverInProgress){this.failoverInProgress=!0;try{this.debug(`Handling failure of transport ${e.type}`),this.emit("transport_failed",{transport:e.type,timestamp:Date.now()});for(const t of this.fallbackChain){if(t===e.type)continue;const n=this.transports.get(t);if(n&&n.isAvailable())try{return yield this.switchTransport(n,"failover"),void this.debug(`Successfully failed over to ${t}`)}catch(e){this.debug(`Failover to ${t} failed:`,e);continue}}throw new Error("All transports failed")}finally{this.failoverInProgress=!1}}})}send(e,n){return t(this,void 0,void 0,function*(){if(this.activeTransport||(yield this.selectOptimalTransport(n)),!this.activeTransport)throw new Error("No active transport available");try{return yield this.activeTransport.send(e)}catch(t){if(this.debug(`Send failed on ${this.activeTransport.type}, attempting failover`),yield this.handleTransportFailure(this.activeTransport),this.activeTransport)return yield this.activeTransport.send(e);throw t}})}connect(){return t(this,void 0,void 0,function*(){yield this.selectOptimalTransport()})}disconnect(){return t(this,void 0,void 0,function*(){const e=Array.from(this.transports.values()).map(e=>e.disconnect().catch(t=>{this.debug(`Error disconnecting transport ${e.type}:`,t)}));yield Promise.all(e),this.activeTransport=void 0})}getActiveTransport(){return this.activeTransport}getAvailableTransports(){return Array.from(this.transports.values()).filter(e=>e.isAvailable())}getTransportHealth(){const e=new Map,t=Array.from(this.transports.values());for(const n of t)e.set(n.type,this.healthMonitor.assessTransportHealth(n));return e}on(e,t){this.eventListeners.has(e)||this.eventListeners.set(e,[]),this.eventListeners.get(e).push(t)}off(e,t){const n=this.eventListeners.get(e);if(n){const e=n.indexOf(t);e>-1&&n.splice(e,1)}}emit(e,t){const n=this.eventListeners.get(e);n&&n.forEach(n=>{try{n(t)}catch(t){this.debug(`Error in transport manager event listener for ${e}:`,t)}})}debug(e,...t){this.config.debug&&console.log(`[TransportManager] ${e}`,...t)}}!function(e){e[e.WELCOME=0]="WELCOME",e[e.ENVIRONMENT_DETECTION=1]="ENVIRONMENT_DETECTION",e[e.PREFERENCES=2]="PREFERENCES",e[e.VALIDATION=3]="VALIDATION",e[e.COMPLETION=4]="COMPLETION"}(D||(D={}));class U extends e.Modal{constructor(e,t,n={}){super(e),this.currentStep=0,this.totalSteps=5,this.stepElements=[],this.plugin=t,this.config=n;const i={selectionCriteria:{latencyWeight:.3,reliabilityWeight:.4,capabilityWeight:.2,costWeight:.1},fallbackChain:[T.HTTP,T.WEBSOCKET,T.FILESYSTEM],transportConfigs:{http:{serverUrl:t.settings.backendUrl,timeout:3e4,retryAttempts:3,debug:t.settings.debugMode}}};this.transportManager=new W(i),this.progress={currentStep:0,totalSteps:this.totalSteps,completedSteps:new Array(this.totalSteps).fill(!1),userPreferences:{enableRealTimeUpdates:!0,performanceMode:"balanced",enableAnalytics:!0}},this.modalEl.addClass("vaultpilot-onboarding")}onOpen(){return t(this,void 0,void 0,function*(){const{contentEl:e}=this;e.empty(),this.modalEl.addClass("vaultpilot-onboarding-modal"),this.createHeader(),this.createProgressBar(),e.createDiv("onboarding-step-container"),this.createNavigation(),yield this.renderCurrentStep()})}createHeader(){const{contentEl:e}=this,t=e.createDiv("onboarding-header");t.createEl("h2",{text:"Welcome to VaultPilot"}),t.createEl("p",{text:"Let's set up your optimal configuration for the best experience",cls:"onboarding-subtitle"})}createProgressBar(){const{contentEl:e}=this,t=e.createDiv("onboarding-progress"),n=t.createDiv("progress-steps");for(let e=0;e<this.totalSteps;e++){const t=n.createDiv("progress-step");t.addClass(0===e?"active":"inactive"),t.createSpan({text:(e+1).toString()}),this.stepElements.push(t)}this.progressBar=t.createDiv("progress-bar");this.progressBar.createDiv("progress-fill").style.width=1/this.totalSteps*100+"%"}createNavigation(){const{contentEl:t}=this,n=t.createDiv("onboarding-navigation");this.previousButton=new e.ButtonComponent(n).setButtonText("Previous").setClass("mod-muted").onClick(()=>this.previousStep()),this.skipButton=new e.ButtonComponent(n).setButtonText("Skip Setup").setClass("mod-muted").onClick(()=>this.skipOnboarding()),this.nextButton=new e.ButtonComponent(n).setButtonText("Next").setCta().onClick(()=>this.nextStep()),this.updateNavigationState()}renderCurrentStep(){return t(this,void 0,void 0,function*(){const{contentEl:e}=this,t=e.querySelector(".onboarding-step-container");switch(t.empty(),this.updateProgressIndicators(),this.currentStep){case D.WELCOME:yield this.renderWelcomeStep(t);break;case D.ENVIRONMENT_DETECTION:yield this.renderEnvironmentStep(t);break;case D.PREFERENCES:yield this.renderPreferencesStep(t);break;case D.VALIDATION:yield this.renderValidationStep(t);break;case D.COMPLETION:yield this.renderCompletionStep(t)}this.updateNavigationState()})}renderWelcomeStep(e){return t(this,void 0,void 0,function*(){const t=e.createDiv("onboarding-step welcome-step");t.createEl("h3",{text:"Welcome to VaultPilot"}),t.createEl("p",{text:"VaultPilot provides intelligent transport management and optimization for your Obsidian experience. This wizard will help you configure the optimal settings for your environment."});const n=t.createDiv("welcome-features");n.createEl("h4",{text:"What you'll get:"});const i=n.createEl("ul");i.createEl("li",{text:"🚀 Intelligent transport selection and failover"}),i.createEl("li",{text:"📊 Real-time performance monitoring"}),i.createEl("li",{text:"💡 AI-powered optimization suggestions"}),i.createEl("li",{text:"🔧 Advanced configuration options"}),i.createEl("li",{text:"📈 Usage analytics and insights"});t.createDiv("estimated-time").createEl("p",{text:"⏱️ Estimated setup time: 2-3 minutes",cls:"muted"})})}renderEnvironmentStep(e){return t(this,void 0,void 0,function*(){const t=e.createDiv("onboarding-step environment-step");if(t.createEl("h3",{text:"Environment Detection"}),t.createEl("p",{text:"Analyzing your environment to recommend optimal transport configuration..."}),this.config.skipEnvironmentDetection||this.progress.detectedCapabilities)this.progress.detectedCapabilities&&this.renderEnvironmentResults(t);else{t.createDiv("detection-status").createEl("p",{text:"🔍 Detecting capabilities...",cls:"detection-loading"});try{this.progress.detectedCapabilities=yield this.detectEnvironment(),this.renderEnvironmentResults(t)}catch(e){this.renderEnvironmentError(t,e)}}})}detectEnvironment(){return t(this,void 0,void 0,function*(){yield new Promise(e=>setTimeout(e,1e3));const e=w.detect();let t="obsidian";"browser"!==e.platform&&"node"!==e.platform&&"obsidian"!==e.platform||(t=e.platform);const n={platform:t,webSocketSupported:e.hasWebSocket,fileSystemAccess:e.hasFileSystem,httpCapabilities:e.hasHTTP,recommendedTransport:"http",performanceEstimate:"good"};return n.webSocketSupported&&n.httpCapabilities?(n.recommendedTransport="websocket",n.performanceEstimate="excellent"):n.httpCapabilities?(n.recommendedTransport="http",n.performanceEstimate="good"):n.fileSystemAccess&&(n.recommendedTransport="filesystem",n.performanceEstimate="fair"),n})}renderEnvironmentResults(e){const t=e.createDiv("environment-results"),n=this.progress.detectedCapabilities;t.createEl("h4",{text:"✅ Detection Complete"});const i=t.createDiv("capabilities-list"),o=i.createDiv("capability-item");o.createSpan({text:n.webSocketSupported?"✅":"❌",cls:"capability-icon"}),o.createSpan({text:"WebSocket Support"});const a=i.createDiv("capability-item");a.createSpan({text:n.httpCapabilities?"✅":"❌",cls:"capability-icon"}),a.createSpan({text:"HTTP Transport"});const s=i.createDiv("capability-item");s.createSpan({text:n.fileSystemAccess?"✅":"❌",cls:"capability-icon"}),s.createSpan({text:"FileSystem Access"});const r=t.createDiv("environment-recommendation");r.createEl("h4",{text:"Recommendation"}),r.createEl("p",{text:`Based on your environment, we recommend using ${n.recommendedTransport} transport for ${n.performanceEstimate} performance.`})}renderEnvironmentError(e,t){const n=e.createDiv("environment-error");n.createEl("h4",{text:"⚠️ Detection Failed"}),n.createEl("p",{text:"Unable to automatically detect your environment capabilities. You can proceed with default settings or manually configure later."}),this.plugin.settings.debugMode&&n.createEl("p",{text:`Error: ${t.message}`,cls:"error-details"})}renderPreferencesStep(n){return t(this,void 0,void 0,function*(){const t=n.createDiv("onboarding-step preferences-step");t.createEl("h3",{text:"Performance Preferences"}),t.createEl("p",{text:"Configure your preferences for optimal performance:"});const i=t.createDiv("preferences-container");new e.Setting(i).setName("Performance Mode").setDesc("Choose your preferred balance between speed and reliability").addDropdown(e=>{e.addOption("performance","Performance (Prioritize Speed)"),e.addOption("balanced","Balanced (Recommended)"),e.addOption("reliability","Reliability (Prioritize Stability)"),e.setValue(this.progress.userPreferences.performanceMode),e.onChange(e=>{this.progress.userPreferences.performanceMode=e})}),new e.Setting(i).setName("Real-time Updates").setDesc("Enable real-time dashboard updates and live monitoring").addToggle(e=>{e.setValue(this.progress.userPreferences.enableRealTimeUpdates),e.onChange(e=>{this.progress.userPreferences.enableRealTimeUpdates=e})}),new e.Setting(i).setName("Usage Analytics").setDesc("Enable anonymous usage analytics to improve recommendations").addToggle(e=>{e.setValue(this.progress.userPreferences.enableAnalytics),e.onChange(e=>{this.progress.userPreferences.enableAnalytics=e})})})}renderValidationStep(e){return t(this,void 0,void 0,function*(){const t=e.createDiv("onboarding-step validation-step");if(t.createEl("h3",{text:"Configuration Validation"}),t.createEl("p",{text:"Testing your configuration and establishing performance baseline..."}),this.config.skipValidation||this.progress.validationResults)this.progress.validationResults&&this.renderValidationResults(t);else{t.createDiv("validation-status").createEl("p",{text:"🧪 Running validation tests...",cls:"validation-loading"});try{this.progress.validationResults=yield this.validateConfiguration(),this.renderValidationResults(t)}catch(e){this.renderValidationError(t,e)}}})}validateConfiguration(){return t(this,void 0,void 0,function*(){var e,t;yield new Promise(e=>setTimeout(e,2e3));const n={transportsWorking:["http"],transportsFailing:[],recommendedConfiguration:{},performanceBaseline:{avgResponseTime:150,reliability:.98,throughput:1e3}};return(null===(e=this.progress.detectedCapabilities)||void 0===e?void 0:e.webSocketSupported)&&n.transportsWorking.push("websocket"),(null===(t=this.progress.detectedCapabilities)||void 0===t?void 0:t.fileSystemAccess)&&n.transportsWorking.push("filesystem"),n})}renderValidationResults(e){const t=e.createDiv("validation-results"),n=this.progress.validationResults;t.createEl("h4",{text:"✅ Validation Complete"});const i=t.createDiv("working-transports");i.createEl("h5",{text:"Working Transports:"});const o=i.createEl("ul");n.transportsWorking.forEach(e=>{o.createEl("li",{text:`✅ ${e.toUpperCase()}`})});const a=t.createDiv("performance-baseline");a.createEl("h5",{text:"Performance Baseline:"});const s=a.createEl("ul");s.createEl("li",{text:`Average Response Time: ${n.performanceBaseline.avgResponseTime}ms`}),s.createEl("li",{text:`Reliability: ${(100*n.performanceBaseline.reliability).toFixed(1)}%`}),s.createEl("li",{text:`Throughput: ${n.performanceBaseline.throughput} requests/min`})}renderValidationError(e,t){const n=e.createDiv("validation-error");n.createEl("h4",{text:"⚠️ Validation Issues"}),n.createEl("p",{text:"Some validation tests failed, but you can still proceed. You can adjust settings later if needed."}),this.plugin.settings.debugMode&&n.createEl("p",{text:`Error: ${t.message}`,cls:"error-details"})}renderCompletionStep(e){return t(this,void 0,void 0,function*(){const t=e.createDiv("onboarding-step completion-step");t.createEl("h3",{text:"🎉 Setup Complete!"}),t.createEl("p",{text:"VaultPilot has been configured with your optimal settings."});const n=t.createDiv("setup-summary");n.createEl("h4",{text:"Configuration Summary:"});const i=n.createEl("ul");i.createEl("li",{text:`Performance Mode: ${this.progress.userPreferences.performanceMode}`}),i.createEl("li",{text:"Real-time Updates: "+(this.progress.userPreferences.enableRealTimeUpdates?"Enabled":"Disabled")}),i.createEl("li",{text:"Analytics: "+(this.progress.userPreferences.enableAnalytics?"Enabled":"Disabled")}),this.progress.detectedCapabilities&&i.createEl("li",{text:`Recommended Transport: ${this.progress.detectedCapabilities.recommendedTransport}`});const o=t.createDiv("next-steps");o.createEl("h4",{text:"What's Next:"});const a=o.createEl("ul");a.createEl("li",{text:"📊 Check the dashboard for real-time status"}),a.createEl("li",{text:"⚙️ Adjust advanced settings as needed"}),a.createEl("li",{text:"💡 Review AI-powered recommendations"}),a.createEl("li",{text:"📈 Monitor performance analytics"})})}updateProgressIndicators(){this.stepElements.forEach((e,t)=>{e.removeClass("active","completed","inactive"),t<this.currentStep?e.addClass("completed"):t===this.currentStep?e.addClass("active"):e.addClass("inactive")});const e=this.progressBar.querySelector(".progress-fill");if(e){const t=(this.currentStep+1)/this.totalSteps*100;e.style.width=`${t}%`}}updateNavigationState(){this.previousButton.setDisabled(0===this.currentStep),this.currentStep===this.totalSteps-1?this.nextButton.setButtonText("Finish"):this.nextButton.setButtonText("Next"),this.currentStep===this.totalSteps-1?this.skipButton.buttonEl.style.display="none":this.skipButton.buttonEl.style.display=""}nextStep(){return t(this,void 0,void 0,function*(){this.currentStep<this.totalSteps-1?(this.progress.completedSteps[this.currentStep]=!0,this.currentStep++,yield this.renderCurrentStep()):yield this.finishOnboarding()})}previousStep(){return t(this,void 0,void 0,function*(){this.currentStep>0&&(this.currentStep--,yield this.renderCurrentStep())})}skipOnboarding(){return t(this,void 0,void 0,function*(){confirm("Are you sure you want to skip the setup wizard? You can access these settings later in the plugin settings.")&&(yield this.finishOnboarding(!0))})}finishOnboarding(){return t(this,arguments,void 0,function*(t=!1){try{t?new e.Notice("⚠️ Onboarding skipped - using default settings"):(yield this.applyConfiguration(),new e.Notice("✅ VaultPilot configuration applied successfully!")),this.plugin.settings.onboardingComplete=!0,yield this.plugin.saveSettings(),this.close()}catch(t){console.error("Failed to apply onboarding configuration:",t),new e.Notice("❌ Failed to apply configuration. Please check settings manually.")}})}applyConfiguration(){return t(this,void 0,void 0,function*(){const e=this.progress.userPreferences;if(this.plugin.settings.performanceMode=e.performanceMode,this.plugin.settings.enableRealTimeUpdates=e.enableRealTimeUpdates,this.plugin.settings.enableAnalytics=e.enableAnalytics,this.progress.detectedCapabilities){const t=this.progress.detectedCapabilities,n={selectionCriteria:this.getSelectionCriteriaForMode(e.performanceMode),fallbackChain:this.buildFallbackChain(t),transportConfigs:{http:{baseUrl:this.plugin.settings.backendUrl},websocket:t.webSocketSupported?{url:this.plugin.settings.webSocketUrl}:void 0,filesystem:t.fileSystemAccess?{basePath:".vaultpilot"}:void 0},autoFailover:!0,debug:this.plugin.settings.debugMode};this.plugin.settings.transportConfig=n}yield this.plugin.saveSettings()})}getSelectionCriteriaForMode(e){switch(e){case"performance":return{latencyWeight:.6,reliabilityWeight:.2,capabilityWeight:.1,costWeight:.1};case"reliability":return{latencyWeight:.1,reliabilityWeight:.6,capabilityWeight:.2,costWeight:.1};default:return{latencyWeight:.3,reliabilityWeight:.3,capabilityWeight:.2,costWeight:.2}}}buildFallbackChain(e){const t=[];return e.webSocketSupported&&t.push("websocket"),e.httpCapabilities&&t.push("http"),e.fileSystemAccess&&t.push("filesystem"),t}onClose(){const{contentEl:e}=this;e.empty()}}class B extends e.Component{constructor(e,t,n={updateInterval:2e3,showAdvancedMetrics:!0,enableRealTimeUpdates:!0}){super(),this.statusCards=new Map,this.isRealTimeEnabled=!0,this.containerEl=e,this.plugin=t,this.config=n,this.isRealTimeEnabled=n.enableRealTimeUpdates}onload(){return t(this,void 0,void 0,function*(){this.initializeDashboard(),this.isRealTimeEnabled&&(this.startRealTimeUpdates(),this.setupEventListeners()),yield this.updateDashboard()})}onunload(){this.stopRealTimeUpdates(),this.removeEventListeners()}initializeDashboard(){this.containerEl.empty(),this.containerEl.addClass("transport-dashboard"),this.createHeader(),this.createSystemHealthSection(),this.createTransportStatusSection(),this.createPerformanceMetricsSection(),this.createChartsSection(),this.createControlsSection()}createHeader(){const e=this.containerEl.createDiv("dashboard-header");e.createEl("h2",{text:"Transport Dashboard"});const t=e.createDiv("last-update");t.createSpan({text:"Last updated: ",cls:"label"});t.createSpan({cls:"timestamp"}).textContent=(new Date).toLocaleTimeString();const n=e.createDiv("realtime-indicator");this.isRealTimeEnabled?n.createSpan({text:"🟢 Real-time",cls:"realtime-active"}):n.createSpan({text:"⚪ Manual refresh",cls:"realtime-inactive"})}createSystemHealthSection(){const e=this.containerEl.createDiv("system-health-section");e.createEl("h3",{text:"System Health"}),this.systemHealthContainer=e.createDiv("system-health-container"),this.renderSystemHealthPlaceholder()}createTransportStatusSection(){const e=this.containerEl.createDiv("transport-status-section");e.createEl("h3",{text:"Transport Status"});const t=e.createDiv("transport-cards-container");[T.HTTP,T.WEBSOCKET,T.FILESYSTEM].forEach(e=>{const n=this.createTransportCard(t,e);this.statusCards.set(e,n)})}createTransportCard(e,t){const n=e.createDiv("transport-status-card");n.addClass(`transport-${t}`),n.addClass("status-unknown");const i=n.createDiv("card-header");i.createEl("h4",{text:t.toUpperCase()});i.createDiv("status-badge").textContent="Unknown";const o=n.createDiv("card-metrics"),a=o.createDiv("metric");a.createSpan({text:"Response Time",cls:"metric-label"}),a.createSpan({text:"--",cls:"metric-value response-time"});const s=o.createDiv("metric");s.createSpan({text:"Success Rate",cls:"metric-label"}),s.createSpan({text:"--",cls:"metric-value success-rate"});const r=o.createDiv("metric");r.createSpan({text:"Errors",cls:"metric-label"}),r.createSpan({text:"--",cls:"metric-value error-count"});n.createDiv("connection-state").createSpan({text:"Disconnected",cls:"connection-status"});const l=n.createDiv("card-actions");l.createEl("button",{text:"Test",cls:"mod-muted"}).onclick=()=>this.testTransport(t);return l.createEl("button",{text:"Switch To",cls:"mod-cta"}).onclick=()=>this.switchToTransport(t),n}createPerformanceMetricsSection(){const e=this.containerEl.createDiv("performance-metrics-section");e.createEl("h3",{text:"Performance Metrics"}),this.metricsContainer=e.createDiv("metrics-container"),this.renderPerformanceMetricsPlaceholder()}createChartsSection(){const e=this.containerEl.createDiv("charts-section");e.createEl("h3",{text:"Performance Trends"}),this.chartsContainer=e.createDiv("charts-container"),this.renderChartsPlaceholder()}createControlsSection(){const e=this.containerEl.createDiv("controls-section").createDiv("dashboard-controls");e.createEl("button",{text:"🔄 Refresh",cls:"mod-cta"}).onclick=()=>this.manualRefresh();e.createEl("button",{text:"📊 Export Data",cls:"mod-muted"}).onclick=()=>this.exportData();e.createEl("button",{text:"⚙️ Settings",cls:"mod-muted"}).onclick=()=>this.openDashboardSettings();const t=e.createDiv("realtime-toggle");t.createSpan({text:"Real-time updates: "});const n=t.createEl("input",{type:"checkbox"});n.checked=this.isRealTimeEnabled,n.onchange=()=>this.toggleRealTimeUpdates(n.checked)}updateDashboard(){return t(this,void 0,void 0,function*(){try{this.currentHealth=yield this.getSystemHealth(),this.renderSystemHealth(this.currentHealth),yield this.updateTransportStatuses(),this.currentMetrics=yield this.getPerformanceMetrics(),this.renderPerformanceMetrics(this.currentMetrics),this.updateTimestamp()}catch(e){console.error("Failed to update dashboard:",e),this.renderError("Failed to update dashboard data")}})}getSystemHealth(){return t(this,void 0,void 0,function*(){this.transportManager;const e={overall:"good",activeTransport:"http",availableTransports:["http","websocket"],lastHealthCheck:new Date,uptime:Date.now()-this.plugin.app.vault.adapter.started||0,totalRequests:Math.floor(1e4*Math.random()),totalErrors:Math.floor(100*Math.random())},t=e.totalErrors/e.totalRequests;return e.overall=t<.01?"excellent":t<.05?"good":t<.1?"fair":t<.2?"poor":"critical",e})}getPerformanceMetrics(){return t(this,void 0,void 0,function*(){return{averageResponseTime:150+100*Math.random(),p95ResponseTime:300+200*Math.random(),requestsPerMinute:100+50*Math.random(),errorRate:.05*Math.random(),transportDistribution:{http:.7,websocket:.25,filesystem:.05},trends:{responseTime:this.generateTrendData(150,20),errorRate:this.generateTrendData(.02,.01),throughput:this.generateTrendData(100,20),timestamps:this.generateTimestamps(20)}}})}generateTrendData(e,t,n=20){const i=[];for(let o=0;o<n;o++)i.push(e+(Math.random()-.5)*t*2);return i}generateTimestamps(e){const t=[],n=new Date;for(let i=e-1;i>=0;i--)t.push(new Date(n.getTime()-6e4*i));return t}updateTransportStatuses(){return t(this,void 0,void 0,function*(){const e=[T.HTTP,T.WEBSOCKET,T.FILESYSTEM];for(const t of e){const e=yield this.getTransportStatus(t);this.updateTransportCard(t,e)}})}getTransportStatus(e){return t(this,void 0,void 0,function*(){const t=Math.random()>.2,n=100+200*Math.random(),i=.9+.1*Math.random(),o={type:e,status:t?i>.95?"healthy":"degraded":"disconnected",lastResponseTime:n,successRate:i,errorCount:Math.floor(10*Math.random()),capabilities:this.getTransportCapabilities(e),connectionState:t?"connected":"disconnected"};return t||(o.lastError="Connection timeout"),o})}getTransportCapabilities(e){switch(e){case T.HTTP:return["RESTful API","Connection Pooling","Retry Logic"];case T.WEBSOCKET:return["Real-time","Bidirectional","Auto-reconnect"];case T.FILESYSTEM:return["Local Storage","File Locking","Offline Support"];default:return[]}}updateTransportCard(e,t){const n=this.statusCards.get(e);if(!n)return;n.className=`transport-status-card transport-${e} status-${t.status}`;n.querySelector(".status-badge").textContent=t.status.charAt(0).toUpperCase()+t.status.slice(1);n.querySelector(".response-time").textContent=`${t.lastResponseTime.toFixed(0)}ms`;n.querySelector(".success-rate").textContent=`${(100*t.successRate).toFixed(1)}%`;n.querySelector(".error-count").textContent=t.errorCount.toString();const i=n.querySelector(".connection-status");i.textContent=t.connectionState.charAt(0).toUpperCase()+t.connectionState.slice(1),i.className=`connection-status state-${t.connectionState}`;n.querySelector(".mod-cta").disabled="failing"===t.status||"disconnected"===t.connectionState}renderSystemHealth(e){this.systemHealthContainer.empty();const t=this.systemHealthContainer.createDiv("health-grid"),n=t.createDiv("health-item overall-health");n.addClass(`health-${e.overall}`),n.createEl("h4",{text:"Overall Health"}),n.createEl("span",{text:e.overall.charAt(0).toUpperCase()+e.overall.slice(1),cls:"health-value"});const i=t.createDiv("health-item");i.createEl("h4",{text:"Active Transport"}),i.createEl("span",{text:e.activeTransport.toUpperCase(),cls:"health-value"});const o=t.createDiv("health-item");o.createEl("h4",{text:"Uptime"}),o.createEl("span",{text:this.formatUptime(e.uptime),cls:"health-value"});const a=t.createDiv("health-item");a.createEl("h4",{text:"Total Requests"}),a.createEl("span",{text:e.totalRequests.toLocaleString(),cls:"health-value"});const s=t.createDiv("health-item");s.createEl("h4",{text:"Error Rate"});const r=e.totalErrors/e.totalRequests*100;s.createEl("span",{text:`${r.toFixed(2)}%`,cls:"health-value"})}renderPerformanceMetrics(e){this.metricsContainer.empty();const t=this.metricsContainer.createDiv("metrics-grid"),n=t.createDiv("metric-item");n.createEl("h4",{text:"Avg Response Time"}),n.createEl("span",{text:`${e.averageResponseTime.toFixed(0)}ms`,cls:"metric-value"});const i=t.createDiv("metric-item");i.createEl("h4",{text:"P95 Response Time"}),i.createEl("span",{text:`${e.p95ResponseTime.toFixed(0)}ms`,cls:"metric-value"});const o=t.createDiv("metric-item");o.createEl("h4",{text:"Requests/Min"}),o.createEl("span",{text:e.requestsPerMinute.toFixed(0),cls:"metric-value"});const a=t.createDiv("metric-item");a.createEl("h4",{text:"Error Rate"}),a.createEl("span",{text:`${(100*e.errorRate).toFixed(2)}%`,cls:"metric-value"});const s=this.metricsContainer.createDiv("transport-distribution");s.createEl("h4",{text:"Transport Usage Distribution"});const r=s.createDiv("distribution-bars");Object.entries(e.transportDistribution).forEach(([e,t])=>{const n=r.createDiv("distribution-bar");n.createSpan({text:e.toUpperCase(),cls:"transport-label"});n.createDiv("bar-container").createDiv("bar-fill").style.width=100*t+"%",n.createSpan({text:`${(100*t).toFixed(1)}%`,cls:"percentage-label"})})}renderSystemHealthPlaceholder(){this.systemHealthContainer.createEl("p",{text:"Loading system health data...",cls:"placeholder-text"})}renderPerformanceMetricsPlaceholder(){this.metricsContainer.createEl("p",{text:"Loading performance metrics...",cls:"placeholder-text"})}renderChartsPlaceholder(){this.chartsContainer.createEl("p",{text:"Performance charts will be displayed here",cls:"placeholder-text"})}renderError(e){this.containerEl.createDiv("dashboard-error").createEl("p",{text:`Error: ${e}`,cls:"error-message"})}formatUptime(e){const t=Math.floor(e/1e3),n=Math.floor(t/60),i=Math.floor(n/60),o=Math.floor(i/24);return o>0?`${o}d ${i%24}h`:i>0?`${i}h ${n%60}m`:`${n}m ${t%60}s`}updateTimestamp(){const e=this.containerEl.querySelector(".timestamp");e&&(e.textContent=(new Date).toLocaleTimeString())}startRealTimeUpdates(){this.updateInterval&&clearInterval(this.updateInterval),this.updateInterval=window.setInterval(()=>{this.updateDashboard()},this.config.updateInterval)}stopRealTimeUpdates(){this.updateInterval&&(clearInterval(this.updateInterval),this.updateInterval=void 0)}setupEventListeners(){this.transportManager&&console.log("Setting up transport event listeners")}removeEventListeners(){this.transportManager&&console.log("Removing transport event listeners")}onTransportSwitched(t){var n;new e.Notice(`Transport switched to ${(null===(n=t.transport)||void 0===n?void 0:n.toUpperCase())||"unknown"}`),this.updateDashboard()}onHealthChanged(e){console.log("Health changed:",e),this.updateDashboard()}onErrorOccurred(e){console.warn("Transport error occurred:",e),this.updateDashboard()}toggleRealTimeUpdates(t){this.isRealTimeEnabled=t,this.config.enableRealTimeUpdates=t,t?(this.startRealTimeUpdates(),new e.Notice("Real-time updates enabled")):(this.stopRealTimeUpdates(),new e.Notice("Real-time updates disabled"));const n=this.containerEl.querySelector(".realtime-indicator");n&&(n.empty(),t?n.createSpan({text:"🟢 Real-time",cls:"realtime-active"}):n.createSpan({text:"⚪ Manual refresh",cls:"realtime-inactive"}))}manualRefresh(){return t(this,void 0,void 0,function*(){const t=this.containerEl.querySelector(".mod-cta");t&&(t.disabled=!0,t.textContent="🔄 Refreshing...");try{yield this.updateDashboard(),new e.Notice("Dashboard refreshed successfully")}catch(t){new e.Notice("Failed to refresh dashboard"),console.error("Manual refresh failed:",t)}finally{t&&(t.disabled=!1,t.textContent="🔄 Refresh")}})}testTransport(n){return t(this,void 0,void 0,function*(){new e.Notice(`Testing ${n} transport...`);try{const t=yield this.performTransportTest(n);t.success?new e.Notice(`✅ ${n} transport test successful`):new e.Notice(`❌ ${n} transport test failed: ${t.error}`);const i=yield this.getTransportStatus(n);this.updateTransportCard(n,i)}catch(t){new e.Notice(`❌ ${n} transport test failed`),console.error(`Transport test failed for ${n}:`,t)}})}performTransportTest(e){return t(this,void 0,void 0,function*(){yield new Promise(e=>setTimeout(e,1e3));const e=Math.random()>.2;return{success:e,error:e?void 0:"Connection timeout"}})}switchToTransport(n){return t(this,void 0,void 0,function*(){if(confirm(`Switch to ${n} transport as primary?`))try{new e.Notice(`✅ Switched to ${n} transport`),yield this.updateDashboard()}catch(t){new e.Notice(`❌ Failed to switch to ${n} transport`),console.error("Transport switch failed:",t)}})}exportData(){const t={timestamp:(new Date).toISOString(),systemHealth:this.currentHealth,performanceMetrics:this.currentMetrics,exportedBy:"VaultPilot Transport Dashboard"},n=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),i=URL.createObjectURL(n),o=document.createElement("a");o.href=i,o.download=`vaultpilot-dashboard-${(new Date).toISOString().split("T")[0]}.json`,o.click(),URL.revokeObjectURL(i),new e.Notice("Dashboard data exported successfully")}openDashboardSettings(){new e.Notice("Dashboard settings will open in a future update")}}class j extends e.Component{constructor(e,t,n={showExpertOptions:!1,enableRealTimeValidation:!0,allowImportExport:!0}){super(),this.profiles=[],this.hasUnsavedChanges=!1,this.containerEl=e,this.plugin=t,this.config=n,this.currentConfiguration=this.getDefaultConfiguration(),this.loadProfiles()}onload(){return t(this,void 0,void 0,function*(){this.initializeInterface(),yield this.loadCurrentConfiguration(),this.renderSettings(),this.config.enableRealTimeValidation&&this.startRealTimeValidation()})}onunload(){if(this.validationTimeout&&clearTimeout(this.validationTimeout),this.hasUnsavedChanges){confirm("You have unsaved changes. Would you like to save them?")&&this.saveConfiguration()}}initializeInterface(){this.containerEl.empty(),this.containerEl.addClass("advanced-settings"),this.createHeader(),this.createProfileManagement(),this.createValidationSection(),this.createConfigurationSections(),this.createPreviewSection(),this.createActionButtons()}createHeader(){const e=this.containerEl.createDiv("settings-header");e.createEl("h2",{text:"Advanced Settings"}),e.createEl("p",{text:"Fine-tune VaultPilot configuration for optimal performance",cls:"settings-subtitle"});const t=e.createDiv("expert-toggle").createEl("label");t.createSpan({text:"Expert Mode"});const n=t.createEl("input",{type:"checkbox"});n.checked=this.config.showExpertOptions,n.addEventListener("change",()=>{this.config.showExpertOptions=n.checked,this.updateExpertOptionsVisibility()})}createProfileManagement(){const e=this.containerEl.createDiv("profile-management-section");e.createEl("h3",{text:"Configuration Profiles"});const t=e.createDiv("profile-controls"),n=t.createDiv("profile-selector-container");n.createSpan({text:"Current Profile:",cls:"profile-label"}),this.profileSelector=n.createEl("select",{cls:"profile-selector"}),this.updateProfileSelector(),this.profileSelector.addEventListener("change",()=>{this.loadProfile(this.profileSelector.value)});const i=t.createDiv("profile-actions");i.createEl("button",{text:"Save as New Profile",cls:"mod-muted"}).addEventListener("click",()=>this.showSaveProfileModal());if(i.createEl("button",{text:"Delete Profile",cls:"mod-warning"}).addEventListener("click",()=>this.deleteCurrentProfile()),this.config.allowImportExport){i.createEl("button",{text:"Import",cls:"mod-muted"}).addEventListener("click",()=>this.importConfiguration());i.createEl("button",{text:"Export",cls:"mod-muted"}).addEventListener("click",()=>this.exportConfiguration())}}createValidationSection(){const e=this.containerEl.createDiv("validation-section");e.createEl("h3",{text:"Configuration Status"}),this.validationContainer=e.createDiv("validation-container"),this.renderValidationPlaceholder()}createConfigurationSections(){this.configurationContainer=this.containerEl.createDiv("configuration-sections"),this.createTransportSettings(),this.createPerformanceSettings(),this.createMonitoringSettings(),this.createUISettings(),this.createPrivacySettings()}createTransportSettings(){const t=this.configurationContainer.createDiv("config-section transport-section");t.createEl("h4",{text:"🚀 Transport Configuration"});const n=t.createDiv("settings-container");new e.Setting(n).setName("Primary Transport").setDesc("Choose the preferred transport method").addDropdown(e=>{e.addOption(T.HTTP,"HTTP (Reliable)"),e.addOption(T.WEBSOCKET,"WebSocket (Real-time)"),e.addOption(T.FILESYSTEM,"FileSystem (Offline)"),e.setValue(this.currentConfiguration.transport.primaryTransport),e.onChange(e=>{this.currentConfiguration.transport.primaryTransport=e,this.onConfigurationChange()})}),this.createFallbackChainConfig(n),this.createSelectionCriteriaConfig(n),this.createTimeoutConfig(n),this.createRetryPolicyConfig(n)}createFallbackChainConfig(t){const n=new e.Setting(t).setName("Fallback Chain").setDesc("Configure transport fallback order").controlEl.createDiv("fallback-chain-config"),i=n.createDiv("chain-display");this.updateFallbackChainDisplay(i);const o=n.createDiv("add-transport-buttons");[T.HTTP,T.WEBSOCKET,T.FILESYSTEM].forEach(e=>{o.createEl("button",{text:`Add ${e.toUpperCase()}`,cls:"mod-muted add-transport-btn"}).addEventListener("click",()=>{this.currentConfiguration.transport.fallbackChain.includes(e)||(this.currentConfiguration.transport.fallbackChain.push(e),this.updateFallbackChainDisplay(i),this.onConfigurationChange())})})}updateFallbackChainDisplay(e){e.empty();const t=this.currentConfiguration.transport.fallbackChain;t.forEach((n,i)=>{const o=e.createDiv("chain-item");o.createSpan({text:`${i+1}. ${n.toUpperCase()}`,cls:"chain-label"});const a=o.createDiv("chain-actions");if(i>0){a.createEl("button",{text:"↑",cls:"mod-muted chain-btn"}).addEventListener("click",()=>{[t[i],t[i-1]]=[t[i-1],t[i]],this.updateFallbackChainDisplay(e),this.onConfigurationChange()})}if(i<t.length-1){a.createEl("button",{text:"↓",cls:"mod-muted chain-btn"}).addEventListener("click",()=>{[t[i],t[i+1]]=[t[i+1],t[i]],this.updateFallbackChainDisplay(e),this.onConfigurationChange()})}a.createEl("button",{text:"✕",cls:"mod-warning chain-btn"}).addEventListener("click",()=>{t.splice(i,1),this.updateFallbackChainDisplay(e),this.onConfigurationChange()})})}createSelectionCriteriaConfig(t){const n=t.createDiv("selection-criteria-container");n.createEl("h5",{text:"Transport Selection Criteria"});const i=this.currentConfiguration.transport.selectionCriteria;new e.Setting(n).setName("Latency Priority").setDesc("How much to prioritize low latency (0-100%)").addSlider(e=>{e.setLimits(0,100,5),e.setValue(100*i.latencyWeight),e.onChange(e=>{i.latencyWeight=e/100,this.normalizeSelectionCriteria(),this.onConfigurationChange()}),e.setDynamicTooltip()}),new e.Setting(n).setName("Reliability Priority").setDesc("How much to prioritize reliability (0-100%)").addSlider(e=>{e.setLimits(0,100,5),e.setValue(100*i.reliabilityWeight),e.onChange(e=>{i.reliabilityWeight=e/100,this.normalizeSelectionCriteria(),this.onConfigurationChange()}),e.setDynamicTooltip()}),new e.Setting(n).setName("Feature Priority").setDesc("How much to prioritize advanced features (0-100%)").addSlider(e=>{e.setLimits(0,100,5),e.setValue(100*i.capabilityWeight),e.onChange(e=>{i.capabilityWeight=e/100,this.normalizeSelectionCriteria(),this.onConfigurationChange()}),e.setDynamicTooltip()}),new e.Setting(n).setName("Efficiency Priority").setDesc("How much to prioritize resource efficiency (0-100%)").addSlider(e=>{e.setLimits(0,100,5),e.setValue(100*i.costWeight),e.onChange(e=>{i.costWeight=e/100,this.normalizeSelectionCriteria(),this.onConfigurationChange()}),e.setDynamicTooltip()})}createTimeoutConfig(t){if(!this.config.showExpertOptions)return;const n=t.createDiv("timeout-config-container expert-option");n.createEl("h5",{text:"Timeout Configuration"});const i=this.currentConfiguration.transport.timeouts;new e.Setting(n).setName("Connection Timeout").setDesc("Maximum time to wait for initial connection (ms)").addText(e=>{e.setValue(i.connection.toString()),e.onChange(e=>{const t=parseInt(e,10);!isNaN(t)&&t>0&&(i.connection=t,this.onConfigurationChange())})}),new e.Setting(n).setName("Request Timeout").setDesc("Maximum time to wait for request completion (ms)").addText(e=>{e.setValue(i.request.toString()),e.onChange(e=>{const t=parseInt(e,10);!isNaN(t)&&t>0&&(i.request=t,this.onConfigurationChange())})})}createRetryPolicyConfig(t){if(!this.config.showExpertOptions)return;const n=t.createDiv("retry-policy-container expert-option");n.createEl("h5",{text:"Retry Policy"});const i=this.currentConfiguration.transport.retryPolicy;new e.Setting(n).setName("Max Retry Attempts").setDesc("Maximum number of retry attempts for failed requests").addSlider(e=>{e.setLimits(0,10,1),e.setValue(i.maxAttempts),e.onChange(e=>{i.maxAttempts=e,this.onConfigurationChange()}),e.setDynamicTooltip()}),new e.Setting(n).setName("Backoff Multiplier").setDesc("Exponential backoff multiplier for retry delays").addSlider(e=>{e.setLimits(1,5,.1),e.setValue(i.backoffMultiplier),e.onChange(e=>{i.backoffMultiplier=e,this.onConfigurationChange()}),e.setDynamicTooltip()})}createPerformanceSettings(){const t=this.configurationContainer.createDiv("config-section performance-section");t.createEl("h4",{text:"⚡ Performance Configuration"});const n=t.createDiv("settings-container");new e.Setting(n).setName("Performance Mode").setDesc("Balance between speed, reliability, and resource usage").addDropdown(e=>{e.addOption("performance","Performance (Prioritize Speed)"),e.addOption("balanced","Balanced (Recommended)"),e.addOption("reliability","Reliability (Prioritize Stability)"),e.setValue(this.currentConfiguration.performance.mode),e.onChange(e=>{this.currentConfiguration.performance.mode=e,this.applyPerformanceModePreset(e),this.onConfigurationChange()})}),new e.Setting(n).setName("Connection Pooling").setDesc("Reuse connections to improve performance").addToggle(e=>{e.setValue(this.currentConfiguration.performance.enableConnectionPooling),e.onChange(e=>{this.currentConfiguration.performance.enableConnectionPooling=e,this.onConfigurationChange()})}),new e.Setting(n).setName("Compression").setDesc("Enable data compression to reduce bandwidth usage").addToggle(e=>{e.setValue(this.currentConfiguration.performance.enableCompression),e.onChange(e=>{this.currentConfiguration.performance.enableCompression=e,this.onConfigurationChange()})}),new e.Setting(n).setName("Response Caching").setDesc("Cache responses to improve performance").addToggle(e=>{e.setValue(this.currentConfiguration.performance.enableCaching),e.onChange(e=>{this.currentConfiguration.performance.enableCaching=e,this.onConfigurationChange()})}),this.config.showExpertOptions&&(new e.Setting(n).setName("Max Concurrent Requests").setDesc("Maximum number of simultaneous requests").setClass("expert-option").addSlider(e=>{e.setLimits(1,20,1),e.setValue(this.currentConfiguration.performance.maxConcurrentRequests),e.onChange(e=>{this.currentConfiguration.performance.maxConcurrentRequests=e,this.onConfigurationChange()}),e.setDynamicTooltip()}),new e.Setting(n).setName("Cache Size (MB)").setDesc("Maximum cache size in megabytes").setClass("expert-option").addSlider(e=>{e.setLimits(1,100,5),e.setValue(this.currentConfiguration.performance.cacheSize),e.onChange(e=>{this.currentConfiguration.performance.cacheSize=e,this.onConfigurationChange()}),e.setDynamicTooltip()}))}createMonitoringSettings(){const t=this.configurationContainer.createDiv("config-section monitoring-section");t.createEl("h4",{text:"📊 Monitoring Configuration"});const n=t.createDiv("settings-container");new e.Setting(n).setName("Health Checks").setDesc("Monitor transport health automatically").addToggle(e=>{e.setValue(this.currentConfiguration.monitoring.enableHealthChecks),e.onChange(e=>{this.currentConfiguration.monitoring.enableHealthChecks=e,this.onConfigurationChange()})}),new e.Setting(n).setName("Performance Metrics").setDesc("Collect detailed performance metrics").addToggle(e=>{e.setValue(this.currentConfiguration.monitoring.enableMetrics),e.onChange(e=>{this.currentConfiguration.monitoring.enableMetrics=e,this.onConfigurationChange()})}),new e.Setting(n).setName("Predictive Alerts").setDesc("Get early warnings about potential issues").addToggle(e=>{e.setValue(this.currentConfiguration.monitoring.enablePredictiveAlerts),e.onChange(e=>{this.currentConfiguration.monitoring.enablePredictiveAlerts=e,this.onConfigurationChange()})})}createUISettings(){const t=this.configurationContainer.createDiv("config-section ui-section");t.createEl("h4",{text:"🎨 User Interface"});const n=t.createDiv("settings-container");new e.Setting(n).setName("Theme").setDesc("Choose the interface theme").addDropdown(e=>{e.addOption("auto","Auto (Follow Obsidian)"),e.addOption("light","Light"),e.addOption("dark","Dark"),e.setValue(this.currentConfiguration.ui.theme),e.onChange(e=>{this.currentConfiguration.ui.theme=e,this.onConfigurationChange()})}),new e.Setting(n).setName("Animations").setDesc("Enable UI animations and transitions").addToggle(e=>{e.setValue(this.currentConfiguration.ui.enableAnimations),e.onChange(e=>{this.currentConfiguration.ui.enableAnimations=e,this.onConfigurationChange()})}),new e.Setting(n).setName("Advanced Metrics").setDesc("Show detailed metrics in dashboard").addToggle(e=>{e.setValue(this.currentConfiguration.ui.showAdvancedMetrics),e.onChange(e=>{this.currentConfiguration.ui.showAdvancedMetrics=e,this.onConfigurationChange()})}),new e.Setting(n).setName("Dashboard Refresh Rate").setDesc("How often to update the dashboard (seconds)").addSlider(e=>{e.setLimits(1,60,1),e.setValue(this.currentConfiguration.ui.dashboardRefreshRate),e.onChange(e=>{this.currentConfiguration.ui.dashboardRefreshRate=e,this.onConfigurationChange()}),e.setDynamicTooltip()})}createPrivacySettings(){const t=this.configurationContainer.createDiv("config-section privacy-section");t.createEl("h4",{text:"🔒 Privacy & Data"});const n=t.createDiv("settings-container");new e.Setting(n).setName("Usage Analytics").setDesc("Help improve VaultPilot by sharing anonymous usage data").addToggle(e=>{e.setValue(this.currentConfiguration.privacy.enableAnalytics),e.onChange(e=>{this.currentConfiguration.privacy.enableAnalytics=e,this.onConfigurationChange()})}),new e.Setting(n).setName("Data Retention").setDesc("How long to keep performance and usage data (days)").addSlider(e=>{e.setLimits(1,90,1),e.setValue(this.currentConfiguration.privacy.dataRetentionDays),e.onChange(e=>{this.currentConfiguration.privacy.dataRetentionDays=e,this.onConfigurationChange()}),e.setDynamicTooltip()})}createPreviewSection(){const e=this.containerEl.createDiv("preview-section");e.createEl("h3",{text:"Configuration Preview"}),this.previewContainer=e.createDiv("preview-container"),this.updatePreview()}createActionButtons(){const e=this.containerEl.createDiv("settings-actions");e.createEl("button",{text:"Save Configuration",cls:"mod-cta"}).addEventListener("click",()=>this.saveConfiguration());e.createEl("button",{text:"Reset to Defaults",cls:"mod-warning"}).addEventListener("click",()=>this.resetToDefaults());e.createEl("button",{text:"Test Configuration",cls:"mod-muted"}).addEventListener("click",()=>this.testConfiguration())}renderSettings(){this.onConfigurationChange()}loadCurrentConfiguration(){return t(this,void 0,void 0,function*(){try{this.plugin.settings.advancedConfiguration&&(this.currentConfiguration=Object.assign({},this.plugin.settings.advancedConfiguration))}catch(t){console.error("Failed to load current configuration:",t),new e.Notice("Failed to load configuration, using defaults")}})}getDefaultConfiguration(){return{transport:{primaryTransport:T.HTTP,fallbackChain:[T.HTTP,T.WEBSOCKET],selectionCriteria:{latencyWeight:.3,reliabilityWeight:.3,capabilityWeight:.2,costWeight:.2},timeouts:{connection:5e3,request:3e4,retry:1e3},retryPolicy:{maxAttempts:3,backoffMultiplier:2,maxBackoffTime:1e4}},performance:{mode:"balanced",enableConnectionPooling:!0,maxConcurrentRequests:5,enableCompression:!0,enableCaching:!0,cacheSize:10},monitoring:{enableHealthChecks:!0,healthCheckInterval:3e4,enableMetrics:!0,metricsRetention:7,enablePredictiveAlerts:!0},ui:{theme:"auto",enableAnimations:!0,showAdvancedMetrics:!1,dashboardRefreshRate:2,enableNotifications:!0},privacy:{enableAnalytics:!0,shareUsageData:!1,dataRetentionDays:30}}}onConfigurationChange(){this.hasUnsavedChanges=!0,this.config.enableRealTimeValidation&&this.scheduleValidation(),this.updatePreview()}scheduleValidation(){this.validationTimeout&&clearTimeout(this.validationTimeout),this.validationTimeout=window.setTimeout(()=>{this.validateConfiguration()},500)}validateConfiguration(){return t(this,void 0,void 0,function*(){const e=[],t=[];0===this.currentConfiguration.transport.fallbackChain.length&&e.push({field:"transport.fallbackChain",message:"At least one transport must be configured in the fallback chain",severity:"error",suggestion:"Add at least one transport to the fallback chain"});const n=this.currentConfiguration.transport.selectionCriteria,i=n.latencyWeight+n.reliabilityWeight+n.capabilityWeight+n.costWeight;Math.abs(i-1)>.01&&t.push({field:"transport.selectionCriteria",message:"Selection criteria weights should sum to 100%",impact:"medium",recommendation:"Adjust the weights so they total 100%"});const o=this.currentConfiguration.transport.timeouts;o.connection>=o.request&&t.push({field:"transport.timeouts",message:"Connection timeout should be less than request timeout",impact:"low",recommendation:"Set connection timeout to be less than request timeout"}),this.currentConfiguration.performance.maxConcurrentRequests>10&&t.push({field:"performance.maxConcurrentRequests",message:"High concurrent request limit may impact performance",impact:"medium",recommendation:"Consider reducing to 5-10 for optimal performance"});const a=this.estimateConfigurationImpact(),s={isValid:0===e.length,errors:e,warnings:t,estimatedImpact:a};return this.validationResult=s,this.renderValidationResult(s),s})}estimateConfigurationImpact(){let e=0,t=0,n=0;const i=this.currentConfiguration;switch(i.performance.mode){case"performance":e+=20,t-=5,n+=15;break;case"reliability":e-=5,t+=20,n+=5}return i.performance.enableConnectionPooling&&(e+=15,n+=10),i.performance.enableCompression&&(e+=5,n+=5),i.performance.enableCaching&&(e+=10,n+=i.performance.cacheSize),{performanceChange:Math.max(-50,Math.min(50,e)),reliabilityChange:Math.max(-50,Math.min(50,t)),resourceUsage:Math.max(0,Math.min(100,n))}}renderValidationResult(e){if(this.validationContainer.empty(),e.isValid&&0===e.warnings.length){this.validationContainer.createDiv("validation-success").createSpan({text:"✅ Configuration is valid",cls:"validation-message"})}else e.errors.forEach(e=>{const t=this.validationContainer.createDiv("validation-error");t.createSpan({text:"❌",cls:"validation-icon"}),t.createSpan({text:e.message,cls:"validation-message"}),e.suggestion&&t.createSpan({text:e.suggestion,cls:"validation-suggestion"})}),e.warnings.forEach(e=>{const t=this.validationContainer.createDiv("validation-warning");t.createSpan({text:"⚠️",cls:"validation-icon"}),t.createSpan({text:e.message,cls:"validation-message"}),e.recommendation&&t.createSpan({text:e.recommendation,cls:"validation-suggestion"})});const t=e.estimatedImpact,n=this.validationContainer.createDiv("validation-impact");n.createEl("h5",{text:"Estimated Impact:"});const i=n.createDiv("impact-grid"),o=i.createDiv("impact-item");o.createSpan({text:"Performance:",cls:"impact-label"}),o.createSpan({text:`${t.performanceChange>0?"+":""}${t.performanceChange}%`,cls:"impact-value "+(t.performanceChange>0?"positive":t.performanceChange<0?"negative":"neutral")});const a=i.createDiv("impact-item");a.createSpan({text:"Reliability:",cls:"impact-label"}),a.createSpan({text:`${t.reliabilityChange>0?"+":""}${t.reliabilityChange}%`,cls:"impact-value "+(t.reliabilityChange>0?"positive":t.reliabilityChange<0?"negative":"neutral")});const s=i.createDiv("impact-item");s.createSpan({text:"Resource Usage:",cls:"impact-label"}),s.createSpan({text:`${t.resourceUsage}%`,cls:"impact-value "+(t.resourceUsage>70?"high":t.resourceUsage>30?"medium":"low")})}renderValidationPlaceholder(){this.validationContainer.createEl("p",{text:"Configuration validation will appear here...",cls:"validation-placeholder"})}updatePreview(){this.previewContainer.empty();this.previewContainer.createEl("pre",{cls:"config-preview"}).textContent=JSON.stringify(this.currentConfiguration,null,2)}normalizeSelectionCriteria(){const e=this.currentConfiguration.transport.selectionCriteria,t=e.latencyWeight+e.reliabilityWeight+e.capabilityWeight+e.costWeight;t>0&&(e.latencyWeight/=t,e.reliabilityWeight/=t,e.capabilityWeight/=t,e.costWeight/=t)}applyPerformanceModePreset(e){const t=this.currentConfiguration.performance;switch(e){case"performance":t.enableConnectionPooling=!0,t.maxConcurrentRequests=10,t.enableCompression=!1,t.enableCaching=!0;break;case"reliability":t.enableConnectionPooling=!0,t.maxConcurrentRequests=3,t.enableCompression=!0,t.enableCaching=!1;break;default:t.enableConnectionPooling=!0,t.maxConcurrentRequests=5,t.enableCompression=!0,t.enableCaching=!0}}updateExpertOptionsVisibility(){this.containerEl.querySelectorAll(".expert-option").forEach(e=>{this.config.showExpertOptions?e.removeClass("hidden"):e.addClass("hidden")})}updateProfileSelector(){this.profileSelector.empty();this.profileSelector.createEl("option",{value:"default"}).textContent="Default Configuration",this.profiles.forEach(e=>{this.profileSelector.createEl("option",{value:e.id}).textContent=e.name})}loadProfiles(){try{const e=this.plugin.settings.configurationProfiles||[];this.profiles=e.map(e=>Object.assign(Object.assign({},e),{created:new Date(e.created),lastModified:new Date(e.lastModified)}))}catch(e){console.error("Failed to load configuration profiles:",e),this.profiles=[]}}loadProfile(e){if("default"===e)this.currentConfiguration=this.getDefaultConfiguration();else{const t=this.profiles.find(t=>t.id===e);t&&(this.currentConfiguration=Object.assign({},t.config))}this.renderSettings(),this.onConfigurationChange()}showSaveProfileModal(){const e=prompt("Enter profile name:");if(!e)return;const t=prompt("Enter profile description (optional):")||"";this.saveAsProfile(e,t)}saveAsProfile(t,n){const i={id:`profile-${Date.now()}`,name:t,description:n,config:Object.assign({},this.currentConfiguration),created:new Date,lastModified:new Date,isDefault:!1};this.profiles.push(i),this.updateProfileSelector(),this.saveProfiles(),new e.Notice(`Profile "${t}" saved successfully`)}deleteCurrentProfile(){const t=this.profileSelector.value;if("default"===t)return void new e.Notice("Cannot delete the default profile");const n=this.profiles.find(e=>e.id===t);if(!n)return;confirm(`Delete profile "${n.name}"?`)&&(this.profiles=this.profiles.filter(e=>e.id!==t),this.updateProfileSelector(),this.saveProfiles(),this.loadProfile("default"),new e.Notice(`Profile "${n.name}" deleted`))}saveConfiguration(){return t(this,void 0,void 0,function*(){try{if(!(yield this.validateConfiguration()).isValid){if(!confirm("Configuration has errors. Save anyway?"))return}this.plugin.settings.advancedConfiguration=Object.assign({},this.currentConfiguration),yield this.plugin.saveSettings(),this.hasUnsavedChanges=!1,new e.Notice("✅ Configuration saved successfully")}catch(t){console.error("Failed to save configuration:",t),new e.Notice("❌ Failed to save configuration")}})}resetToDefaults(){confirm("Reset all settings to default values? This cannot be undone.")&&(this.currentConfiguration=this.getDefaultConfiguration(),this.renderSettings(),this.onConfigurationChange(),new e.Notice("Configuration reset to defaults"))}testConfiguration(){return t(this,void 0,void 0,function*(){new e.Notice("Testing configuration...");try{yield new Promise(e=>setTimeout(e,2e3));const t={success:Math.random()>.2,latency:200*Math.random()+50,errors:Math.random()>.8?["Connection timeout"]:[]};t.success?new e.Notice(`✅ Configuration test passed (${t.latency.toFixed(0)}ms average)`):new e.Notice(`❌ Configuration test failed: ${t.errors.join(", ")}`)}catch(t){console.error("Configuration test failed:",t),new e.Notice("❌ Configuration test failed")}})}exportConfiguration(){const t={version:"1.0",timestamp:(new Date).toISOString(),configuration:this.currentConfiguration,profiles:this.profiles},n=new Blob([JSON.stringify(t,null,2)],{type:"application/json"}),i=URL.createObjectURL(n),o=document.createElement("a");o.href=i,o.download=`vaultpilot-config-${(new Date).toISOString().split("T")[0]}.json`,o.click(),URL.revokeObjectURL(i),new e.Notice("Configuration exported successfully")}importConfiguration(){const t=document.createElement("input");t.type="file",t.accept=".json",t.onchange=t=>{var n;const i=null===(n=t.target.files)||void 0===n?void 0:n[0];if(!i)return;const o=new FileReader;o.onload=t=>{var n;try{const i=JSON.parse(null===(n=t.target)||void 0===n?void 0:n.result);i.configuration&&(this.currentConfiguration=i.configuration,this.renderSettings(),this.onConfigurationChange(),new e.Notice("Configuration imported successfully")),i.profiles&&(this.profiles=i.profiles.map(e=>Object.assign(Object.assign({},e),{created:new Date(e.created),lastModified:new Date(e.lastModified)})),this.updateProfileSelector(),this.saveProfiles())}catch(t){console.error("Failed to import configuration:",t),new e.Notice("❌ Failed to import configuration: Invalid file format")}},o.readAsText(i)},t.click()}saveProfiles(){try{this.plugin.settings.configurationProfiles=this.profiles,this.plugin.saveSettings()}catch(e){console.error("Failed to save profiles:",e)}}startRealTimeValidation(){console.log("Real-time validation enabled")}}!function(e){e.TRANSPORT_OPTIMIZATION="transport_optimization",e.PERFORMANCE_TUNING="performance_tuning",e.ERROR_REDUCTION="error_reduction",e.COST_OPTIMIZATION="cost_optimization",e.FEATURE_ADOPTION="feature_adoption",e.CONFIGURATION_IMPROVEMENT="configuration_improvement",e.PROACTIVE_MAINTENANCE="proactive_maintenance"}(A||(A={}));class K{constructor(){this.performanceHistory=[],this.behaviorPatterns=new Map,this.appliedRecommendations=new Map,this.insightCache=new Map,this.predictionModels=new Map,this.ANALYSIS_WINDOW=6048e5,this.MIN_DATA_POINTS=10,this.CONFIDENCE_THRESHOLD=.7,this.initializePredictionModels()}generateRecommendations(e){return t(this,void 0,void 0,function*(){const t=[];try{const n=yield this.analyzeOptimizationOpportunities(e),i=yield this.generateTransportRecommendations(e,n);t.push(...i);const o=yield this.generatePerformanceRecommendations(e,n);t.push(...o);const a=yield this.generateConfigurationRecommendations(e);t.push(...a);const s=yield this.generateMaintenanceRecommendations(e);t.push(...s);const r=this.prioritizeRecommendations(t);return r.forEach(e=>{this.appliedRecommendations.set(e.id,e)}),r}catch(e){return console.error("Failed to generate recommendations:",e),[]}})}analyzeOptimizationOpportunities(e){return t(this,void 0,void 0,function*(){const t=[];e.performanceMetrics.errorRate>.05&&t.push({area:"transport",impact:"high",effort:"medium",description:"High error rate detected, transport optimization recommended",metrics:{currentValue:e.performanceMetrics.errorRate,potentialValue:.01,improvement:(e.performanceMetrics.errorRate-.01)/e.performanceMetrics.errorRate}}),e.performanceMetrics.averageLatency>500&&t.push({area:"configuration",impact:"medium",effort:"low",description:"High latency detected, configuration tuning recommended",metrics:{currentValue:e.performanceMetrics.averageLatency,potentialValue:200,improvement:(e.performanceMetrics.averageLatency-200)/e.performanceMetrics.averageLatency}});const n=Object.values(e.performanceMetrics.transportUsage),i=Math.max(...n),o=Math.min(...n);return i/(o||.001)>10&&t.push({area:"usage",impact:"medium",effort:"low",description:"Unbalanced transport usage detected, load balancing recommended",metrics:{currentValue:i/(o||.001),potentialValue:3,improvement:.3}}),t})}generateTransportRecommendations(e,n){return t(this,void 0,void 0,function*(){const t=[],n=yield this.determineOptimalTransport(e);return n!==e.currentTransport&&t.push({id:`transport-switch-${Date.now()}`,type:A.TRANSPORT_OPTIMIZATION,priority:"high",title:`Switch to ${n} Transport`,description:`Based on your usage patterns and environment, ${n} transport would provide better performance.`,rationale:this.generateTransportSwitchRationale(e,n),expectedImpact:{performanceImprovement:25,errorReduction:40,reliabilityImprovement:30,confidenceScore:.85},implementation:{difficulty:"easy",estimatedTime:"1 minute",steps:[{id:"switch-transport",title:"Switch Primary Transport",description:`Change primary transport to ${n}`,action:"automatic"}],reversible:!0,riskLevel:"low"},category:"Transport",tags:["performance","optimization","transport"],created:new Date}),e.performanceMetrics.errorRate>.02&&t.push({id:`fallback-optimization-${Date.now()}`,type:A.TRANSPORT_OPTIMIZATION,priority:"medium",title:"Optimize Transport Fallback Chain",description:"Configure intelligent fallback to reduce error impact.",rationale:"Current error rate suggests fallback mechanisms could be improved.",expectedImpact:{performanceImprovement:15,errorReduction:60,reliabilityImprovement:45,confidenceScore:.75},implementation:{difficulty:"medium",estimatedTime:"5 minutes",steps:[{id:"configure-fallback",title:"Configure Fallback Chain",description:"Set up intelligent transport fallback",action:"manual"}],reversible:!0,riskLevel:"low"},category:"Reliability",tags:["fallback","reliability","error-reduction"],created:new Date}),t})}generatePerformanceRecommendations(e,n){return t(this,void 0,void 0,function*(){const t=[];return e.performanceMetrics.averageLatency>1e3&&t.push({id:`timeout-optimization-${Date.now()}`,type:A.PERFORMANCE_TUNING,priority:"medium",title:"Optimize Request Timeouts",description:"Adjust timeout settings to reduce wait times for failed requests.",rationale:"High average latency indicates timeout settings may need adjustment.",expectedImpact:{performanceImprovement:20,errorReduction:10,reliabilityImprovement:15,confidenceScore:.8},implementation:{difficulty:"easy",estimatedTime:"2 minutes",steps:[{id:"adjust-timeouts",title:"Adjust Timeout Settings",description:"Optimize request timeout values",action:"manual"}],reversible:!0,riskLevel:"low"},category:"Performance",tags:["timeout","latency","performance"],created:new Date}),e.performanceMetrics.throughput<100&&t.push({id:`connection-pooling-${Date.now()}`,type:A.PERFORMANCE_TUNING,priority:"high",title:"Enable Connection Pooling",description:"Enable connection pooling to improve throughput and reduce connection overhead.",rationale:"Low throughput suggests connection pooling could provide significant benefits.",expectedImpact:{performanceImprovement:40,errorReduction:20,reliabilityImprovement:25,confidenceScore:.9},implementation:{difficulty:"medium",estimatedTime:"3 minutes",steps:[{id:"enable-pooling",title:"Enable Connection Pooling",description:"Configure HTTP connection pooling",action:"automatic"}],reversible:!0,riskLevel:"low"},category:"Performance",tags:["connection-pooling","throughput","performance"],created:new Date}),t})}generateConfigurationRecommendations(e){return t(this,void 0,void 0,function*(){const t=[];return e.performanceMetrics.errorRate>.03&&t.push({id:`retry-config-${Date.now()}`,type:A.CONFIGURATION_IMPROVEMENT,priority:"medium",title:"Optimize Retry Configuration",description:"Fine-tune retry attempts and backoff strategy to handle transient errors better.",rationale:"Error rate suggests retry configuration could be optimized.",expectedImpact:{performanceImprovement:10,errorReduction:35,reliabilityImprovement:40,confidenceScore:.75},implementation:{difficulty:"medium",estimatedTime:"5 minutes",steps:[{id:"configure-retry",title:"Configure Retry Strategy",description:"Set up exponential backoff retry strategy",action:"manual"}],reversible:!0,riskLevel:"low"},category:"Configuration",tags:["retry","error-handling","reliability"],created:new Date}),t})}generateMaintenanceRecommendations(e){return t(this,void 0,void 0,function*(){const e=[],t={id:`health-monitoring-${Date.now()}`,type:A.PROACTIVE_MAINTENANCE,priority:"low",title:"Enhance Health Monitoring",description:"Set up comprehensive health monitoring to detect issues early.",rationale:"Proactive monitoring can prevent issues before they impact users.",expectedImpact:{performanceImprovement:5,errorReduction:25,reliabilityImprovement:35,confidenceScore:.8},implementation:{difficulty:"easy",estimatedTime:"2 minutes",steps:[{id:"enable-monitoring",title:"Enable Enhanced Monitoring",description:"Turn on comprehensive health monitoring",action:"automatic"}],reversible:!0,riskLevel:"low"},category:"Maintenance",tags:["monitoring","proactive","health"],created:new Date};return e.push(t),e})}determineOptimalTransport(e){return t(this,void 0,void 0,function*(){const t=e.environmentContext,n=e.userBehavior,i={};for(const o of e.availableTransports){let e=0;switch(o){case T.WEBSOCKET:e+="excellent"===t.connectivity?40:20,e+=t.latency<50?30:10,e+="high"===n.performanceSensitivity?20:10,e+="high"===n.usageFrequency?10:0;break;case T.HTTP:e+=30,e+="poor"===t.connectivity?20:10,e+="low"===n.errorTolerance?20:10,e+=15;break;case T.FILESYSTEM:e+="poor"===t.connectivity?40:5,e+="low"===n.usageFrequency?20:0,e+=10}i[o]=e}return Object.entries(i).reduce((e,t)=>i[e[0]]>i[t[0]]?e:t)[0]})}generateTransportSwitchRationale(e,t){const n=e.currentTransport,i=e.environmentContext;let o=`Switching from ${n} to ${t} is recommended because: `;switch(t){case T.WEBSOCKET:o+="WebSocket provides real-time communication with lower latency, ","excellent"===i.connectivity?o+="and your excellent connectivity supports stable WebSocket connections.":o+="which would benefit your usage patterns.";break;case T.HTTP:o+="HTTP offers superior reliability and error handling, ",e.performanceMetrics.errorRate>.05?o+="which is especially important given your current error rate.":o+="providing a more stable foundation for your usage.";break;case T.FILESYSTEM:o+="FileSystem transport provides offline capability and local storage benefits, ","poor"===i.connectivity?o+="which is ideal for your current connectivity situation.":o+="offering better performance for your usage patterns."}return o}prioritizeRecommendations(e){return e.sort((e,t)=>{const n={critical:4,high:3,medium:2,low:1},i=n[t.priority]-n[e.priority];if(0!==i)return i;const o=e.expectedImpact.performanceImprovement*e.expectedImpact.confidenceScore;return t.expectedImpact.performanceImprovement*t.expectedImpact.confidenceScore-o})}generateInsights(e){return t(this,void 0,void 0,function*(){var t,n,i;const o=this.generateInsightCacheKey(e);if(this.insightCache.has(o)){const e=this.insightCache.get(o);if(Date.now()-(null===(i=null===(n=null===(t=e[0])||void 0===t?void 0:t.insights[0])||void 0===n?void 0:n.data)||void 0===i?void 0:i.timestamp)<6e5)return e}const a=[],s=yield this.generatePerformanceInsights(e);a.push({name:"Performance",description:"Current performance analysis and trends",priority:1,insights:s});const r=yield this.generateUsageInsights(e);a.push({name:"Usage Patterns",description:"Analysis of your usage patterns and behavior",priority:2,insights:r});const l=yield this.generateTransportInsights(e);return a.push({name:"Transport Analysis",description:"Transport performance and optimization opportunities",priority:3,insights:l}),this.insightCache.set(o,a),a})}generatePerformanceInsights(e){return t(this,void 0,void 0,function*(){const t=[],n=e.performanceMetrics;return n.averageLatency<200?t.push({id:"low-latency",title:"Excellent Response Time",description:`Your average response time of ${n.averageLatency}ms is excellent.`,type:"positive",confidence:.9,data:{latency:n.averageLatency,timestamp:Date.now()},actionable:!1,related:[]}):n.averageLatency>500&&t.push({id:"high-latency",title:"High Response Time Detected",description:`Your average response time of ${n.averageLatency}ms could be improved.`,type:"warning",confidence:.85,data:{latency:n.averageLatency,timestamp:Date.now()},actionable:!0,related:[]}),n.errorRate<.01?t.push({id:"low-error-rate",title:"Low Error Rate",description:`Your error rate of ${(100*n.errorRate).toFixed(2)}% is very good.`,type:"positive",confidence:.9,data:{errorRate:n.errorRate,timestamp:Date.now()},actionable:!1,related:[]}):n.errorRate>.05&&t.push({id:"high-error-rate",title:"High Error Rate",description:`Your error rate of ${(100*n.errorRate).toFixed(2)}% needs attention.`,type:"critical",confidence:.95,data:{errorRate:n.errorRate,timestamp:Date.now()},actionable:!0,related:[]}),t})}generateUsageInsights(e){return t(this,void 0,void 0,function*(){const t=[],n=e.userBehavior;return t.push({id:"usage-frequency",title:"Usage Pattern Analysis",description:`Your usage frequency is ${n.usageFrequency}. ${this.getUsageFrequencyAdvice(n.usageFrequency)}`,type:"neutral",confidence:.8,data:{frequency:n.usageFrequency,timestamp:Date.now()},actionable:"medium"!==n.usageFrequency,related:[]}),n.peakUsageHours.length>0&&t.push({id:"peak-usage",title:"Peak Usage Hours",description:`Your peak usage occurs during hours: ${n.peakUsageHours.join(", ")}. Consider optimizing for these times.`,type:"neutral",confidence:.7,data:{peakHours:n.peakUsageHours,timestamp:Date.now()},actionable:!0,related:[]}),t})}generateTransportInsights(e){return t(this,void 0,void 0,function*(){const t=[],n=e.performanceMetrics.transportUsage,i=Object.values(n).reduce((e,t)=>e+t,0),o=Object.entries(n).reduce((e,t)=>n[e[0]]>n[t[0]]?e:t);if(i>0){const e=n[o[0]]/i*100;e>80?t.push({id:"transport-concentration",title:"Heavy Reliance on Single Transport",description:`You're using ${o[0]} for ${e.toFixed(1)}% of requests. Consider load balancing.`,type:"warning",confidence:.8,data:{distribution:n,dominant:o[0],timestamp:Date.now()},actionable:!0,related:[]}):t.push({id:"balanced-transport-usage",title:"Good Transport Distribution",description:"Your transport usage is well balanced across available options.",type:"positive",confidence:.75,data:{distribution:n,timestamp:Date.now()},actionable:!1,related:[]})}return t})}generatePredictiveAlerts(e){return t(this,void 0,void 0,function*(){const t=[],n=this.analyzePerformanceTrend(e);return n.declining&&n.severity>.7&&t.push({id:`perf-degradation-${Date.now()}`,type:"performance_degradation",severity:"warning",probability:n.severity,timeframe:"24h",description:"Performance degradation trend detected. Response times may increase significantly.",preventiveActions:[],triggers:["increasing_latency","error_rate_rise"]}),e.performanceMetrics.errorRate>.1&&t.push({id:`transport-failure-${Date.now()}`,type:"transport_failure",severity:"error",probability:Math.min(2*e.performanceMetrics.errorRate,.9),timeframe:"1h",description:`${e.currentTransport} transport showing high error rate. Failure risk is elevated.`,preventiveActions:[],triggers:["high_error_rate","connection_instability"]}),t})}analyzePerformanceTrend(e){const t=e.performanceMetrics.averageLatency,n=e.performanceMetrics.errorRate,i=(Math.min(t/1e3,1)+Math.min(10*n,1))/2;return{declining:i>.5,severity:i}}getUsageFrequencyAdvice(e){switch(e){case"low":return"Consider using FileSystem transport for better offline capability.";case"high":return"WebSocket transport might provide better performance for your intensive usage.";default:return"Your current configuration should work well for your usage patterns."}}generateInsightCacheKey(e){return`insights-${e.sessionId}-${e.currentTransport}-${Math.floor(Date.now()/6e5)}`}initializePredictionModels(){this.predictionModels.set("performance_trend",{type:"linear_regression",features:["latency","error_rate","throughput"],trained:!1}),this.predictionModels.set("failure_prediction",{type:"classification",features:["error_rate","latency_variance","connection_failures"],trained:!1})}trackRecommendationEffectiveness(e,t){const n=this.appliedRecommendations.get(e);n&&(n.effectiveness=t,n.appliedAt=new Date,console.log(`Recommendation ${e} effectiveness: ${t}`))}getRecommendationStats(){const e=Array.from(this.appliedRecommendations.values()).filter(e=>e.appliedAt),t=e.filter(e=>void 0!==e.effectiveness),n={};return e.forEach(e=>{n[e.type]=(n[e.type]||0)+1}),{total:this.appliedRecommendations.size,applied:e.length,averageEffectiveness:t.length>0?t.reduce((e,t)=>e+(t.effectiveness||0),0)/t.length:0,byType:n}}}class Q extends e.Component{constructor(e,t={}){super(),this.plugin=e,this.config=Object.assign({enableOnboarding:!0,enableDashboard:!0,enableRecommendations:!0,enableAdvancedSettings:!0,autoShowOnboarding:!e.settings.onboardingComplete},t),this.recommendationEngine=new K}onload(){return t(this,void 0,void 0,function*(){console.log("Phase 3 Integration loading..."),this.registerCommands(),yield this.setupComponents(),this.config.autoShowOnboarding&&this.showOnboarding(),this.config.enableRecommendations&&this.startRecommendationEngine(),console.log("Phase 3 Integration loaded successfully")})}onunload(){console.log("Phase 3 Integration unloading..."),this.cleanup()}registerCommands(){this.config.enableOnboarding&&this.plugin.addCommand({id:"show-onboarding",name:"Show Setup Wizard",callback:()=>this.showOnboarding()}),this.config.enableDashboard&&this.plugin.addCommand({id:"show-dashboard",name:"Show Transport Dashboard",callback:()=>this.showDashboard()}),this.config.enableAdvancedSettings&&this.plugin.addCommand({id:"show-advanced-settings",name:"Show Advanced Settings",callback:()=>this.showAdvancedSettings()}),this.config.enableRecommendations&&this.plugin.addCommand({id:"show-recommendations",name:"Show AI Recommendations",callback:()=>this.showRecommendations()}),this.plugin.addCommand({id:"quick-optimize",name:"Quick Performance Optimization",callback:()=>this.quickOptimize()})}setupComponents(){return t(this,void 0,void 0,function*(){this.loadPhase3Styles(),this.config.enableDashboard&&this.setupDashboard(),this.config.enableAdvancedSettings&&this.setupAdvancedSettings()})}loadPhase3Styles(){if(document.getElementById("vaultpilot-phase3-styles"))return;const e=document.createElement("style");e.id="vaultpilot-phase3-styles",e.textContent="\n/* VaultPilot Phase 3 Component Styles */\n\n/* Onboarding Wizard Styles */\n.vaultpilot-onboarding-modal {\n  width: 600px;\n  max-width: 90vw;\n}\n\n.vaultpilot-onboarding {\n  max-height: 80vh;\n  overflow-y: auto;\n}\n\n.onboarding-header {\n  text-align: center;\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid var(--background-modifier-border);\n}\n\n.onboarding-subtitle {\n  color: var(--text-muted);\n  margin-top: 5px;\n}\n\n.onboarding-progress {\n  margin-bottom: 25px;\n}\n\n.progress-steps {\n  display: flex;\n  justify-content: center;\n  gap: 15px;\n  margin-bottom: 15px;\n}\n\n.progress-step {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  font-size: 14px;\n  transition: all 0.3s ease;\n}\n\n.progress-step.active {\n  background-color: var(--interactive-accent);\n  color: var(--text-on-accent);\n}\n\n.progress-step.completed {\n  background-color: var(--color-green);\n  color: white;\n}\n\n.progress-step.inactive {\n  background-color: var(--background-modifier-border);\n  color: var(--text-muted);\n}\n\n.progress-bar {\n  height: 4px;\n  background-color: var(--background-modifier-border);\n  border-radius: 2px;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: var(--interactive-accent);\n  transition: width 0.3s ease;\n}\n\n.onboarding-step-container {\n  min-height: 300px;\n  margin-bottom: 20px;\n}\n\n.onboarding-step {\n  padding: 20px 0;\n}\n\n.onboarding-navigation {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 10px;\n  padding-top: 20px;\n  border-top: 1px solid var(--background-modifier-border);\n}\n\n/* Transport Dashboard Styles */\n.transport-dashboard {\n  padding: 20px;\n  max-width: 100%;\n  overflow-x: auto;\n}\n\n.dashboard-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 25px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid var(--background-modifier-border);\n}\n\n.status-card {\n  background: var(--background-secondary);\n  border: 1px solid var(--background-modifier-border);\n  border-radius: 8px;\n  padding: 16px;\n  margin: 8px 0;\n}\n\n.status-card.healthy {\n  border-left: 4px solid var(--color-green);\n}\n\n.status-card.warning {\n  border-left: 4px solid var(--color-orange);\n}\n\n.status-card.error {\n  border-left: 4px solid var(--color-red);\n}\n\n.metrics-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 15px;\n  margin: 20px 0;\n}\n\n.metric-card {\n  background: var(--background-primary);\n  border: 1px solid var(--background-modifier-border);\n  border-radius: 6px;\n  padding: 15px;\n  text-align: center;\n}\n\n.metric-value {\n  font-size: 24px;\n  font-weight: bold;\n  color: var(--interactive-accent);\n}\n\n.metric-label {\n  font-size: 12px;\n  color: var(--text-muted);\n  margin-top: 5px;\n}\n\n/* Advanced Settings Styles */\n.advanced-settings {\n  padding: 20px;\n}\n\n.settings-section {\n  margin-bottom: 30px;\n  padding-bottom: 20px;\n  border-bottom: 1px solid var(--background-modifier-border);\n}\n\n.settings-section:last-child {\n  border-bottom: none;\n}\n\n.section-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 15px;\n}\n\n.section-title {\n  font-size: 16px;\n  font-weight: 600;\n  color: var(--text-normal);\n}\n\n.profile-manager {\n  background: var(--background-secondary);\n  border-radius: 8px;\n  padding: 15px;\n  margin: 15px 0;\n}\n\n.profiles-list {\n  margin: 15px 0;\n}\n\n.profile-item {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 8px 12px;\n  margin: 5px 0;\n  background: var(--background-primary);\n  border: 1px solid var(--background-modifier-border);\n  border-radius: 4px;\n}\n\n.profile-item.active {\n  border-color: var(--interactive-accent);\n  background: var(--background-modifier-hover);\n}\n\n.config-group {\n  background: var(--background-secondary);\n  border-radius: 6px;\n  padding: 15px;\n  margin: 10px 0;\n}\n\n.config-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin: 10px 0;\n}\n\n.validation-status {\n  font-size: 12px;\n  padding: 4px 8px;\n  border-radius: 4px;\n  margin-left: 10px;\n}\n\n.validation-status.valid {\n  background: var(--background-modifier-success);\n  color: var(--color-green);\n}\n\n.validation-status.invalid {\n  background: var(--background-modifier-error);\n  color: var(--color-red);\n}\n\n/* Modal Styles */\n.vaultpilot-phase3-modal {\n  width: 700px;\n  max-width: 95vw;\n}\n\n.modal-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n  padding-bottom: 15px;\n  border-bottom: 1px solid var(--background-modifier-border);\n}\n\n.modal-actions {\n  display: flex;\n  gap: 10px;\n  margin-top: 20px;\n  padding-top: 15px;\n  border-top: 1px solid var(--background-modifier-border);\n}\n\n/* Recommendation Engine Styles */\n.recommendations-container {\n  margin: 20px 0;\n}\n\n.recommendation-card {\n  background: var(--background-secondary);\n  border: 1px solid var(--background-modifier-border);\n  border-radius: 8px;\n  padding: 16px;\n  margin: 12px 0;\n}\n\n.recommendation-card.high-priority {\n  border-left: 4px solid var(--color-red);\n}\n\n.recommendation-card.medium-priority {\n  border-left: 4px solid var(--color-orange);\n}\n\n.recommendation-card.low-priority {\n  border-left: 4px solid var(--color-green);\n}\n\n.recommendation-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.recommendation-title {\n  font-weight: 600;\n  color: var(--text-normal);\n}\n\n.recommendation-actions {\n  display: flex;\n  gap: 8px;\n  margin-top: 15px;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n  .vaultpilot-onboarding-modal,\n  .vaultpilot-phase3-modal {\n    width: 95vw;\n  }\n  \n  .metrics-grid {\n    grid-template-columns: 1fr;\n  }\n  \n  .dashboard-header,\n  .modal-header {\n    flex-direction: column;\n    gap: 10px;\n    text-align: center;\n  }\n  \n  .config-row {\n    flex-direction: column;\n    align-items: flex-start;\n    gap: 10px;\n  }\n}\n",document.head.appendChild(e)}setupDashboard(){console.log("Dashboard setup ready")}setupAdvancedSettings(){console.log("Advanced settings setup ready")}showOnboarding(){this.config.enableOnboarding?(this.onboardingWizard&&this.onboardingWizard.close(),this.onboardingWizard=new U(this.plugin.app,this.plugin),this.onboardingWizard.open()):new e.Notice("Onboarding is disabled")}showDashboard(){if(!this.config.enableDashboard)return void new e.Notice("Dashboard is disabled");new J(this.plugin).open()}showAdvancedSettings(){if(!this.config.enableAdvancedSettings)return void new e.Notice("Advanced settings are disabled");new Y(this.plugin).open()}showRecommendations(){return t(this,void 0,void 0,function*(){if(this.config.enableRecommendations){new e.Notice("Generating AI recommendations...");try{const t=yield this.buildRecommendationContext(),n=yield this.recommendationEngine.generateRecommendations(t);if(n.length>0){new G(this.plugin,n,this.recommendationEngine).open()}else new e.Notice("No recommendations available at this time")}catch(t){console.error("Failed to generate recommendations:",t),new e.Notice("Failed to generate recommendations")}}else new e.Notice("Recommendations are disabled")})}quickOptimize(){return t(this,void 0,void 0,function*(){new e.Notice("Running quick optimization...");try{const t=yield this.buildRecommendationContext(),n=(yield this.recommendationEngine.generateRecommendations(t)).filter(e=>"easy"===e.implementation.difficulty&&e.implementation.steps.some(e=>"automatic"===e.action));if(n.length>0){const t=n[0];yield this.applyRecommendation(t),new e.Notice(`✅ Applied: ${t.title}`)}else new e.Notice('No quick optimizations available. Use "Show AI Recommendations" for manual optimizations.')}catch(t){console.error("Quick optimization failed:",t),new e.Notice("Quick optimization failed")}})}buildRecommendationContext(){return t(this,void 0,void 0,function*(){return{sessionId:`session-${Date.now()}`,timestamp:new Date,currentTransport:T.HTTP,availableTransports:[T.HTTP,T.WEBSOCKET,T.FILESYSTEM],performanceMetrics:{averageLatency:150+100*Math.random(),errorRate:.05*Math.random(),throughput:100+50*Math.random(),reliability:.95+.05*Math.random(),transportUsage:{[T.HTTP]:.7,[T.WEBSOCKET]:.25,[T.FILESYSTEM]:.05},timeWindow:"1h"},userBehavior:{usageFrequency:"medium",peakUsageHours:[9,10,11,14,15,16],preferredFeatures:["dashboard","recommendations"],errorTolerance:"medium",performanceSensitivity:"medium"},environmentContext:{platform:"obsidian",connectivity:"good",bandwidth:50,latency:30,stability:.95}}})}applyRecommendation(e){return t(this,void 0,void 0,function*(){try{console.log(`Applying recommendation: ${e.title}`);const t=e.implementation.steps.filter(e=>"automatic"===e.action);for(const e of t)switch(e.id){case"switch-transport":console.log("Switching transport as recommended");break;case"enable-pooling":console.log("Enabling connection pooling");break;case"enable-monitoring":console.log("Enabling enhanced monitoring");break;default:console.log(`Unknown automatic step: ${e.id}`)}return this.recommendationEngine.trackRecommendationEffectiveness(e.id,.8),!0}catch(e){return console.error("Failed to apply recommendation:",e),!1}})}startRecommendationEngine(){console.log("Starting recommendation engine..."),this.generateBackgroundRecommendations(),setInterval(()=>{this.generateBackgroundRecommendations()},18e5)}generateBackgroundRecommendations(){return t(this,void 0,void 0,function*(){try{const t=yield this.buildRecommendationContext(),n=yield this.recommendationEngine.generateRecommendations(t),i=n.filter(e=>"critical"===e.priority);i.length>0&&new e.Notice(`⚠️ ${i.length} critical optimization(s) available. Use Command Palette > "Show AI Recommendations"`),console.log(`Generated ${n.length} recommendations (${i.length} critical)`)}catch(e){console.error("Background recommendation generation failed:",e)}})}cleanup(){this.onboardingWizard&&this.onboardingWizard.close(),this.transportDashboard&&this.transportDashboard.unload(),this.advancedSettings&&this.advancedSettings.unload()}showOnboardingIfNeeded(){return t(this,void 0,void 0,function*(){return!(this.plugin.settings.onboardingComplete||!this.config.enableOnboarding)&&(this.showOnboarding(),!0)})}getRecommendationEngine(){return this.recommendationEngine}refreshDashboard(){return t(this,void 0,void 0,function*(){this.transportDashboard&&console.log("Refreshing dashboard...")})}}class J extends e.Modal{constructor(e){super(e.app),this.plugin=e,this.modalEl.addClass("dashboard-modal")}onOpen(){const{contentEl:e}=this;e.empty(),this.dashboard=new B(e,this.plugin),this.dashboard.load()}onClose(){this.dashboard&&this.dashboard.unload();const{contentEl:e}=this;e.empty()}}class Y extends e.Modal{constructor(e){super(e.app),this.plugin=e,this.modalEl.addClass("advanced-settings-modal")}onOpen(){const{contentEl:e}=this;e.empty(),this.settings=new j(e,this.plugin),this.settings.load()}onClose(){this.settings&&this.settings.unload();const{contentEl:e}=this;e.empty()}}class G extends e.Modal{constructor(e,t,n){super(e.app),this.plugin=e,this.recommendations=t,this.engine=n,this.modalEl.addClass("recommendations-modal")}onOpen(){const{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"🤖 AI-Powered Recommendations"}),e.createEl("p",{text:"Here are personalized recommendations to optimize your VaultPilot experience:",cls:"recommendations-subtitle"});const t=e.createDiv("recommendations-list");this.recommendations.forEach((e,n)=>{this.renderRecommendation(t,e,n)});const n=e.createDiv("recommendations-footer");n.createEl("p",{text:`Generated ${this.recommendations.length} recommendations based on your usage patterns`,cls:"recommendations-stats"});n.createEl("button",{text:"Close",cls:"mod-cta"}).addEventListener("click",()=>this.close())}renderRecommendation(e,n,i){const o=e.createDiv("recommendation-item");o.addClass(`priority-${n.priority}`);o.createDiv("rec-header").createEl("h3",{text:n.title}).createEl("span",{text:n.priority.toUpperCase(),cls:`priority-badge ${n.priority}`}),o.createEl("p",{text:n.description,cls:"rec-description"});const a=o.createDiv("rec-impact");a.createEl("h4",{text:"Expected Impact:"});const s=a.createEl("ul");s.createEl("li",{text:`Performance: +${n.expectedImpact.performanceImprovement}%`}),s.createEl("li",{text:`Error Reduction: ${n.expectedImpact.errorReduction}%`}),s.createEl("li",{text:`Reliability: +${n.expectedImpact.reliabilityImprovement}%`}),s.createEl("li",{text:`Confidence: ${(100*n.expectedImpact.confidenceScore).toFixed(0)}%`});const r=o.createDiv("rec-implementation");if(r.createEl("h4",{text:"Implementation:"}),r.createEl("p",{text:`Difficulty: ${n.implementation.difficulty} | Time: ${n.implementation.estimatedTime}`}),n.implementation.steps.length>0){const e=r.createEl("ol");n.implementation.steps.forEach(t=>{const n=e.createEl("li");n.createEl("strong",{text:t.title}),n.createSpan({text:` - ${t.description}`}),"automatic"===t.action&&n.createSpan({text:" (Automatic)",cls:"step-automatic"})})}const l=o.createDiv("rec-actions");if(n.implementation.steps.some(e=>"automatic"===e.action)){const e=l.createEl("button",{text:"Apply Automatically",cls:"mod-cta"});e.addEventListener("click",()=>t(this,void 0,void 0,function*(){e.disabled=!0,e.textContent="Applying...";try{(yield this.applyRecommendation(n))?(e.textContent="✅ Applied",e.removeClass("mod-cta"),e.addClass("mod-success")):(e.textContent="❌ Failed",e.disabled=!1)}catch(t){e.textContent="❌ Error",e.disabled=!1}}))}l.createEl("button",{text:"Dismiss",cls:"mod-muted"}).addEventListener("click",()=>{o.style.display="none"});const c=o.createDiv("rec-rationale"),d=c.createEl("button",{text:"Show Rationale",cls:"rationale-toggle"}),u=c.createDiv("rationale-content");u.style.display="none",u.createEl("p",{text:n.rationale}),d.addEventListener("click",()=>{"none"===u.style.display?(u.style.display="block",d.textContent="Hide Rationale"):(u.style.display="none",d.textContent="Show Rationale")})}applyRecommendation(n){return t(this,void 0,void 0,function*(){try{return yield new Promise(e=>setTimeout(e,1e3)),this.engine.trackRecommendationEffectiveness(n.id,.8),new e.Notice(`✅ Applied recommendation: ${n.title}`),!0}catch(t){return console.error("Failed to apply recommendation:",t),new e.Notice(`❌ Failed to apply recommendation: ${n.title}`),!1}})}onClose(){const{contentEl:e}=this;e.empty()}}class X extends e.Component{constructor(e){super(),this.activeProgress=new Map,this.progressContainer=null,this.updateInterval=null,this.plugin=e,this.app=e.app,this.initializeContainer()}initializeContainer(){this.progressContainer=document.createElement("div"),this.progressContainer.className="vaultpilot-progress-container",this.progressContainer.style.cssText="\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            z-index: 10000;\n            pointer-events: none;\n            max-width: 400px;\n        ",document.body.appendChild(this.progressContainer)}showProgress(e){this.activeProgress.set(e.id,e),this.renderProgress(e),e.timeout&&setTimeout(()=>{this.hideProgress(e.id)},e.timeout)}updateProgress(e,t){const n=this.activeProgress.get(e);if(n){const i=Object.assign(Object.assign({},n),t);this.activeProgress.set(e,i),this.renderProgress(i)}}hideProgress(e){this.activeProgress.delete(e);const t=document.getElementById(`progress-${e}`);t&&(t.style.animation="slideOutRight 0.3s ease-in",setTimeout(()=>{t.remove()},300))}renderProgress(e){var t;let n=document.getElementById(`progress-${e.id}`);n?this.updateProgressElement(n,e):(n=this.createProgressElement(e),null===(t=this.progressContainer)||void 0===t||t.appendChild(n))}createProgressElement(e){const t=document.createElement("div");return t.id=`progress-${e.id}`,t.className="vaultpilot-progress-item",t.style.cssText="\n            background: var(--background-primary);\n            border: 1px solid var(--background-modifier-border);\n            border-radius: 8px;\n            padding: 12px 16px;\n            margin-bottom: 8px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            animation: slideInRight 0.3s ease-out;\n            pointer-events: auto;\n            min-width: 300px;\n        ",this.updateProgressElement(t,e),t}updateProgressElement(e,t){const n=t.percentage||0,i=t.eta?this.formatETA(t.eta):"";if(e.innerHTML=`\n            <div class="progress-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;">\n                <div class="progress-title" style="font-weight: 600; color: var(--text-normal);">\n                    ${t.title}\n                </div>\n                ${t.cancelable?'<button class="progress-cancel" style="background: none; border: none; color: var(--text-muted); cursor: pointer;">×</button>':""}\n            </div>\n            ${t.message?`<div class="progress-message" style="color: var(--text-muted); font-size: 0.9em; margin-bottom: 8px;">${t.message}</div>`:""}\n            <div class="progress-bar-container" style="background: var(--background-modifier-border); border-radius: 4px; height: 6px; overflow: hidden;">\n                <div class="progress-bar" style="\n                    background: var(--interactive-accent);\n                    height: 100%;\n                    width: ${n}%;\n                    transition: width 0.3s ease;\n                    border-radius: 4px;\n                "></div>\n            </div>\n            <div class="progress-info" style="display: flex; justify-content: space-between; margin-top: 8px; font-size: 0.8em; color: var(--text-muted);">\n                <span>${Math.round(n)}%</span>\n                ${i?`<span>ETA: ${i}</span>`:""}\n            </div>\n        `,t.cancelable){const n=e.querySelector(".progress-cancel");null==n||n.addEventListener("click",()=>{this.hideProgress(t.id),this.plugin.app.workspace.trigger("vaultpilot:progress-cancelled",t.id)})}}formatETA(e){if(e<60)return`${Math.round(e)}s`;if(e<3600){return`${Math.floor(e/60)}m ${Math.round(e%60)}s`}return`${Math.floor(e/3600)}h ${Math.floor(e%3600/60)}m`}getActiveProgress(){return Array.from(this.activeProgress.values())}clearAllProgress(){for(const e of this.activeProgress.keys())this.hideProgress(e)}onunload(){this.progressContainer&&this.progressContainer.remove(),this.updateInterval&&clearInterval(this.updateInterval)}}class Z extends e.Component{constructor(e){super(),this.cache=new Map,this.requestQueue=new Map,this.maxCacheSize=100,this.defaultTTL=3e5,this.plugin=e,this.initializeMetrics(),this.startCleanupInterval()}initializeMetrics(){this.metrics={totalRequests:0,cacheHits:0,cacheMisses:0,averageResponseTime:0,slowestResponse:0,fastestResponse:1/0,currentCacheSize:0,memoryUsage:0}}optimizedRequest(e,n){return t(this,arguments,void 0,function*(e,t,n={}){const i=performance.now();if(this.metrics.totalRequests++,!n.skipCache){const t=this.getFromCache(e);if(t)return this.metrics.cacheHits++,this.updateResponseTimeMetrics(performance.now()-i),t}this.metrics.cacheMisses++;const o=this.requestQueue.get(e);if(o)return o;const a=this.executeRequest(t,e,n.ttl||this.defaultTTL);this.requestQueue.set(e,a);try{const e=yield a;return this.updateResponseTimeMetrics(performance.now()-i),e}finally{this.requestQueue.delete(e)}})}executeRequest(e,n,i){return t(this,void 0,void 0,function*(){try{const t=yield e();return this.setCache(n,t,i),t}catch(e){throw e}})}getFromCache(e){const t=this.cache.get(e);return t?Date.now()-t.timestamp>t.ttl?(this.cache.delete(e),null):(t.hitCount++,t.data):null}setCache(e,t,n){this.cache.size>=this.maxCacheSize&&this.evictLeastUsed();const i={data:t,timestamp:Date.now(),ttl:n,hitCount:0,size:this.estimateSize(t)};this.cache.set(e,i),this.updateCacheMetrics()}evictLeastUsed(){let e="",t=1/0;for(const[n,i]of this.cache.entries())i.hitCount<t&&(t=i.hitCount,e=n);e&&this.cache.delete(e)}estimateSize(e){return 2*JSON.stringify(e).length}updateResponseTimeMetrics(e){const t=this.metrics.averageResponseTime,n=this.metrics.totalRequests;this.metrics.averageResponseTime=(t*(n-1)+e)/n,e>this.metrics.slowestResponse&&(this.metrics.slowestResponse=e),e<this.metrics.fastestResponse&&(this.metrics.fastestResponse=e)}updateCacheMetrics(){this.metrics.currentCacheSize=this.cache.size,this.metrics.memoryUsage=Array.from(this.cache.values()).reduce((e,t)=>e+t.size,0)}startCleanupInterval(){setInterval(()=>{this.cleanupExpiredEntries()},6e4)}cleanupExpiredEntries(){const e=Date.now();for(const[t,n]of this.cache.entries())e-n.timestamp>n.ttl&&this.cache.delete(t);this.updateCacheMetrics()}getMetrics(){return Object.assign({},this.metrics)}getCacheHitRate(){const e=this.metrics.cacheHits+this.metrics.cacheMisses;return e>0?this.metrics.cacheHits/e*100:0}clearCache(){this.cache.clear(),this.updateCacheMetrics()}setCacheConfig(e,t){this.maxCacheSize=e,this.defaultTTL=t}onunload(){this.clearCache()}}class ee extends e.Component{constructor(e){super(),this.ws=null,this.reconnectInterval=null,this.isConnected=!1,this.messageHandlers=new Map,this.plugin=e,this.setupMessageHandlers()}setupMessageHandlers(){this.messageHandlers.set("progress_update",e=>{const t=this.plugin.enhancementManager;(null==t?void 0:t.progressIndicator)&&t.progressIndicator.updateProgress(e.id,{percentage:e.percentage,message:e.message,eta:e.eta})}),this.messageHandlers.set("performance_stats",e=>{console.log("Performance stats:",e)}),this.messageHandlers.set("ping",()=>{this.send({type:"pong",data:{},timestamp:Date.now()})})}connect(e){if(!this.ws||this.ws.readyState!==WebSocket.OPEN)try{this.ws=new WebSocket(e),this.ws.onopen=()=>{this.isConnected=!0,console.log("VaultPilot WebSocket connected"),this.reconnectInterval&&(clearInterval(this.reconnectInterval),this.reconnectInterval=null)},this.ws.onmessage=e=>{try{const t=JSON.parse(e.data);this.handleMessage(t)}catch(e){console.error("Failed to parse WebSocket message:",e)}},this.ws.onclose=()=>{this.isConnected=!1,console.log("VaultPilot WebSocket disconnected"),this.startReconnect(e)},this.ws.onerror=e=>{console.error("VaultPilot WebSocket error:",e)}}catch(t){console.error("Failed to connect WebSocket:",t),this.startReconnect(e)}}handleMessage(e){const t=this.messageHandlers.get(e.type);t&&t(e.data)}startReconnect(e){this.reconnectInterval||(this.reconnectInterval=window.setInterval(()=>{console.log("Attempting to reconnect VaultPilot WebSocket..."),this.connect(e)},5e3))}send(e){return!(!this.ws||this.ws.readyState!==WebSocket.OPEN)&&(this.ws.send(JSON.stringify(e)),!0)}disconnect(){this.reconnectInterval&&(clearInterval(this.reconnectInterval),this.reconnectInterval=null),this.ws&&(this.ws.close(),this.ws=null),this.isConnected=!1}isSocketConnected(){return this.isConnected}onunload(){this.disconnect()}}class te extends e.Component{constructor(e){super(),this.isInitialized=!1,this.plugin=e,this.progressIndicator=new X(e),this.responseOptimizer=new Z(e),this.webSocketHandler=new ee(e)}initialize(){return t(this,void 0,void 0,function*(){if(!this.isInitialized)try{this.addChild(this.progressIndicator),this.addChild(this.responseOptimizer),this.addChild(this.webSocketHandler);const e=this.plugin.settings.backendUrl.replace(/^http/,"ws")+"/api/obsidian/ws/enhanced";this.webSocketHandler.connect(e),this.isInitialized=!0,console.log("VaultPilot Enhancement Manager initialized")}catch(e){console.error("Failed to initialize Enhancement Manager:",e)}})}showProgress(e){this.progressIndicator.showProgress(e)}optimizedAPICall(e,n,i){return t(this,void 0,void 0,function*(){return this.responseOptimizer.optimizedRequest(e,n,i)})}getPerformanceMetrics(){return this.responseOptimizer.getMetrics()}getCacheHitRate(){return this.responseOptimizer.getCacheHitRate()}clearCache(){this.responseOptimizer.clearCache()}isWebSocketConnected(){return this.webSocketHandler.isSocketConnected()}onunload(){this.isInitialized=!1,super.onunload()}}class ne{constructor(e){this.shortcuts=new Map,this.contextMenuEnabled=!0,this.plugin=e,this.app=e.app,this.initializeDefaultShortcuts()}initializeDefaultShortcuts(){[{key:"Enter",modifiers:["Ctrl","Shift"],command:"vaultpilot:open-chat",description:"Open VaultPilot Chat",context:"global"},{key:"KeyS",modifiers:["Ctrl","Shift"],command:"vaultpilot:smart-search",description:"Smart Search",context:"global"},{key:"KeyC",modifiers:["Ctrl","Shift"],command:"vaultpilot:quick-chat",description:"Quick Chat with Selection",context:"editor"},{key:"Space",modifiers:["Ctrl"],command:"vaultpilot:copilot-complete",description:"Get AI Completion",context:"editor"},{key:"KeyW",modifiers:["Ctrl","Shift"],command:"vaultpilot:execute-workflow",description:"Execute Workflow",context:"global"},{key:"KeyA",modifiers:["Ctrl","Shift"],command:"vaultpilot:analyze-vault",description:"Analyze Current Vault",context:"global"},{key:"KeyD",modifiers:["Ctrl","Shift"],command:"vaultpilot:open-dashboard",description:"Open VaultPilot Dashboard",context:"global"},{key:"KeyP",modifiers:["Ctrl","Shift"],command:"vaultpilot:plan-my-day",description:"Plan My Day",context:"global"},{key:"KeyV",modifiers:["Ctrl","Shift"],command:"vaultpilot:vault-structure",description:"View Vault Structure",context:"global"},{key:"KeyF",modifiers:["Ctrl","Shift"],command:"vaultpilot:file-operations",description:"File Operations",context:"global"},{key:"KeyO",modifiers:["Ctrl","Shift"],command:"vaultpilot:vault-organizer",description:"Vault Organizer",context:"global"},{key:"KeyB",modifiers:["Ctrl","Shift"],command:"vaultpilot:batch-operations",description:"Batch Operations",context:"global"},{key:"KeyH",modifiers:["Ctrl","Shift"],command:"vaultpilot:show-shortcuts",description:"Show Keyboard Shortcuts",context:"global"},{key:"KeyR",modifiers:["Ctrl","Shift"],command:"vaultpilot:refresh-cache",description:"Refresh Cache",context:"global"},{key:"KeyM",modifiers:["Ctrl","Shift"],command:"vaultpilot:performance-metrics",description:"Show Performance Metrics",context:"global"},{key:"KeyG",modifiers:["Ctrl","Shift"],command:"vaultpilot:agent-marketplace",description:"Agent Marketplace",context:"global"},{key:"KeyE",modifiers:["Ctrl","Shift"],command:"vaultpilot:agent-evolution",description:"Agent Evolution Status",context:"global"},{key:"KeyQ",modifiers:["Alt"],command:"vaultpilot:quick-note",description:"Quick Note Creation",context:"global"},{key:"KeyI",modifiers:["Ctrl","Alt"],command:"vaultpilot:insert-template",description:"Insert Template",context:"editor"},{key:"KeyL",modifiers:["Ctrl","Shift"],command:"vaultpilot:link-analyzer",description:"Analyze Links",context:"editor"},{key:"KeyT",modifiers:["Ctrl","Shift"],command:"vaultpilot:tag-manager",description:"Tag Manager",context:"global"},{key:"KeyZ",modifiers:["Ctrl","Shift"],command:"vaultpilot:enhancement-demo",description:"Enhancement Features Demo",context:"global"}].forEach(e=>{this.addShortcut(e)})}addShortcut(e){const t=this.getShortcutKey(e);this.shortcuts.set(t,e)}removeShortcut(e){const t=this.getShortcutKey(e);this.shortcuts.delete(t)}getShortcutKey(e){return`${e.modifiers.sort().join("+")}_${e.key}`}handleKeyDown(e){const t=[];e.ctrlKey&&t.push("Ctrl"),e.shiftKey&&t.push("Shift"),e.altKey&&t.push("Alt"),e.metaKey&&t.push("Meta");const n=e.code,i=`${t.sort().join("+")}_${n}`,o=this.shortcuts.get(i);if(o&&!1!==o.enabled){const t=this.getCurrentContext();if(this.isShortcutValidForContext(o,t))return e.preventDefault(),e.stopPropagation(),this.executeCommand(o.command),!0}return!1}getCurrentContext(){if(this.app.workspace.getActiveViewOfType(e.MarkdownView))return"editor";return document.querySelectorAll(".modal").length>0?"modal":"global"}isShortcutValidForContext(e,t){return!e.context||(e.context===t||"global"===e.context)}executeCommand(t){var n,i;const o=t.replace("vaultpilot:","");switch(o){case"open-chat":this.plugin.openChatModal();break;case"smart-search":this.plugin.openSmartSearchModal();break;case"quick-chat":const t=null===(n=this.app.workspace.getActiveViewOfType(e.MarkdownView))||void 0===n?void 0:n.editor;t&&this.plugin.quickChatWithSelection(t);break;case"copilot-complete":const a=null===(i=this.app.workspace.getActiveViewOfType(e.MarkdownView))||void 0===i?void 0:i.editor;a&&this.plugin.getCopilotCompletion(a);break;case"execute-workflow":this.plugin.openWorkflowModal();break;case"analyze-vault":this.plugin.analyzeVault();break;case"open-dashboard":this.plugin.activateFullTabView();break;case"plan-my-day":this.plugin.planMyDay();break;case"vault-structure":this.plugin.openVaultStructureModal();break;case"file-operations":this.plugin.openFileOperationsModal();break;case"vault-organizer":this.plugin.openVaultOrganizerModal();break;case"batch-operations":this.plugin.openBatchOperationsModal();break;case"show-shortcuts":this.showShortcutsHelp();break;case"refresh-cache":this.refreshCache();break;case"performance-metrics":this.showPerformanceMetrics();break;case"agent-marketplace":this.openAgentMarketplace();break;case"agent-evolution":this.showAgentEvolution();break;case"quick-note":this.createQuickNote();break;case"insert-template":this.insertTemplate();break;case"link-analyzer":this.analyzeLinks();break;case"tag-manager":this.openTagManager();break;case"enhancement-demo":this.openEnhancementDemo();break;default:new e.Notice(`Unknown command: ${o}`)}}showShortcutsHelp(){const t=Array.from(this.shortcuts.values()),n=this.generateShortcutsHelpContent(t),i=new e.Modal(this.app);i.titleEl.textContent="VaultPilot Keyboard Shortcuts",i.contentEl.innerHTML=n,i.open()}generateShortcutsHelpContent(e){const t=this.categorizeShortcuts(e);let n='<div class="vaultpilot-shortcuts-help">';for(const[e,i]of Object.entries(t))n+='<div class="shortcut-category">',n+=`<h3>${e}</h3>`,n+='<div class="shortcut-list">',i.forEach(e=>{const t=`${e.modifiers.join(" + ")} + ${e.key.replace("Key","")}`;n+='<div class="shortcut-item">',n+=`<span class="shortcut-keys">${t}</span>`,n+=`<span class="shortcut-desc">${e.description}</span>`,n+="</div>"}),n+="</div></div>";return n+="</div>",n}categorizeShortcuts(e){const t={"Core Features":[],"Vault Management":[],"Agent Features":[],"Quick Actions":[],System:[]};return e.forEach(e=>{const n=e.command.replace("vaultpilot:","");["open-chat","copilot-complete","execute-workflow","analyze-vault"].includes(n)?t["Core Features"].push(e):["vault-structure","file-operations","vault-organizer","batch-operations"].includes(n)?t["Vault Management"].push(e):["agent-marketplace","agent-evolution"].includes(n)?t["Agent Features"].push(e):["quick-note","insert-template","link-analyzer","tag-manager"].includes(n)?t["Quick Actions"].push(e):t.System.push(e)}),t}refreshCache(){new e.Notice("Cache refreshed successfully")}showPerformanceMetrics(){new e.Notice("Performance metrics feature coming soon")}openAgentMarketplace(){new e.Notice("Agent marketplace feature coming soon")}showAgentEvolution(){new e.Notice("Agent evolution status feature coming soon")}createQuickNote(){this.app.vault.create(`Quick Note ${(new Date).toISOString().slice(0,19)}.md`,"# Quick Note\n\n").then(e=>{this.app.workspace.getLeaf().openFile(e)})}insertTemplate(){new e.Notice("Template insertion feature coming soon")}analyzeLinks(){new e.Notice("Link analyzer feature coming soon")}openTagManager(){new e.Notice("Tag manager feature coming soon")}openEnhancementDemo(){Promise.resolve().then(function(){return re}).then(({VaultPilotEnhancementDemo:e})=>{new e(this.app,this.plugin).open()}).catch(t=>{console.error("Failed to load enhancement demo:",t),new e.Notice("Enhancement demo failed to load")})}getShortcuts(){return Array.from(this.shortcuts.values())}isEnabled(){return this.contextMenuEnabled}setEnabled(e){this.contextMenuEnabled=e}}class ie{static createEnhancedCommands(t){return[{id:"vaultpilot-enhanced-chat",name:"Enhanced AI Chat",description:"Open enhanced AI chat with real-time progress",callback:()=>t.openChatModal(),category:"AI Features",priority:1},{id:"vaultpilot-smart-search",name:"Smart Search",description:"AI-powered search with context awareness",callback:()=>t.openSmartSearchModal(),category:"Search",priority:2},{id:"vaultpilot-quick-completion",name:"Quick AI Completion",description:"Get AI completion for current context",editorCallback:e=>t.getCopilotCompletion(e),category:"AI Features",priority:3},{id:"vaultpilot-workflow-enhanced",name:"Enhanced Workflow Execution",description:"Execute workflows with progress tracking",callback:()=>t.openWorkflowModal(),category:"Automation",priority:4},{id:"vaultpilot-vault-analysis",name:"Enhanced Vault Analysis",description:"Comprehensive vault analysis with optimization",callback:()=>t.analyzeVault(),category:"Analytics",priority:5},{id:"vaultpilot-enhancement-demo",name:"Enhancement Features Demo",description:"Demonstrate keyboard shortcuts, progress indicators, and performance features",callback:()=>{Promise.resolve().then(function(){return re}).then(({VaultPilotEnhancementDemo:e})=>{new e(t.app,t).open()}).catch(t=>{console.error("Failed to load enhancement demo:",t),new e.Notice("Enhancement demo failed to load")})},category:"Demo",priority:10}]}}class oe extends e.Plugin{constructor(){super(...arguments),this.websocketConnected=!1,this.copilotEnabled=!1}onload(){return t(this,void 0,void 0,function*(){var t,n,i,d;yield this.loadSettings(),this.loadEnhancedUIStyles(),d=this.app,c=d,this.apiClient=new p(this.settings.backendUrl,this.settings.apiKey),(null===(t=this.settings.vaultManagement)||void 0===t?void 0:t.enableVaultManagement)&&this.initializeVaultManagement(),(null===(n=this.settings.modelSelection)||void 0===n?void 0:n.enabled)&&this.initializeModelSelection().catch(e=>{this.settings.debugMode&&console.warn("Model selection initialization failed during plugin load:",e)});try{let t=yield this.apiClient.healthCheck();if(!t.success&&(null===(i=t.error)||void 0===i?void 0:i.includes("400"))){console.warn("Main health check failed with 400, trying alternative method");const e=yield this.apiClient.simpleHealthCheck();e.success&&e.data&&(t={success:!0,data:{status:e.data.status,version:"unknown"}})}t.success?(new e.Notice("✅ VaultPilot connected to EvoAgentX",3e3),this.settings.enableWebSocket&&this.connectWebSocket()):(console.error("Health check failed:",t.error),new e.Notice("⚠️ EvoAgentX backend offline - some features may not work",5e3))}catch(t){console.error("Health check error:",t),new e.Notice("⚠️ Cannot connect to EvoAgentX backend",5e3)}this.registerView(a,e=>new s(e,this)),this.registerView(r,e=>new l(e,this));const u=this.addRibbonIcon("bot","VaultPilot",e=>{e.ctrlKey||e.metaKey?this.activateFullTabView():this.openChatModal()});u.addClass("vaultpilot-ribbon-class"),u.title="VaultPilot (Ctrl+click for Dashboard)",this.addCommand({id:"open-chat",name:"Open Chat",callback:()=>this.openChatModal()}),this.addCommand({id:"execute-workflow",name:"Execute Workflow",callback:()=>this.openWorkflowModal()}),this.addCommand({id:"analyze-vault",name:"Analyze Current Vault",callback:()=>this.analyzeVault()}),this.addCommand({id:"copilot-complete",name:"Get AI Completion",editorCallback:e=>this.getCopilotCompletion(e)}),this.addCommand({id:"quick-chat",name:"Quick Chat with Selection",editorCallback:e=>this.quickChatWithSelection(e)}),this.addCommand({id:"plan-tasks",name:"Plan Tasks from Note",editorCallback:e=>this.planTasksFromNote(e)}),this.addCommand({id:"plan-my-day",name:"Plan My Day",callback:()=>this.planMyDay()}),this.addCommand({id:"plan-my-day-debug",name:"Plan My Day - Debug Connection",callback:()=>this.debugPlanMyDay()}),this.addCommand({id:"test-model-selection",name:"Test Smart Model Selection",callback:()=>this.testModelSelection()}),this.addCommand({id:"show-model-health",name:"Show Model Health Status",callback:()=>this.showModelHealth()}),this.addCommand({id:"retry-model-selection",name:"Retry Model Selection Initialization",callback:()=>this.retryModelSelectionManual()}),this.addCommand({id:"check-service-status",name:"Check VaultPilot Service Status",callback:()=>this.checkServiceStatus()}),this.addCommand({id:"open-vaultpilot-view",name:"Open VaultPilot View",callback:()=>this.activateView()}),this.addCommand({id:"open-vaultpilot-full-tab",name:"Open VaultPilot Dashboard",callback:()=>this.activateFullTabView()}),this.registerVaultManagementCommands(),this.initializePhase3(),this.initializeEnhancementManager(),this.settings.enableCopilot&&this.settings.enableAutoComplete&&this.registerDomEvent(document,"keyup",this.handleKeyUp.bind(this)),this.addSettingTab(new o(this.app,this))})}onunload(){return t(this,void 0,void 0,function*(){this.app.workspace.detachLeavesOfType(a),this.app.workspace.detachLeavesOfType(r),this.disconnectWebSocket(),yield this.disconnectModelSelection(),this.disablePhase3(),this.disableEnhancementManager()})}connectWebSocket(){this.websocketConnected||this.apiClient.connectWebSocket({onChat:e=>{console.log("WebSocket chat update:",e)},onWorkflowProgress:t=>{new e.Notice(`Workflow: ${t.step}`,2e3)},onCopilot:e=>{this.handleCopilotSuggestion(e)},onVaultSync:e=>{console.log("Vault sync update:",e)},onIntentDebug:e=>{this.settings.showIntentDebug&&this.settings.debugMode&&console.log("Intent debug:",e)},onError:t=>{new e.Notice(`WebSocket error: ${t}`,5e3)},onConnect:()=>{this.websocketConnected=!0,this.settings.debugMode&&new e.Notice("WebSocket connected",2e3)},onDisconnect:()=>{this.websocketConnected=!1,this.settings.debugMode&&new e.Notice("WebSocket disconnected",2e3)}})}disconnectWebSocket(){this.apiClient.disconnectWebSocket(),this.websocketConnected=!1}isWebSocketConnected(){return this.websocketConnected}openChatModal(){new u(this.app,this).open()}openWorkflowModal(){new h(this.app,this).open()}analyzeVault(){return t(this,void 0,void 0,function*(){const t=new e.Notice("Analyzing vault...",0);try{const n=this.app.vault.getMarkdownFiles();let i="";for(const e of n.slice(0,10)){const t=yield this.app.vault.read(e);i+=`=== ${e.name} ===\n${t}\n\n`}const o=yield this.apiClient.analyzeVaultContext({content:i,analysis_type:"insights"});if(t.hide(),!o.success||!o.data)throw new Error(o.error||"Analysis failed");{const t=(new Date).toISOString().split("T")[0],n=`Vault Analysis ${t}.md`;let i=`# Vault Analysis - ${t}\n\n`;i+=`## Analysis\n\n${o.data.analysis}\n\n`,o.data.insights&&o.data.insights.length>0&&(i+="## Key Insights\n\n",o.data.insights.forEach(e=>{i+=`- ${e}\n`}),i+="\n"),o.data.recommendations&&o.data.recommendations.length>0&&(i+="## Recommendations\n\n",o.data.recommendations.forEach(e=>{i+=`- ${e}\n`})),yield this.app.vault.create(n,i),new e.Notice(`Vault analysis saved as ${n}`)}}catch(n){t.hide(),new e.Notice(`Analysis error: ${n instanceof Error?n.message:"Unknown error"}`)}})}getCopilotCompletion(n){return t(this,void 0,void 0,function*(){if(!this.settings.enableCopilot)return void new e.Notice("Copilot is disabled in settings");const t=n.getCursor(),i=n.getLine(t.line).substring(0,t.ch),o=n.getValue();if(o&&0!==o.trim().length)try{const a=yield this.apiClient.getCopilotCompletion({text:o,cursor_position:n.posToOffset(t),file_type:"markdown",context:i});a.success&&a.data?(n.replaceRange(a.data.completion,t),new e.Notice("Completion inserted",2e3)):new e.Notice(`Copilot error: ${a.error}`)}catch(t){new e.Notice(`Copilot error: ${t instanceof Error?t.message:"Unknown error"}`)}else new e.Notice("Cannot complete empty text")})}quickChatWithSelection(n){return t(this,void 0,void 0,function*(){const t=n.getSelection();if(t)try{const i=yield this.apiClient.chat({message:`Please explain or analyze this text: "${t}"`,vault_context:n.getValue()});if(i.success&&i.data){const t=n.getCursor("to"),o=`\n\n**VaultPilot Analysis:**\n${i.data.response}\n\n`;n.replaceRange(o,t),new e.Notice("Analysis inserted",2e3)}else new e.Notice(`Chat error: ${i.error}`)}catch(t){new e.Notice(`Chat error: ${t instanceof Error?t.message:"Unknown error"}`)}else new e.Notice("No text selected")})}planTasksFromNote(n){return t(this,void 0,void 0,function*(){const t=n.getValue(),i=this.app.workspace.getActiveFile();if(!t.trim())return void new e.Notice("No content to analyze");const o=new e.Notice("Planning tasks...",0);try{const n=yield this.apiClient.planTasks({goal:`Create a task plan based on this note: ${(null==i?void 0:i.name)||"Untitled"}`,context:t,timeframe:"1 week"});if(o.hide(),!n.success||!n.data)throw new Error(n.error||"Task planning failed");{const t=(new Date).toISOString().split("T")[0],o=`Task Plan - ${(null==i?void 0:i.basename)||"Untitled"} - ${t}.md`;let a=`# ${n.data.plan.title}\n\n`;a+=`${n.data.plan.description}\n\n`,a+=`**Estimated Duration:** ${n.data.plan.estimated_duration}\n\n`,n.data.plan.tasks&&n.data.plan.tasks.length>0&&(a+="## Tasks\n\n",n.data.plan.tasks.forEach(e=>{const t="completed"===e.status?"[x]":"[ ]";a+=`${t} **${e.title}** (${e.priority} priority)\n`,a+=`   ${e.description}\n`,a+=`   *Estimated time: ${e.estimated_time}*\n\n`})),n.data.milestones&&n.data.milestones.length>0&&(a+="## Milestones\n\n",n.data.milestones.forEach(e=>{a+=`- **${e.title}** (${e.target_date})\n`,a+=`  ${e.description}\n\n`})),yield this.app.vault.create(o,a),new e.Notice(`Task plan saved as ${o}`)}}catch(t){o.hide(),new e.Notice(`Task planning error: ${t instanceof Error?t.message:"Unknown error"}`)}})}planMyDay(){return t(this,void 0,void 0,function*(){var n,i;console.log("🚀 [Plan My Day] Command started");const o=this.app.workspace.getActiveFile();if(!o)return console.warn("⚠️ [Plan My Day] No active file found"),void new e.Notice("No active note—open today's daily note first.");console.log("📁 [Plan My Day] Active file:",{name:o.name,path:o.path,extension:o.extension});const a=new e.Notice("Planning your day with AI...",0);try{console.log("📖 [Plan My Day] Reading file content...");const s=yield this.app.vault.read(o);if(console.log("📝 [Plan My Day] File content read:",{length:s.length,hasContent:s.trim().length>0,firstLine:s.split("\n")[0],lineCount:s.split("\n").length}),console.log("🔍 [Plan My Day] Checking API client..."),console.log("🔗 [Plan My Day] API client status:",{exists:!!this.apiClient,type:typeof this.apiClient,isConnected:this.apiClient?"available":"not available"}),!this.apiClient){const e="API client not initialized. Check VaultPilot settings and connection.";throw console.error("❌ [Plan My Day] Error:",e),new Error(e)}console.log("📤 [Plan My Day] Fetching schedule from EvoAgentX...");const{scheduleMarkdown:r,headline:l}=yield function(e,n){return t(this,void 0,void 0,function*(){var t,i,o;if(console.log("🔄 [Plan My Day] Starting schedule fetch..."),console.log("📝 [Plan My Day] Note text length:",e.length),console.log("🔗 [Plan My Day] API client type:",typeof n),!n){const e="API client is null or undefined";throw console.error("❌ [Plan My Day] Error:",e),new Error(e)}if(!n.planTasks){const e="API client does not have planTasks method";throw console.error("❌ [Plan My Day] Error:",e),console.log("🔍 [Plan My Day] Available methods:",Object.getOwnPropertyNames(n)),new Error(e)}try{console.log("📤 [Plan My Day] Sending request to EvoAgentX...");const a=yield n.planTasks({goal:"Create a daily schedule based on this note content",context:e,timeframe:"1 day"});if(console.log("📥 [Plan My Day] Received response:",{success:a.success,hasData:!!a.data,error:a.error}),console.log("🔍 [Plan My Day] Raw response data:",JSON.stringify(a.data,null,2)),console.log("🔍 [Plan My Day] Response data type:",typeof a.data),console.log("🔍 [Plan My Day] Response data keys:",a.data?Object.keys(a.data):"no data"),!a.success){const e=a.error||"Failed to generate schedule";throw console.error("❌ [Plan My Day] API Error:",e),new Error(e)}if(!a.data){const e="No data in API response";throw console.error("❌ [Plan My Day] Error:",e),console.log("🔍 [Plan My Day] Full response:",a),new Error(e)}const s=a.data.data||a.data;if(console.log("📋 [Plan My Day] Response data structure:",{hasPlan:!!s.plan,planKeys:s.plan?Object.keys(s.plan):null,hasTasks:!!(null===(t=s.plan)||void 0===t?void 0:t.tasks),taskCount:(null===(o=null===(i=s.plan)||void 0===i?void 0:i.tasks)||void 0===o?void 0:o.length)||0}),!s.plan){const e="No plan data in API response";throw console.error("❌ [Plan My Day] Error:",e),console.log("🔍 [Plan My Day] Full response data:",a.data),console.log("🔍 [Plan My Day] Actual data:",s),new Error(e)}const r=s.plan.tasks||[];if(console.log("📝 [Plan My Day] Processing tasks:",r.length),0===r.length)return console.warn("⚠️ [Plan My Day] No tasks in response, creating fallback schedule"),{scheduleMarkdown:"| Time | Task |\n|------|------|\n| 9:00 AM | Plan your day |\n| 10:00 AM | Start working |\n| 12:00 PM | Lunch break |",headline:"📅 Basic schedule created (no tasks found in note)"};let l="| Time | Task |\n|------|------|\n";r.forEach((e,t)=>{var n,i;console.log(`📋 [Plan My Day] Processing task ${t+1}:`,{title:e.title,description:null===(n=e.description)||void 0===n?void 0:n.substring(0,100),priority:e.priority,estimatedTime:e.estimated_time});const o=null===(i=e.description)||void 0===i?void 0:i.match(/(\d{1,2}:\d{2})/),a=o?o[1]:`${9+Math.floor(1.5*t)}:${30*t%60||"00"}`;l+=`| ${a} | ${e.title} |\n`});const c={scheduleMarkdown:l,headline:`✨ Smart schedule created with ${r.length} tasks!`};return console.log("✅ [Plan My Day] Schedule generated successfully:",{markdownLength:l.length,taskCount:r.length,headline:c.headline}),c}catch(e){throw console.error("❌ [Plan My Day] Fetch error:",e),console.error("🔍 [Plan My Day] Error stack:",e instanceof Error?e.stack:"No stack trace"),e instanceof Error?new Error(`Schedule fetch failed: ${e.message}`):new Error(`Schedule fetch failed: ${String(e)}`)}})}(s,this.apiClient);if(console.log("📋 [Plan My Day] Schedule received:",{markdownLength:r.length,headline:l,firstLine:r.split("\n")[0]}),console.log("✅ [Plan My Day] Validating schedule..."),!function(e){console.log("🔍 [Plan My Day] Validating schedule markdown:",{length:e.length,trimmedLength:e.trim().length,isString:"string"==typeof e,preview:e.substring(0,100)});const t=e.trim().length>0;return console.log("✅ [Plan My Day] Validation result:",t),t}(r)){const e="Invalid schedule data received from API";throw console.error("❌ [Plan My Day] Validation failed:",{scheduleMarkdown:r.substring(0,200),length:r.length}),new Error(e)}console.log("📝 [Plan My Day] Injecting schedule into note...");const c=g(s),d=m(s);console.log("🔍 [Plan My Day] Existing sections:",{hasPlanWrapper:!!c,hasScheduleSection:!!d,planContent:null===(n=null==c?void 0:c[2])||void 0===n?void 0:n.substring(0,50),scheduleHeading:null===(i=null==d?void 0:d[1])||void 0===i?void 0:i.substring(0,50)});const u=function(e,t){var n,i,o;console.log("📝 [Plan My Day] Injecting schedule:",{originalLength:e.length,scheduleLength:t.length,hasOriginalContent:e.trim().length>0});const a=g(e);if(a){console.log("🔄 [Plan My Day] Replacing existing plan section with comment wrapper"),console.log("📋 [Plan My Day] Found wrapped plan section:",{startComment:a[1],contentLength:(null===(n=a[2])||void 0===n?void 0:n.length)||0,endComment:a[3]});const[i,o,,s]=a,r=`${o}\n${t}\n${s}`,l=e.replace(i,r);return console.log("✅ [Plan My Day] Plan section replaced within comment wrapper"),l}const s=m(e);if(s){console.log("🔄 [Plan My Day] Replacing existing schedule section"),console.log("📋 [Plan My Day] Found section:",{headingMatch:null===(i=s[1])||void 0===i?void 0:i.substring(0,50),contentMatch:null===(o=s[2])||void 0===o?void 0:o.substring(0,100)});const[n,a]=s,r=a+t,l=e.replace(n,r);return console.log("✅ [Plan My Day] Schedule section replaced"),l}{console.log("➕ [Plan My Day] Adding new plan section with comment wrapper at top");const n=`\x3c!-- vp:plan:start --\x3e\n${t}\n\x3c!-- vp:plan:end --\x3e\n\n`+e;return console.log("✅ [Plan My Day] New plan section with wrapper added at top"),n}}(s,r);console.log("💾 [Plan My Day] Updating file...",{originalLength:s.length,updatedLength:u.length,changed:s!==u}),yield this.app.vault.modify(o,u),console.log("✅ [Plan My Day] File updated successfully"),a.hide();const h=l?`${l} ✅`:"Schedule inserted ✅";console.log("🎉 [Plan My Day] Success:",h),new e.Notice(h)}catch(t){if(console.error("❌ [Plan My Day] Operation failed:",t),console.error("🔍 [Plan My Day] Error details:",{message:t instanceof Error?t.message:String(t),stack:t instanceof Error?t.stack:"No stack trace",type:typeof t,name:t instanceof Error?t.name:"Unknown"}),a.hide(),t instanceof Error){const n=t.message;console.log("🔍 [Plan My Day] Analyzing error message:",n),n.includes("API client not initialized")?(console.error("❌ [Plan My Day] API client not initialized"),new e.Notice("Planning error: VaultPilot not connected to EvoAgentX. Check settings and restart plugin.")):n.includes("does not have planTasks method")?(console.error("❌ [Plan My Day] API client missing planTasks method"),new e.Notice("Planning error: EvoAgentX API client outdated. Please update VaultPilot plugin.")):n.includes("JSON")||n.includes("Invalid schedule data")?(console.error("❌ [Plan My Day] Invalid response format"),new e.Notice("Planning error: Invalid response format from EvoAgentX")):n.includes("fetch")||n.includes("network")||n.includes("Failed to fetch")?(console.error("❌ [Plan My Day] Network error"),new e.Notice("Planning error: Unable to connect to EvoAgentX server. Check your connection and server status.")):n.includes("Failed to generate schedule")||n.includes("Schedule fetch failed")?(console.error("❌ [Plan My Day] Schedule generation failed"),new e.Notice("Planning error: EvoAgentX task planning failed. Check server logs for details.")):n.includes("No data in API response")?(console.error("❌ [Plan My Day] Empty API response"),new e.Notice("Planning error: EvoAgentX returned empty response. Try again or check server status.")):(console.error("❌ [Plan My Day] Unhandled error"),new e.Notice(`Planning error: ${n.substring(0,100)}${n.length>100?"...":""}`))}else console.error("❌ [Plan My Day] Non-Error object thrown"),new e.Notice("Planning error: Unknown error occurred with EvoAgentX");console.log("🔍 [Plan My Day] Full error log completed")}})}debugPlanMyDay(){return t(this,void 0,void 0,function*(){console.log("🔍 [Plan My Day Debug] Starting comprehensive debug..."),f.clearLogs();const t=new e.Notice("Running Plan My Day diagnostics...",0);try{const n=this.app.workspace.getActiveFile();f.log("📁 Active file check",{hasActiveFile:!!n,fileName:null==n?void 0:n.name,fileExtension:null==n?void 0:n.extension});const i=f.analyzeApiClient(this.apiClient);if(f.log("🔗 API client analysis",i),this.apiClient){const e=yield f.testConnection(this.apiClient);if(f.log("🌐 Connection test result",e),e.success){const e=yield f.testTaskPlanning(this.apiClient,"Test note with some tasks:\n- Write code\n- Test functionality\n- Review results");f.log("📋 Task planning test result",e)}}f.log("⚙️ Plugin settings",{backendUrl:this.settings.backendUrl,hasApiKey:!!this.settings.apiKey,debugMode:this.settings.debugMode}),t.hide();const o=f.getLogs();console.log("🔍 [Plan My Day Debug] Complete diagnostic log:",o);const a=o.slice(-5).join("\n");if(new e.Notice(`Debug complete! Check console for full logs.\n\nLast entries:\n${a}`,1e4),n){const t=`# Plan My Day Debug Report\n\nGenerated: ${(new Date).toISOString()}\n\n## Diagnostic Results\n\n\`\`\`\n${f.exportLogs()}\n\`\`\``;yield this.app.vault.create(`Plan My Day Debug - ${Date.now()}.md`,t),new e.Notice("Debug report saved as new note!")}}catch(n){t.hide(),f.error("Debug process failed",n),new e.Notice(`Debug failed: ${n instanceof Error?n.message:String(n)}`)}})}activateView(){return t(this,void 0,void 0,function*(){const e=this.app.workspace.getLeavesOfType(a);if(0===e.length){const e=this.app.workspace.getRightLeaf(!1);e&&(yield e.setViewState({type:a,active:!0}))}else this.app.workspace.revealLeaf(e[0])})}activateFullTabView(){return t(this,void 0,void 0,function*(){const e=this.app.workspace.getLeavesOfType(r);if(0===e.length){const e=this.app.workspace.getLeaf("tab");e&&(yield e.setViewState({type:r,active:!0}))}else this.app.workspace.revealLeaf(e[0])})}initializeVaultManagement(){var e;(null===(e=this.settings.vaultManagement)||void 0===e?void 0:e.enableVaultManagement)&&(this.vaultClient=new b(this.settings.backendUrl,this.settings.apiKey),this.checkVaultManagementAvailability(),this.settings.debugMode&&console.log("Vault management initialized"))}checkVaultManagementAvailability(){return t(this,void 0,void 0,function*(){try{if(404===(yield fetch(`${this.settings.backendUrl}/api/obsidian/vault/structure`,{method:"POST",headers:Object.assign({"Content-Type":"application/json"},this.settings.apiKey&&{Authorization:`Bearer ${this.settings.apiKey}`}),body:JSON.stringify({include_content:!1,max_depth:1})})).status)return this.disableVaultManagement(),this.settings.debugMode&&console.log("VaultPilot: Vault management endpoints not available, disabling features"),!1}catch(e){this.settings.debugMode&&console.log("VaultPilot: Could not check vault management availability:",e)}return!0})}disableVaultManagement(){this.vaultClient=null,this.settings.debugMode&&console.log("Vault management disabled")}registerVaultManagementCommands(){[{id:"vaultpilot-vault-structure",name:"View Vault Structure",callback:function(){console.log("Opening vault structure modal"),this.openVaultStructureModal?this.openVaultStructureModal():new e.Notice("Vault structure feature not available")}},{id:"vaultpilot-smart-search",name:"Smart Vault Search",callback:function(){console.log("Opening smart search modal"),this.openSmartSearchModal?this.openSmartSearchModal():new e.Notice("Smart search feature not available")}},{id:"vaultpilot-file-operations",name:"File Operations Manager",callback:function(){console.log("Opening file operations modal"),this.openFileOperationsModal?this.openFileOperationsModal():new e.Notice("File operations feature not available")}},{id:"vaultpilot-organize-vault",name:"AI Vault Organization",callback:function(){console.log("Opening vault organizer modal"),this.openVaultOrganizerModal?this.openVaultOrganizerModal():new e.Notice("Vault organizer feature not available")}},{id:"vaultpilot-batch-operations",name:"Batch File Operations",callback:function(){console.log("Opening batch operations modal"),this.openBatchOperationsModal?this.openBatchOperationsModal():new e.Notice("Batch operations feature not available")}},{id:"vaultpilot-quick-search-selection",name:"Quick Search Selected Text",editorCallback:function(t){const n=t.getSelection();n.trim()?(console.log("Quick search for:",n.trim()),this.openSmartSearchModal?this.openSmartSearchModal(n.trim()):new e.Notice("Smart search feature not available")):new e.Notice("Please select text to search for")}},{id:"vaultpilot-vault-health-check",name:"Vault Health Check",callback:function(){return t(this,void 0,void 0,function*(){try{if(!this.vaultClient)return void new e.Notice("Vault management not initialized");new e.Notice("Running vault health check...");const t=yield this.vaultClient.testConnection();if(!t.success)return void new e.Notice(`Health check failed: ${t.message}`,5e3);const n=yield this.vaultClient.getVaultStructure({include_content:!1,max_depth:1}),i=yield this.vaultClient.searchVault({query:"test",max_results:1});new e.Notice(`✅ Vault Health Check Passed\n📁 ${n.total_files} files, ${n.total_folders} folders\n🔍 Search: ${i.results.length} results\n💾 Size: ${(n.total_size/1024/1024).toFixed(2)} MB`,8e3)}catch(t){console.error("Vault health check failed:",t),new e.Notice(`❌ Health check failed: ${t.message}`,5e3)}})}},{id:"vaultpilot-vault-backup",name:"Create Vault Backup",callback:function(){return t(this,void 0,void 0,function*(){try{if(!this.vaultClient)return void new e.Notice("Vault management not initialized");new e.Notice("Creating vault backup...");const t=yield this.vaultClient.backupVault({include_settings:!0,compression:!0,backup_name:`vaultpilot-backup-${(new Date).toISOString().split("T")[0]}`});new e.Notice(`✅ Backup created successfully\n📦 ${t.files_backed_up} files\n💾 Size: ${(t.backup_size/1024/1024).toFixed(2)} MB\n📁 Location: ${t.backup_path}`,8e3)}catch(t){console.error("Backup failed:",t),new e.Notice(`❌ Backup failed: ${t.message}`,5e3)}})}},{id:"vaultpilot-search-content",name:"Search Content",editorCallback:function(t){const n=t.getSelection().trim()||"Enter search query";this.openSmartSearchModal?this.openSmartSearchModal(n,"content"):new e.Notice("Smart search feature not available")}},{id:"vaultpilot-search-filenames",name:"Search Filenames",callback:function(){this.openSmartSearchModal?this.openSmartSearchModal("","filename"):new e.Notice("Smart search feature not available")}},{id:"vaultpilot-recent-files",name:"View Recent Files",callback:function(){return t(this,void 0,void 0,function*(){var t,n;try{if(!this.vaultClient)return void new e.Notice("Vault management not initialized");const t=yield this.vaultClient.getVaultStructure({include_content:!1});if(0===t.recent_files.length)return void new e.Notice("No recent files found");const n=t.recent_files.slice(0,10).map(e=>`• ${e.name} (${e.modified})`).join("\n");new e.Notice(`📝 Recent Files:\n${n}`,1e4)}catch(i){if(console.error("Failed to get recent files:",i),(null===(t=i.message)||void 0===t?void 0:t.includes("Not Found"))||(null===(n=i.message)||void 0===n?void 0:n.includes("404"))){const t=this.app.vault.getMarkdownFiles().sort((e,t)=>t.stat.mtime-e.stat.mtime).slice(0,10);if(0===t.length)return void new e.Notice("No recent files found");const n=t.map(e=>`• ${e.basename} (${new Date(e.stat.mtime).toLocaleDateString()})`).join("\n");new e.Notice(`📝 Recent Files (Local):\n${n}`,1e4)}else new e.Notice(`❌ Failed to get recent files: ${i.message}`,5e3)}})}}].forEach(e=>{var t,n;this.addCommand(Object.assign(Object.assign({},e),{callback:null===(t=e.callback)||void 0===t?void 0:t.bind(this),editorCallback:null===(n=e.editorCallback)||void 0===n?void 0:n.bind(this)}))})}openVaultStructureModal(){this.vaultClient?new x(this.app,this).open():new e.Notice("Vault management not available")}openSmartSearchModal(t,n){if(!this.vaultClient)return void new e.Notice("Vault management not available");const i=new E(this.app,this);t&&i.setInitialQuery(t,n),i.open()}openFileOperationsModal(t,n){if(!this.vaultClient)return void new e.Notice("Vault management not available");const i=new M(this.app,this);t&&i.setInitialPath(t),n&&i.setOperation(n),i.open()}openVaultOrganizerModal(){new e.Notice("Vault organizer modal not yet implemented")}openBatchOperationsModal(){new e.Notice("Batch operations modal not yet implemented")}initializePhase3(){try{this.phase3Integration=new Q(this,{autoShowOnboarding:!this.settings.onboardingComplete}),this.phase3Integration.onload(),this.settings.debugMode&&console.log("Phase 3 features initialized successfully"),this.settings.onboardingComplete||setTimeout(()=>{var e;null===(e=this.phase3Integration)||void 0===e||e.showOnboardingIfNeeded()},1e3)}catch(t){console.error("Failed to initialize Phase 3 features:",t),this.settings.debugMode&&new e.Notice("Phase 3 features failed to initialize - check console for details",5e3)}}disablePhase3(){this.phase3Integration&&(this.phase3Integration.onunload(),this.phase3Integration=void 0),this.settings.debugMode&&console.log("Phase 3 features disabled")}initializeEnhancementManager(){try{this.enhancementManager=new te(this),this.enhancementManager.initialize().then(()=>{this.settings.debugMode&&console.log("VaultPilot Enhancement Manager initialized successfully")}).catch(e=>{console.error("Failed to initialize Enhancement Manager:",e)}),this.keyboardHandler=new ne(this),this.registerDomEvent(document,"keydown",e=>{var t;null===(t=this.keyboardHandler)||void 0===t||t.handleKeyDown(e)});ie.createEnhancedCommands(this).forEach(e=>{this.addCommand({id:e.id,name:e.name,callback:e.callback,editorCallback:e.editorCallback,checkCallback:e.checkCallback})}),this.settings.debugMode&&console.log("Keyboard shortcuts and enhanced commands initialized")}catch(t){console.error("Failed to initialize Enhancement Manager:",t),this.settings.debugMode&&new e.Notice("Enhancement features failed to initialize - check console for details",5e3)}}disableEnhancementManager(){this.enhancementManager&&(this.enhancementManager.unload(),this.enhancementManager=void 0),this.keyboardHandler&&(this.keyboardHandler=void 0),this.settings.debugMode&&console.log("Enhancement Manager disabled")}handleKeyUp(e){if(!this.settings.enableAutoComplete||!this.settings.enableCopilot)return;e.target.classList.contains("cm-content")&&this.shouldTriggerAutoComplete(e)&&(clearTimeout(this.autoCompleteTimeout),this.autoCompleteTimeout=setTimeout(()=>{this.triggerAutoCompletion()},3e3))}shouldTriggerAutoComplete(t){if(-1!==["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Tab","Shift","Control","Alt","Meta","Escape"].indexOf(t.key))return!1;const n=this.app.workspace.getActiveViewOfType(e.MarkdownView);if(!n)return!1;const i=n.editor,o=i.getCursor(),a=i.getLine(o.line);if(o.ch!==a.length)return!1;const s=a.slice(-1);return-1!==[".","!","?",":","\n"].indexOf(s)&&" "===t.key||"Enter"===t.key&&a.trim().length>10}triggerAutoCompletion(){return t(this,void 0,void 0,function*(){const t=this.app.workspace.getActiveViewOfType(e.MarkdownView);if(!t)return;const n=t.editor,i=n.getCursor(),o=n.getLine(i.line),a=n.getValue();if(o.trim().length<10||i.ch!==o.length)return;if(!a||0===a.trim().length)return;const s=Date.now();if(!(s-(this.lastAutoCompleteRequest||0)<1e4)){this.lastAutoCompleteRequest=s;try{const t=yield this.apiClient.getCopilotCompletion({text:a,cursor_position:n.posToOffset(i),file_type:"markdown"});t.success&&t.data&&t.data.suggestions.length>0&&this.settings.debugMode&&new e.Notice(`Auto-suggestion: ${t.data.suggestions[0]}`,3e3)}catch(e){this.settings.debugMode&&console.error("Auto-completion error:",e)}}})}handleCopilotSuggestion(t){this.settings.debugMode&&new e.Notice(`Live suggestion: ${t.completion}`,2e3)}loadSettings(){return t(this,void 0,void 0,function*(){this.settings=Object.assign({},i,yield this.loadData())})}saveSettings(){return t(this,void 0,void 0,function*(){var e,t;yield this.saveData(this.settings),this.apiClient=new p(this.settings.backendUrl,this.settings.apiKey),(null===(e=this.settings.vaultManagement)||void 0===e?void 0:e.enableVaultManagement)?this.initializeVaultManagement():this.disableVaultManagement(),(null===(t=this.settings.modelSelection)||void 0===t?void 0:t.enabled)?yield this.initializeModelSelection():yield this.disconnectModelSelection(),this.settings.enableWebSocket&&!this.websocketConnected?this.connectWebSocket():!this.settings.enableWebSocket&&this.websocketConnected&&this.disconnectWebSocket()})}initializeModelSelection(){return t(this,void 0,void 0,function*(){var t;if(null===(t=this.settings.modelSelection)||void 0===t?void 0:t.enabled)try{if(!w.detect().hasHTTP)throw new Error("HTTP transport not available");this.modelSelectionService=new S(this.settings.backendUrl,this.settings.modelSelection.devpipePath,{monitoring_interval:this.settings.modelSelection.monitoringInterval,fallback_enabled:this.settings.modelSelection.fallbackEnabled,cache_duration:this.settings.modelSelection.cacheDuration,retry_attempts:this.settings.modelSelection.retryAttempts,timeout:this.settings.modelSelection.timeout,debug_mode:this.settings.modelSelection.debugMode}),yield this.modelSelectionService.updatePreferences({priority:this.settings.modelSelection.userPreferences.priority,max_cost_per_request:this.settings.modelSelection.userPreferences.maxCostPerRequest,preferred_providers:this.settings.modelSelection.userPreferences.preferredProviders,fallback_enabled:this.settings.modelSelection.fallbackEnabled,quality_threshold:this.settings.modelSelection.userPreferences.qualityThreshold,timeout_preference:this.settings.modelSelection.timeout}),yield this.modelSelectionService.initialize(),this.settings.debugMode&&console.log("ModelSelectionService initialized successfully"),new e.Notice("🤖 Smart model selection enabled",3e3)}catch(t){console.error("Failed to initialize ModelSelectionService:",t),t instanceof Error&&(t.message.includes("not accessible")||t.message.includes("Failed to fetch")?this.settings.debugMode&&new e.Notice("⚠️ Model selection service unavailable - using fallback mode",4e3):t.message.includes("transport not available")?new e.Notice("⚠️ Model selection not supported in this environment",5e3):this.settings.debugMode&&new e.Notice("⚠️ Model selection initialization failed",3e3)),this.settings.modelSelection.retryAttempts>0&&setTimeout(()=>{this.retryModelSelectionInit(1)},1e4)}else this.settings.debugMode&&console.log("Model selection disabled in settings")})}retryModelSelectionInit(e){return t(this,void 0,void 0,function*(){var t;if(e>((null===(t=this.settings.modelSelection)||void 0===t?void 0:t.retryAttempts)||3))this.settings.debugMode&&console.log("Model selection initialization retry limit reached");else try{this.settings.debugMode&&console.log(`Retrying model selection initialization (attempt ${e})`),yield this.initializeModelSelection()}catch(t){const n=Math.min(3e4,5e3*Math.pow(2,e-1));setTimeout(()=>{this.retryModelSelectionInit(e+1)},n)}})}checkServiceStatus(){return t(this,void 0,void 0,function*(){var t,n;const i=new e.Notice("Checking VaultPilot service status...",0);try{let o="🔍 VaultPilot Service Status:\n\n";try{const e=yield this.apiClient.healthCheck();e.success?(o+="✅ Main Backend: Connected\n",o+=`   Server: ${this.settings.backendUrl}\n`):(o+="❌ Main Backend: Failed\n",o+=`   Error: ${e.error}\n`)}catch(e){o+="❌ Main Backend: Connection Error\n"}this.isWebSocketConnected()?o+="✅ WebSocket: Connected\n":o+="❌ WebSocket: Disconnected\n",(null===(t=this.settings.modelSelection)||void 0===t?void 0:t.enabled)?this.modelSelectionService&&this.modelSelectionService.isConnected()?o+="✅ Model Selection: Connected\n":(o+="❌ Model Selection: Not Available\n",this.modelSelectionService?o+="   Reason: Service disconnected\n":o+="   Reason: Service not initialized\n"):o+="⚠️ Model Selection: Disabled in settings\n",(null===(n=this.settings.vaultManagement)||void 0===n?void 0:n.enableVaultManagement)?this.vaultClient?o+="✅ Vault Management: Enabled\n":o+="❌ Vault Management: Failed to initialize\n":o+="⚠️ Vault Management: Disabled in settings\n",i.hide(),new e.Notice(o,15e3),this.settings.debugMode&&console.log("VaultPilot Service Status:",o)}catch(t){i.hide(),new e.Notice(`❌ Failed to check service status: ${t instanceof Error?t.message:"Unknown error"}`,5e3)}})}retryModelSelectionManual(){return t(this,void 0,void 0,function*(){if(this.modelSelectionService&&this.modelSelectionService.isConnected())return void new e.Notice("Model selection already connected",3e3);const t=new e.Notice("Retrying model selection initialization...",0);try{yield this.initializeModelSelection(),t.hide(),new e.Notice("✅ Model selection connected successfully",3e3)}catch(n){t.hide(),new e.Notice(`❌ Model selection retry failed: ${n instanceof Error?n.message:"Unknown error"}`,5e3)}})}disconnectModelSelection(){return t(this,void 0,void 0,function*(){if(this.modelSelectionService)try{yield this.modelSelectionService.disconnect(),this.modelSelectionService=void 0,this.settings.debugMode&&console.log("ModelSelectionService disconnected")}catch(e){console.error("Error disconnecting ModelSelectionService:",e)}})}testModelSelection(){return t(this,void 0,void 0,function*(){if(!this.modelSelectionService)return void new e.Notice("❌ Model selection service not initialized",5e3);const t=new e.Notice("🤖 Testing model selection...",0);try{const n=[{type:"text-generation",quality:"medium"},{type:"code-generation",quality:"high"},{type:"chat",quality:"low"},{type:"summarization",quality:"medium"}];let i=[];for(const e of n)try{const t=yield this.modelSelectionService.selectForTask(e.type,e.quality);i.push(`✅ ${e.type}: ${t.selected_model.name} ($${t.estimated_cost.toFixed(4)})`)}catch(t){i.push(`❌ ${e.type}: Failed - ${t instanceof Error?t.message:"Unknown error"}`)}t.hide();const o=i.join("\n");new e.Notice(`Model Selection Test Results:\n${o}`,1e4),this.settings.debugMode&&console.log("Model selection test results:",i)}catch(n){t.hide(),new e.Notice(`❌ Model selection test failed: ${n instanceof Error?n.message:"Unknown error"}`,5e3)}})}showModelHealth(){return t(this,void 0,void 0,function*(){if(!this.modelSelectionService)return void new e.Notice("❌ Model selection service not initialized",5e3);const t=new e.Notice("🏥 Checking model health...",0);try{const n=yield this.modelSelectionService.getModelHealth();if(t.hide(),0===n.length)return void new e.Notice("⚠️ No model health information available",5e3);const i=n.map(e=>`${"healthy"===e.status?"✅":"degraded"===e.status?"⚠️":"❌"} ${e.model_id}: ${e.status} (${e.response_time}ms, ${e.availability_percentage}%)`).join("\n");new e.Notice(`Model Health Status:\n${i}`,15e3),this.settings.debugMode&&console.log("Model health status:",n)}catch(n){t.hide(),new e.Notice(`❌ Failed to get model health: ${n instanceof Error?n.message:"Unknown error"}`,5e3)}})}getBestModelForTask(e){return t(this,arguments,void 0,function*(e,t="medium"){var n,i;if(this.modelSelectionService&&this.modelSelectionService.isConnected())try{const n=yield this.modelSelectionService.selectForTask(e,t);return this.settings.debugMode&&console.log(`Selected model ${n.selected_model.name} for ${e} task`),n}catch(e){this.settings.debugMode&&console.warn("Model selection failed, using default:",e),(null===(n=this.settings.modelSelection)||void 0===n?void 0:n.enabled)&&!this.modelSelectionService.isConnected()&&this.retryModelSelectionInit(1).catch(()=>{})}else(null===(i=this.settings.modelSelection)||void 0===i?void 0:i.enabled)&&!this.modelSelectionService&&(this.settings.debugMode&&console.log("Model selection service not initialized, attempting initialization..."),this.initializeModelSelection().catch(()=>{}));return null})}loadEnhancedUIStyles(){const e="vaultpilot-enhanced-ui-styles",t=document.getElementById(e);t&&t.remove();const n=document.createElement("style");n.id=e,n.textContent='\n      /* VaultPilot Enhanced UI Styles */\n      @import url("app://obsidian.md/vault-management/enhanced-ui-styles.css");\n      \n      /* Fallback styles in case import fails */\n      .vaultpilot-progress-container {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10000;\n        pointer-events: none;\n        max-width: 400px;\n        font-family: var(--font-interface);\n      }\n      \n      .vaultpilot-progress-item {\n        background: var(--background-primary);\n        border: 1px solid var(--background-modifier-border);\n        border-radius: 8px;\n        padding: 12px 16px;\n        margin-bottom: 8px;\n        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n        min-width: 300px;\n        pointer-events: auto;\n        animation: slideInRight 0.3s ease-out;\n      }\n      \n      @keyframes slideInRight {\n        from { transform: translateX(100%); opacity: 0; }\n        to { transform: translateX(0); opacity: 1; }\n      }\n      \n      @keyframes slideOutRight {\n        from { transform: translateX(0); opacity: 1; }\n        to { transform: translateX(100%); opacity: 0; }\n      }\n    ',document.head.appendChild(n),this.settings.debugMode&&console.log("Enhanced UI styles loaded")}}class ae extends e.Modal{constructor(e,t){super(e),this.plugin=t}onOpen(){const{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"VaultPilot Enhancement Features Demo"}),this.createKeyboardShortcutsDemo(e),this.createProgressIndicatorDemo(e),this.createPerformanceDemo(e),this.createWebSocketDemo(e)}createKeyboardShortcutsDemo(t){const n=t.createDiv({cls:"enhancement-demo-section"});n.createEl("h3",{text:"⌨️ Keyboard Shortcuts"});n.createEl("p").innerHTML="\n            <strong>20+ keyboard shortcuts are now available!</strong><br>\n            Try these shortcuts:\n            <ul>\n                <li><code>Ctrl+Shift+Enter</code> - Open VaultPilot Chat</li>\n                <li><code>Ctrl+Shift+S</code> - Smart Search</li>\n                <li><code>Ctrl+Space</code> - AI Completion</li>\n                <li><code>Ctrl+Shift+H</code> - Show All Shortcuts</li>\n            </ul>\n        ";n.createEl("button",{text:"Show All Keyboard Shortcuts"}).onclick=()=>{if(this.plugin.keyboardHandler){this.plugin.keyboardHandler.getShortcuts();const t=this.plugin.keyboardHandler.getShortcuts(),n=new e.Modal(this.app);n.titleEl.textContent="VaultPilot Keyboard Shortcuts";const i=n.contentEl;i.style.maxHeight="70vh",i.style.overflowY="auto",t.forEach(e=>{const t=i.createDiv({cls:"shortcut-item"});t.style.cssText="\n                        display: flex; \n                        justify-content: space-between; \n                        padding: 8px; \n                        margin: 4px 0; \n                        background: var(--background-secondary); \n                        border-radius: 4px;\n                    ";const n=t.createSpan({cls:"shortcut-keys"});n.textContent=`${e.modifiers.join(" + ")} + ${e.key.replace("Key","")}`,n.style.cssText="\n                        font-family: monospace; \n                        background: var(--background-primary-alt); \n                        padding: 2px 6px; \n                        border-radius: 3px;\n                    ";t.createSpan({cls:"shortcut-desc"}).textContent=e.description}),n.open()}}}createProgressIndicatorDemo(e){const t=e.createDiv({cls:"enhancement-demo-section"});t.createEl("h3",{text:"📊 Progress Indicators"}),t.createEl("p",{text:"Real-time progress bars with animations, ETA calculation, and WebSocket updates."});const n=t.createDiv({cls:"demo-buttons"});n.style.cssText="display: flex; gap: 10px; flex-wrap: wrap;";n.createEl("button",{text:"Quick Progress (3s)"}).onclick=()=>{this.demoQuickProgress()};n.createEl("button",{text:"Long Progress (10s)"}).onclick=()=>{this.demoLongProgress()};n.createEl("button",{text:"Multiple Progress"}).onclick=()=>{this.demoMultipleProgress()}}createPerformanceDemo(t){const n=t.createDiv({cls:"enhancement-demo-section"});n.createEl("h3",{text:"⚡ Performance Optimization"}),n.createEl("p",{text:"Intelligent caching, request deduplication, and performance metrics."});const i=n.createDiv({cls:"demo-buttons"});i.style.cssText="display: flex; gap: 10px; flex-wrap: wrap;";i.createEl("button",{text:"Test Caching"}).onclick=()=>{this.demoCaching()};i.createEl("button",{text:"Show Metrics"}).onclick=()=>{this.showPerformanceMetrics()};i.createEl("button",{text:"Clear Cache"}).onclick=()=>{this.plugin.enhancementManager&&(this.plugin.enhancementManager.clearCache(),new e.Notice("Cache cleared successfully"))}}createWebSocketDemo(t){var n;const i=t.createDiv({cls:"enhancement-demo-section"});i.createEl("h3",{text:"🔗 WebSocket Features"});const o=i.createDiv(),a=(null===(n=this.plugin.enhancementManager)||void 0===n?void 0:n.isWebSocketConnected())||!1;o.innerHTML=`\n            <p>WebSocket Status: \n                <span style="color: ${a?"var(--color-green)":"var(--color-red)"};">\n                    ${a?"🟢 Connected":"🔴 Disconnected"}\n                </span>\n            </p>\n            <p>Real-time features: Progress updates, Performance metrics, Dynamic shortcuts</p>\n        `;i.createEl("button",{text:"Test WebSocket Connection"}).onclick=()=>{var t;const n=null===(t=this.plugin.enhancementManager)||void 0===t?void 0:t.isWebSocketConnected();new e.Notice("WebSocket is "+(n?"connected":"disconnected"),3e3)}}demoQuickProgress(){if(!this.plugin.enhancementManager)return void new e.Notice("Enhancement Manager not initialized");const t="demo-quick-"+Date.now();this.plugin.enhancementManager.showProgress({id:t,title:"Quick Demo Task",message:"Processing...",percentage:0,eta:3,cancelable:!0});let n=0;const i=setInterval(()=>{var e;n+=33.33,n>=100&&(n=100,clearInterval(i),setTimeout(()=>{var e;null===(e=this.plugin.enhancementManager)||void 0===e||e.progressIndicator.hideProgress(t)},500)),null===(e=this.plugin.enhancementManager)||void 0===e||e.progressIndicator.updateProgress(t,{percentage:n,message:n<100?"Processing...":"Complete!",eta:n<100?(100-n)/33.33:0})},1e3)}demoLongProgress(){if(!this.plugin.enhancementManager)return void new e.Notice("Enhancement Manager not initialized");const t="demo-long-"+Date.now();this.plugin.enhancementManager.showProgress({id:t,title:"Long Running Task",message:"Analyzing vault structure...",percentage:0,eta:10,cancelable:!0});const n=[{msg:"Analyzing vault structure...",duration:2e3},{msg:"Processing files...",duration:3e3},{msg:"Generating insights...",duration:2e3},{msg:"Optimizing performance...",duration:2e3},{msg:"Finalizing results...",duration:1e3}];let i=0,o=0;const a=()=>{var e,s;if(i>=n.length)return null===(e=this.plugin.enhancementManager)||void 0===e||e.progressIndicator.updateProgress(t,{percentage:100,message:"Complete!",eta:0}),void setTimeout(()=>{var e;null===(e=this.plugin.enhancementManager)||void 0===e||e.progressIndicator.hideProgress(t)},1e3);const r=n[i],l=100/n.length;null===(s=this.plugin.enhancementManager)||void 0===s||s.progressIndicator.updateProgress(t,{percentage:o,message:r.msg,eta:2*(n.length-i)}),setTimeout(()=>{o+=l,i++,a()},r.duration)};a()}demoMultipleProgress(){if(!this.plugin.enhancementManager)return void new e.Notice("Enhancement Manager not initialized");[{id:"task1",title:"Backup Creation",duration:5e3},{id:"task2",title:"File Analysis",duration:7e3},{id:"task3",title:"Index Update",duration:3e3}].forEach((e,t)=>{setTimeout(()=>{var t;const n=`demo-multi-${e.id}-${Date.now()}`;null===(t=this.plugin.enhancementManager)||void 0===t||t.showProgress({id:n,title:e.title,message:"Starting...",percentage:0,eta:e.duration/1e3,cancelable:!0});let i=0;const o=setInterval(()=>{var t;i+=10,i>=100&&(i=100,clearInterval(o),setTimeout(()=>{var e;null===(e=this.plugin.enhancementManager)||void 0===e||e.progressIndicator.hideProgress(n)},500)),null===(t=this.plugin.enhancementManager)||void 0===t||t.progressIndicator.updateProgress(n,{percentage:i,message:i<100?"Processing...":"Complete!",eta:i<100?(100-i)/10*(e.duration/1e4):0})},e.duration/10)},1e3*t)})}demoCaching(){return t(this,void 0,void 0,function*(){if(!this.plugin.enhancementManager)return void new e.Notice("Enhancement Manager not initialized");const t="demo-cache-test",n=performance.now();try{yield this.plugin.enhancementManager.optimizedAPICall(t,()=>new Promise(e=>setTimeout(()=>e({data:"test response"}),1e3)));const i=performance.now()-n,o=performance.now();yield this.plugin.enhancementManager.optimizedAPICall(t,()=>new Promise(e=>setTimeout(()=>e({data:"test response"}),1e3)));const a=performance.now()-o;new e.Notice(`First request: ${Math.round(i)}ms (cache miss)\nSecond request: ${Math.round(a)}ms (cache hit)`,5e3)}catch(t){new e.Notice("Cache test failed: "+t)}})}showPerformanceMetrics(){if(!this.plugin.enhancementManager)return void new e.Notice("Enhancement Manager not initialized");const t=this.plugin.enhancementManager.getPerformanceMetrics(),n=this.plugin.enhancementManager.getCacheHitRate(),i=new e.Modal(this.app);i.titleEl.textContent="Performance Metrics";i.contentEl.innerHTML=`\n            <div class="vaultpilot-metrics-container">\n                <div class="metrics-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;">\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Total Requests</div>\n                        <div class="metric-value">${t.totalRequests}</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Cache Hit Rate</div>\n                        <div class="metric-value">${Math.round(n)}%</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Avg Response Time</div>\n                        <div class="metric-value">${Math.round(t.averageResponseTime)}ms</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Cache Size</div>\n                        <div class="metric-value">${t.currentCacheSize} items</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Memory Usage</div>\n                        <div class="metric-value">${Math.round(t.memoryUsage/1024)} KB</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Fastest Response</div>\n                        <div class="metric-value">${Math.round(t.fastestResponse)}ms</div>\n                    </div>\n                </div>\n            </div>\n        `,i.open()}onClose(){const{contentEl:e}=this;e.empty()}}const se="vaultpilot-demo-styles";if(!document.getElementById(se)){const e=document.createElement("style");e.id=se,e.textContent="\n.enhancement-demo-section {\n    margin: 20px 0;\n    padding: 15px;\n    border: 1px solid var(--background-modifier-border);\n    border-radius: 8px;\n    background: var(--background-secondary);\n}\n\n.enhancement-demo-section h3 {\n    margin-top: 0;\n    color: var(--text-accent);\n}\n\n.demo-buttons {\n    margin-top: 10px;\n}\n\n.demo-buttons button {\n    padding: 8px 16px;\n    margin: 4px;\n    border: 1px solid var(--background-modifier-border);\n    border-radius: 4px;\n    background: var(--interactive-normal);\n    color: var(--text-normal);\n    cursor: pointer;\n    transition: background-color 0.2s;\n}\n\n.demo-buttons button:hover {\n    background: var(--interactive-hover);\n}\n\n.shortcut-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px;\n    margin: 4px 0;\n    background: var(--background-secondary);\n    border-radius: 4px;\n}\n\n.metric-label {\n    color: var(--text-muted);\n    font-size: 0.85em;\n    margin-bottom: 4px;\n    text-transform: uppercase;\n}\n\n.metric-value {\n    color: var(--text-normal);\n    font-size: 1.2em;\n    font-weight: 600;\n}\n",document.head.appendChild(e)}var re=Object.freeze({__proto__:null,VaultPilotEnhancementDemo:ae});module.exports=oe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
