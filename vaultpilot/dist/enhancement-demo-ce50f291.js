"use strict";var e=require("./main-30ee03f2.js"),n=require("obsidian");class t extends n.Modal{constructor(e,n){super(e),this.plugin=n}onOpen(){const{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"VaultPilot Enhancement Features Demo"}),this.createKeyboardShortcutsDemo(e),this.createProgressIndicatorDemo(e),this.createPerformanceDemo(e),this.createWebSocketDemo(e)}createKeyboardShortcutsDemo(e){const t=e.createDiv({cls:"enhancement-demo-section"});t.createEl("h3",{text:"‚å®Ô∏è Keyboard Shortcuts"});t.createEl("p").innerHTML="\n            <strong>20+ keyboard shortcuts are now available!</strong><br>\n            Try these shortcuts:\n            <ul>\n                <li><code>Ctrl+Shift+Enter</code> - Open VaultPilot Chat</li>\n                <li><code>Ctrl+Shift+S</code> - Smart Search</li>\n                <li><code>Ctrl+Space</code> - AI Completion</li>\n                <li><code>Ctrl+Shift+H</code> - Show All Shortcuts</li>\n            </ul>\n        ";t.createEl("button",{text:"Show All Keyboard Shortcuts"}).onclick=()=>{if(this.plugin.keyboardHandler){this.plugin.keyboardHandler.getShortcuts();const e=this.plugin.keyboardHandler.getShortcuts(),t=new n.Modal(this.app);t.titleEl.textContent="VaultPilot Keyboard Shortcuts";const a=t.contentEl;a.style.maxHeight="70vh",a.style.overflowY="auto",e.forEach(e=>{const n=a.createDiv({cls:"shortcut-item"});n.style.cssText="\n                        display: flex; \n                        justify-content: space-between; \n                        padding: 8px; \n                        margin: 4px 0; \n                        background: var(--background-secondary); \n                        border-radius: 4px;\n                    ";const t=n.createSpan({cls:"shortcut-keys"});t.textContent=`${e.modifiers.join(" + ")} + ${e.key.replace("Key","")}`,t.style.cssText="\n                        font-family: monospace; \n                        background: var(--background-primary-alt); \n                        padding: 2px 6px; \n                        border-radius: 3px;\n                    ";n.createSpan({cls:"shortcut-desc"}).textContent=e.description}),t.open()}}}createProgressIndicatorDemo(e){const n=e.createDiv({cls:"enhancement-demo-section"});n.createEl("h3",{text:"üìä Progress Indicators"}),n.createEl("p",{text:"Real-time progress bars with animations, ETA calculation, and WebSocket updates."});const t=n.createDiv({cls:"demo-buttons"});t.style.cssText="display: flex; gap: 10px; flex-wrap: wrap;";t.createEl("button",{text:"Quick Progress (3s)"}).onclick=()=>{this.demoQuickProgress()};t.createEl("button",{text:"Long Progress (10s)"}).onclick=()=>{this.demoLongProgress()};t.createEl("button",{text:"Multiple Progress"}).onclick=()=>{this.demoMultipleProgress()}}createPerformanceDemo(e){const t=e.createDiv({cls:"enhancement-demo-section"});t.createEl("h3",{text:"‚ö° Performance Optimization"}),t.createEl("p",{text:"Intelligent caching, request deduplication, and performance metrics."});const a=t.createDiv({cls:"demo-buttons"});a.style.cssText="display: flex; gap: 10px; flex-wrap: wrap;";a.createEl("button",{text:"Test Caching"}).onclick=()=>{this.demoCaching()};a.createEl("button",{text:"Show Metrics"}).onclick=()=>{this.showPerformanceMetrics()};a.createEl("button",{text:"Clear Cache"}).onclick=()=>{this.plugin.enhancementManager&&(this.plugin.enhancementManager.clearCache(),new n.Notice("Cache cleared successfully"))}}createWebSocketDemo(e){var t;const a=e.createDiv({cls:"enhancement-demo-section"});a.createEl("h3",{text:"üîó WebSocket Features"});const r=a.createDiv(),i=(null===(t=this.plugin.enhancementManager)||void 0===t?void 0:t.isWebSocketConnected())||!1;r.innerHTML=`\n            <p>WebSocket Status: \n                <span style="color: ${i?"var(--color-green)":"var(--color-red)"};">\n                    ${i?"üü¢ Connected":"üî¥ Disconnected"}\n                </span>\n            </p>\n            <p>Real-time features: Progress updates, Performance metrics, Dynamic shortcuts</p>\n        `;a.createEl("button",{text:"Test WebSocket Connection"}).onclick=()=>{var e;const t=null===(e=this.plugin.enhancementManager)||void 0===e?void 0:e.isWebSocketConnected();new n.Notice("WebSocket is "+(t?"connected":"disconnected"),3e3)}}demoQuickProgress(){if(!this.plugin.enhancementManager)return void new n.Notice("Enhancement Manager not initialized");const e="demo-quick-"+Date.now();this.plugin.enhancementManager.showProgress({id:e,title:"Quick Demo Task",message:"Processing...",percentage:0,eta:3,cancelable:!0});let t=0;const a=setInterval(()=>{var n;t+=33.33,t>=100&&(t=100,clearInterval(a),setTimeout(()=>{var n;null===(n=this.plugin.enhancementManager)||void 0===n||n.progressIndicator.hideProgress(e)},500)),null===(n=this.plugin.enhancementManager)||void 0===n||n.progressIndicator.updateProgress(e,{percentage:t,message:t<100?"Processing...":"Complete!",eta:t<100?(100-t)/33.33:0})},1e3)}demoLongProgress(){if(!this.plugin.enhancementManager)return void new n.Notice("Enhancement Manager not initialized");const e="demo-long-"+Date.now();this.plugin.enhancementManager.showProgress({id:e,title:"Long Running Task",message:"Analyzing vault structure...",percentage:0,eta:10,cancelable:!0});const t=[{msg:"Analyzing vault structure...",duration:2e3},{msg:"Processing files...",duration:3e3},{msg:"Generating insights...",duration:2e3},{msg:"Optimizing performance...",duration:2e3},{msg:"Finalizing results...",duration:1e3}];let a=0,r=0;const i=()=>{var n,o;if(a>=t.length)return null===(n=this.plugin.enhancementManager)||void 0===n||n.progressIndicator.updateProgress(e,{percentage:100,message:"Complete!",eta:0}),void setTimeout(()=>{var n;null===(n=this.plugin.enhancementManager)||void 0===n||n.progressIndicator.hideProgress(e)},1e3);const s=t[a],c=100/t.length;null===(o=this.plugin.enhancementManager)||void 0===o||o.progressIndicator.updateProgress(e,{percentage:r,message:s.msg,eta:2*(t.length-a)}),setTimeout(()=>{r+=c,a++,i()},s.duration)};i()}demoMultipleProgress(){if(!this.plugin.enhancementManager)return void new n.Notice("Enhancement Manager not initialized");[{id:"task1",title:"Backup Creation",duration:5e3},{id:"task2",title:"File Analysis",duration:7e3},{id:"task3",title:"Index Update",duration:3e3}].forEach((e,n)=>{setTimeout(()=>{var n;const t=`demo-multi-${e.id}-${Date.now()}`;null===(n=this.plugin.enhancementManager)||void 0===n||n.showProgress({id:t,title:e.title,message:"Starting...",percentage:0,eta:e.duration/1e3,cancelable:!0});let a=0;const r=setInterval(()=>{var n;a+=10,a>=100&&(a=100,clearInterval(r),setTimeout(()=>{var e;null===(e=this.plugin.enhancementManager)||void 0===e||e.progressIndicator.hideProgress(t)},500)),null===(n=this.plugin.enhancementManager)||void 0===n||n.progressIndicator.updateProgress(t,{percentage:a,message:a<100?"Processing...":"Complete!",eta:a<100?(100-a)/10*(e.duration/1e4):0})},e.duration/10)},1e3*n)})}demoCaching(){return e.__awaiter(this,void 0,void 0,function*(){if(!this.plugin.enhancementManager)return void new n.Notice("Enhancement Manager not initialized");const e="demo-cache-test",t=performance.now();try{yield this.plugin.enhancementManager.optimizedAPICall(e,()=>new Promise(e=>setTimeout(()=>e({data:"test response"}),1e3)));const a=performance.now()-t,r=performance.now();yield this.plugin.enhancementManager.optimizedAPICall(e,()=>new Promise(e=>setTimeout(()=>e({data:"test response"}),1e3)));const i=performance.now()-r;new n.Notice(`First request: ${Math.round(a)}ms (cache miss)\nSecond request: ${Math.round(i)}ms (cache hit)`,5e3)}catch(e){new n.Notice("Cache test failed: "+e)}})}showPerformanceMetrics(){if(!this.plugin.enhancementManager)return void new n.Notice("Enhancement Manager not initialized");const e=this.plugin.enhancementManager.getPerformanceMetrics(),t=this.plugin.enhancementManager.getCacheHitRate(),a=new n.Modal(this.app);a.titleEl.textContent="Performance Metrics";a.contentEl.innerHTML=`\n            <div class="vaultpilot-metrics-container">\n                <div class="metrics-grid" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;">\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Total Requests</div>\n                        <div class="metric-value">${e.totalRequests}</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Cache Hit Rate</div>\n                        <div class="metric-value">${Math.round(t)}%</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Avg Response Time</div>\n                        <div class="metric-value">${Math.round(e.averageResponseTime)}ms</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Cache Size</div>\n                        <div class="metric-value">${e.currentCacheSize} items</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Memory Usage</div>\n                        <div class="metric-value">${Math.round(e.memoryUsage/1024)} KB</div>\n                    </div>\n                    <div class="metric-item" style="background: var(--background-secondary); padding: 12px; border-radius: 6px;">\n                        <div class="metric-label">Fastest Response</div>\n                        <div class="metric-value">${Math.round(e.fastestResponse)}ms</div>\n                    </div>\n                </div>\n            </div>\n        `,a.open()}onClose(){const{contentEl:e}=this;e.empty()}}const a="vaultpilot-demo-styles";if(!document.getElementById(a)){const e=document.createElement("style");e.id=a,e.textContent="\n.enhancement-demo-section {\n    margin: 20px 0;\n    padding: 15px;\n    border: 1px solid var(--background-modifier-border);\n    border-radius: 8px;\n    background: var(--background-secondary);\n}\n\n.enhancement-demo-section h3 {\n    margin-top: 0;\n    color: var(--text-accent);\n}\n\n.demo-buttons {\n    margin-top: 10px;\n}\n\n.demo-buttons button {\n    padding: 8px 16px;\n    margin: 4px;\n    border: 1px solid var(--background-modifier-border);\n    border-radius: 4px;\n    background: var(--interactive-normal);\n    color: var(--text-normal);\n    cursor: pointer;\n    transition: background-color 0.2s;\n}\n\n.demo-buttons button:hover {\n    background: var(--interactive-hover);\n}\n\n.shortcut-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px;\n    margin: 4px 0;\n    background: var(--background-secondary);\n    border-radius: 4px;\n}\n\n.metric-label {\n    color: var(--text-muted);\n    font-size: 0.85em;\n    margin-bottom: 4px;\n    text-transform: uppercase;\n}\n\n.metric-value {\n    color: var(--text-normal);\n    font-size: 1.2em;\n    font-weight: 600;\n}\n",document.head.appendChild(e)}exports.VaultPilotEnhancementDemo=t;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
