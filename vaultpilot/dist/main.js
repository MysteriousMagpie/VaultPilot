"use strict";var t=require("obsidian");function e(t,e,n,o){return new(n||(n=Promise))(function(i,s){function a(t){try{r(o.next(t))}catch(t){s(t)}}function l(t){try{r(o.throw(t))}catch(t){s(t)}}function r(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n(function(t){t(e)})).then(a,l)}r((o=o.apply(t,e||[])).next())})}"function"==typeof SuppressedError&&SuppressedError;const n={backendUrl:"http://localhost:8000",apiKey:"",enableWebSocket:!0,enableCopilot:!0,enableAutoComplete:!0,defaultAgent:"",chatHistoryLimit:100,debugMode:!1};class o extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){const{containerEl:n}=this;n.empty(),n.createEl("h2",{text:"VaultPilot Settings"}),n.createEl("p",{text:"Configure your connection to EvoAgentX backend and AI features."}),n.createEl("h3",{text:"Connection"}),new t.Setting(n).setName("Backend URL").setDesc("URL of EvoAgentX backend server").addText(t=>t.setPlaceholder("http://localhost:8000").setValue(this.plugin.settings.backendUrl).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.backendUrl=t,yield this.plugin.saveSettings()}))),new t.Setting(n).setName("API Key").setDesc("Optional API key for authentication (if required by backend)").addText(t=>t.setPlaceholder("Enter API key...").setValue(this.plugin.settings.apiKey||"").onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.apiKey=t,yield this.plugin.saveSettings()}))),new t.Setting(n).setName("Connection Test").setDesc("Test connection to EvoAgentX backend").addButton(t=>t.setButtonText("Test Connection").onClick(()=>e(this,void 0,void 0,function*(){yield this.testConnection()}))),n.createEl("h3",{text:"Features"}),new t.Setting(n).setName("Enable WebSocket").setDesc("Enable real-time communication for live updates and progress tracking").addToggle(t=>t.setValue(this.plugin.settings.enableWebSocket).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.enableWebSocket=t,yield this.plugin.saveSettings(),t?this.plugin.connectWebSocket():this.plugin.disconnectWebSocket()}))),new t.Setting(n).setName("Enable Copilot").setDesc("Enable AI-powered text completion and suggestions").addToggle(t=>t.setValue(this.plugin.settings.enableCopilot).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.enableCopilot=t,yield this.plugin.saveSettings()}))),new t.Setting(n).setName("Enable Auto-Complete").setDesc("Automatically suggest completions as you type").addToggle(t=>t.setValue(this.plugin.settings.enableAutoComplete).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.enableAutoComplete=t,yield this.plugin.saveSettings()}))),n.createEl("h3",{text:"Agent Configuration"}),new t.Setting(n).setName("Default Agent").setDesc("Default agent to use for chat and workflows (leave empty for auto-selection)").addText(t=>t.setPlaceholder("Agent ID or name...").setValue(this.plugin.settings.defaultAgent||"").onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.defaultAgent=t,yield this.plugin.saveSettings()}))),new t.Setting(n).setName("Chat History Limit").setDesc("Maximum number of chat messages to keep in history").addSlider(t=>t.setLimits(10,500,10).setValue(this.plugin.settings.chatHistoryLimit).setDynamicTooltip().onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.chatHistoryLimit=t,yield this.plugin.saveSettings()}))),n.createEl("h3",{text:"Advanced"}),new t.Setting(n).setName("Debug Mode").setDesc("Enable debug logging and additional developer features").addToggle(t=>t.setValue(this.plugin.settings.debugMode).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.debugMode=t,yield this.plugin.saveSettings()}))),n.createEl("h3",{text:"Information"});n.createEl("div",{cls:"setting-item-description"}).innerHTML="\n      <p><strong>VaultPilot v1.0.0</strong></p>\n      <p>Comprehensive EvoAgentX integration for Obsidian</p>\n      <p>Features: AI Chat, Copilot, Workflows, Vault Analysis, Task Planning</p>\n      <p>For help and documentation, visit the GitHub repository.</p>\n    "}testConnection(){return e(this,void 0,void 0,function*(){var e;const n=new t.Notice("Testing connection...",0);try{let o=yield this.plugin.apiClient.healthCheck();if(!o.success&&(null===(e=o.error)||void 0===e?void 0:e.includes("400"))){console.warn("Main health check failed with 400, trying alternative method");const t=yield this.plugin.apiClient.simpleHealthCheck();t.success&&t.data&&(o={success:!0,data:{status:t.data.status,version:"unknown"}})}n.hide(),o.success?new t.Notice("✅ Connection successful!",3e3):new t.Notice(`❌ Connection failed: ${o.error}`,5e3)}catch(e){n.hide(),new t.Notice(`❌ Connection error: ${e instanceof Error?e.message:"Unknown error"}`,5e3)}})}}const i="vaultpilot-view";class s extends t.ItemView{constructor(t,e){super(t),this.plugin=e}getViewType(){return i}getDisplayText(){return"VaultPilot"}getIcon(){return"bot"}onOpen(){return e(this,void 0,void 0,function*(){const t=this.containerEl;t.empty(),t.addClass("vaultpilot-view");const e=t.createEl("div",{cls:"vaultpilot-header"});e.createEl("h2",{text:"🤖 VaultPilot"}),e.createEl("p",{text:"Your AI assistant for Obsidian",cls:"vaultpilot-subtitle"}),this.statusEl=t.createEl("div",{cls:"vaultpilot-status"}),this.updateStatus(),this.quickActionsEl=t.createEl("div",{cls:"vaultpilot-quick-actions"}),this.createQuickActions(),this.vaultStatsEl=t.createEl("div",{cls:"vaultpilot-vault-stats"}),this.updateVaultStats();const n=t.createEl("div",{cls:"vaultpilot-activities"});n.createEl("h3",{text:"Recent Activities"}),n.createEl("p",{text:"Activity tracking coming soon...",cls:"vaultpilot-placeholder"}),this.addStyles()})}updateStatus(){this.statusEl.empty(),this.statusEl.createEl("h3",{text:"Connection Status"});const t=this.statusEl.createEl("div",{cls:"vaultpilot-status-container"}),e=t.createEl("div",{cls:"vaultpilot-status-item"});e.createEl("span",{text:"Backend: "});const n=e.createEl("span",{cls:"vaultpilot-status-indicator",text:"Checking..."}),o=t.createEl("div",{cls:"vaultpilot-status-item"});o.createEl("span",{text:"WebSocket: "}),o.createEl("span",{cls:"vaultpilot-status-indicator",text:this.plugin.isWebSocketConnected()?"🟢 Connected":"🔴 Disconnected"}),this.checkBackendStatus(n)}checkBackendStatus(t){return e(this,void 0,void 0,function*(){var e;try{let n=yield this.plugin.apiClient.healthCheck();if(!n.success&&(null===(e=n.error)||void 0===e?void 0:e.includes("400"))){const t=yield this.plugin.apiClient.simpleHealthCheck();t.success&&t.data&&(n={success:!0,data:{status:t.data.status,version:"unknown"}})}n.success?(t.textContent="🟢 Connected",t.className="vaultpilot-status-indicator vaultpilot-status-connected"):(t.textContent="🔴 Error",t.className="vaultpilot-status-indicator vaultpilot-status-error")}catch(e){t.textContent="🔴 Offline",t.className="vaultpilot-status-indicator vaultpilot-status-offline"}})}createQuickActions(){this.quickActionsEl.empty(),this.quickActionsEl.createEl("h3",{text:"Quick Actions"});const e=this.quickActionsEl.createEl("div",{cls:"vaultpilot-actions-grid"});e.createEl("button",{text:"💬 Open Chat",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openChatModal();e.createEl("button",{text:"⚙️ Execute Workflow",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openWorkflowModal();e.createEl("button",{text:"🔍 Analyze Vault",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.analyzeVault();e.createEl("button",{text:"✨ Get Completion",cls:"vaultpilot-action-button"}).onclick=()=>{const e=this.app.workspace.getActiveViewOfType(t.MarkdownView);e?this.plugin.getCopilotCompletion(e.editor):new t.Notice("No active editor found")};this.quickActionsEl.createEl("button",{text:"🔄 Refresh Status",cls:"vaultpilot-refresh-button"}).onclick=()=>{this.updateStatus(),this.updateVaultStats()}}updateVaultStats(){this.vaultStatsEl.empty(),this.vaultStatsEl.createEl("h3",{text:"Vault Statistics"});const e=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-stats-container"}),n=this.app.vault.getFiles(),o=this.app.vault.getMarkdownFiles();[{label:"Total Files",value:n.length.toString()},{label:"Markdown Files",value:o.length.toString()},{label:"Folders",value:this.app.vault.getAllLoadedFiles().filter(e=>e instanceof t.TFolder).length.toString()}].forEach(t=>{const n=e.createEl("div",{cls:"vaultpilot-stat-item"});n.createEl("div",{text:t.value,cls:"vaultpilot-stat-value"}),n.createEl("div",{text:t.label,cls:"vaultpilot-stat-label"})}),this.loadAgentInfo()}loadAgentInfo(){return e(this,void 0,void 0,function*(){try{const t=yield this.plugin.apiClient.getAgents();if(t.success&&t.data){const e=t.data.length,n=t.data.filter(t=>t.active).length,o=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-agent-stats"});o.createEl("h4",{text:"Available Agents"});o.createEl("div",{cls:"vaultpilot-agent-info"}).createEl("span",{text:`${n}/${e} active`})}}catch(t){}})}addStyles(){if(!document.getElementById("vaultpilot-view-styles")){const t=document.createElement("style");t.id="vaultpilot-view-styles",t.textContent="\n        .vaultpilot-view {\n          padding: 20px;\n        }\n        .vaultpilot-header {\n          text-align: center;\n          margin-bottom: 30px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-subtitle {\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-status,\n        .vaultpilot-quick-actions,\n        .vaultpilot-vault-stats,\n        .vaultpilot-activities {\n          margin-bottom: 25px;\n        }\n        .vaultpilot-status h3,\n        .vaultpilot-quick-actions h3,\n        .vaultpilot-vault-stats h3,\n        .vaultpilot-activities h3 {\n          margin-bottom: 15px;\n          color: var(--text-normal);\n          border-bottom: 1px solid var(--background-modifier-border);\n          padding-bottom: 5px;\n        }\n        .vaultpilot-status-container {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n        .vaultpilot-status-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .vaultpilot-status-indicator {\n          font-weight: 500;\n        }\n        .vaultpilot-status-connected {\n          color: var(--color-green);\n        }\n        .vaultpilot-status-error,\n        .vaultpilot-status-offline {\n          color: var(--color-red);\n        }\n        .vaultpilot-actions-grid {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 10px;\n          margin-bottom: 15px;\n        }\n        .vaultpilot-action-button {\n          padding: 12px 8px;\n          background: var(--interactive-normal);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          color: var(--text-normal);\n          cursor: pointer;\n          font-size: 13px;\n          transition: background-color 0.2s;\n        }\n        .vaultpilot-action-button:hover {\n          background: var(--interactive-hover);\n        }\n        .vaultpilot-refresh-button {\n          width: 100%;\n          padding: 8px;\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          border: none;\n          border-radius: 6px;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        .vaultpilot-stats-container {\n          display: grid;\n          grid-template-columns: repeat(3, 1fr);\n          gap: 15px;\n        }\n        .vaultpilot-stat-item {\n          text-align: center;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-stat-value {\n          font-size: 24px;\n          font-weight: bold;\n          color: var(--text-accent);\n          margin-bottom: 5px;\n        }\n        .vaultpilot-stat-label {\n          font-size: 12px;\n          color: var(--text-muted);\n        }\n        .vaultpilot-agent-stats {\n          margin-top: 15px;\n          padding: 10px;\n          background: var(--background-primary-alt);\n          border-radius: 6px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-agent-stats h4 {\n          margin: 0 0 8px 0;\n          font-size: 14px;\n        }\n        .vaultpilot-agent-info {\n          font-size: 12px;\n          color: var(--text-muted);\n        }\n        .vaultpilot-placeholder {\n          color: var(--text-muted);\n          font-style: italic;\n          text-align: center;\n          padding: 20px;\n        }\n      ",document.head.appendChild(t)}}onClose(){return e(this,void 0,void 0,function*(){})}}class a extends t.Modal{constructor(t,e){super(t),this.currentConversationId=null,this.messages=[],this.plugin=e}onOpen(){const{contentEl:t}=this;t.empty(),t.addClass("vaultpilot-chat-modal");const e=t.createEl("div",{cls:"vaultpilot-chat-header"});e.createEl("h2",{text:"🤖 VaultPilot Chat"});const n=e.createEl("div",{cls:"vaultpilot-chat-toolbar"});n.createEl("button",{text:"Clear Chat",cls:"mod-cta"}).onclick=()=>this.clearChat();const o=n.createEl("select",{cls:"vaultpilot-agent-select"});o.createEl("option",{text:"Auto-select Agent",value:""}),this.loadAgents(o),this.chatContainer=t.createEl("div",{cls:"vaultpilot-chat-container"}),this.messagesEl=this.chatContainer.createEl("div",{cls:"vaultpilot-chat-messages"}),this.inputContainer=this.chatContainer.createEl("div",{cls:"vaultpilot-chat-input-container"}),this.inputEl=this.inputContainer.createEl("input",{type:"text",placeholder:"Ask me anything about your vault...",cls:"vaultpilot-chat-input"}),this.sendButton=this.inputContainer.createEl("button",{text:"Send",cls:"mod-cta vaultpilot-send-button"}),this.inputEl.addEventListener("keydown",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.sendMessage())}),this.sendButton.onclick=()=>this.sendMessage(),this.inputEl.focus(),this.loadConversationHistory(),this.addStyles()}loadAgents(t){return e(this,void 0,void 0,function*(){try{const e=yield this.plugin.apiClient.getAgents();e.success&&e.data&&e.data.forEach(e=>{t.createEl("option",{text:e.name,value:e.id})})}catch(t){console.error("Failed to load agents:",t)}})}loadConversationHistory(){return e(this,void 0,void 0,function*(){if(this.currentConversationId)try{const t=yield this.plugin.apiClient.getConversationHistory(this.currentConversationId);t.success&&t.data&&(this.messages=t.data.messages,this.renderMessages())}catch(t){console.error("Failed to load conversation history:",t)}})}sendMessage(){return e(this,void 0,void 0,function*(){const e=this.inputEl.value.trim();if(e){this.inputEl.disabled=!0,this.sendButton.disabled=!0,this.sendButton.textContent="Sending...",this.addMessage("user",e),this.inputEl.value="";try{const n=this.app.workspace.getActiveFile();let o="";if(n){const t=yield this.app.vault.read(n);o=`Current file: ${n.name}\n\nContent:\n${t}`}const i=yield this.plugin.apiClient.chat({message:e,conversation_id:this.currentConversationId||void 0,vault_context:o,agent_id:this.getSelectedAgent()});i.success&&i.data?(this.currentConversationId=i.data.conversation_id,this.addMessage("assistant",i.data.response)):(this.addMessage("assistant",`Error: ${i.error||"Failed to get response"}`),new t.Notice(`Chat error: ${i.error}`))}catch(e){const n=e instanceof Error?e.message:"Unknown error";this.addMessage("assistant",`Error: ${n}`),new t.Notice(`Chat error: ${n}`)}finally{this.inputEl.disabled=!1,this.sendButton.disabled=!1,this.sendButton.textContent="Send",this.inputEl.focus()}}})}getSelectedAgent(){const t=this.contentEl.querySelector(".vaultpilot-agent-select");return(null==t?void 0:t.value)||void 0}addMessage(t,e){const n={role:t,content:e,timestamp:(new Date).toISOString()};this.messages.push(n),this.renderMessage(n),this.scrollToBottom()}renderMessages(){this.messagesEl.empty(),this.messages.forEach(t=>this.renderMessage(t)),this.scrollToBottom()}renderMessage(t){const e=this.messagesEl.createEl("div",{cls:`vaultpilot-message vaultpilot-message-${t.role}`});e.createEl("div",{cls:"vaultpilot-message-role",text:"user"===t.role?"You":"VaultPilot"});e.createEl("div",{cls:"vaultpilot-message-content"}).innerHTML=this.renderMarkdown(t.content),t.timestamp&&e.createEl("div",{cls:"vaultpilot-message-time",text:new Date(t.timestamp).toLocaleTimeString()})}renderMarkdown(t){return t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/`(.*?)`/g,"<code>$1</code>").replace(/\n/g,"<br>")}scrollToBottom(){this.messagesEl.scrollTop=this.messagesEl.scrollHeight}clearChat(){this.messages=[],this.currentConversationId=null,this.messagesEl.empty(),new t.Notice("Chat cleared")}addStyles(){if(!document.getElementById("vaultpilot-chat-styles")){const t=document.createElement("style");t.id="vaultpilot-chat-styles",t.textContent="\n        .vaultpilot-chat-modal {\n          width: 600px;\n          height: 700px;\n        }\n        .vaultpilot-chat-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 15px;\n          padding-bottom: 10px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-chat-toolbar {\n          display: flex;\n          gap: 10px;\n          align-items: center;\n        }\n        .vaultpilot-agent-select {\n          padding: 4px 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-chat-container {\n          display: flex;\n          flex-direction: column;\n          height: calc(100% - 80px);\n        }\n        .vaultpilot-chat-messages {\n          flex: 1;\n          overflow-y: auto;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          margin-bottom: 15px;\n          background: var(--background-secondary);\n        }\n        .vaultpilot-message {\n          margin-bottom: 15px;\n          padding: 10px;\n          border-radius: 8px;\n        }\n        .vaultpilot-message-user {\n          background: var(--background-primary-alt);\n          margin-left: 20px;\n        }\n        .vaultpilot-message-assistant {\n          background: var(--background-primary);\n          margin-right: 20px;\n        }\n        .vaultpilot-message-role {\n          font-weight: bold;\n          margin-bottom: 5px;\n          color: var(--text-accent);\n        }\n        .vaultpilot-message-content {\n          line-height: 1.4;\n          color: var(--text-normal);\n          user-select: text;\n        }\n        .vaultpilot-message-time {\n          font-size: 0.8em;\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-chat-input-container {\n          display: flex;\n          gap: 10px;\n        }\n        .vaultpilot-chat-input {\n          flex: 1;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-send-button {\n          padding: 10px 20px;\n        }\n      ",document.head.appendChild(t)}}onClose(){const{contentEl:t}=this;t.empty()}}class l extends t.Modal{constructor(t,e){super(t),this.isExecuting=!1,this.plugin=e}onOpen(){const{contentEl:t}=this;t.empty(),t.addClass("vaultpilot-workflow-modal");const e=t.createEl("div",{cls:"vaultpilot-workflow-header"});e.createEl("h2",{text:"⚙️ Workflow Execution"}),e.createEl("p",{text:"Define a goal and let VaultPilot create and execute a comprehensive workflow to achieve it.",cls:"vaultpilot-workflow-description"});const n=t.createEl("div",{cls:"vaultpilot-workflow-form"}),o=n.createEl("div",{cls:"vaultpilot-form-group"});o.createEl("label",{text:"Goal *",cls:"vaultpilot-form-label"}),this.goalInput=o.createEl("textarea",{placeholder:'e.g., "Create a comprehensive study plan for machine learning based on my notes"',cls:"vaultpilot-goal-input"});const i=n.createEl("div",{cls:"vaultpilot-form-group"});i.createEl("label",{text:"Additional Context (optional)",cls:"vaultpilot-form-label"}),this.contextInput=i.createEl("textarea",{placeholder:"Provide any additional context, constraints, or requirements...",cls:"vaultpilot-context-input"});const s=n.createEl("div",{cls:"vaultpilot-form-group"});s.createEl("label",{text:"Vault Integration",cls:"vaultpilot-form-label"});const a=s.createEl("label",{cls:"vaultpilot-checkbox-label"}),l=a.createEl("input",{type:"checkbox"});a.createSpan({text:"Include active file content"});const r=s.createEl("label",{cls:"vaultpilot-checkbox-label"}),c=r.createEl("input",{type:"checkbox"});r.createSpan({text:"Include all vault files (may take longer)"}),this.executeButton=n.createEl("button",{text:"Execute Workflow",cls:"mod-cta vaultpilot-execute-button"}),this.executeButton.onclick=()=>this.executeWorkflow(l.checked,c.checked),this.progressContainer=t.createEl("div",{cls:"vaultpilot-progress-container"}),this.progressContainer.style.display="none",this.resultsContainer=t.createEl("div",{cls:"vaultpilot-results-container"}),this.resultsContainer.style.display="none",this.goalInput.focus(),this.addStyles()}executeWorkflow(n,o){return e(this,void 0,void 0,function*(){const e=this.goalInput.value.trim();if(e){this.isExecuting=!0,this.executeButton.disabled=!0,this.executeButton.textContent="Executing...",this.progressContainer.style.display="block",this.resultsContainer.style.display="none";try{let t="";if(n){const e=this.app.workspace.getActiveFile();if(e){const n=yield this.app.vault.read(e);t+=`=== ${e.name} ===\n${n}\n\n`}}if(o){const e=this.app.vault.getMarkdownFiles();for(const n of e.slice(0,20)){const e=yield this.app.vault.read(n);t+=`=== ${n.name} ===\n${e}\n\n`}}const i={goal:e,context:this.contextInput.value.trim()||void 0,vault_content:t||void 0};this.plugin.isWebSocketConnected()&&this.setupProgressListener();const s=yield this.plugin.apiClient.executeWorkflow(i);if(!s.success||!s.data)throw new Error(s.error||"Workflow execution failed");yield this.displayResults(s.data)}catch(e){const n=e instanceof Error?e.message:"Unknown error";new t.Notice(`Workflow error: ${n}`),this.displayError(n)}finally{this.isExecuting=!1,this.executeButton.disabled=!1,this.executeButton.textContent="Execute Workflow"}}else new t.Notice("Please enter a goal for the workflow")})}setupProgressListener(){this.displayProgress("Analyzing goal and context..."),setTimeout(()=>{this.displayProgress("Planning workflow steps...")},1e3),setTimeout(()=>{this.displayProgress("Executing workflow...")},2e3)}displayProgress(t){this.progressContainer.innerHTML=`\n      <div class="vaultpilot-progress-item">\n        <div class="vaultpilot-progress-spinner"></div>\n        <span>${t}</span>\n      </div>\n    `}displayResults(t){return e(this,void 0,void 0,function*(){this.progressContainer.style.display="none",this.resultsContainer.style.display="block",this.resultsContainer.empty();const e=this.resultsContainer.createEl("div",{cls:"vaultpilot-results-header"});e.createEl("h3",{text:"✅ Workflow Completed"}),e.createEl("p",{text:`Execution time: ${t.execution_time}s`,cls:"vaultpilot-execution-time"});const n=this.resultsContainer.createEl("div",{cls:"vaultpilot-result-content"});n.createEl("h4",{text:"Result"});if(n.createEl("div",{cls:"vaultpilot-result-text"}).innerHTML=this.renderMarkdown(t.result),t.steps_taken&&t.steps_taken.length>0){const e=this.resultsContainer.createEl("div",{cls:"vaultpilot-steps-container"});e.createEl("h4",{text:"Steps Taken"});const n=e.createEl("ol",{cls:"vaultpilot-steps-list"});t.steps_taken.forEach(t=>{n.createEl("li",{text:t})})}if(t.artifacts&&t.artifacts.length>0){const e=this.resultsContainer.createEl("div",{cls:"vaultpilot-artifacts-container"});e.createEl("h4",{text:"Generated Artifacts"}),t.artifacts.forEach((t,n)=>{const o=e.createEl("div",{cls:"vaultpilot-artifact"});o.createEl("h5",{text:t.title}),o.createEl("p",{text:`Type: ${t.type}`,cls:"vaultpilot-artifact-type"});o.createEl("button",{text:"Save as Note",cls:"mod-cta"}).onclick=()=>this.saveArtifactAsNote(t,n)})}this.resultsContainer.createEl("div",{cls:"vaultpilot-results-actions"}).createEl("button",{text:"Save Complete Results as Note",cls:"mod-cta"}).onclick=()=>this.saveCompleteResultsAsNote(t)})}saveArtifactAsNote(n,o){return e(this,void 0,void 0,function*(){try{const e=`${n.title.replace(/[^a-zA-Z0-9\s]/g,"")}.md`,o=`# ${n.title}\n\n${n.content}`;yield this.app.vault.create(e,o),new t.Notice(`Artifact saved as ${e}`)}catch(e){new t.Notice(`Failed to save artifact: ${e instanceof Error?e.message:"Unknown error"}`)}})}saveCompleteResultsAsNote(n){return e(this,void 0,void 0,function*(){try{const e=`VaultPilot Workflow Results ${(new Date).toISOString().split("T")[0]}.md`;let o="# VaultPilot Workflow Results\n\n";o+=`**Goal:** ${this.goalInput.value}\n\n`,o+=`**Execution Time:** ${n.execution_time}s\n\n`,o+=`## Result\n\n${n.result}\n\n`,n.steps_taken&&n.steps_taken.length>0&&(o+="## Steps Taken\n\n",n.steps_taken.forEach((t,e)=>{o+=`${e+1}. ${t}\n`}),o+="\n"),n.artifacts&&n.artifacts.length>0&&(o+="## Generated Artifacts\n\n",n.artifacts.forEach(t=>{o+=`### ${t.title}\n\n${t.content}\n\n`})),yield this.app.vault.create(e,o),new t.Notice(`Complete results saved as ${e}`)}catch(e){new t.Notice(`Failed to save results: ${e instanceof Error?e.message:"Unknown error"}`)}})}displayError(t){this.progressContainer.style.display="none",this.resultsContainer.style.display="block",this.resultsContainer.innerHTML=`\n      <div class="vaultpilot-error">\n        <h3>❌ Workflow Failed</h3>\n        <p>${t}</p>\n      </div>\n    `}renderMarkdown(t){return t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/`(.*?)`/g,"<code>$1</code>").replace(/\n/g,"<br>")}addStyles(){if(!document.getElementById("vaultpilot-workflow-styles")){const t=document.createElement("style");t.id="vaultpilot-workflow-styles",t.textContent="\n        .vaultpilot-workflow-modal {\n          width: 700px;\n          max-height: 80vh;\n          overflow-y: auto;\n        }\n        .vaultpilot-workflow-header {\n          margin-bottom: 20px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-workflow-description {\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-form-group {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-form-label {\n          display: block;\n          margin-bottom: 8px;\n          font-weight: 500;\n          color: var(--text-normal);\n        }\n        .vaultpilot-goal-input,\n        .vaultpilot-context-input {\n          width: 100%;\n          min-height: 80px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n          resize: vertical;\n        }\n        .vaultpilot-checkbox-label {\n          display: block;\n          margin-bottom: 8px;\n          cursor: pointer;\n        }\n        .vaultpilot-checkbox-label input {\n          margin-right: 8px;\n        }\n        .vaultpilot-execute-button {\n          width: 100%;\n          padding: 12px;\n          font-size: 16px;\n        }\n        .vaultpilot-progress-container {\n          margin: 20px 0;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-progress-item {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n        }\n        .vaultpilot-progress-spinner {\n          width: 16px;\n          height: 16px;\n          border: 2px solid var(--background-modifier-border);\n          border-top: 2px solid var(--text-accent);\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n        }\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n        .vaultpilot-results-container {\n          margin-top: 20px;\n        }\n        .vaultpilot-results-header {\n          margin-bottom: 15px;\n        }\n        .vaultpilot-execution-time {\n          color: var(--text-muted);\n          font-size: 0.9em;\n        }\n        .vaultpilot-result-content {\n          margin-bottom: 20px;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-result-text {\n          line-height: 1.5;\n          color: var(--text-normal);\n        }\n        .vaultpilot-steps-container,\n        .vaultpilot-artifacts-container {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-steps-list {\n          padding-left: 20px;\n        }\n        .vaultpilot-artifact {\n          margin-bottom: 15px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary-alt);\n        }\n        .vaultpilot-artifact-type {\n          color: var(--text-muted);\n          font-size: 0.9em;\n          margin-bottom: 10px;\n        }\n        .vaultpilot-results-actions {\n          margin-top: 20px;\n          text-align: center;\n        }\n        .vaultpilot-error {\n          padding: 20px;\n          background: var(--background-primary-alt);\n          border: 1px solid var(--color-red);\n          border-radius: 8px;\n          color: var(--color-red);\n        }\n      ",document.head.appendChild(t)}}onClose(){const{contentEl:t}=this;t.empty()}}class r{constructor(t,e){this.wsCallbacks=new Map,this.baseUrl=t.replace(/\/$/,""),this.apiKey=e}makeRequest(t){return e(this,arguments,void 0,function*(t,e={}){const n=`${this.baseUrl}${t}`,o=Object.assign({"Content-Type":"application/json",Accept:"application/json"},e.headers||{});this.apiKey&&(o.Authorization=`Bearer ${this.apiKey}`);try{const t=yield fetch(n,Object.assign(Object.assign({},e),{headers:o,mode:"cors",credentials:"omit"}));let i;const s=t.headers.get("content-type");if(i=s&&s.includes("application/json")?yield t.json():yield t.text(),!t.ok){const e="object"==typeof i&&i.error?i.error:`HTTP ${t.status}: ${t.statusText}`;return console.error(`API Error [${t.status}]:`,e),{success:!1,error:e}}return{success:!0,data:"string"==typeof i?{message:i}:i}}catch(t){return console.error("API Request Error:",t),{success:!1,error:t instanceof Error?t.message:"Unknown error occurred"}}})}healthCheck(){return e(this,void 0,void 0,function*(){console.log(`VaultPilot: Attempting health check to ${this.baseUrl}/api/obsidian/health`);const t=yield this.makeRequest("/api/obsidian/health",{method:"GET"});return console.log("VaultPilot: Health check result:",t),t})}simpleHealthCheck(){return e(this,void 0,void 0,function*(){try{const t=`${this.baseUrl}/api/obsidian/health`,e=yield fetch(t,{method:"HEAD",mode:"cors",credentials:"omit"});return e.ok||405===e.status?{success:!0,data:{status:"ok"}}:{success:!1,error:`Server responded with status ${e.status}`}}catch(t){return{success:!1,error:t instanceof Error?t.message:"Connection failed"}}})}chat(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/chat",{method:"POST",body:JSON.stringify(t)})})}getConversationHistory(t){return e(this,arguments,void 0,function*(t,e=50){const n={conversation_id:t,limit:e,include_messages:!0};return this.makeRequest("/api/obsidian/conversation/history",{method:"POST",body:JSON.stringify(n)})})}deleteConversation(t){return e(this,void 0,void 0,function*(){return this.makeRequest(`/api/obsidian/conversations/${t}`,{method:"DELETE"})})}getCopilotCompletion(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/copilot/complete",{method:"POST",body:JSON.stringify(t)})})}executeWorkflow(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/workflow",{method:"POST",body:JSON.stringify(t)})})}getAgents(){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agents")})}createAgent(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agents/create",{method:"POST",body:JSON.stringify(t)})})}executeAgent(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agent/execute",{method:"POST",body:JSON.stringify(t)})})}analyzeVaultContext(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/vault/context",{method:"POST",body:JSON.stringify(t)})})}planTasks(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/planning/tasks",{method:"POST",body:JSON.stringify(t)})})}parseIntelligence(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/intelligence/parse",{method:"POST",body:JSON.stringify(t)})})}updateMemory(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/memory/update",{method:"POST",body:JSON.stringify(t)})})}connectWebSocket(t){const e=this.baseUrl.replace("http","ws")+"/ws/obsidian";console.log(`VaultPilot: Attempting WebSocket connection to ${e}`),this.websocket=new WebSocket(e),this.websocket.onopen=()=>{var e;console.log("VaultPilot: WebSocket connected to EvoAgentX"),null===(e=t.onConnect)||void 0===e||e.call(t)},this.websocket.onmessage=e=>{var n,o,i,s,a,l;try{const l=JSON.parse(e.data);switch(console.log("VaultPilot: WebSocket message received:",l.type),l.type){case"chat":null===(n=t.onChat)||void 0===n||n.call(t,l.data);break;case"workflow_progress":null===(o=t.onWorkflowProgress)||void 0===o||o.call(t,l.data);break;case"copilot":null===(i=t.onCopilot)||void 0===i||i.call(t,l.data);break;case"vault_sync":null===(s=t.onVaultSync)||void 0===s||s.call(t,l.data);break;case"error":null===(a=t.onError)||void 0===a||a.call(t,l.data)}}catch(e){console.error("VaultPilot: Error parsing WebSocket message:",e),null===(l=t.onError)||void 0===l||l.call(t,"Failed to parse WebSocket message")}},this.websocket.onclose=e=>{var n;console.log("VaultPilot: WebSocket disconnected from EvoAgentX",e.code,e.reason),null===(n=t.onDisconnect)||void 0===n||n.call(t)},this.websocket.onerror=e=>{var n;console.error("VaultPilot: WebSocket error:",e),null===(n=t.onError)||void 0===n||n.call(t,"WebSocket connection error")}}disconnectWebSocket(){this.websocket&&(this.websocket.close(),this.websocket=void 0)}sendWebSocketMessage(t,e){this.websocket&&this.websocket.readyState===WebSocket.OPEN&&this.websocket.send(JSON.stringify({type:t,data:e}))}isWebSocketConnected(){var t;return(null===(t=this.websocket)||void 0===t?void 0:t.readyState)===WebSocket.OPEN}}class c extends t.Plugin{constructor(){super(...arguments),this.websocketConnected=!1,this.copilotEnabled=!1}onload(){return e(this,void 0,void 0,function*(){var e;yield this.loadSettings(),this.apiClient=new r(this.settings.backendUrl,this.settings.apiKey);try{let n=yield this.apiClient.healthCheck();if(!n.success&&(null===(e=n.error)||void 0===e?void 0:e.includes("400"))){console.warn("Main health check failed with 400, trying alternative method");const t=yield this.apiClient.simpleHealthCheck();t.success&&t.data&&(n={success:!0,data:{status:t.data.status,version:"unknown"}})}n.success?(new t.Notice("✅ VaultPilot connected to EvoAgentX",3e3),this.settings.enableWebSocket&&this.connectWebSocket()):(console.error("Health check failed:",n.error),new t.Notice("⚠️ EvoAgentX backend offline - some features may not work",5e3))}catch(e){console.error("Health check error:",e),new t.Notice("⚠️ Cannot connect to EvoAgentX backend",5e3)}this.registerView(i,t=>new s(t,this));this.addRibbonIcon("bot","VaultPilot",t=>{this.openChatModal()}).addClass("vaultpilot-ribbon-class"),this.addCommand({id:"open-chat",name:"Open Chat",callback:()=>this.openChatModal()}),this.addCommand({id:"execute-workflow",name:"Execute Workflow",callback:()=>this.openWorkflowModal()}),this.addCommand({id:"analyze-vault",name:"Analyze Current Vault",callback:()=>this.analyzeVault()}),this.addCommand({id:"copilot-complete",name:"Get AI Completion",editorCallback:t=>this.getCopilotCompletion(t)}),this.addCommand({id:"quick-chat",name:"Quick Chat with Selection",editorCallback:t=>this.quickChatWithSelection(t)}),this.addCommand({id:"plan-tasks",name:"Plan Tasks from Note",editorCallback:t=>this.planTasksFromNote(t)}),this.addCommand({id:"open-vaultpilot-view",name:"Open VaultPilot View",callback:()=>this.activateView()}),this.settings.enableCopilot&&this.settings.enableAutoComplete&&this.registerDomEvent(document,"keyup",this.handleKeyUp.bind(this)),this.addSettingTab(new o(this.app,this))})}onunload(){this.app.workspace.detachLeavesOfType(i),this.disconnectWebSocket()}connectWebSocket(){this.websocketConnected||this.apiClient.connectWebSocket({onChat:t=>{console.log("WebSocket chat update:",t)},onWorkflowProgress:e=>{new t.Notice(`Workflow: ${e.step}`,2e3)},onCopilot:t=>{this.handleCopilotSuggestion(t)},onVaultSync:t=>{console.log("Vault sync update:",t)},onError:e=>{new t.Notice(`WebSocket error: ${e}`,5e3)},onConnect:()=>{this.websocketConnected=!0,this.settings.debugMode&&new t.Notice("WebSocket connected",2e3)},onDisconnect:()=>{this.websocketConnected=!1,this.settings.debugMode&&new t.Notice("WebSocket disconnected",2e3)}})}disconnectWebSocket(){this.apiClient.disconnectWebSocket(),this.websocketConnected=!1}isWebSocketConnected(){return this.websocketConnected}openChatModal(){new a(this.app,this).open()}openWorkflowModal(){new l(this.app,this).open()}analyzeVault(){return e(this,void 0,void 0,function*(){const e=new t.Notice("Analyzing vault...",0);try{const n=this.app.vault.getMarkdownFiles();let o="";for(const t of n.slice(0,10)){const e=yield this.app.vault.read(t);o+=`=== ${t.name} ===\n${e}\n\n`}const i=yield this.apiClient.analyzeVaultContext({content:o,analysis_type:"insights"});if(e.hide(),!i.success||!i.data)throw new Error(i.error||"Analysis failed");{const e=(new Date).toISOString().split("T")[0],n=`Vault Analysis ${e}.md`;let o=`# Vault Analysis - ${e}\n\n`;o+=`## Analysis\n\n${i.data.analysis}\n\n`,i.data.insights&&i.data.insights.length>0&&(o+="## Key Insights\n\n",i.data.insights.forEach(t=>{o+=`- ${t}\n`}),o+="\n"),i.data.recommendations&&i.data.recommendations.length>0&&(o+="## Recommendations\n\n",i.data.recommendations.forEach(t=>{o+=`- ${t}\n`})),yield this.app.vault.create(n,o),new t.Notice(`Vault analysis saved as ${n}`)}}catch(n){e.hide(),new t.Notice(`Analysis error: ${n instanceof Error?n.message:"Unknown error"}`)}})}getCopilotCompletion(n){return e(this,void 0,void 0,function*(){if(!this.settings.enableCopilot)return void new t.Notice("Copilot is disabled in settings");const e=n.getCursor(),o=n.getLine(e.line).substring(0,e.ch),i=n.getValue();try{const s=yield this.apiClient.getCopilotCompletion({text:i,cursor_position:n.posToOffset(e),file_type:"markdown",context:o});s.success&&s.data?(n.replaceRange(s.data.completion,e),new t.Notice("Completion inserted",2e3)):new t.Notice(`Copilot error: ${s.error}`)}catch(e){new t.Notice(`Copilot error: ${e instanceof Error?e.message:"Unknown error"}`)}})}quickChatWithSelection(n){return e(this,void 0,void 0,function*(){const e=n.getSelection();if(e)try{const o=yield this.apiClient.chat({message:`Please explain or analyze this text: "${e}"`,vault_context:n.getValue()});if(o.success&&o.data){const e=n.getCursor("to"),i=`\n\n**VaultPilot Analysis:**\n${o.data.response}\n\n`;n.replaceRange(i,e),new t.Notice("Analysis inserted",2e3)}else new t.Notice(`Chat error: ${o.error}`)}catch(e){new t.Notice(`Chat error: ${e instanceof Error?e.message:"Unknown error"}`)}else new t.Notice("No text selected")})}planTasksFromNote(n){return e(this,void 0,void 0,function*(){const e=n.getValue(),o=this.app.workspace.getActiveFile();if(!e.trim())return void new t.Notice("No content to analyze");const i=new t.Notice("Planning tasks...",0);try{const n=yield this.apiClient.planTasks({goal:`Create a task plan based on this note: ${(null==o?void 0:o.name)||"Untitled"}`,context:e,timeframe:"1 week"});if(i.hide(),!n.success||!n.data)throw new Error(n.error||"Task planning failed");{const e=(new Date).toISOString().split("T")[0],i=`Task Plan - ${(null==o?void 0:o.basename)||"Untitled"} - ${e}.md`;let s=`# ${n.data.plan.title}\n\n`;s+=`${n.data.plan.description}\n\n`,s+=`**Estimated Duration:** ${n.data.plan.estimated_duration}\n\n`,n.data.plan.tasks&&n.data.plan.tasks.length>0&&(s+="## Tasks\n\n",n.data.plan.tasks.forEach(t=>{const e="completed"===t.status?"[x]":"[ ]";s+=`${e} **${t.title}** (${t.priority} priority)\n`,s+=`   ${t.description}\n`,s+=`   *Estimated time: ${t.estimated_time}*\n\n`})),n.data.milestones&&n.data.milestones.length>0&&(s+="## Milestones\n\n",n.data.milestones.forEach(t=>{s+=`- **${t.title}** (${t.target_date})\n`,s+=`  ${t.description}\n\n`})),yield this.app.vault.create(i,s),new t.Notice(`Task plan saved as ${i}`)}}catch(e){i.hide(),new t.Notice(`Task planning error: ${e instanceof Error?e.message:"Unknown error"}`)}})}activateView(){return e(this,void 0,void 0,function*(){const t=this.app.workspace.getLeavesOfType(i);if(0===t.length){const t=this.app.workspace.getRightLeaf(!1);t&&(yield t.setViewState({type:i,active:!0}))}else this.app.workspace.revealLeaf(t[0])})}handleKeyUp(t){if(!this.settings.enableAutoComplete||!this.settings.enableCopilot)return;t.target.classList.contains("cm-content")&&(clearTimeout(this.autoCompleteTimeout),this.autoCompleteTimeout=setTimeout(()=>{this.triggerAutoCompletion()},1e3))}triggerAutoCompletion(){return e(this,void 0,void 0,function*(){const e=this.app.workspace.getActiveViewOfType(t.MarkdownView);if(!e)return;const n=e.editor,o=n.getCursor(),i=n.getLine(o.line);if(!(i.trim().length<3||o.ch!==i.length))try{const e=yield this.apiClient.getCopilotCompletion({text:n.getValue(),cursor_position:n.posToOffset(o),file_type:"markdown"});e.success&&e.data&&e.data.suggestions.length>0&&this.settings.debugMode&&new t.Notice(`Suggestion: ${e.data.suggestions[0]}`,3e3)}catch(t){this.settings.debugMode&&console.error("Auto-completion error:",t)}})}handleCopilotSuggestion(e){this.settings.debugMode&&new t.Notice(`Live suggestion: ${e.completion}`,2e3)}loadSettings(){return e(this,void 0,void 0,function*(){this.settings=Object.assign({},n,yield this.loadData())})}saveSettings(){return e(this,void 0,void 0,function*(){yield this.saveData(this.settings),this.apiClient=new r(this.settings.backendUrl,this.settings.apiKey),this.settings.enableWebSocket&&!this.websocketConnected?this.connectWebSocket():!this.settings.enableWebSocket&&this.websocketConnected&&this.disconnectWebSocket()})}}module.exports=c;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
