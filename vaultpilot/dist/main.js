"use strict";var t=require("obsidian");function e(t,e,n,a){return new(n||(n=Promise))(function(i,o){function s(t){try{r(a.next(t))}catch(t){o(t)}}function l(t){try{r(a.throw(t))}catch(t){o(t)}}function r(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n(function(t){t(e)})).then(s,l)}r((a=a.apply(t,e||[])).next())})}"function"==typeof SuppressedError&&SuppressedError;const n={enableVaultManagement:!0,autoSyncVaultStructure:!1,searchResultsLimit:50,enableSmartSearch:!0,batchOperationTimeout:3e4,showVaultStats:!0,maxSearchResults:100,defaultSearchType:"content",enableFileOperations:!0,confirmDestructiveOperations:!0,autoBackupBeforeOperations:!1};const a={backendUrl:"http://localhost:8000",apiKey:"",enableWebSocket:!0,enableCopilot:!0,enableAutoComplete:!1,defaultAgent:"",defaultMode:"ask",chatHistoryLimit:100,debugMode:!1,showIntentDebug:!1,vaultManagement:n};class i extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){const{containerEl:a}=this;a.empty(),a.createEl("h2",{text:"VaultPilot Settings"}),a.createEl("p",{text:"Configure your connection to EvoAgentX backend and AI features."}),a.createEl("h3",{text:"Connection"}),new t.Setting(a).setName("Backend URL").setDesc("URL of EvoAgentX backend server").addText(t=>t.setPlaceholder("http://localhost:8000").setValue(this.plugin.settings.backendUrl).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.backendUrl=t,yield this.plugin.saveSettings()}))),new t.Setting(a).setName("API Key").setDesc("Optional API key for authentication (if required by backend)").addText(t=>t.setPlaceholder("Enter API key...").setValue(this.plugin.settings.apiKey||"").onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.apiKey=t,yield this.plugin.saveSettings()}))),new t.Setting(a).setName("Connection Test").setDesc("Test connection to EvoAgentX backend").addButton(t=>t.setButtonText("Test Connection").onClick(()=>e(this,void 0,void 0,function*(){yield this.testConnection()}))),a.createEl("h3",{text:"Features"}),new t.Setting(a).setName("Enable WebSocket").setDesc("Enable real-time communication for live updates and progress tracking").addToggle(t=>t.setValue(this.plugin.settings.enableWebSocket).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.enableWebSocket=t,yield this.plugin.saveSettings(),t?this.plugin.connectWebSocket():this.plugin.disconnectWebSocket()}))),new t.Setting(a).setName("Enable Copilot").setDesc("Enable AI-powered text completion and suggestions").addToggle(t=>t.setValue(this.plugin.settings.enableCopilot).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.enableCopilot=t,yield this.plugin.saveSettings()}))),new t.Setting(a).setName("Enable Auto-Complete").setDesc("Automatically suggest completions after sentence endings and new lines (with 10s cooldown)").addToggle(t=>t.setValue(this.plugin.settings.enableAutoComplete).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.enableAutoComplete=t,yield this.plugin.saveSettings()}))),a.createEl("h3",{text:"Agent Configuration"}),new t.Setting(a).setName("Default Agent").setDesc("Default agent to use for chat and workflows (leave empty for auto-selection)").addText(t=>t.setPlaceholder("Agent ID or name...").setValue(this.plugin.settings.defaultAgent||"").onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.defaultAgent=t,yield this.plugin.saveSettings()}))),new t.Setting(a).setName("Default Chat Mode").setDesc("Default mode for new chat sessions: Ask for simple Q&A, Agent for complex workflows").addDropdown(t=>t.addOption("ask","Ask Mode - Simple Q&A").addOption("agent","Agent Mode - Complex Workflows").setValue(this.plugin.settings.defaultMode).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.defaultMode=t,yield this.plugin.saveSettings()}))),new t.Setting(a).setName("Chat History Limit").setDesc("Maximum number of chat messages to keep in history").addSlider(t=>t.setLimits(10,500,10).setValue(this.plugin.settings.chatHistoryLimit).setDynamicTooltip().onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.chatHistoryLimit=t,yield this.plugin.saveSettings()}))),a.createEl("h3",{text:"Advanced"}),new t.Setting(a).setName("Debug Mode").setDesc("Enable debug logging and additional developer features").addToggle(t=>t.setValue(this.plugin.settings.debugMode).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.debugMode=t,yield this.plugin.saveSettings()}))),new t.Setting(a).setName("Show Intent Debug Overlay").setDesc("Display automatic intent detection in chat (Ask vs Agent mode)").addToggle(t=>t.setValue(this.plugin.settings.showIntentDebug).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.showIntentDebug=t,yield this.plugin.saveSettings()}))),a.createEl("h3",{text:"Vault Management"}),function(a,i){a.createEl("h2",{text:"Vault Management"}),a.createEl("p",{text:"Configure AI-powered vault structure analysis and file operations."}),new t.Setting(a).setName("Enable Vault Management").setDesc("Enable AI-powered vault structure analysis and file operations").addToggle(t=>{var a,o;return t.setValue(null===(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.enableVaultManagement)||void 0===o||o).onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.enableVaultManagement=t,yield i.saveSettings(),t?i.initializeVaultManagement():i.disableVaultManagement()}))}),new t.Setting(a).setName("Auto Sync Vault Structure").setDesc("Automatically update vault structure analysis when files change").addToggle(t=>{var a,o;return t.setValue(null!==(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.autoSyncVaultStructure)&&void 0!==o&&o).onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.autoSyncVaultStructure=t,yield i.saveSettings()}))}),new t.Setting(a).setName("Enable Smart Search").setDesc("Use AI-powered search with context and insights").addToggle(t=>{var a,o;return t.setValue(null===(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.enableSmartSearch)||void 0===o||o).onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.enableSmartSearch=t,yield i.saveSettings()}))}),new t.Setting(a).setName("Search Results Limit").setDesc("Maximum number of search results to display").addSlider(t=>{var a,o;return t.setLimits(10,200,10).setValue(null!==(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.searchResultsLimit)&&void 0!==o?o:50).setDynamicTooltip().onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.searchResultsLimit=t,yield i.saveSettings()}))}),new t.Setting(a).setName("Default Search Type").setDesc("Default search mode for smart search").addDropdown(t=>{var a,o;return t.addOption("content","Content Search").addOption("filename","Filename Search").addOption("tags","Tag Search").addOption("links","Link Search").addOption("comprehensive","Comprehensive Search").setValue(null!==(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.defaultSearchType)&&void 0!==o?o:"content").onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.defaultSearchType=t,yield i.saveSettings()}))}),new t.Setting(a).setName("Enable File Operations").setDesc("Allow file creation, deletion, and modification through the interface").addToggle(t=>{var a,o;return t.setValue(null===(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.enableFileOperations)||void 0===o||o).onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.enableFileOperations=t,yield i.saveSettings()}))}),new t.Setting(a).setName("Confirm Destructive Operations").setDesc("Show confirmation dialog for file deletion and destructive operations").addToggle(t=>{var a,o;return t.setValue(null===(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.confirmDestructiveOperations)||void 0===o||o).onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.confirmDestructiveOperations=t,yield i.saveSettings()}))}),new t.Setting(a).setName("Auto Backup Before Operations").setDesc("Automatically create backups before destructive file operations").addToggle(t=>{var a,o;return t.setValue(null!==(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.autoBackupBeforeOperations)&&void 0!==o&&o).onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.autoBackupBeforeOperations=t,yield i.saveSettings()}))}),new t.Setting(a).setName("Batch Operation Timeout").setDesc("Timeout for batch operations in milliseconds").addText(t=>{var a,o;return t.setPlaceholder("30000").setValue(String(null!==(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.batchOperationTimeout)&&void 0!==o?o:3e4)).onChange(t=>e(this,void 0,void 0,function*(){const e=parseInt(t)||3e4;i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.batchOperationTimeout=e,yield i.saveSettings()}))}),new t.Setting(a).setName("Show Vault Statistics").setDesc("Display vault statistics in modals and interfaces").addToggle(t=>{var a,o;return t.setValue(null===(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.showVaultStats)||void 0===o||o).onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.showVaultStats=t,yield i.saveSettings()}))}),new t.Setting(a).setName("Test Vault Management Connection").setDesc("Test connection to vault management endpoints").addButton(t=>t.setButtonText("Test Connection").setCta().onClick(()=>e(this,void 0,void 0,function*(){if(!i.vaultClient)return t.setButtonText("Not Available"),void setTimeout(()=>t.setButtonText("Test Connection"),2e3);t.setButtonText("Testing..."),t.setDisabled(!0);try{(yield i.vaultClient.testConnection()).success?t.setButtonText("✅ Connected"):t.setButtonText("❌ Failed")}catch(e){t.setButtonText("❌ Error")}t.setDisabled(!1),setTimeout(()=>t.setButtonText("Test Connection"),3e3)}))),a.createEl("h3",{text:"Advanced Vault Management"}),new t.Setting(a).setName("Maximum Search Results").setDesc("Absolute maximum number of search results to fetch from backend").addSlider(t=>{var a,o;return t.setLimits(50,500,25).setValue(null!==(o=null===(a=i.settings.vaultManagement)||void 0===a?void 0:a.maxSearchResults)&&void 0!==o?o:100).setDynamicTooltip().onChange(t=>e(this,void 0,void 0,function*(){i.settings.vaultManagement||(i.settings.vaultManagement=Object.assign({},n)),i.settings.vaultManagement.maxSearchResults=t,yield i.saveSettings()}))}),new t.Setting(a).setName("Reset Vault Management Settings").setDesc("Reset all vault management settings to their default values").addButton(t=>t.setButtonText("Reset to Defaults").setWarning().onClick(()=>e(this,void 0,void 0,function*(){i.settings.vaultManagement=Object.assign({},n),yield i.saveSettings();const t=i.app.setting.activeTab;t&&t.display&&t.display()})))}(a,this.plugin),a.createEl("h2",{text:"Help & Documentation"}),a.createEl("h3",{text:"Information"});a.createEl("div",{cls:"setting-item-description"}).innerHTML="\n      <p><strong>VaultPilot v1.0.0</strong></p>\n      <p>Comprehensive EvoAgentX integration for Obsidian</p>\n      <p>Features: AI Chat, Copilot, Workflows, Vault Analysis, Task Planning</p>\n      <p>For help and documentation, visit the GitHub repository.</p>\n    "}testConnection(){return e(this,void 0,void 0,function*(){var e;const n=new t.Notice("Testing connection...",0);try{let a=yield this.plugin.apiClient.healthCheck();if(!a.success&&(null===(e=a.error)||void 0===e?void 0:e.includes("400"))){console.warn("Main health check failed with 400, trying alternative method");const t=yield this.plugin.apiClient.simpleHealthCheck();t.success&&t.data&&(a={success:!0,data:{status:t.data.status,version:"unknown"}})}n.hide(),a.success?new t.Notice("✅ Connection successful!",3e3):new t.Notice(`❌ Connection failed: ${a.error}`,5e3)}catch(e){n.hide(),new t.Notice(`❌ Connection error: ${e instanceof Error?e.message:"Unknown error"}`,5e3)}})}}const o="vaultpilot-view";class s extends t.ItemView{constructor(t,e){super(t),this.plugin=e}getViewType(){return o}getDisplayText(){return"VaultPilot"}getIcon(){return"bot"}onOpen(){return e(this,void 0,void 0,function*(){const t=this.containerEl;t.empty(),t.addClass("vaultpilot-view");const e=t.createEl("div",{cls:"vaultpilot-header"});e.createEl("h2",{text:"🤖 VaultPilot"}),e.createEl("p",{text:"Your AI assistant for Obsidian",cls:"vaultpilot-subtitle"}),this.statusEl=t.createEl("div",{cls:"vaultpilot-status"}),this.updateStatus(),this.quickActionsEl=t.createEl("div",{cls:"vaultpilot-quick-actions"}),this.createQuickActions(),this.vaultStatsEl=t.createEl("div",{cls:"vaultpilot-vault-stats"}),this.updateVaultStats();const n=t.createEl("div",{cls:"vaultpilot-activities"});n.createEl("h3",{text:"Recent Activities"}),n.createEl("p",{text:"Activity tracking coming soon...",cls:"vaultpilot-placeholder"}),this.addStyles()})}updateStatus(){this.statusEl.empty(),this.statusEl.createEl("h3",{text:"Connection Status"});const t=this.statusEl.createEl("div",{cls:"vaultpilot-status-container"}),e=t.createEl("div",{cls:"vaultpilot-status-item"});e.createEl("span",{text:"Backend: "});const n=e.createEl("span",{cls:"vaultpilot-status-indicator",text:"Checking..."}),a=t.createEl("div",{cls:"vaultpilot-status-item"});a.createEl("span",{text:"WebSocket: "}),a.createEl("span",{cls:"vaultpilot-status-indicator",text:this.plugin.isWebSocketConnected()?"🟢 Connected":"🔴 Disconnected"}),this.checkBackendStatus(n)}checkBackendStatus(t){return e(this,void 0,void 0,function*(){var e;try{let n=yield this.plugin.apiClient.healthCheck();if(!n.success&&(null===(e=n.error)||void 0===e?void 0:e.includes("400"))){const t=yield this.plugin.apiClient.simpleHealthCheck();t.success&&t.data&&(n={success:!0,data:{status:t.data.status,version:"unknown"}})}n.success?(t.textContent="🟢 Connected",t.className="vaultpilot-status-indicator vaultpilot-status-connected"):(t.textContent="🔴 Error",t.className="vaultpilot-status-indicator vaultpilot-status-error")}catch(e){t.textContent="🔴 Offline",t.className="vaultpilot-status-indicator vaultpilot-status-offline"}})}createQuickActions(){this.quickActionsEl.empty(),this.quickActionsEl.createEl("h3",{text:"Quick Actions"});const e=this.quickActionsEl.createEl("div",{cls:"vaultpilot-actions-grid"});e.createEl("button",{text:"💬 Open Chat",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openChatModal();e.createEl("button",{text:"📊 Open Dashboard",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.activateFullTabView();e.createEl("button",{text:"⚙️ Execute Workflow",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openWorkflowModal();e.createEl("button",{text:"🔍 Analyze Vault",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.analyzeVault();e.createEl("button",{text:"✨ Get Completion",cls:"vaultpilot-action-button"}).onclick=()=>{const e=this.app.workspace.getActiveViewOfType(t.MarkdownView);e?this.plugin.getCopilotCompletion(e.editor):new t.Notice("No active editor found")};this.quickActionsEl.createEl("button",{text:"🔄 Refresh Status",cls:"vaultpilot-refresh-button"}).onclick=()=>{this.updateStatus(),this.updateVaultStats()}}updateVaultStats(){this.vaultStatsEl.empty(),this.vaultStatsEl.createEl("h3",{text:"Vault Statistics"});const e=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-stats-container"}),n=this.app.vault.getFiles(),a=this.app.vault.getMarkdownFiles();[{label:"Total Files",value:n.length.toString()},{label:"Markdown Files",value:a.length.toString()},{label:"Folders",value:this.app.vault.getAllLoadedFiles().filter(e=>e instanceof t.TFolder).length.toString()}].forEach(t=>{const n=e.createEl("div",{cls:"vaultpilot-stat-item"});n.createEl("div",{text:t.value,cls:"vaultpilot-stat-value"}),n.createEl("div",{text:t.label,cls:"vaultpilot-stat-label"})}),this.loadAgentInfo()}loadAgentInfo(){return e(this,void 0,void 0,function*(){try{console.log("VaultPilot: Loading agents in view...");const t=yield this.plugin.apiClient.getAgents();if(console.log("VaultPilot: getAgents response in view:",t),t.success&&t.data){let e=[];if(Array.isArray(t.data))e=t.data;else if(t.data&&"object"==typeof t.data){const n=t.data;n.agents&&Array.isArray(n.agents)?(e=n.agents,console.log("VaultPilot: Found agents array in view, using response.data.agents")):n.data&&Array.isArray(n.data)?(e=n.data,console.log("VaultPilot: Found nested data in view, using response.data.data")):console.warn("VaultPilot: Unexpected response format:",typeof t.data,t.data)}const n=e.length,a=e.filter(t=>t.active).length,i=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-agent-stats"});i.createEl("h4",{text:"Available Agents"});i.createEl("div",{cls:"vaultpilot-agent-info"}).createEl("span",{text:`${a}/${n} active`})}}catch(t){console.error("Failed to load agents in view:",t)}})}addStyles(){if(!document.getElementById("vaultpilot-view-styles")){const t=document.createElement("style");t.id="vaultpilot-view-styles",t.textContent="\n        .vaultpilot-view {\n          padding: 20px;\n        }\n        .vaultpilot-header {\n          text-align: center;\n          margin-bottom: 30px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-subtitle {\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-status,\n        .vaultpilot-quick-actions,\n        .vaultpilot-vault-stats,\n        .vaultpilot-activities {\n          margin-bottom: 25px;\n        }\n        .vaultpilot-status h3,\n        .vaultpilot-quick-actions h3,\n        .vaultpilot-vault-stats h3,\n        .vaultpilot-activities h3 {\n          margin-bottom: 15px;\n          color: var(--text-normal);\n          border-bottom: 1px solid var(--background-modifier-border);\n          padding-bottom: 5px;\n        }\n        .vaultpilot-status-container {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n        .vaultpilot-status-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .vaultpilot-status-indicator {\n          font-weight: 500;\n        }\n        .vaultpilot-status-connected {\n          color: var(--color-green);\n        }\n        .vaultpilot-status-error,\n        .vaultpilot-status-offline {\n          color: var(--color-red);\n        }\n        .vaultpilot-actions-grid {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 10px;\n          margin-bottom: 15px;\n        }\n        .vaultpilot-action-button {\n          padding: 12px 8px;\n          background: var(--interactive-normal);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          color: var(--text-normal);\n          cursor: pointer;\n          font-size: 13px;\n          transition: background-color 0.2s;\n        }\n        .vaultpilot-action-button:hover {\n          background: var(--interactive-hover);\n        }\n        .vaultpilot-refresh-button {\n          width: 100%;\n          padding: 8px;\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          border: none;\n          border-radius: 6px;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        .vaultpilot-stats-container {\n          display: grid;\n          grid-template-columns: repeat(3, 1fr);\n          gap: 15px;\n        }\n        .vaultpilot-stat-item {\n          text-align: center;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-stat-value {\n          font-size: 24px;\n          font-weight: bold;\n          color: var(--text-accent);\n          margin-bottom: 5px;\n        }\n        .vaultpilot-stat-label {\n          font-size: 12px;\n          color: var(--text-muted);\n        }\n        .vaultpilot-agent-stats {\n          margin-top: 15px;\n          padding: 10px;\n          background: var(--background-primary-alt);\n          border-radius: 6px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-agent-stats h4 {\n          margin: 0 0 8px 0;\n          font-size: 14px;\n        }\n        .vaultpilot-agent-info {\n          font-size: 12px;\n          color: var(--text-muted);\n        }\n        .vaultpilot-placeholder {\n          color: var(--text-muted);\n          font-style: italic;\n          text-align: center;\n          padding: 20px;\n        }\n      ",document.head.appendChild(t)}}onClose(){return e(this,void 0,void 0,function*(){})}}const l="vaultpilot-full-tab-view";class r extends t.ItemView{constructor(t,e){super(t),this.plugin=e}getViewType(){return l}getDisplayText(){return"VaultPilot Dashboard"}getIcon(){return"layout-dashboard"}onOpen(){return e(this,void 0,void 0,function*(){const t=this.containerEl;t.empty(),t.addClass("vaultpilot-full-tab-view"),t.style.height="100%",t.style.overflow="hidden";const e=t.createEl("div",{cls:"vaultpilot-main-layout"}),n=e.createEl("div",{cls:"vaultpilot-left-sidebar"});this.createLeftSidebar(n);const a=e.createEl("div",{cls:"vaultpilot-main-content"});this.createMainContent(a);const i=e.createEl("div",{cls:"vaultpilot-right-sidebar"});this.createRightSidebar(i),this.addFullTabStyles()})}createLeftSidebar(t){const e=t.createEl("div",{cls:"vaultpilot-sidebar-header"});e.createEl("h2",{text:"🤖 VaultPilot"}),e.createEl("p",{text:"AI Assistant Dashboard",cls:"vaultpilot-subtitle"}),this.statusEl=t.createEl("div",{cls:"vaultpilot-status"}),this.updateStatus(),this.quickActionsEl=t.createEl("div",{cls:"vaultpilot-quick-actions"}),this.createQuickActions(),this.vaultStatsEl=t.createEl("div",{cls:"vaultpilot-vault-stats"}),this.updateVaultStats()}createMainContent(t){const e=t.createEl("div",{cls:"vaultpilot-tab-nav"}),n=e.createEl("button",{text:"💬 Chat",cls:"vaultpilot-tab-button active"}),a=e.createEl("button",{text:"⚙️ Workflows",cls:"vaultpilot-tab-button"}),i=e.createEl("button",{text:"📊 Analytics",cls:"vaultpilot-tab-button"}),o=t.createEl("div",{cls:"vaultpilot-tab-content"});this.chatEl=o.createEl("div",{cls:"vaultpilot-chat-section active"}),this.createChatSection(this.chatEl),this.workflowEl=o.createEl("div",{cls:"vaultpilot-workflow-section"}),this.createWorkflowSection(this.workflowEl);const s=o.createEl("div",{cls:"vaultpilot-analytics-section"});this.createAnalyticsSection(s),n.onclick=()=>this.switchTab("chat",n),a.onclick=()=>this.switchTab("workflow",a),i.onclick=()=>this.switchTab("analytics",i)}createRightSidebar(t){const e=t.createEl("div",{cls:"vaultpilot-recent-files"});e.createEl("h3",{text:"Recent Files"}),this.updateRecentFiles(e);const n=t.createEl("div",{cls:"vaultpilot-agent-status"});n.createEl("h3",{text:"Agent Status"}),this.updateAgentStatus(n);const a=t.createEl("div",{cls:"vaultpilot-activity-feed"});a.createEl("h3",{text:"Activity Feed"}),this.createActivityFeed(a)}createChatSection(t){const e=t.createEl("div",{cls:"vaultpilot-chat-content"});e.createEl("div",{cls:"vaultpilot-chat-header"}).createEl("h3",{text:"AI Chat Interface"});const n=e.createEl("div",{cls:"vaultpilot-chat-history"});n.createEl("div",{text:"Welcome! Start a conversation with your AI assistant.",cls:"vaultpilot-chat-welcome"});const a=e.createEl("div",{cls:"vaultpilot-chat-input"}),i=a.createEl("textarea",{placeholder:"Type your message here...",cls:"vaultpilot-chat-textarea"}),o=a.createEl("button",{text:"Send",cls:"vaultpilot-chat-send-button"});o.onclick=()=>{const t=i.value.trim();t&&(this.sendChatMessage(t,n),i.value="")},i.onkeydown=t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),o.click())}}createWorkflowSection(t){const e=t.createEl("div",{cls:"vaultpilot-workflow-content"});e.createEl("div",{cls:"vaultpilot-workflow-header"}).createEl("h3",{text:"Workflow Management"});const n=e.createEl("div",{cls:"vaultpilot-workflow-grid"});[{name:"Analyze Vault",icon:"🔍",description:"Analyze your vault structure and content"},{name:"Generate Summary",icon:"📝",description:"Create summaries of your notes"},{name:"Link Analysis",icon:"🔗",description:"Analyze note connections and relationships"},{name:"Tag Management",icon:"🏷️",description:"Organize and manage your tags"},{name:"Daily Planning",icon:"📅",description:"Plan your day based on your notes"},{name:"Knowledge Graph",icon:"🕸️",description:"Visualize your knowledge connections"},{name:"Content Search",icon:"🔎",description:"Advanced search across your vault"},{name:"Note Templates",icon:"📄",description:"Create and manage note templates"},{name:"Link Assistant",icon:"🔗",description:"Intelligent link suggestions and management"}].forEach(t=>{const e=n.createEl("div",{cls:"vaultpilot-workflow-card"});e.createEl("div",{text:t.icon,cls:"vaultpilot-workflow-icon"}),e.createEl("h4",{text:t.name}),e.createEl("p",{text:t.description});e.createEl("button",{text:"Run",cls:"vaultpilot-workflow-run-button"}).onclick=()=>this.runWorkflow(t.name)})}createAnalyticsSection(t){const e=t.createEl("div",{cls:"vaultpilot-analytics-content"});e.createEl("div",{cls:"vaultpilot-analytics-header"}).createEl("h3",{text:"Vault Analytics"});const n=e.createEl("div",{cls:"vaultpilot-charts-container"}),a=n.createEl("div",{cls:"vaultpilot-chart-card"});a.createEl("h4",{text:"File Type Distribution"}),a.createEl("div",{text:"Chart visualization coming soon...",cls:"vaultpilot-chart-placeholder"});const i=n.createEl("div",{cls:"vaultpilot-chart-card"});i.createEl("h4",{text:"Note Creation Timeline"}),i.createEl("div",{text:"Timeline visualization coming soon...",cls:"vaultpilot-chart-placeholder"});const o=n.createEl("div",{cls:"vaultpilot-chart-card"});o.createEl("h4",{text:"Tag Usage"}),o.createEl("div",{text:"Tag analytics coming soon...",cls:"vaultpilot-chart-placeholder"});const s=n.createEl("div",{cls:"vaultpilot-chart-card"});s.createEl("h4",{text:"Word Count Analysis"}),s.createEl("div",{text:"Word count visualization coming soon...",cls:"vaultpilot-chart-placeholder"});const l=n.createEl("div",{cls:"vaultpilot-chart-card"});l.createEl("h4",{text:"Link Density"}),l.createEl("div",{text:"Link analysis coming soon...",cls:"vaultpilot-chart-placeholder"});const r=n.createEl("div",{cls:"vaultpilot-chart-card"});r.createEl("h4",{text:"Activity Heatmap"}),r.createEl("div",{text:"Activity heatmap coming soon...",cls:"vaultpilot-chart-placeholder"})}switchTab(t,e){var n;this.containerEl.querySelectorAll(".vaultpilot-tab-button").forEach(t=>{t.removeClass("active")}),this.containerEl.querySelectorAll(".vaultpilot-chat-section, .vaultpilot-workflow-section, .vaultpilot-analytics-section").forEach(t=>{t.removeClass("active")}),e.addClass("active"),"chat"===t?this.chatEl.addClass("active"):"workflow"===t?this.workflowEl.addClass("active"):"analytics"===t&&(null===(n=this.containerEl.querySelector(".vaultpilot-analytics-section"))||void 0===n||n.addClass("active"))}sendChatMessage(t,n){return e(this,void 0,void 0,function*(){n.createEl("div",{cls:"vaultpilot-chat-message user"}).createEl("div",{text:t});const e=n.createEl("div",{cls:"vaultpilot-chat-message assistant thinking"});e.createEl("div",{text:"Thinking..."}),n.scrollTop=n.scrollHeight;try{const a=yield this.plugin.apiClient.sendChat({message:t,context:null});if(e.remove(),a.success&&a.data){n.createEl("div",{cls:"vaultpilot-chat-message assistant"}).createEl("div",{text:a.data.response})}else{n.createEl("div",{cls:"vaultpilot-chat-message error"}).createEl("div",{text:"Error: Could not get response from AI"})}}catch(t){e.remove();n.createEl("div",{cls:"vaultpilot-chat-message error"}).createEl("div",{text:"Error: Connection failed"})}n.scrollTop=n.scrollHeight})}runWorkflow(n){return e(this,void 0,void 0,function*(){new t.Notice(`Running workflow: ${n}`);try{switch(n){case"Analyze Vault":yield this.plugin.analyzeVault();break;case"Daily Planning":yield this.plugin.planMyDay();break;default:new t.Notice(`${n} workflow is coming soon!`)}}catch(e){new t.Notice(`Error running workflow: ${n}`)}})}updateStatus(){this.statusEl.empty(),this.statusEl.createEl("h3",{text:"Connection Status"});const t=this.statusEl.createEl("div",{cls:"vaultpilot-status-container"}),e=t.createEl("div",{cls:"vaultpilot-status-item"});e.createEl("span",{text:"Backend: "});const n=e.createEl("span",{cls:"vaultpilot-status-indicator",text:"Checking..."}),a=t.createEl("div",{cls:"vaultpilot-status-item"});a.createEl("span",{text:"WebSocket: "}),a.createEl("span",{cls:"vaultpilot-status-indicator",text:this.plugin.isWebSocketConnected()?"🟢 Connected":"🔴 Disconnected"}),this.checkBackendStatus(n)}checkBackendStatus(t){return e(this,void 0,void 0,function*(){var e;try{let n=yield this.plugin.apiClient.healthCheck();if(!n.success&&(null===(e=n.error)||void 0===e?void 0:e.includes("400"))){const t=yield this.plugin.apiClient.simpleHealthCheck();t.success&&t.data&&(n={success:!0,data:{status:t.data.status,version:"unknown"}})}n.success?(t.textContent="🟢 Connected",t.className="vaultpilot-status-indicator vaultpilot-status-connected"):(t.textContent="🔴 Error",t.className="vaultpilot-status-indicator vaultpilot-status-error")}catch(e){t.textContent="🔴 Offline",t.className="vaultpilot-status-indicator vaultpilot-status-offline"}})}createQuickActions(){this.quickActionsEl.empty(),this.quickActionsEl.createEl("h3",{text:"Quick Actions"});const t=this.quickActionsEl.createEl("div",{cls:"vaultpilot-actions-grid"});t.createEl("button",{text:"🔄 Refresh",cls:"vaultpilot-action-button"}).onclick=()=>{this.updateStatus(),this.updateVaultStats()};t.createEl("button",{text:"📋 Sidebar View",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.activateView();t.createEl("button",{text:"💬 Modal Chat",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openChatModal();t.createEl("button",{text:"⚙️ Workflows",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openWorkflowModal()}updateVaultStats(){this.vaultStatsEl.empty(),this.vaultStatsEl.createEl("h3",{text:"Vault Statistics"});const e=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-stats-container"}),n=this.app.vault.getFiles(),a=this.app.vault.getMarkdownFiles();[{label:"Total Files",value:n.length.toString()},{label:"Markdown Files",value:a.length.toString()},{label:"Folders",value:this.app.vault.getAllLoadedFiles().filter(e=>e instanceof t.TFolder).length.toString()}].forEach(t=>{const n=e.createEl("div",{cls:"vaultpilot-stat-item"});n.createEl("div",{text:t.value,cls:"vaultpilot-stat-value"}),n.createEl("div",{text:t.label,cls:"vaultpilot-stat-label"})})}updateRecentFiles(t){this.app.vault.getMarkdownFiles().sort((t,e)=>e.stat.mtime-t.stat.mtime).slice(0,5).forEach(e=>{const n=t.createEl("div",{cls:"vaultpilot-recent-file"});n.createEl("span",{text:e.basename}),n.onclick=()=>{this.app.workspace.openLinkText(e.path,"",!1)}})}updateAgentStatus(t){this.loadAgentInfo(t)}loadAgentInfo(t){return e(this,void 0,void 0,function*(){try{console.log("VaultPilot: Loading agents in full-tab-view...");const e=yield this.plugin.apiClient.getAgents();if(console.log("VaultPilot: getAgents response in full-tab-view:",e),e.success&&e.data&&t){let n=[];if(Array.isArray(e.data))n=e.data;else if(e.data&&"object"==typeof e.data){const t=e.data;t.agents&&Array.isArray(t.agents)?(n=t.agents,console.log("VaultPilot: Found agents array in full-tab-view, using response.data.agents")):t.data&&Array.isArray(t.data)?(n=t.data,console.log("VaultPilot: Found nested data in full-tab-view, using response.data.data")):console.warn("VaultPilot: Unexpected response format:",typeof e.data,e.data)}const a=n.length,i=n.filter(t=>t.active).length,o=t.createEl("div",{cls:"vaultpilot-agent-info"});o.createEl("div",{text:`${i}/${a} active`}),n.forEach(t=>{const e=o.createEl("div",{cls:"vaultpilot-agent-item"});e.createEl("span",{text:t.name}),e.createEl("span",{text:t.active?"🟢":"🔴",cls:"vaultpilot-agent-status"})})}}catch(t){console.error("Failed to load agents in full tab view:",t)}})}createActivityFeed(t){[{time:"Just now",activity:"VaultPilot started"},{time:"5 min ago",activity:"Connection established"},{time:"1 hour ago",activity:"Last vault analysis"}].forEach(e=>{const n=t.createEl("div",{cls:"vaultpilot-activity-item"});n.createEl("div",{text:e.activity}),n.createEl("div",{text:e.time,cls:"vaultpilot-activity-time"})})}addFullTabStyles(){if(!document.getElementById("vaultpilot-full-tab-styles")){const t=document.createElement("style");t.id="vaultpilot-full-tab-styles",t.textContent='\n        /* Ensure the full tab view fills available space */\n        .workspace-leaf-content[data-type="vaultpilot-full-tab-view"] {\n          height: 100%;\n        }\n        .vaultpilot-full-tab-view {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n        }\n        .vaultpilot-main-layout {\n          display: flex;\n          flex: 1;\n          gap: 1px;\n          background: var(--background-modifier-border);\n          min-height: 0;\n        }\n        .vaultpilot-left-sidebar {\n          width: 250px;\n          background: var(--background-primary);\n          padding: 16px;\n          overflow-y: auto;\n        }\n        .vaultpilot-main-content {\n          flex: 1;\n          background: var(--background-primary);\n          display: flex;\n          flex-direction: column;\n          min-height: 0;\n        }\n        .vaultpilot-right-sidebar {\n          width: 250px;\n          background: var(--background-primary);\n          padding: 16px;\n          overflow-y: auto;\n        }\n        .vaultpilot-sidebar-header {\n          text-align: center;\n          margin-bottom: 20px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-tab-nav {\n          display: flex;\n          background: var(--background-secondary);\n          border-bottom: 1px solid var(--background-modifier-border);\n          flex-shrink: 0;\n        }\n        .vaultpilot-tab-button {\n          flex: 1;\n          padding: 12px 16px;\n          background: transparent;\n          border: none;\n          color: var(--text-muted);\n          cursor: pointer;\n          transition: all 0.2s;\n        }\n        .vaultpilot-tab-button:hover {\n          background: var(--background-modifier-hover);\n        }\n        .vaultpilot-tab-button.active {\n          background: var(--background-primary);\n          color: var(--text-normal);\n          border-bottom: 2px solid var(--interactive-accent);\n        }\n        .vaultpilot-tab-content {\n          flex: 1;\n          display: flex;\n          flex-direction: column;\n          min-height: 0;\n          height: 100%;\n        }\n        /* Sections just flex-grow and hold their children */\n        .vaultpilot-chat-section,\n        .vaultpilot-workflow-section,\n        .vaultpilot-analytics-section {\n          display: none;           /* hidden by default */\n          flex: 1 1 0;             /* flex-grow, flex-shrink, base 0 */\n          flex-direction: column;\n          min-height: 0;           /* allow children to shrink/scroll */\n        }\n\n        /* Active section shows and flexes */\n        .vaultpilot-chat-section.active,\n        .vaultpilot-workflow-section.active,\n        .vaultpilot-analytics-section.active {\n          display: flex;           /* show & flex when active */\n        }\n\n        /* Content panels handle the scrolling */\n        .vaultpilot-chat-content,\n        .vaultpilot-workflow-content,\n        .vaultpilot-analytics-content {\n          flex: 1 1 0;             /* fill remaining space */\n          min-height: 0;           /* critical to allow overflow */\n          overflow-y: auto;        /* now *this* container scrolls */\n          padding: 16px;\n        }\n\n        /* keep special chat gaps */\n        .vaultpilot-chat-content {\n          display: flex;\n          flex-direction: column;\n          gap: 16px;\n        }\n        .vaultpilot-chat-history {\n          flex: 1;\n          overflow-y: auto;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          padding: 16px;\n          background: var(--background-secondary);\n          min-height: 0;\n        }\n        .vaultpilot-chat-input {\n          display: flex;\n          gap: 8px;\n        }\n        .vaultpilot-chat-textarea {\n          flex: 1;\n          min-height: 60px;\n          padding: 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n          resize: vertical;\n        }\n        .vaultpilot-chat-send-button {\n          padding: 8px 16px;\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          border: none;\n          border-radius: 6px;\n          cursor: pointer;\n          height: fit-content;\n          align-self: flex-end;\n        }\n        .vaultpilot-chat-message {\n          margin-bottom: 12px;\n          padding: 8px 12px;\n          border-radius: 8px;\n          max-width: 80%;\n        }\n        .vaultpilot-chat-message.user {\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          margin-left: auto;\n        }\n        .vaultpilot-chat-message.assistant {\n          background: var(--background-primary);\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-chat-message.thinking {\n          opacity: 0.7;\n          font-style: italic;\n        }\n        .vaultpilot-chat-message.error {\n          background: var(--background-modifier-error);\n          color: var(--text-error);\n        }\n        .vaultpilot-chat-header,\n        .vaultpilot-workflow-header,\n        .vaultpilot-analytics-header {\n          margin-bottom: 16px;\n          padding-bottom: 8px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-chat-header h3,\n        .vaultpilot-workflow-header h3,\n        .vaultpilot-analytics-header h3 {\n          margin: 0;\n          color: var(--text-normal);\n        }\n        .vaultpilot-workflow-grid {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n          gap: 16px;\n          align-content: start;\n          padding: 0;\n          margin: 0;\n          width: 100%;\n        }\n        .vaultpilot-workflow-card {\n          background: var(--background-secondary);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          padding: 16px;\n          text-align: center;\n          transition: all 0.2s ease;\n        }\n        .vaultpilot-workflow-card:hover {\n          border-color: var(--interactive-accent);\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n        }\n        .vaultpilot-workflow-icon {\n          font-size: 32px;\n          margin-bottom: 8px;\n        }\n        .vaultpilot-workflow-run-button {\n          margin-top: 8px;\n          padding: 6px 12px;\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n        }\n        .vaultpilot-charts-container {\n          display: grid;\n          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n          gap: 16px;\n          align-content: start;\n          padding: 0;\n          margin: 0;\n          width: 100%;\n        }\n        .vaultpilot-chart-card {\n          background: var(--background-secondary);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          padding: 16px;\n          transition: all 0.2s ease;\n        }\n        .vaultpilot-chart-card:hover {\n          border-color: var(--interactive-accent);\n          box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n        }\n        .vaultpilot-chart-placeholder {\n          text-align: center;\n          color: var(--text-muted);\n          font-style: italic;\n          padding: 20px;\n        }\n        .vaultpilot-recent-file {\n          padding: 4px 8px;\n          margin-bottom: 4px;\n          border-radius: 4px;\n          cursor: pointer;\n          transition: background-color 0.2s;\n        }\n        .vaultpilot-recent-file:hover {\n          background: var(--background-modifier-hover);\n        }\n        .vaultpilot-agent-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          padding: 4px 0;\n        }\n        .vaultpilot-activity-item {\n          margin-bottom: 8px;\n          padding: 6px 0;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-activity-time {\n          font-size: 11px;\n          color: var(--text-muted);\n          margin-top: 2px;\n        }\n        /* Inherit styles from original view */\n        .vaultpilot-status,\n        .vaultpilot-quick-actions,\n        .vaultpilot-vault-stats {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-status h3,\n        .vaultpilot-quick-actions h3,\n        .vaultpilot-vault-stats h3 {\n          margin-bottom: 12px;\n          color: var(--text-normal);\n          border-bottom: 1px solid var(--background-modifier-border);\n          padding-bottom: 4px;\n          font-size: 14px;\n        }\n        .vaultpilot-status-container {\n          display: flex;\n          flex-direction: column;\n          gap: 6px;\n        }\n        .vaultpilot-status-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          font-size: 12px;\n        }\n        .vaultpilot-status-indicator {\n          font-weight: 500;\n          font-size: 11px;\n        }\n        .vaultpilot-status-connected {\n          color: var(--color-green);\n        }\n        .vaultpilot-status-error,\n        .vaultpilot-status-offline {\n          color: var(--color-red);\n        }\n        .vaultpilot-actions-grid {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 8px;\n        }\n        .vaultpilot-action-button {\n          padding: 8px 6px;\n          background: var(--interactive-normal);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          color: var(--text-normal);\n          cursor: pointer;\n          font-size: 11px;\n          transition: background-color 0.2s;\n        }\n        .vaultpilot-action-button:hover {\n          background: var(--interactive-hover);\n        }\n        .vaultpilot-stats-container {\n          display: grid;\n          grid-template-columns: 1fr;\n          gap: 8px;\n        }\n        .vaultpilot-stat-item {\n          text-align: center;\n          padding: 8px;\n          background: var(--background-secondary);\n          border-radius: 4px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-stat-value {\n          font-size: 18px;\n          font-weight: bold;\n          color: var(--text-accent);\n          margin-bottom: 2px;\n        }\n        .vaultpilot-stat-label {\n          font-size: 10px;\n          color: var(--text-muted);\n        }\n      ',document.head.appendChild(t)}}onClose(){return e(this,void 0,void 0,function*(){})}}let c;function d(){return e(this,void 0,void 0,function*(){const t=c.workspace.getActiveFile();if(!t)return null;return(yield c.vault.read(t)).slice(0,8e3)})}class u extends t.Modal{constructor(t,e){super(t),this.currentConversationId=null,this.messages=[],this.plugin=e}onOpen(){const{contentEl:t}=this;t.empty(),t.addClass("vaultpilot-chat-modal");const e=t.createEl("div",{cls:"vaultpilot-chat-header"});e.createEl("h2",{text:"🤖 VaultPilot Chat"});const n=e.createEl("div",{cls:"vaultpilot-chat-toolbar"});n.createEl("div",{cls:"vaultpilot-auto-mode-info",text:"⚡ Automatic mode detection enabled"});n.createEl("button",{text:"Clear Chat",cls:"mod-cta"}).onclick=()=>this.clearChat();const a=n.createEl("select",{cls:"vaultpilot-agent-select"});a.createEl("option",{text:"Auto-select Agent",value:""}),this.loadAgents(a),this.chatContainer=t.createEl("div",{cls:"vaultpilot-chat-container"}),this.messagesEl=this.chatContainer.createEl("div",{cls:"vaultpilot-chat-messages"}),this.inputContainer=this.chatContainer.createEl("div",{cls:"vaultpilot-chat-input-container"}),this.inputEl=this.inputContainer.createEl("input",{type:"text",placeholder:"Ask a question or describe what you want to accomplish...",cls:"vaultpilot-chat-input"}),this.sendButton=this.inputContainer.createEl("button",{text:"Send",cls:"mod-cta vaultpilot-send-button"}),this.inputEl.addEventListener("keydown",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.sendMessage())}),this.sendButton.onclick=()=>this.sendMessage(),this.inputEl.focus(),this.loadConversationHistory(),this.addStyles()}loadAgents(t){return e(this,void 0,void 0,function*(){try{console.log("VaultPilot: Loading agents...");const e=yield this.plugin.apiClient.getAgents();if(console.log("VaultPilot: getAgents response:",e),e.success&&e.data){console.log("VaultPilot: response.data type:",typeof e.data),console.log("VaultPilot: response.data content:",e.data);let n=[];if(Array.isArray(e.data))n=e.data;else if(e.data&&"object"==typeof e.data){const t=e.data;t.agents&&Array.isArray(t.agents)?n=t.agents:t.data&&Array.isArray(t.data)&&(n=t.data)}if(n.length>0)console.log("VaultPilot: Found",n.length,"agents"),n.forEach(e=>{t.createEl("option",{text:e.name,value:e.id})});else{console.log("VaultPilot: No agents found in response");t.createEl("option",{text:"No agents available",value:""}).disabled=!0}}else console.error("Failed to load agents: API returned error or no data:",e)}catch(t){console.error("Failed to load agents:",t)}})}loadConversationHistory(){return e(this,void 0,void 0,function*(){if(this.currentConversationId)try{const t=yield this.plugin.apiClient.getConversationHistory(this.currentConversationId);t.success&&t.data&&(this.messages=t.data.messages,this.renderMessages())}catch(t){console.error("Failed to load conversation history:",t)}})}sendMessage(){return e(this,void 0,void 0,function*(){const e=this.inputEl.value.trim();if(e){this.inputEl.disabled=!0,this.sendButton.disabled=!0,this.sendButton.textContent="Sending...",this.addMessage("user",e),this.inputEl.value="";try{const[n,a]=yield Promise.all([d(),this.plugin.apiClient.classifyIntent(e)]),i={message:e,context:n};let o;this.plugin.settings.showIntentDebug&&this.showIntentDebug(a.intent),"agent"===a.intent?(o=yield this.plugin.apiClient.runWorkflow(i),o.success&&o.data?this.addMessage("assistant",`⚙️ Agent Mode (auto-detected)\n\n${o.data.result}`):this.addMessage("assistant",`Error in agent mode: ${o.error||"Failed to get response"}`)):(o=yield this.plugin.apiClient.sendChat(i,{conversation_id:this.currentConversationId||void 0,agent_id:this.getSelectedAgent()}),o.success&&o.data?(this.currentConversationId=o.data.conversation_id,this.addMessage("assistant",o.data.response)):this.addMessage("assistant",`Error: ${o.error||"Failed to get response"}`)),(null==n?void 0:n.length)||new t.Notice("⚠️ No vault content was sent; replies may be generic."),o.success||new t.Notice(`Chat error: ${o.error}`)}catch(e){const n=e instanceof Error?e.message:"Unknown error";this.addMessage("assistant",`Error: ${n}`),new t.Notice(`Chat error: ${n}`)}finally{this.inputEl.disabled=!1,this.sendButton.disabled=!1,this.sendButton.textContent="Send",this.inputEl.focus()}}})}getSelectedAgent(){const t=this.contentEl.querySelector(".vaultpilot-agent-select");return(null==t?void 0:t.value)||void 0}addMessage(t,e){const n={role:t,content:e,timestamp:(new Date).toISOString()};this.messages.push(n),this.renderMessage(n),this.scrollToBottom()}renderMessages(){this.messagesEl.empty(),this.messages.forEach(t=>this.renderMessage(t)),this.scrollToBottom()}renderMessage(t){const e=this.messagesEl.createEl("div",{cls:`vaultpilot-message vaultpilot-message-${t.role}`});e.createEl("div",{cls:"vaultpilot-message-role",text:"user"===t.role?"You":"VaultPilot"});e.createEl("div",{cls:"vaultpilot-message-content"}).innerHTML=this.renderMarkdown(t.content),t.timestamp&&e.createEl("div",{cls:"vaultpilot-message-time",text:new Date(t.timestamp).toLocaleTimeString()})}renderMarkdown(t){return t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/`(.*?)`/g,"<code>$1</code>").replace(/\n/g,"<br>")}scrollToBottom(){this.messagesEl.scrollTop=this.messagesEl.scrollHeight}clearChat(){this.messages=[],this.currentConversationId=null,this.messagesEl.empty(),new t.Notice("Chat cleared")}addStyles(){if(!document.getElementById("vaultpilot-chat-styles")){const t=document.createElement("style");t.id="vaultpilot-chat-styles",t.textContent="\n        .vaultpilot-chat-modal {\n          width: 600px;\n          height: 700px;\n        }\n        .vaultpilot-chat-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 15px;\n          padding-bottom: 10px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-chat-toolbar {\n          display: flex;\n          gap: 10px;\n          align-items: center;\n          flex-wrap: wrap;\n        }\n        .vaultpilot-auto-mode-info {\n          margin-right: 15px;\n          padding: 8px 12px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-secondary);\n          font-size: 0.85em;\n          color: var(--text-muted);\n          display: flex;\n          align-items: center;\n          gap: 6px;\n        }\n        .vaultpilot-agent-select {\n          padding: 4px 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-chat-container {\n          display: flex;\n          flex-direction: column;\n          height: calc(100% - 80px);\n        }\n        .vaultpilot-chat-messages {\n          flex: 1;\n          overflow-y: auto;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          margin-bottom: 15px;\n          background: var(--background-secondary);\n        }\n        .vaultpilot-message {\n          margin-bottom: 15px;\n          padding: 10px;\n          border-radius: 8px;\n        }\n        .vaultpilot-message-user {\n          background: var(--background-primary-alt);\n          margin-left: 20px;\n        }\n        .vaultpilot-message-assistant {\n          background: var(--background-primary);\n          margin-right: 20px;\n        }\n        .vaultpilot-message-role {\n          font-weight: bold;\n          margin-bottom: 5px;\n          color: var(--text-accent);\n        }\n        .vaultpilot-message-content {\n          line-height: 1.4;\n          color: var(--text-normal);\n          user-select: text;\n        }\n        .vaultpilot-message-time {\n          font-size: 0.8em;\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-chat-input-container {\n          display: flex;\n          gap: 10px;\n        }\n        .vaultpilot-chat-input {\n          flex: 1;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-send-button {\n          padding: 10px 20px;\n        }\n        .vaultpilot-intent-debug {\n          background: var(--background-modifier-success);\n          color: var(--text-normal);\n          padding: 8px 12px;\n          border-radius: 4px;\n          margin: 8px 0;\n          font-size: 0.85em;\n          text-align: center;\n          border: 1px solid var(--background-modifier-border-hover);\n          animation: fadeInOut 3s ease-in-out;\n        }\n        @keyframes fadeInOut {\n          0% { opacity: 0; transform: translateY(-10px); }\n          10% { opacity: 1; transform: translateY(0); }\n          90% { opacity: 1; transform: translateY(0); }\n          100% { opacity: 0; transform: translateY(-10px); }\n        }\n      ",document.head.appendChild(t)}}showIntentDebug(t){const e=this.messagesEl.createEl("div",{cls:"vaultpilot-intent-debug",text:"🔍 Intent detected: "+("agent"===t?"⚙️ Agent Mode":"💬 Ask Mode")});setTimeout(()=>{e.remove()},3e3)}onClose(){const{contentEl:t}=this;t.empty()}}class p extends t.Modal{constructor(t,e){super(t),this.isExecuting=!1,this.plugin=e}onOpen(){const{contentEl:t}=this;t.empty(),t.addClass("vaultpilot-workflow-modal");const e=t.createEl("div",{cls:"vaultpilot-workflow-header"});e.createEl("h2",{text:"⚙️ Workflow Execution"}),e.createEl("p",{text:"Define a goal and let VaultPilot create and execute a comprehensive workflow to achieve it.",cls:"vaultpilot-workflow-description"});const n=t.createEl("div",{cls:"vaultpilot-workflow-form"}),a=n.createEl("div",{cls:"vaultpilot-form-group"});a.createEl("label",{text:"Goal *",cls:"vaultpilot-form-label"}),this.goalInput=a.createEl("textarea",{placeholder:'e.g., "Create a comprehensive study plan for machine learning based on my notes"',cls:"vaultpilot-goal-input"});const i=n.createEl("div",{cls:"vaultpilot-form-group"});i.createEl("label",{text:"Additional Context (optional)",cls:"vaultpilot-form-label"}),this.contextInput=i.createEl("textarea",{placeholder:"Provide any additional context, constraints, or requirements...",cls:"vaultpilot-context-input"});const o=n.createEl("div",{cls:"vaultpilot-form-group"});o.createEl("label",{text:"Vault Integration",cls:"vaultpilot-form-label"});const s=o.createEl("label",{cls:"vaultpilot-checkbox-label"}),l=s.createEl("input",{type:"checkbox"});s.createSpan({text:"Include active file content"});const r=o.createEl("label",{cls:"vaultpilot-checkbox-label"}),c=r.createEl("input",{type:"checkbox"});r.createSpan({text:"Include all vault files (may take longer)"}),this.executeButton=n.createEl("button",{text:"Execute Workflow",cls:"mod-cta vaultpilot-execute-button"}),this.executeButton.onclick=()=>this.executeWorkflow(l.checked,c.checked),this.progressContainer=t.createEl("div",{cls:"vaultpilot-progress-container"}),this.progressContainer.style.display="none",this.resultsContainer=t.createEl("div",{cls:"vaultpilot-results-container"}),this.resultsContainer.style.display="none",this.goalInput.focus(),this.addStyles()}executeWorkflow(n,a){return e(this,void 0,void 0,function*(){const e=this.goalInput.value.trim();if(e){this.isExecuting=!0,this.executeButton.disabled=!0,this.executeButton.textContent="Executing...",this.progressContainer.style.display="block",this.resultsContainer.style.display="none";try{let t="";if(n){const e=this.app.workspace.getActiveFile();if(e){const n=yield this.app.vault.read(e);t+=`=== ${e.name} ===\n${n}\n\n`}}if(a){const e=this.app.vault.getMarkdownFiles();for(const n of e.slice(0,20)){const e=yield this.app.vault.read(n);t+=`=== ${n.name} ===\n${e}\n\n`}}const i={goal:e,context:this.contextInput.value.trim()||void 0,vault_content:t||void 0};this.plugin.isWebSocketConnected()&&this.setupProgressListener();const o=yield this.plugin.apiClient.executeWorkflow(i);if(!o.success||!o.data)throw new Error(o.error||"Workflow execution failed");yield this.displayResults(o.data)}catch(e){const n=e instanceof Error?e.message:"Unknown error";new t.Notice(`Workflow error: ${n}`),this.displayError(n)}finally{this.isExecuting=!1,this.executeButton.disabled=!1,this.executeButton.textContent="Execute Workflow"}}else new t.Notice("Please enter a goal for the workflow")})}setupProgressListener(){this.displayProgress("Analyzing goal and context..."),setTimeout(()=>{this.displayProgress("Planning workflow steps...")},1e3),setTimeout(()=>{this.displayProgress("Executing workflow...")},2e3)}displayProgress(t){this.progressContainer.innerHTML=`\n      <div class="vaultpilot-progress-item">\n        <div class="vaultpilot-progress-spinner"></div>\n        <span>${t}</span>\n      </div>\n    `}displayResults(t){return e(this,void 0,void 0,function*(){this.progressContainer.style.display="none",this.resultsContainer.style.display="block",this.resultsContainer.empty();const e=this.resultsContainer.createEl("div",{cls:"vaultpilot-results-header"});e.createEl("h3",{text:"✅ Workflow Completed"}),e.createEl("p",{text:`Execution time: ${t.execution_time}s`,cls:"vaultpilot-execution-time"});const n=this.resultsContainer.createEl("div",{cls:"vaultpilot-result-content"});n.createEl("h4",{text:"Result"});if(n.createEl("div",{cls:"vaultpilot-result-text"}).innerHTML=this.renderMarkdown(t.result),t.steps_taken&&t.steps_taken.length>0){const e=this.resultsContainer.createEl("div",{cls:"vaultpilot-steps-container"});e.createEl("h4",{text:"Steps Taken"});const n=e.createEl("ol",{cls:"vaultpilot-steps-list"});t.steps_taken.forEach(t=>{n.createEl("li",{text:t})})}if(t.artifacts&&t.artifacts.length>0){const e=this.resultsContainer.createEl("div",{cls:"vaultpilot-artifacts-container"});e.createEl("h4",{text:"Generated Artifacts"}),t.artifacts.forEach((t,n)=>{const a=e.createEl("div",{cls:"vaultpilot-artifact"});a.createEl("h5",{text:t.title}),a.createEl("p",{text:`Type: ${t.type}`,cls:"vaultpilot-artifact-type"});a.createEl("button",{text:"Save as Note",cls:"mod-cta"}).onclick=()=>this.saveArtifactAsNote(t,n)})}this.resultsContainer.createEl("div",{cls:"vaultpilot-results-actions"}).createEl("button",{text:"Save Complete Results as Note",cls:"mod-cta"}).onclick=()=>this.saveCompleteResultsAsNote(t)})}saveArtifactAsNote(n,a){return e(this,void 0,void 0,function*(){try{const e=`${n.title.replace(/[^a-zA-Z0-9\s]/g,"")}.md`,a=`# ${n.title}\n\n${n.content}`;yield this.app.vault.create(e,a),new t.Notice(`Artifact saved as ${e}`)}catch(e){new t.Notice(`Failed to save artifact: ${e instanceof Error?e.message:"Unknown error"}`)}})}saveCompleteResultsAsNote(n){return e(this,void 0,void 0,function*(){try{const e=`VaultPilot Workflow Results ${(new Date).toISOString().split("T")[0]}.md`;let a="# VaultPilot Workflow Results\n\n";a+=`**Goal:** ${this.goalInput.value}\n\n`,a+=`**Execution Time:** ${n.execution_time}s\n\n`,a+=`## Result\n\n${n.result}\n\n`,n.steps_taken&&n.steps_taken.length>0&&(a+="## Steps Taken\n\n",n.steps_taken.forEach((t,e)=>{a+=`${e+1}. ${t}\n`}),a+="\n"),n.artifacts&&n.artifacts.length>0&&(a+="## Generated Artifacts\n\n",n.artifacts.forEach(t=>{a+=`### ${t.title}\n\n${t.content}\n\n`})),yield this.app.vault.create(e,a),new t.Notice(`Complete results saved as ${e}`)}catch(e){new t.Notice(`Failed to save results: ${e instanceof Error?e.message:"Unknown error"}`)}})}displayError(t){this.progressContainer.style.display="none",this.resultsContainer.style.display="block",this.resultsContainer.innerHTML=`\n      <div class="vaultpilot-error">\n        <h3>❌ Workflow Failed</h3>\n        <p>${t}</p>\n      </div>\n    `}renderMarkdown(t){return t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/`(.*?)`/g,"<code>$1</code>").replace(/\n/g,"<br>")}addStyles(){if(!document.getElementById("vaultpilot-workflow-styles")){const t=document.createElement("style");t.id="vaultpilot-workflow-styles",t.textContent="\n        .vaultpilot-workflow-modal {\n          width: 700px;\n          max-height: 80vh;\n          overflow-y: auto;\n        }\n        .vaultpilot-workflow-header {\n          margin-bottom: 20px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-workflow-description {\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-form-group {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-form-label {\n          display: block;\n          margin-bottom: 8px;\n          font-weight: 500;\n          color: var(--text-normal);\n        }\n        .vaultpilot-goal-input,\n        .vaultpilot-context-input {\n          width: 100%;\n          min-height: 80px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n          resize: vertical;\n        }\n        .vaultpilot-checkbox-label {\n          display: block;\n          margin-bottom: 8px;\n          cursor: pointer;\n        }\n        .vaultpilot-checkbox-label input {\n          margin-right: 8px;\n        }\n        .vaultpilot-execute-button {\n          width: 100%;\n          padding: 12px;\n          font-size: 16px;\n        }\n        .vaultpilot-progress-container {\n          margin: 20px 0;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-progress-item {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n        }\n        .vaultpilot-progress-spinner {\n          width: 16px;\n          height: 16px;\n          border: 2px solid var(--background-modifier-border);\n          border-top: 2px solid var(--text-accent);\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n        }\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n        .vaultpilot-results-container {\n          margin-top: 20px;\n        }\n        .vaultpilot-results-header {\n          margin-bottom: 15px;\n        }\n        .vaultpilot-execution-time {\n          color: var(--text-muted);\n          font-size: 0.9em;\n        }\n        .vaultpilot-result-content {\n          margin-bottom: 20px;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-result-text {\n          line-height: 1.5;\n          color: var(--text-normal);\n        }\n        .vaultpilot-steps-container,\n        .vaultpilot-artifacts-container {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-steps-list {\n          padding-left: 20px;\n        }\n        .vaultpilot-artifact {\n          margin-bottom: 15px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary-alt);\n        }\n        .vaultpilot-artifact-type {\n          color: var(--text-muted);\n          font-size: 0.9em;\n          margin-bottom: 10px;\n        }\n        .vaultpilot-results-actions {\n          margin-top: 20px;\n          text-align: center;\n        }\n        .vaultpilot-error {\n          padding: 20px;\n          background: var(--background-primary-alt);\n          border: 1px solid var(--color-red);\n          border-radius: 8px;\n          color: var(--color-red);\n        }\n      ",document.head.appendChild(t)}}onClose(){const{contentEl:t}=this;t.empty()}}class h{constructor(t,e){this.wsCallbacks=new Map,this.baseUrl=t.replace(/\/$/,""),this.apiKey=e}makeRequest(t){return e(this,arguments,void 0,function*(t,e={}){const n=`${this.baseUrl}${t}`,a=Object.assign({"Content-Type":"application/json",Accept:"application/json"},e.headers||{});this.apiKey&&(a.Authorization=`Bearer ${this.apiKey}`);try{const t=yield fetch(n,Object.assign(Object.assign({},e),{headers:a,mode:"cors",credentials:"omit"}));let i;const o=t.headers.get("content-type");if(i=o&&o.includes("application/json")?yield t.json():yield t.text(),!t.ok){const e="object"==typeof i&&i.error?i.error:`HTTP ${t.status}: ${t.statusText}`;return console.error(`API Error [${t.status}]:`,e),{success:!1,error:e}}return{success:!0,data:"string"==typeof i?{message:i}:i}}catch(t){return console.error("API Request Error:",t),{success:!1,error:t instanceof Error?t.message:"Unknown error occurred"}}})}healthCheck(){return e(this,void 0,void 0,function*(){console.log(`VaultPilot: Attempting health check to ${this.baseUrl}/status`);const t=yield this.makeRequest("/status",{method:"GET"});return console.log("VaultPilot: Health check result:",t),t})}simpleHealthCheck(){return e(this,void 0,void 0,function*(){try{const t=`${this.baseUrl}/status`,e=yield fetch(t,{method:"HEAD",mode:"cors",credentials:"omit"});return e.ok||405===e.status?{success:!0,data:{status:"ok"}}:{success:!1,error:`Server responded with status ${e.status}`}}catch(t){return{success:!1,error:t instanceof Error?t.message:"Connection failed"}}})}chat(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/chat",{method:"POST",body:JSON.stringify(t)})})}getConversationHistory(t){return e(this,arguments,void 0,function*(t,e=50){const n={conversation_id:t,limit:e,include_messages:!0};return this.makeRequest("/api/obsidian/conversation/history",{method:"POST",body:JSON.stringify(n)})})}deleteConversation(t){return e(this,void 0,void 0,function*(){return this.makeRequest(`/api/obsidian/conversations/${t}`,{method:"DELETE"})})}getCopilotCompletion(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/copilot/complete",{method:"POST",body:JSON.stringify(t)})})}executeWorkflow(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/workflow",{method:"POST",body:JSON.stringify(t)})})}runWorkflow(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/workflow",{method:"POST",body:JSON.stringify({goal:t.message,context:t.context||void 0})})})}sendChat(t,n){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/chat",{method:"POST",body:JSON.stringify({message:t.message,vault_context:t.context||void 0,conversation_id:null==n?void 0:n.conversation_id,agent_id:null==n?void 0:n.agent_id,mode:"ask"})})})}getAgents(){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agents")})}createAgent(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agents/create",{method:"POST",body:JSON.stringify(t)})})}executeAgent(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agent/execute",{method:"POST",body:JSON.stringify(t)})})}analyzeVaultContext(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/vault/context",{method:"POST",body:JSON.stringify(t)})})}planTasks(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/planning/tasks",{method:"POST",body:JSON.stringify(t)})})}parseIntelligence(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/intelligence/parse",{method:"POST",body:JSON.stringify(t)})})}classifyIntent(t){return e(this,void 0,void 0,function*(){const e=yield this.makeRequest("/api/obsidian/intelligence/parse",{method:"POST",body:JSON.stringify({message:t})});return e.success&&e.data?e.data:{intent:"ask",confidence:.5}})}explainIntent(t){return e(this,void 0,void 0,function*(){const e=yield this.makeRequest("/api/obsidian/intelligence/parse",{method:"POST",body:JSON.stringify({message:t,include_debug:!0})});return e.success&&e.data?e.data:{intent:"ask",confidence:.5,reasoning:"Classification failed, defaulting to ask mode"}})}updateMemory(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/memory/update",{method:"POST",body:JSON.stringify(t)})})}connectWebSocket(t){const e=this.baseUrl.replace("http","ws")+"/ws/obsidian";console.log(`VaultPilot: Attempting WebSocket connection to ${e}`),this.websocket=new WebSocket(e),this.websocket.onopen=()=>{var e;console.log("VaultPilot: WebSocket connected to EvoAgentX"),null===(e=t.onConnect)||void 0===e||e.call(t)},this.websocket.onmessage=e=>{var n,a,i,o,s,l,r;try{const r=JSON.parse(e.data);switch(console.log("VaultPilot: WebSocket message received:",r.type),r.type){case"chat":null===(n=t.onChat)||void 0===n||n.call(t,r.data);break;case"workflow_progress":null===(a=t.onWorkflowProgress)||void 0===a||a.call(t,r.data);break;case"copilot":null===(i=t.onCopilot)||void 0===i||i.call(t,r.data);break;case"vault_sync":null===(o=t.onVaultSync)||void 0===o||o.call(t,r.data);break;case"intent_debug":null===(s=t.onIntentDebug)||void 0===s||s.call(t,r.data);break;case"error":null===(l=t.onError)||void 0===l||l.call(t,r.data)}}catch(e){console.error("VaultPilot: Error parsing WebSocket message:",e),null===(r=t.onError)||void 0===r||r.call(t,"Failed to parse WebSocket message")}},this.websocket.onclose=e=>{var n;console.log("VaultPilot: WebSocket disconnected from EvoAgentX",e.code,e.reason),null===(n=t.onDisconnect)||void 0===n||n.call(t)},this.websocket.onerror=e=>{var n;console.error("VaultPilot: WebSocket error:",e),null===(n=t.onError)||void 0===n||n.call(t,"WebSocket connection error")}}disconnectWebSocket(){this.websocket&&(this.websocket.close(),this.websocket=void 0)}sendWebSocketMessage(t,e){this.websocket&&this.websocket.readyState===WebSocket.OPEN&&this.websocket.send(JSON.stringify({type:t,data:e}))}isWebSocketConnected(){var t;return(null===(t=this.websocket)||void 0===t?void 0:t.readyState)===WebSocket.OPEN}}function g(t){return t.match(/(<!-- vp:plan:start -->)([\s\S]*?)(<!-- vp:plan:end -->)/i)}function v(t){let e=/(^##\s+Schedule\b[^\n]*\n)([\s\S]*?)(?=\n##\s|$)/im,n=t.match(e);return n||(e=/(^##\s*(?:.*\s)?\bSchedule\b(?:\s.*)?$\n)([\s\S]*?)(?=\n##\s|$)/im,t.match(e))}class m{constructor(){this.logs=[],this.maxLogs=100}static getInstance(){return m.instance||(m.instance=new m),m.instance}log(t,e){const n=`[${(new Date).toISOString()}] ${t}${e?` | ${JSON.stringify(e)}`:""}`;console.log(n),this.logs.push(n),this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(-this.maxLogs))}error(t,e){const n=(new Date).toISOString(),a=e instanceof Error?{message:e.message,stack:e.stack,name:e.name}:e,i=`[${n}] ERROR: ${t}${a?` | ${JSON.stringify(a)}`:""}`;console.error(i),this.logs.push(i),this.logs.length>this.maxLogs&&(this.logs=this.logs.slice(-this.maxLogs))}getLogs(){return[...this.logs]}clearLogs(){this.logs=[]}exportLogs(){return this.logs.join("\n")}analyzeApiClient(t){return t?{status:"available",available:!0,type:typeof t,methods:Object.getOwnPropertyNames(Object.getPrototypeOf(t)).filter(e=>"function"==typeof t[e]),hasPlanTasks:"function"==typeof t.planTasks,hasHealthCheck:"function"==typeof t.healthCheck}:{status:"null",available:!1}}testConnection(t){return e(this,void 0,void 0,function*(){try{if(this.log("🔗 Testing EvoAgentX connection..."),!t)throw new Error("API client is null or undefined");if(!t.healthCheck)throw new Error("API client does not have healthCheck method");const e=yield t.healthCheck();return this.log("✅ Connection test successful",e),{success:!0,result:e}}catch(t){return this.error("❌ Connection test failed",t),{success:!1,error:t instanceof Error?t.message:String(t)}}})}testTaskPlanning(t){return e(this,arguments,void 0,function*(t,e="Test note for schedule generation"){var n,a,i,o;try{if(this.log("📋 Testing task planning..."),!t)throw new Error("API client is null or undefined");if(!t.planTasks)throw new Error("API client does not have planTasks method");const s=yield t.planTasks({goal:"Create a test schedule",context:e,timeframe:"1 day"});return this.log("✅ Task planning test successful",{success:s.success,hasData:!!s.data,hasPlan:!!(null===(n=s.data)||void 0===n?void 0:n.plan),taskCount:(null===(o=null===(i=null===(a=s.data)||void 0===a?void 0:a.plan)||void 0===i?void 0:i.tasks)||void 0===o?void 0:o.length)||0}),{success:!0,result:s}}catch(t){return this.error("❌ Task planning test failed",t),{success:!1,error:t instanceof Error?t.message:String(t)}}})}}const f=m.getInstance();class y extends Error{constructor(t,e,n){super(t),this.name="VaultManagementError",this.code=e,this.feature=n}}class b{constructor(t,e){this.baseUrl=t,this.apiKey=e}getVaultStructure(t){return e(this,void 0,void 0,function*(){try{const e=yield this.makeRequest("/api/obsidian/vault/structure",{method:"POST",body:JSON.stringify(t)});if(!e.ok)throw new y(`Failed to get vault structure: ${e.statusText}`,"STRUCTURE_FETCH_FAILED","structure");return yield e.json()}catch(t){throw this.handleVaultManagementError(t,"structure"),t}})}performFileOperation(t){return e(this,void 0,void 0,function*(){try{this.validateFileOperationRequest(t);const e=yield this.makeRequest("/api/obsidian/vault/file/operation",{method:"POST",body:JSON.stringify(t)});if(!e.ok)throw new y(`File operation failed: ${e.statusText}`,"FILE_OPERATION_FAILED","file-operations");const n=yield e.json();if(!n.success)throw new y(n.message||"File operation failed","FILE_OPERATION_FAILED","file-operations");return n}catch(t){throw this.handleVaultManagementError(t,"file-operations"),t}})}performBatchOperations(t){return e(this,void 0,void 0,function*(){try{if(!t.operations||0===t.operations.length)throw new y("No operations specified for batch request","INVALID_BATCH_REQUEST","batch-operations");t.operations.forEach((t,e)=>{try{this.validateFileOperationRequest(t)}catch(t){throw new y(`Invalid operation at index ${e}: ${t.message||t}`,"INVALID_BATCH_OPERATION","batch-operations")}});const e=yield this.makeRequest("/api/obsidian/vault/file/batch",{method:"POST",body:JSON.stringify(t)});if(!e.ok)throw new y(`Batch operations failed: ${e.statusText}`,"BATCH_OPERATION_FAILED","batch-operations");const n=yield e.json();if(!n.success)throw new y(n.message||"Batch operations failed","BATCH_OPERATION_FAILED","batch-operations");return n}catch(t){throw this.handleVaultManagementError(t,"batch-operations"),t}})}searchVault(t){return e(this,void 0,void 0,function*(){try{if(!t.query||0===t.query.trim().length)throw new y("Search query cannot be empty","INVALID_SEARCH_QUERY","search");const e=yield this.makeRequest("/api/obsidian/vault/search",{method:"POST",body:JSON.stringify(t)});if(!e.ok)throw new y(`Search failed: ${e.statusText}`,"SEARCH_FAILED","search");return yield e.json()}catch(t){throw this.handleVaultManagementError(t,"search"),t}})}organizeVault(t){return e(this,void 0,void 0,function*(){try{const e=yield this.makeRequest("/api/obsidian/vault/organize",{method:"POST",body:JSON.stringify(t)});if(!e.ok)throw new y(`Organization analysis failed: ${e.statusText}`,"ORGANIZATION_FAILED","organization");return yield e.json()}catch(t){throw this.handleVaultManagementError(t,"organization"),t}})}backupVault(t){return e(this,void 0,void 0,function*(){try{const e=yield this.makeRequest("/api/obsidian/vault/backup",{method:"POST",body:JSON.stringify(t)});if(!e.ok)throw new y(`Backup failed: ${e.statusText}`,"BACKUP_FAILED","backup");return yield e.json()}catch(t){throw this.handleVaultManagementError(t,"backup"),t}})}createFile(t,n){return e(this,arguments,void 0,function*(t,e,n=!1){return this.performFileOperation({operation:"create",file_path:t,content:e,backup:n})})}updateFile(t,n){return e(this,arguments,void 0,function*(t,e,n=!0){return this.performFileOperation({operation:"update",file_path:t,content:e,backup:n})})}deleteFile(t){return e(this,arguments,void 0,function*(t,e=!0){return this.performFileOperation({operation:"delete",file_path:t,backup:e})})}moveFile(t,n){return e(this,arguments,void 0,function*(t,e,n=!0){return this.performFileOperation({operation:"move",file_path:t,new_path:e,backup:n})})}copyFile(t,n){return e(this,void 0,void 0,function*(){return this.performFileOperation({operation:"copy",file_path:t,new_path:n})})}quickSearch(t){return e(this,arguments,void 0,function*(t,e=20){return this.searchVault({query:t,search_type:"comprehensive",max_results:e,include_content:!0})})}makeRequest(t){return e(this,arguments,void 0,function*(t,e={}){const n=`${this.baseUrl.replace(/\/$/,"")}${t}`,a=Object.assign({"Content-Type":"application/json"},e.headers||{});this.apiKey&&(a.Authorization=`Bearer ${this.apiKey}`);const i=Object.assign(Object.assign({},e),{headers:a});try{return yield fetch(n,i)}catch(t){throw new y(`Network request failed: ${t.message||t}`,"NETWORK_ERROR","api")}})}validateFileOperationRequest(t){if(!t.file_path||0===t.file_path.trim().length)throw new y("File path is required","INVALID_FILE_PATH","validation");if(!("move"!==t.operation&&"copy"!==t.operation||t.new_path&&0!==t.new_path.trim().length))throw new y("New path is required for move/copy operations","INVALID_NEW_PATH","validation");if(("create"===t.operation||"update"===t.operation)&&void 0===t.content)throw new y("Content is required for create/update operations","INVALID_CONTENT","validation")}handleVaultManagementError(e,n){console.error(`Vault management error in ${n}:`,e),e instanceof y?new t.Notice(`Vault ${n} error: ${e.message}`,5e3):new t.Notice(`Vault ${n} operation failed`,3e3)}testConnection(){return e(this,void 0,void 0,function*(){try{const t=yield this.makeRequest("/api/obsidian/vault/structure",{method:"POST",body:JSON.stringify({include_content:!1,max_depth:1})});return t.ok?{success:!0,message:"Vault management connection successful"}:{success:!1,message:`Connection failed: ${t.status} ${t.statusText}`}}catch(t){return{success:!1,message:`Connection error: ${t.message||t}`}}})}}class k extends t.Modal{constructor(t,e){super(t),this.plugin=e,this.vaultClient=e.vaultClient}setFocusPath(t){return this.focusPath=t,this}onOpen(){return e(this,void 0,void 0,function*(){const{contentEl:t}=this;t.empty(),t.addClass("vault-structure-modal");const e=t.createEl("div",{cls:"modal-header"});e.createEl("h2",{text:"Vault Structure Analysis"});const n=e.createEl("button",{text:"🔄 Refresh",cls:"mod-cta"}),a=t.createDiv({cls:"vault-loading"});a.setText("🔍 Analyzing vault structure...");try{const e=yield this.vaultClient.getVaultStructure({include_content:!1,max_depth:5});a.remove(),this.renderStructure(t,e),n.onclick=()=>{this.onOpen()}}catch(e){a.setText("❌ Failed to load vault structure"),console.error(e);t.createEl("button",{text:"Retry",cls:"mod-cta"}).onclick=()=>this.onOpen()}})}renderStructure(t,e){t.createDiv({cls:"vault-stats"}).innerHTML=`\n      <div class="stat-grid">\n        <div class="stat-item">\n          <span class="stat-icon">📁</span>\n          <span class="stat-label">Files</span>\n          <span class="stat-value">${e.total_files}</span>\n        </div>\n        <div class="stat-item">\n          <span class="stat-icon">📂</span>\n          <span class="stat-label">Folders</span>\n          <span class="stat-value">${e.total_folders}</span>\n        </div>\n        <div class="stat-item">\n          <span class="stat-icon">💾</span>\n          <span class="stat-label">Size</span>\n          <span class="stat-value">${(e.total_size/1024/1024).toFixed(2)} MB</span>\n        </div>\n      </div>\n    `;const n=t.createDiv({cls:"vault-tree-container"});n.createEl("h3",{text:"Folder Structure"});const a=n.createDiv({cls:"vault-tree"});if(this.renderFolder(a,e.structure,0),e.recent_files.length>0){const n=t.createDiv({cls:"recent-files-container"});n.createEl("h3",{text:"Recent Files"});const a=n.createDiv({cls:"recent-files"});e.recent_files.slice(0,10).forEach(t=>{a.createDiv({cls:"recent-file"}).innerHTML=`\n          <span class="file-icon">📄</span>\n          <span class="file-name">${t.name}</span>\n          <span class="file-date">${new Date(t.modified).toLocaleDateString()}</span>\n        `})}if(e.orphaned_files.length>0){const n=t.createDiv({cls:"orphaned-files-container"});n.createEl("h3",{text:"⚠️ Orphaned Files"});const a=n.createDiv({cls:"orphaned-files"});e.orphaned_files.forEach(t=>{a.createDiv({cls:"orphaned-file"}).innerHTML=`\n          <span class="file-icon">🔗</span>\n          <span class="file-path">${t.path}</span>\n        `})}}renderFolder(t,e,n){const a=t.createDiv({cls:"folder-item",attr:{"data-level":n.toString()}});a.innerHTML=`\n      <span class="folder-toggle">▶</span>\n      <span class="folder-icon">📁</span>\n      <span class="folder-name">${e.name}</span>\n      <span class="folder-count">(${e.children.length})</span>\n    `;const i=t.createDiv({cls:"folder-children",attr:{style:"display: none;"}}),o=a.querySelector(".folder-toggle");o.onclick=()=>{const t="none"!==i.style.display;i.style.display=t?"none":"block",o.textContent=t?"▶":"▼"},e.children.forEach(t=>{if("folder"===t.type)this.renderFolder(i,t,n+1);else{i.createDiv({cls:"file-item",attr:{"data-level":(n+1).toString()}}).innerHTML=`\n          <span class="file-icon">📄</span>\n          <span class="file-name">${t.name}</span>\n          <span class="file-size">${(t.size/1024).toFixed(1)}KB</span>\n        `}})}onClose(){const{contentEl:t}=this;t.empty()}}class x extends t.Modal{constructor(t,e){super(t),this.plugin=e,this.vaultClient=e.vaultClient}setInitialQuery(t,e){return this.initialQuery=t,this.searchType=e,this}onOpen(){return e(this,void 0,void 0,function*(){const{contentEl:n}=this;n.empty(),n.addClass("smart-search-modal"),n.createEl("h2",{text:"🔍 Smart Vault Search"});const a=n.createDiv({cls:"search-form"}),i=a.createEl("input",{type:"text",placeholder:"Enter search query...",cls:"search-query-input"});this.initialQuery&&(i.value=this.initialQuery);const o=a.createEl("select",{cls:"search-type-select"});[{value:"comprehensive",label:"Comprehensive"},{value:"content",label:"Content"},{value:"filename",label:"Filename"},{value:"tags",label:"Tags"},{value:"links",label:"Links"}].forEach(t=>{const e=o.createEl("option",{value:t.value});e.textContent=t.label,t.value===(this.searchType||"comprehensive")&&(e.selected=!0)});const s=a.createEl("button",{text:"Search",cls:"mod-cta search-button"}),l=n.createDiv({cls:"search-results-container"}),r=()=>e(this,void 0,void 0,function*(){var e;const n=i.value.trim();if(!n)return void new t.Notice("Please enter a search query");s.textContent="Searching...",s.disabled=!0,l.empty();const a=l.createDiv({cls:"search-loading"});a.textContent="🔍 Searching vault...";try{const t=yield this.vaultClient.searchVault({query:n,search_type:o.value,max_results:(null===(e=this.plugin.settings.vaultManagement)||void 0===e?void 0:e.searchResultsLimit)||50,include_content:!0});a.remove(),this.renderSearchResults(l,t)}catch(t){a.textContent="❌ Search failed",console.error("Search error:",t)}finally{s.textContent="Search",s.disabled=!1}});s.onclick=r,i.addEventListener("keypress",t=>{"Enter"===t.key&&r()}),this.initialQuery&&r(),i.focus()})}renderSearchResults(t,e){if(t.createEl("h3",{text:`Search Results (${e.total_found})`}),e.insights){t.createDiv({cls:"search-insights"}).innerHTML=`\n        <div class="insights-header">🧠 AI Insights</div>\n        <div class="insights-content">${e.insights}</div>\n      `}if(0===e.results.length)return void t.createDiv({cls:"no-results",text:"No results found. Try a different search term or type."});const n=t.createDiv({cls:"search-results-list"});if(e.results.forEach(t=>{const e=n.createDiv({cls:"search-result"});e.innerHTML=`\n        <div class="result-header">\n          <span class="result-file-name">${t.file_name}</span>\n          <span class="result-match-type">${t.match_type}</span>\n          <span class="result-score">${(100*t.score).toFixed(0)}%</span>\n        </div>\n        <div class="result-path">${t.file_path}</div>\n        <div class="result-preview">${t.preview}</div>\n        ${t.matches.length>0?`\n          <div class="result-matches">\n            <strong>Matches:</strong> ${t.matches.join(", ")}\n          </div>\n        `:""}\n      `,e.onclick=()=>{this.app.workspace.openLinkText(t.file_path,""),this.close()}}),e.suggested_queries&&e.suggested_queries.length>0){const n=t.createDiv({cls:"suggested-queries"});n.createEl("h4",{text:"💡 Suggested Queries"});const a=n.createDiv({cls:"suggestions-list"});e.suggested_queries.forEach(t=>{a.createEl("button",{text:t,cls:"suggestion-button"}).onclick=()=>{const e=this.contentEl.querySelector(".search-query-input");e&&(e.value=t,e.dispatchEvent(new KeyboardEvent("keypress",{key:"Enter"})))}})}}onClose(){const{contentEl:t}=this;t.empty()}}class w extends t.Modal{constructor(t,e){super(t),this.plugin=e,this.vaultClient=e.vaultClient}setInitialPath(t){return this.initialPath=t,this}setOperation(t){return this.operation=t,this}onOpen(){return e(this,void 0,void 0,function*(){const{contentEl:e}=this;e.empty(),e.addClass("file-operations-modal"),e.createEl("h2",{text:"📁 File Operations Manager"}),new t.Setting(e).setName("Operation").setDesc("Select the file operation to perform").addDropdown(t=>t.addOption("create","Create File").addOption("update","Update File").addOption("delete","Delete File").addOption("move","Move File").addOption("copy","Copy File").setValue(this.operation||"create").onChange(t=>{this.operation=t,this.updateOperationForm()})),e.createDiv({cls:"operation-form"}),this.updateOperationForm()})}updateOperationForm(){const e=this.contentEl.querySelector(".operation-form");if(!e)return;e.empty();const n=this.operation||"create";new t.Setting(e).setName("File Path").setDesc("Path to the file (including filename)").addText(t=>t.setPlaceholder("path/to/file.md").setValue(this.initialPath||"").onChange(t=>this.initialPath=t)),"move"!==n&&"copy"!==n||new t.Setting(e).setName("New Path").setDesc("Destination path for the file").addText(t=>t.setPlaceholder("new/path/to/file.md")),"create"!==n&&"update"!==n||new t.Setting(e).setName("Content").setDesc("File content").addTextArea(t=>{t.setPlaceholder("Enter file content..."),"create"===n&&t.setValue("# New File\n\nContent goes here...")}),"create"!==n&&new t.Setting(e).setName("Create Backup").setDesc("Create a backup before performing the operation").addToggle(t=>t.setValue(!0)),new t.Setting(e).addButton(t=>t.setButtonText(`Execute ${n.charAt(0).toUpperCase()+n.slice(1)}`).setCta().onClick(()=>this.executeOperation()))}executeOperation(){return e(this,void 0,void 0,function*(){var e;const n=this.operation||"create",a=this.contentEl.querySelector('input[placeholder*="path/to/file"]'),i=this.contentEl.querySelector('input[placeholder*="new/path"]'),o=this.contentEl.querySelector("textarea"),s=this.contentEl.querySelector('input[type="checkbox"]');if(!(null==a?void 0:a.value))return void new t.Notice("File path is required");const l={operation:n,file_path:a.value,backup:null===(e=null==s?void 0:s.checked)||void 0===e||e};(null==i?void 0:i.value)&&(l.new_path=i.value),(null==o?void 0:o.value)&&(l.content=o.value);try{new t.Notice(`Performing ${n}...`);const e=yield this.vaultClient.performFileOperation(l);new t.Notice(`✅ ${n} successful: ${e.message}`),this.close()}catch(e){new t.Notice(`❌ ${n} failed: ${e.message}`)}})}onClose(){const{contentEl:t}=this;t.empty()}}class E extends t.Plugin{constructor(){super(...arguments),this.websocketConnected=!1,this.copilotEnabled=!1}onload(){return e(this,void 0,void 0,function*(){var e,n,a;yield this.loadSettings(),a=this.app,c=a,this.apiClient=new h(this.settings.backendUrl,this.settings.apiKey),(null===(e=this.settings.vaultManagement)||void 0===e?void 0:e.enableVaultManagement)&&this.initializeVaultManagement();try{let e=yield this.apiClient.healthCheck();if(!e.success&&(null===(n=e.error)||void 0===n?void 0:n.includes("400"))){console.warn("Main health check failed with 400, trying alternative method");const t=yield this.apiClient.simpleHealthCheck();t.success&&t.data&&(e={success:!0,data:{status:t.data.status,version:"unknown"}})}e.success?(new t.Notice("✅ VaultPilot connected to EvoAgentX",3e3),this.settings.enableWebSocket&&this.connectWebSocket()):(console.error("Health check failed:",e.error),new t.Notice("⚠️ EvoAgentX backend offline - some features may not work",5e3))}catch(e){console.error("Health check error:",e),new t.Notice("⚠️ Cannot connect to EvoAgentX backend",5e3)}this.registerView(o,t=>new s(t,this)),this.registerView(l,t=>new r(t,this));const d=this.addRibbonIcon("bot","VaultPilot",t=>{t.ctrlKey||t.metaKey?this.activateFullTabView():this.openChatModal()});d.addClass("vaultpilot-ribbon-class"),d.title="VaultPilot (Ctrl+click for Dashboard)",this.addCommand({id:"open-chat",name:"Open Chat",callback:()=>this.openChatModal()}),this.addCommand({id:"execute-workflow",name:"Execute Workflow",callback:()=>this.openWorkflowModal()}),this.addCommand({id:"analyze-vault",name:"Analyze Current Vault",callback:()=>this.analyzeVault()}),this.addCommand({id:"copilot-complete",name:"Get AI Completion",editorCallback:t=>this.getCopilotCompletion(t)}),this.addCommand({id:"quick-chat",name:"Quick Chat with Selection",editorCallback:t=>this.quickChatWithSelection(t)}),this.addCommand({id:"plan-tasks",name:"Plan Tasks from Note",editorCallback:t=>this.planTasksFromNote(t)}),this.addCommand({id:"plan-my-day",name:"Plan My Day",callback:()=>this.planMyDay()}),this.addCommand({id:"plan-my-day-debug",name:"Plan My Day - Debug Connection",callback:()=>this.debugPlanMyDay()}),this.addCommand({id:"open-vaultpilot-view",name:"Open VaultPilot View",callback:()=>this.activateView()}),this.addCommand({id:"open-vaultpilot-full-tab",name:"Open VaultPilot Dashboard",callback:()=>this.activateFullTabView()}),this.registerVaultManagementCommands(),this.settings.enableCopilot&&this.settings.enableAutoComplete&&this.registerDomEvent(document,"keyup",this.handleKeyUp.bind(this)),this.addSettingTab(new i(this.app,this))})}onunload(){this.app.workspace.detachLeavesOfType(o),this.app.workspace.detachLeavesOfType(l),this.disconnectWebSocket()}connectWebSocket(){this.websocketConnected||this.apiClient.connectWebSocket({onChat:t=>{console.log("WebSocket chat update:",t)},onWorkflowProgress:e=>{new t.Notice(`Workflow: ${e.step}`,2e3)},onCopilot:t=>{this.handleCopilotSuggestion(t)},onVaultSync:t=>{console.log("Vault sync update:",t)},onIntentDebug:t=>{this.settings.showIntentDebug&&this.settings.debugMode&&console.log("Intent debug:",t)},onError:e=>{new t.Notice(`WebSocket error: ${e}`,5e3)},onConnect:()=>{this.websocketConnected=!0,this.settings.debugMode&&new t.Notice("WebSocket connected",2e3)},onDisconnect:()=>{this.websocketConnected=!1,this.settings.debugMode&&new t.Notice("WebSocket disconnected",2e3)}})}disconnectWebSocket(){this.apiClient.disconnectWebSocket(),this.websocketConnected=!1}isWebSocketConnected(){return this.websocketConnected}openChatModal(){new u(this.app,this).open()}openWorkflowModal(){new p(this.app,this).open()}analyzeVault(){return e(this,void 0,void 0,function*(){const e=new t.Notice("Analyzing vault...",0);try{const n=this.app.vault.getMarkdownFiles();let a="";for(const t of n.slice(0,10)){const e=yield this.app.vault.read(t);a+=`=== ${t.name} ===\n${e}\n\n`}const i=yield this.apiClient.analyzeVaultContext({content:a,analysis_type:"insights"});if(e.hide(),!i.success||!i.data)throw new Error(i.error||"Analysis failed");{const e=(new Date).toISOString().split("T")[0],n=`Vault Analysis ${e}.md`;let a=`# Vault Analysis - ${e}\n\n`;a+=`## Analysis\n\n${i.data.analysis}\n\n`,i.data.insights&&i.data.insights.length>0&&(a+="## Key Insights\n\n",i.data.insights.forEach(t=>{a+=`- ${t}\n`}),a+="\n"),i.data.recommendations&&i.data.recommendations.length>0&&(a+="## Recommendations\n\n",i.data.recommendations.forEach(t=>{a+=`- ${t}\n`})),yield this.app.vault.create(n,a),new t.Notice(`Vault analysis saved as ${n}`)}}catch(n){e.hide(),new t.Notice(`Analysis error: ${n instanceof Error?n.message:"Unknown error"}`)}})}getCopilotCompletion(n){return e(this,void 0,void 0,function*(){if(!this.settings.enableCopilot)return void new t.Notice("Copilot is disabled in settings");const e=n.getCursor(),a=n.getLine(e.line).substring(0,e.ch),i=n.getValue();if(i&&0!==i.trim().length)try{const o=yield this.apiClient.getCopilotCompletion({text:i,cursor_position:n.posToOffset(e),file_type:"markdown",context:a});o.success&&o.data?(n.replaceRange(o.data.completion,e),new t.Notice("Completion inserted",2e3)):new t.Notice(`Copilot error: ${o.error}`)}catch(e){new t.Notice(`Copilot error: ${e instanceof Error?e.message:"Unknown error"}`)}else new t.Notice("Cannot complete empty text")})}quickChatWithSelection(n){return e(this,void 0,void 0,function*(){const e=n.getSelection();if(e)try{const a=yield this.apiClient.chat({message:`Please explain or analyze this text: "${e}"`,vault_context:n.getValue()});if(a.success&&a.data){const e=n.getCursor("to"),i=`\n\n**VaultPilot Analysis:**\n${a.data.response}\n\n`;n.replaceRange(i,e),new t.Notice("Analysis inserted",2e3)}else new t.Notice(`Chat error: ${a.error}`)}catch(e){new t.Notice(`Chat error: ${e instanceof Error?e.message:"Unknown error"}`)}else new t.Notice("No text selected")})}planTasksFromNote(n){return e(this,void 0,void 0,function*(){const e=n.getValue(),a=this.app.workspace.getActiveFile();if(!e.trim())return void new t.Notice("No content to analyze");const i=new t.Notice("Planning tasks...",0);try{const n=yield this.apiClient.planTasks({goal:`Create a task plan based on this note: ${(null==a?void 0:a.name)||"Untitled"}`,context:e,timeframe:"1 week"});if(i.hide(),!n.success||!n.data)throw new Error(n.error||"Task planning failed");{const e=(new Date).toISOString().split("T")[0],i=`Task Plan - ${(null==a?void 0:a.basename)||"Untitled"} - ${e}.md`;let o=`# ${n.data.plan.title}\n\n`;o+=`${n.data.plan.description}\n\n`,o+=`**Estimated Duration:** ${n.data.plan.estimated_duration}\n\n`,n.data.plan.tasks&&n.data.plan.tasks.length>0&&(o+="## Tasks\n\n",n.data.plan.tasks.forEach(t=>{const e="completed"===t.status?"[x]":"[ ]";o+=`${e} **${t.title}** (${t.priority} priority)\n`,o+=`   ${t.description}\n`,o+=`   *Estimated time: ${t.estimated_time}*\n\n`})),n.data.milestones&&n.data.milestones.length>0&&(o+="## Milestones\n\n",n.data.milestones.forEach(t=>{o+=`- **${t.title}** (${t.target_date})\n`,o+=`  ${t.description}\n\n`})),yield this.app.vault.create(i,o),new t.Notice(`Task plan saved as ${i}`)}}catch(e){i.hide(),new t.Notice(`Task planning error: ${e instanceof Error?e.message:"Unknown error"}`)}})}planMyDay(){return e(this,void 0,void 0,function*(){var n,a;console.log("🚀 [Plan My Day] Command started");const i=this.app.workspace.getActiveFile();if(!i)return console.warn("⚠️ [Plan My Day] No active file found"),void new t.Notice("No active note—open today's daily note first.");console.log("📁 [Plan My Day] Active file:",{name:i.name,path:i.path,extension:i.extension});const o=new t.Notice("Planning your day with AI...",0);try{console.log("📖 [Plan My Day] Reading file content...");const s=yield this.app.vault.read(i);if(console.log("📝 [Plan My Day] File content read:",{length:s.length,hasContent:s.trim().length>0,firstLine:s.split("\n")[0],lineCount:s.split("\n").length}),console.log("🔍 [Plan My Day] Checking API client..."),console.log("🔗 [Plan My Day] API client status:",{exists:!!this.apiClient,type:typeof this.apiClient,isConnected:this.apiClient?"available":"not available"}),!this.apiClient){const t="API client not initialized. Check VaultPilot settings and connection.";throw console.error("❌ [Plan My Day] Error:",t),new Error(t)}console.log("📤 [Plan My Day] Fetching schedule from EvoAgentX...");const{scheduleMarkdown:l,headline:r}=yield function(t,n){return e(this,void 0,void 0,function*(){var e,a,i;if(console.log("🔄 [Plan My Day] Starting schedule fetch..."),console.log("📝 [Plan My Day] Note text length:",t.length),console.log("🔗 [Plan My Day] API client type:",typeof n),!n){const t="API client is null or undefined";throw console.error("❌ [Plan My Day] Error:",t),new Error(t)}if(!n.planTasks){const t="API client does not have planTasks method";throw console.error("❌ [Plan My Day] Error:",t),console.log("🔍 [Plan My Day] Available methods:",Object.getOwnPropertyNames(n)),new Error(t)}try{console.log("📤 [Plan My Day] Sending request to EvoAgentX...");const o=yield n.planTasks({goal:"Create a daily schedule based on this note content",context:t,timeframe:"1 day"});if(console.log("📥 [Plan My Day] Received response:",{success:o.success,hasData:!!o.data,error:o.error}),console.log("🔍 [Plan My Day] Raw response data:",JSON.stringify(o.data,null,2)),console.log("🔍 [Plan My Day] Response data type:",typeof o.data),console.log("🔍 [Plan My Day] Response data keys:",o.data?Object.keys(o.data):"no data"),!o.success){const t=o.error||"Failed to generate schedule";throw console.error("❌ [Plan My Day] API Error:",t),new Error(t)}if(!o.data){const t="No data in API response";throw console.error("❌ [Plan My Day] Error:",t),console.log("🔍 [Plan My Day] Full response:",o),new Error(t)}const s=o.data.data||o.data;if(console.log("📋 [Plan My Day] Response data structure:",{hasPlan:!!s.plan,planKeys:s.plan?Object.keys(s.plan):null,hasTasks:!!(null===(e=s.plan)||void 0===e?void 0:e.tasks),taskCount:(null===(i=null===(a=s.plan)||void 0===a?void 0:a.tasks)||void 0===i?void 0:i.length)||0}),!s.plan){const t="No plan data in API response";throw console.error("❌ [Plan My Day] Error:",t),console.log("🔍 [Plan My Day] Full response data:",o.data),console.log("🔍 [Plan My Day] Actual data:",s),new Error(t)}const l=s.plan.tasks||[];if(console.log("📝 [Plan My Day] Processing tasks:",l.length),0===l.length)return console.warn("⚠️ [Plan My Day] No tasks in response, creating fallback schedule"),{scheduleMarkdown:"| Time | Task |\n|------|------|\n| 9:00 AM | Plan your day |\n| 10:00 AM | Start working |\n| 12:00 PM | Lunch break |",headline:"📅 Basic schedule created (no tasks found in note)"};let r="| Time | Task |\n|------|------|\n";l.forEach((t,e)=>{var n,a;console.log(`📋 [Plan My Day] Processing task ${e+1}:`,{title:t.title,description:null===(n=t.description)||void 0===n?void 0:n.substring(0,100),priority:t.priority,estimatedTime:t.estimated_time});const i=null===(a=t.description)||void 0===a?void 0:a.match(/(\d{1,2}:\d{2})/),o=i?i[1]:`${9+Math.floor(1.5*e)}:${30*e%60||"00"}`;r+=`| ${o} | ${t.title} |\n`});const c={scheduleMarkdown:r,headline:`✨ Smart schedule created with ${l.length} tasks!`};return console.log("✅ [Plan My Day] Schedule generated successfully:",{markdownLength:r.length,taskCount:l.length,headline:c.headline}),c}catch(t){throw console.error("❌ [Plan My Day] Fetch error:",t),console.error("🔍 [Plan My Day] Error stack:",t instanceof Error?t.stack:"No stack trace"),t instanceof Error?new Error(`Schedule fetch failed: ${t.message}`):new Error(`Schedule fetch failed: ${String(t)}`)}})}(s,this.apiClient);if(console.log("📋 [Plan My Day] Schedule received:",{markdownLength:l.length,headline:r,firstLine:l.split("\n")[0]}),console.log("✅ [Plan My Day] Validating schedule..."),!function(t){console.log("🔍 [Plan My Day] Validating schedule markdown:",{length:t.length,trimmedLength:t.trim().length,isString:"string"==typeof t,preview:t.substring(0,100)});const e=t.trim().length>0;return console.log("✅ [Plan My Day] Validation result:",e),e}(l)){const t="Invalid schedule data received from API";throw console.error("❌ [Plan My Day] Validation failed:",{scheduleMarkdown:l.substring(0,200),length:l.length}),new Error(t)}console.log("📝 [Plan My Day] Injecting schedule into note...");const c=g(s),d=v(s);console.log("🔍 [Plan My Day] Existing sections:",{hasPlanWrapper:!!c,hasScheduleSection:!!d,planContent:null===(n=null==c?void 0:c[2])||void 0===n?void 0:n.substring(0,50),scheduleHeading:null===(a=null==d?void 0:d[1])||void 0===a?void 0:a.substring(0,50)});const u=function(t,e){var n,a,i;console.log("📝 [Plan My Day] Injecting schedule:",{originalLength:t.length,scheduleLength:e.length,hasOriginalContent:t.trim().length>0});const o=g(t);if(o){console.log("🔄 [Plan My Day] Replacing existing plan section with comment wrapper"),console.log("📋 [Plan My Day] Found wrapped plan section:",{startComment:o[1],contentLength:(null===(n=o[2])||void 0===n?void 0:n.length)||0,endComment:o[3]});const[a,i,,s]=o,l=`${i}\n${e}\n${s}`,r=t.replace(a,l);return console.log("✅ [Plan My Day] Plan section replaced within comment wrapper"),r}const s=v(t);if(s){console.log("🔄 [Plan My Day] Replacing existing schedule section"),console.log("📋 [Plan My Day] Found section:",{headingMatch:null===(a=s[1])||void 0===a?void 0:a.substring(0,50),contentMatch:null===(i=s[2])||void 0===i?void 0:i.substring(0,100)});const[n,o]=s,l=o+e,r=t.replace(n,l);return console.log("✅ [Plan My Day] Schedule section replaced"),r}{console.log("➕ [Plan My Day] Adding new plan section with comment wrapper at top");const n=`\x3c!-- vp:plan:start --\x3e\n${e}\n\x3c!-- vp:plan:end --\x3e\n\n`+t;return console.log("✅ [Plan My Day] New plan section with wrapper added at top"),n}}(s,l);console.log("💾 [Plan My Day] Updating file...",{originalLength:s.length,updatedLength:u.length,changed:s!==u}),yield this.app.vault.modify(i,u),console.log("✅ [Plan My Day] File updated successfully"),o.hide();const p=r?`${r} ✅`:"Schedule inserted ✅";console.log("🎉 [Plan My Day] Success:",p),new t.Notice(p)}catch(e){if(console.error("❌ [Plan My Day] Operation failed:",e),console.error("🔍 [Plan My Day] Error details:",{message:e instanceof Error?e.message:String(e),stack:e instanceof Error?e.stack:"No stack trace",type:typeof e,name:e instanceof Error?e.name:"Unknown"}),o.hide(),e instanceof Error){const n=e.message;console.log("🔍 [Plan My Day] Analyzing error message:",n),n.includes("API client not initialized")?(console.error("❌ [Plan My Day] API client not initialized"),new t.Notice("Planning error: VaultPilot not connected to EvoAgentX. Check settings and restart plugin.")):n.includes("does not have planTasks method")?(console.error("❌ [Plan My Day] API client missing planTasks method"),new t.Notice("Planning error: EvoAgentX API client outdated. Please update VaultPilot plugin.")):n.includes("JSON")||n.includes("Invalid schedule data")?(console.error("❌ [Plan My Day] Invalid response format"),new t.Notice("Planning error: Invalid response format from EvoAgentX")):n.includes("fetch")||n.includes("network")||n.includes("Failed to fetch")?(console.error("❌ [Plan My Day] Network error"),new t.Notice("Planning error: Unable to connect to EvoAgentX server. Check your connection and server status.")):n.includes("Failed to generate schedule")||n.includes("Schedule fetch failed")?(console.error("❌ [Plan My Day] Schedule generation failed"),new t.Notice("Planning error: EvoAgentX task planning failed. Check server logs for details.")):n.includes("No data in API response")?(console.error("❌ [Plan My Day] Empty API response"),new t.Notice("Planning error: EvoAgentX returned empty response. Try again or check server status.")):(console.error("❌ [Plan My Day] Unhandled error"),new t.Notice(`Planning error: ${n.substring(0,100)}${n.length>100?"...":""}`))}else console.error("❌ [Plan My Day] Non-Error object thrown"),new t.Notice("Planning error: Unknown error occurred with EvoAgentX");console.log("🔍 [Plan My Day] Full error log completed")}})}debugPlanMyDay(){return e(this,void 0,void 0,function*(){console.log("🔍 [Plan My Day Debug] Starting comprehensive debug..."),f.clearLogs();const e=new t.Notice("Running Plan My Day diagnostics...",0);try{const n=this.app.workspace.getActiveFile();f.log("📁 Active file check",{hasActiveFile:!!n,fileName:null==n?void 0:n.name,fileExtension:null==n?void 0:n.extension});const a=f.analyzeApiClient(this.apiClient);if(f.log("🔗 API client analysis",a),this.apiClient){const t=yield f.testConnection(this.apiClient);if(f.log("🌐 Connection test result",t),t.success){const t=yield f.testTaskPlanning(this.apiClient,"Test note with some tasks:\n- Write code\n- Test functionality\n- Review results");f.log("📋 Task planning test result",t)}}f.log("⚙️ Plugin settings",{backendUrl:this.settings.backendUrl,hasApiKey:!!this.settings.apiKey,debugMode:this.settings.debugMode}),e.hide();const i=f.getLogs();console.log("🔍 [Plan My Day Debug] Complete diagnostic log:",i);const o=i.slice(-5).join("\n");if(new t.Notice(`Debug complete! Check console for full logs.\n\nLast entries:\n${o}`,1e4),n){const e=`# Plan My Day Debug Report\n\nGenerated: ${(new Date).toISOString()}\n\n## Diagnostic Results\n\n\`\`\`\n${f.exportLogs()}\n\`\`\``;yield this.app.vault.create(`Plan My Day Debug - ${Date.now()}.md`,e),new t.Notice("Debug report saved as new note!")}}catch(n){e.hide(),f.error("Debug process failed",n),new t.Notice(`Debug failed: ${n instanceof Error?n.message:String(n)}`)}})}activateView(){return e(this,void 0,void 0,function*(){const t=this.app.workspace.getLeavesOfType(o);if(0===t.length){const t=this.app.workspace.getRightLeaf(!1);t&&(yield t.setViewState({type:o,active:!0}))}else this.app.workspace.revealLeaf(t[0])})}activateFullTabView(){return e(this,void 0,void 0,function*(){const t=this.app.workspace.getLeavesOfType(l);if(0===t.length){const t=this.app.workspace.getLeaf("tab");t&&(yield t.setViewState({type:l,active:!0}))}else this.app.workspace.revealLeaf(t[0])})}initializeVaultManagement(){var t;(null===(t=this.settings.vaultManagement)||void 0===t?void 0:t.enableVaultManagement)&&(this.vaultClient=new b(this.settings.backendUrl,this.settings.apiKey),this.settings.debugMode&&console.log("Vault management initialized"))}disableVaultManagement(){this.vaultClient=null,this.settings.debugMode&&console.log("Vault management disabled")}registerVaultManagementCommands(){[{id:"vaultpilot-vault-structure",name:"View Vault Structure",callback:function(){console.log("Opening vault structure modal"),this.openVaultStructureModal?this.openVaultStructureModal():new t.Notice("Vault structure feature not available")}},{id:"vaultpilot-smart-search",name:"Smart Vault Search",callback:function(){console.log("Opening smart search modal"),this.openSmartSearchModal?this.openSmartSearchModal():new t.Notice("Smart search feature not available")}},{id:"vaultpilot-file-operations",name:"File Operations Manager",callback:function(){console.log("Opening file operations modal"),this.openFileOperationsModal?this.openFileOperationsModal():new t.Notice("File operations feature not available")}},{id:"vaultpilot-organize-vault",name:"AI Vault Organization",callback:function(){console.log("Opening vault organizer modal"),this.openVaultOrganizerModal?this.openVaultOrganizerModal():new t.Notice("Vault organizer feature not available")}},{id:"vaultpilot-batch-operations",name:"Batch File Operations",callback:function(){console.log("Opening batch operations modal"),this.openBatchOperationsModal?this.openBatchOperationsModal():new t.Notice("Batch operations feature not available")}},{id:"vaultpilot-quick-search-selection",name:"Quick Search Selected Text",editorCallback:function(e){const n=e.getSelection();n.trim()?(console.log("Quick search for:",n.trim()),this.openSmartSearchModal?this.openSmartSearchModal(n.trim()):new t.Notice("Smart search feature not available")):new t.Notice("Please select text to search for")}},{id:"vaultpilot-vault-health-check",name:"Vault Health Check",callback:function(){return e(this,void 0,void 0,function*(){try{if(!this.vaultClient)return void new t.Notice("Vault management not initialized");new t.Notice("Running vault health check...");const e=yield this.vaultClient.testConnection();if(!e.success)return void new t.Notice(`Health check failed: ${e.message}`,5e3);const n=yield this.vaultClient.getVaultStructure({include_content:!1,max_depth:1}),a=yield this.vaultClient.searchVault({query:"test",max_results:1});new t.Notice(`✅ Vault Health Check Passed\n📁 ${n.total_files} files, ${n.total_folders} folders\n🔍 Search: ${a.results.length} results\n💾 Size: ${(n.total_size/1024/1024).toFixed(2)} MB`,8e3)}catch(e){console.error("Vault health check failed:",e),new t.Notice(`❌ Health check failed: ${e.message}`,5e3)}})}},{id:"vaultpilot-vault-backup",name:"Create Vault Backup",callback:function(){return e(this,void 0,void 0,function*(){try{if(!this.vaultClient)return void new t.Notice("Vault management not initialized");new t.Notice("Creating vault backup...");const e=yield this.vaultClient.backupVault({include_settings:!0,compression:!0,backup_name:`vaultpilot-backup-${(new Date).toISOString().split("T")[0]}`});new t.Notice(`✅ Backup created successfully\n📦 ${e.files_backed_up} files\n💾 Size: ${(e.backup_size/1024/1024).toFixed(2)} MB\n📁 Location: ${e.backup_path}`,8e3)}catch(e){console.error("Backup failed:",e),new t.Notice(`❌ Backup failed: ${e.message}`,5e3)}})}},{id:"vaultpilot-search-content",name:"Search Content",editorCallback:function(e){const n=e.getSelection().trim()||"Enter search query";this.openSmartSearchModal?this.openSmartSearchModal(n,"content"):new t.Notice("Smart search feature not available")}},{id:"vaultpilot-search-filenames",name:"Search Filenames",callback:function(){this.openSmartSearchModal?this.openSmartSearchModal("","filename"):new t.Notice("Smart search feature not available")}},{id:"vaultpilot-recent-files",name:"View Recent Files",callback:function(){return e(this,void 0,void 0,function*(){try{if(!this.vaultClient)return void new t.Notice("Vault management not initialized");const e=yield this.vaultClient.getVaultStructure({include_content:!1});if(0===e.recent_files.length)return void new t.Notice("No recent files found");const n=e.recent_files.slice(0,10).map(t=>`• ${t.name} (${t.modified})`).join("\n");new t.Notice(`📝 Recent Files:\n${n}`,1e4)}catch(e){console.error("Failed to get recent files:",e),new t.Notice(`❌ Failed to get recent files: ${e.message}`,5e3)}})}}].forEach(t=>{var e,n;this.addCommand(Object.assign(Object.assign({},t),{callback:null===(e=t.callback)||void 0===e?void 0:e.bind(this),editorCallback:null===(n=t.editorCallback)||void 0===n?void 0:n.bind(this)}))})}openVaultStructureModal(){this.vaultClient?new k(this.app,this).open():new t.Notice("Vault management not available")}openSmartSearchModal(e,n){if(!this.vaultClient)return void new t.Notice("Vault management not available");const a=new x(this.app,this);e&&a.setInitialQuery(e,n),a.open()}openFileOperationsModal(e,n){if(!this.vaultClient)return void new t.Notice("Vault management not available");const a=new w(this.app,this);e&&a.setInitialPath(e),n&&a.setOperation(n),a.open()}openVaultOrganizerModal(){new t.Notice("Vault organizer modal not yet implemented")}openBatchOperationsModal(){new t.Notice("Batch operations modal not yet implemented")}handleKeyUp(t){if(!this.settings.enableAutoComplete||!this.settings.enableCopilot)return;t.target.classList.contains("cm-content")&&this.shouldTriggerAutoComplete(t)&&(clearTimeout(this.autoCompleteTimeout),this.autoCompleteTimeout=setTimeout(()=>{this.triggerAutoCompletion()},3e3))}shouldTriggerAutoComplete(e){if(-1!==["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Tab","Shift","Control","Alt","Meta","Escape"].indexOf(e.key))return!1;const n=this.app.workspace.getActiveViewOfType(t.MarkdownView);if(!n)return!1;const a=n.editor,i=a.getCursor(),o=a.getLine(i.line);if(i.ch!==o.length)return!1;const s=o.slice(-1);return-1!==[".","!","?",":","\n"].indexOf(s)&&" "===e.key||"Enter"===e.key&&o.trim().length>10}triggerAutoCompletion(){return e(this,void 0,void 0,function*(){const e=this.app.workspace.getActiveViewOfType(t.MarkdownView);if(!e)return;const n=e.editor,a=n.getCursor(),i=n.getLine(a.line),o=n.getValue();if(i.trim().length<10||a.ch!==i.length)return;if(!o||0===o.trim().length)return;const s=Date.now();if(!(s-(this.lastAutoCompleteRequest||0)<1e4)){this.lastAutoCompleteRequest=s;try{const e=yield this.apiClient.getCopilotCompletion({text:o,cursor_position:n.posToOffset(a),file_type:"markdown"});e.success&&e.data&&e.data.suggestions.length>0&&this.settings.debugMode&&new t.Notice(`Auto-suggestion: ${e.data.suggestions[0]}`,3e3)}catch(t){this.settings.debugMode&&console.error("Auto-completion error:",t)}}})}handleCopilotSuggestion(e){this.settings.debugMode&&new t.Notice(`Live suggestion: ${e.completion}`,2e3)}loadSettings(){return e(this,void 0,void 0,function*(){this.settings=Object.assign({},a,yield this.loadData())})}saveSettings(){return e(this,void 0,void 0,function*(){var t;yield this.saveData(this.settings),this.apiClient=new h(this.settings.backendUrl,this.settings.apiKey),(null===(t=this.settings.vaultManagement)||void 0===t?void 0:t.enableVaultManagement)?this.initializeVaultManagement():this.disableVaultManagement(),this.settings.enableWebSocket&&!this.websocketConnected?this.connectWebSocket():!this.settings.enableWebSocket&&this.websocketConnected&&this.disconnectWebSocket()})}}module.exports=E;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
