"use strict";var t=require("obsidian");function e(t,e,n,o){return new(n||(n=Promise))(function(i,a){function s(t){try{r(o.next(t))}catch(t){a(t)}}function l(t){try{r(o.throw(t))}catch(t){a(t)}}function r(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n(function(t){t(e)})).then(s,l)}r((o=o.apply(t,e||[])).next())})}"function"==typeof SuppressedError&&SuppressedError;const n={backendUrl:"http://localhost:8000",apiKey:"",enableWebSocket:!0,enableCopilot:!0,enableAutoComplete:!0,defaultAgent:"",chatHistoryLimit:100,debugMode:!1};class o extends t.PluginSettingTab{constructor(t,e){super(t,e),this.plugin=e}display(){const{containerEl:n}=this;n.empty(),n.createEl("h2",{text:"VaultPilot Settings"}),n.createEl("p",{text:"Configure your connection to EvoAgentX backend and AI features."}),n.createEl("h3",{text:"Connection"}),new t.Setting(n).setName("Backend URL").setDesc("URL of EvoAgentX backend server").addText(t=>t.setPlaceholder("http://localhost:8000").setValue(this.plugin.settings.backendUrl).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.backendUrl=t,yield this.plugin.saveSettings()}))),new t.Setting(n).setName("API Key").setDesc("Optional API key for authentication (if required by backend)").addText(t=>t.setPlaceholder("Enter API key...").setValue(this.plugin.settings.apiKey||"").onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.apiKey=t,yield this.plugin.saveSettings()}))),new t.Setting(n).setName("Connection Test").setDesc("Test connection to EvoAgentX backend").addButton(t=>t.setButtonText("Test Connection").onClick(()=>e(this,void 0,void 0,function*(){yield this.testConnection()}))),n.createEl("h3",{text:"Features"}),new t.Setting(n).setName("Enable WebSocket").setDesc("Enable real-time communication for live updates and progress tracking").addToggle(t=>t.setValue(this.plugin.settings.enableWebSocket).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.enableWebSocket=t,yield this.plugin.saveSettings(),t?this.plugin.connectWebSocket():this.plugin.disconnectWebSocket()}))),new t.Setting(n).setName("Enable Copilot").setDesc("Enable AI-powered text completion and suggestions").addToggle(t=>t.setValue(this.plugin.settings.enableCopilot).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.enableCopilot=t,yield this.plugin.saveSettings()}))),new t.Setting(n).setName("Enable Auto-Complete").setDesc("Automatically suggest completions as you type").addToggle(t=>t.setValue(this.plugin.settings.enableAutoComplete).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.enableAutoComplete=t,yield this.plugin.saveSettings()}))),n.createEl("h3",{text:"Agent Configuration"}),new t.Setting(n).setName("Default Agent").setDesc("Default agent to use for chat and workflows (leave empty for auto-selection)").addText(t=>t.setPlaceholder("Agent ID or name...").setValue(this.plugin.settings.defaultAgent||"").onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.defaultAgent=t,yield this.plugin.saveSettings()}))),new t.Setting(n).setName("Chat History Limit").setDesc("Maximum number of chat messages to keep in history").addSlider(t=>t.setLimits(10,500,10).setValue(this.plugin.settings.chatHistoryLimit).setDynamicTooltip().onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.chatHistoryLimit=t,yield this.plugin.saveSettings()}))),n.createEl("h3",{text:"Advanced"}),new t.Setting(n).setName("Debug Mode").setDesc("Enable debug logging and additional developer features").addToggle(t=>t.setValue(this.plugin.settings.debugMode).onChange(t=>e(this,void 0,void 0,function*(){this.plugin.settings.debugMode=t,yield this.plugin.saveSettings()}))),n.createEl("h3",{text:"Information"});n.createEl("div",{cls:"setting-item-description"}).innerHTML="\n      <p><strong>VaultPilot v1.0.0</strong></p>\n      <p>Comprehensive EvoAgentX integration for Obsidian</p>\n      <p>Features: AI Chat, Copilot, Workflows, Vault Analysis, Task Planning</p>\n      <p>For help and documentation, visit the GitHub repository.</p>\n    "}testConnection(){return e(this,void 0,void 0,function*(){var e;const n=new t.Notice("Testing connection...",0);try{let o=yield this.plugin.apiClient.healthCheck();if(!o.success&&(null===(e=o.error)||void 0===e?void 0:e.includes("400"))){console.warn("Main health check failed with 400, trying alternative method");const t=yield this.plugin.apiClient.simpleHealthCheck();t.success&&t.data&&(o={success:!0,data:{status:t.data.status,version:"unknown"}})}n.hide(),o.success?new t.Notice("✅ Connection successful!",3e3):new t.Notice(`❌ Connection failed: ${o.error}`,5e3)}catch(e){n.hide(),new t.Notice(`❌ Connection error: ${e instanceof Error?e.message:"Unknown error"}`,5e3)}})}}const i="vaultpilot-view";class a extends t.ItemView{constructor(t,e){super(t),this.plugin=e}getViewType(){return i}getDisplayText(){return"VaultPilot"}getIcon(){return"bot"}onOpen(){return e(this,void 0,void 0,function*(){const t=this.containerEl;t.empty(),t.addClass("vaultpilot-view");const e=t.createEl("div",{cls:"vaultpilot-header"});e.createEl("h2",{text:"🤖 VaultPilot"}),e.createEl("p",{text:"Your AI assistant for Obsidian",cls:"vaultpilot-subtitle"}),this.statusEl=t.createEl("div",{cls:"vaultpilot-status"}),this.updateStatus(),this.quickActionsEl=t.createEl("div",{cls:"vaultpilot-quick-actions"}),this.createQuickActions(),this.vaultStatsEl=t.createEl("div",{cls:"vaultpilot-vault-stats"}),this.updateVaultStats();const n=t.createEl("div",{cls:"vaultpilot-activities"});n.createEl("h3",{text:"Recent Activities"}),n.createEl("p",{text:"Activity tracking coming soon...",cls:"vaultpilot-placeholder"}),this.addStyles()})}updateStatus(){this.statusEl.empty(),this.statusEl.createEl("h3",{text:"Connection Status"});const t=this.statusEl.createEl("div",{cls:"vaultpilot-status-container"}),e=t.createEl("div",{cls:"vaultpilot-status-item"});e.createEl("span",{text:"Backend: "});const n=e.createEl("span",{cls:"vaultpilot-status-indicator",text:"Checking..."}),o=t.createEl("div",{cls:"vaultpilot-status-item"});o.createEl("span",{text:"WebSocket: "}),o.createEl("span",{cls:"vaultpilot-status-indicator",text:this.plugin.isWebSocketConnected()?"🟢 Connected":"🔴 Disconnected"}),this.checkBackendStatus(n)}checkBackendStatus(t){return e(this,void 0,void 0,function*(){var e;try{let n=yield this.plugin.apiClient.healthCheck();if(!n.success&&(null===(e=n.error)||void 0===e?void 0:e.includes("400"))){const t=yield this.plugin.apiClient.simpleHealthCheck();t.success&&t.data&&(n={success:!0,data:{status:t.data.status,version:"unknown"}})}n.success?(t.textContent="🟢 Connected",t.className="vaultpilot-status-indicator vaultpilot-status-connected"):(t.textContent="🔴 Error",t.className="vaultpilot-status-indicator vaultpilot-status-error")}catch(e){t.textContent="🔴 Offline",t.className="vaultpilot-status-indicator vaultpilot-status-offline"}})}createQuickActions(){this.quickActionsEl.empty(),this.quickActionsEl.createEl("h3",{text:"Quick Actions"});const e=this.quickActionsEl.createEl("div",{cls:"vaultpilot-actions-grid"});e.createEl("button",{text:"💬 Open Chat",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openChatModal();e.createEl("button",{text:"⚙️ Execute Workflow",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.openWorkflowModal();e.createEl("button",{text:"🔍 Analyze Vault",cls:"vaultpilot-action-button"}).onclick=()=>this.plugin.analyzeVault();e.createEl("button",{text:"✨ Get Completion",cls:"vaultpilot-action-button"}).onclick=()=>{const e=this.app.workspace.getActiveViewOfType(t.MarkdownView);e?this.plugin.getCopilotCompletion(e.editor):new t.Notice("No active editor found")};this.quickActionsEl.createEl("button",{text:"🔄 Refresh Status",cls:"vaultpilot-refresh-button"}).onclick=()=>{this.updateStatus(),this.updateVaultStats()}}updateVaultStats(){this.vaultStatsEl.empty(),this.vaultStatsEl.createEl("h3",{text:"Vault Statistics"});const e=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-stats-container"}),n=this.app.vault.getFiles(),o=this.app.vault.getMarkdownFiles();[{label:"Total Files",value:n.length.toString()},{label:"Markdown Files",value:o.length.toString()},{label:"Folders",value:this.app.vault.getAllLoadedFiles().filter(e=>e instanceof t.TFolder).length.toString()}].forEach(t=>{const n=e.createEl("div",{cls:"vaultpilot-stat-item"});n.createEl("div",{text:t.value,cls:"vaultpilot-stat-value"}),n.createEl("div",{text:t.label,cls:"vaultpilot-stat-label"})}),this.loadAgentInfo()}loadAgentInfo(){return e(this,void 0,void 0,function*(){try{const t=yield this.plugin.apiClient.getAgents();if(t.success&&t.data){const e=t.data.length,n=t.data.filter(t=>t.active).length,o=this.vaultStatsEl.createEl("div",{cls:"vaultpilot-agent-stats"});o.createEl("h4",{text:"Available Agents"});o.createEl("div",{cls:"vaultpilot-agent-info"}).createEl("span",{text:`${n}/${e} active`})}}catch(t){}})}addStyles(){if(!document.getElementById("vaultpilot-view-styles")){const t=document.createElement("style");t.id="vaultpilot-view-styles",t.textContent="\n        .vaultpilot-view {\n          padding: 20px;\n        }\n        .vaultpilot-header {\n          text-align: center;\n          margin-bottom: 30px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-subtitle {\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-status,\n        .vaultpilot-quick-actions,\n        .vaultpilot-vault-stats,\n        .vaultpilot-activities {\n          margin-bottom: 25px;\n        }\n        .vaultpilot-status h3,\n        .vaultpilot-quick-actions h3,\n        .vaultpilot-vault-stats h3,\n        .vaultpilot-activities h3 {\n          margin-bottom: 15px;\n          color: var(--text-normal);\n          border-bottom: 1px solid var(--background-modifier-border);\n          padding-bottom: 5px;\n        }\n        .vaultpilot-status-container {\n          display: flex;\n          flex-direction: column;\n          gap: 8px;\n        }\n        .vaultpilot-status-item {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        .vaultpilot-status-indicator {\n          font-weight: 500;\n        }\n        .vaultpilot-status-connected {\n          color: var(--color-green);\n        }\n        .vaultpilot-status-error,\n        .vaultpilot-status-offline {\n          color: var(--color-red);\n        }\n        .vaultpilot-actions-grid {\n          display: grid;\n          grid-template-columns: 1fr 1fr;\n          gap: 10px;\n          margin-bottom: 15px;\n        }\n        .vaultpilot-action-button {\n          padding: 12px 8px;\n          background: var(--interactive-normal);\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          color: var(--text-normal);\n          cursor: pointer;\n          font-size: 13px;\n          transition: background-color 0.2s;\n        }\n        .vaultpilot-action-button:hover {\n          background: var(--interactive-hover);\n        }\n        .vaultpilot-refresh-button {\n          width: 100%;\n          padding: 8px;\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          border: none;\n          border-radius: 6px;\n          cursor: pointer;\n          font-size: 12px;\n        }\n        .vaultpilot-stats-container {\n          display: grid;\n          grid-template-columns: repeat(3, 1fr);\n          gap: 15px;\n        }\n        .vaultpilot-stat-item {\n          text-align: center;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-stat-value {\n          font-size: 24px;\n          font-weight: bold;\n          color: var(--text-accent);\n          margin-bottom: 5px;\n        }\n        .vaultpilot-stat-label {\n          font-size: 12px;\n          color: var(--text-muted);\n        }\n        .vaultpilot-agent-stats {\n          margin-top: 15px;\n          padding: 10px;\n          background: var(--background-primary-alt);\n          border-radius: 6px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-agent-stats h4 {\n          margin: 0 0 8px 0;\n          font-size: 14px;\n        }\n        .vaultpilot-agent-info {\n          font-size: 12px;\n          color: var(--text-muted);\n        }\n        .vaultpilot-placeholder {\n          color: var(--text-muted);\n          font-style: italic;\n          text-align: center;\n          padding: 20px;\n        }\n      ",document.head.appendChild(t)}}onClose(){return e(this,void 0,void 0,function*(){})}}class s extends t.Modal{constructor(t,e){super(t),this.currentConversationId=null,this.messages=[],this.plugin=e}onOpen(){const{contentEl:t}=this;t.empty(),t.addClass("vaultpilot-chat-modal");const e=t.createEl("div",{cls:"vaultpilot-chat-header"});e.createEl("h2",{text:"🤖 VaultPilot Chat"});const n=e.createEl("div",{cls:"vaultpilot-chat-toolbar"});n.createEl("button",{text:"Clear Chat",cls:"mod-cta"}).onclick=()=>this.clearChat();const o=n.createEl("select",{cls:"vaultpilot-agent-select"});o.createEl("option",{text:"Auto-select Agent",value:""}),this.loadAgents(o),this.chatContainer=t.createEl("div",{cls:"vaultpilot-chat-container"}),this.messagesEl=this.chatContainer.createEl("div",{cls:"vaultpilot-chat-messages"}),this.inputContainer=this.chatContainer.createEl("div",{cls:"vaultpilot-chat-input-container"}),this.inputEl=this.inputContainer.createEl("input",{type:"text",placeholder:"Ask me anything about your vault...",cls:"vaultpilot-chat-input"}),this.sendButton=this.inputContainer.createEl("button",{text:"Send",cls:"mod-cta vaultpilot-send-button"}),this.inputEl.addEventListener("keydown",t=>{"Enter"!==t.key||t.shiftKey||(t.preventDefault(),this.sendMessage())}),this.sendButton.onclick=()=>this.sendMessage(),this.inputEl.focus(),this.loadConversationHistory(),this.addStyles()}loadAgents(t){return e(this,void 0,void 0,function*(){try{const e=yield this.plugin.apiClient.getAgents();e.success&&e.data&&e.data.forEach(e=>{t.createEl("option",{text:e.name,value:e.id})})}catch(t){console.error("Failed to load agents:",t)}})}loadConversationHistory(){return e(this,void 0,void 0,function*(){try{const t=yield this.plugin.apiClient.getConversationHistory();if(t.success&&t.data&&t.data.length>0){const e=t.data[0];this.currentConversationId=e.conversation_id,this.messages=e.messages,this.renderMessages()}}catch(t){console.error("Failed to load conversation history:",t)}})}sendMessage(){return e(this,void 0,void 0,function*(){const e=this.inputEl.value.trim();if(e){this.inputEl.disabled=!0,this.sendButton.disabled=!0,this.sendButton.textContent="Sending...",this.addMessage("user",e),this.inputEl.value="";try{const n=this.app.workspace.getActiveFile();let o="";if(n){const t=yield this.app.vault.read(n);o=`Current file: ${n.name}\n\nContent:\n${t}`}const i=yield this.plugin.apiClient.chat({message:e,conversation_id:this.currentConversationId||void 0,vault_context:o,agent_id:this.getSelectedAgent()});i.success&&i.data?(this.currentConversationId=i.data.conversation_id,this.addMessage("assistant",i.data.response)):(this.addMessage("assistant",`Error: ${i.error||"Failed to get response"}`),new t.Notice(`Chat error: ${i.error}`))}catch(e){const n=e instanceof Error?e.message:"Unknown error";this.addMessage("assistant",`Error: ${n}`),new t.Notice(`Chat error: ${n}`)}finally{this.inputEl.disabled=!1,this.sendButton.disabled=!1,this.sendButton.textContent="Send",this.inputEl.focus()}}})}getSelectedAgent(){const t=this.contentEl.querySelector(".vaultpilot-agent-select");return(null==t?void 0:t.value)||void 0}addMessage(t,e){const n={role:t,content:e,timestamp:(new Date).toISOString()};this.messages.push(n),this.renderMessage(n),this.scrollToBottom()}renderMessages(){this.messagesEl.empty(),this.messages.forEach(t=>this.renderMessage(t)),this.scrollToBottom()}renderMessage(t){const e=this.messagesEl.createEl("div",{cls:`vaultpilot-message vaultpilot-message-${t.role}`});e.createEl("div",{cls:"vaultpilot-message-role",text:"user"===t.role?"You":"VaultPilot"});e.createEl("div",{cls:"vaultpilot-message-content"}).innerHTML=this.renderMarkdown(t.content),t.timestamp&&e.createEl("div",{cls:"vaultpilot-message-time",text:new Date(t.timestamp).toLocaleTimeString()})}renderMarkdown(t){return t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/`(.*?)`/g,"<code>$1</code>").replace(/\n/g,"<br>")}scrollToBottom(){this.messagesEl.scrollTop=this.messagesEl.scrollHeight}clearChat(){this.messages=[],this.currentConversationId=null,this.messagesEl.empty(),new t.Notice("Chat cleared")}addStyles(){if(!document.getElementById("vaultpilot-chat-styles")){const t=document.createElement("style");t.id="vaultpilot-chat-styles",t.textContent="\n        .vaultpilot-chat-modal {\n          width: 600px;\n          height: 700px;\n        }\n        .vaultpilot-chat-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 15px;\n          padding-bottom: 10px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-chat-toolbar {\n          display: flex;\n          gap: 10px;\n          align-items: center;\n        }\n        .vaultpilot-agent-select {\n          padding: 4px 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-chat-container {\n          display: flex;\n          flex-direction: column;\n          height: calc(100% - 80px);\n        }\n        .vaultpilot-chat-messages {\n          flex: 1;\n          overflow-y: auto;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          margin-bottom: 15px;\n          background: var(--background-secondary);\n        }\n        .vaultpilot-message {\n          margin-bottom: 15px;\n          padding: 10px;\n          border-radius: 8px;\n        }\n        .vaultpilot-message-user {\n          background: var(--background-primary-alt);\n          margin-left: 20px;\n        }\n        .vaultpilot-message-assistant {\n          background: var(--background-primary);\n          margin-right: 20px;\n        }\n        .vaultpilot-message-role {\n          font-weight: bold;\n          margin-bottom: 5px;\n          color: var(--text-accent);\n        }\n        .vaultpilot-message-content {\n          line-height: 1.4;\n          color: var(--text-normal);\n        }\n        .vaultpilot-message-time {\n          font-size: 0.8em;\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-chat-input-container {\n          display: flex;\n          gap: 10px;\n        }\n        .vaultpilot-chat-input {\n          flex: 1;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-send-button {\n          padding: 10px 20px;\n        }\n      ",document.head.appendChild(t)}}onClose(){const{contentEl:t}=this;t.empty()}}class l extends t.Modal{constructor(t,e){super(t),this.isExecuting=!1,this.plugin=e}onOpen(){const{contentEl:t}=this;t.empty(),t.addClass("vaultpilot-workflow-modal");const e=t.createEl("div",{cls:"vaultpilot-workflow-header"});e.createEl("h2",{text:"⚙️ Workflow Execution"}),e.createEl("p",{text:"Define a goal and let VaultPilot create and execute a comprehensive workflow to achieve it.",cls:"vaultpilot-workflow-description"});const n=t.createEl("div",{cls:"vaultpilot-workflow-form"}),o=n.createEl("div",{cls:"vaultpilot-form-group"});o.createEl("label",{text:"Goal *",cls:"vaultpilot-form-label"}),this.goalInput=o.createEl("textarea",{placeholder:'e.g., "Create a comprehensive study plan for machine learning based on my notes"',cls:"vaultpilot-goal-input"});const i=n.createEl("div",{cls:"vaultpilot-form-group"});i.createEl("label",{text:"Additional Context (optional)",cls:"vaultpilot-form-label"}),this.contextInput=i.createEl("textarea",{placeholder:"Provide any additional context, constraints, or requirements...",cls:"vaultpilot-context-input"});const a=n.createEl("div",{cls:"vaultpilot-form-group"});a.createEl("label",{text:"Vault Integration",cls:"vaultpilot-form-label"});const s=a.createEl("label",{cls:"vaultpilot-checkbox-label"}),l=s.createEl("input",{type:"checkbox"});s.createSpan({text:"Include active file content"});const r=a.createEl("label",{cls:"vaultpilot-checkbox-label"}),c=r.createEl("input",{type:"checkbox"});r.createSpan({text:"Include all vault files (may take longer)"}),this.executeButton=n.createEl("button",{text:"Execute Workflow",cls:"mod-cta vaultpilot-execute-button"}),this.executeButton.onclick=()=>this.executeWorkflow(l.checked,c.checked),this.progressContainer=t.createEl("div",{cls:"vaultpilot-progress-container"}),this.progressContainer.style.display="none",this.resultsContainer=t.createEl("div",{cls:"vaultpilot-results-container"}),this.resultsContainer.style.display="none",this.goalInput.focus(),this.addStyles()}executeWorkflow(n,o){return e(this,void 0,void 0,function*(){const e=this.goalInput.value.trim();if(e){this.isExecuting=!0,this.executeButton.disabled=!0,this.executeButton.textContent="Executing...",this.progressContainer.style.display="block",this.resultsContainer.style.display="none";try{let t="";if(n){const e=this.app.workspace.getActiveFile();if(e){const n=yield this.app.vault.read(e);t+=`=== ${e.name} ===\n${n}\n\n`}}if(o){const e=this.app.vault.getMarkdownFiles();for(const n of e.slice(0,20)){const e=yield this.app.vault.read(n);t+=`=== ${n.name} ===\n${e}\n\n`}}const i={goal:e,context:this.contextInput.value.trim()||void 0,vault_content:t||void 0};this.plugin.isWebSocketConnected()&&this.setupProgressListener();const a=yield this.plugin.apiClient.executeWorkflow(i);if(!a.success||!a.data)throw new Error(a.error||"Workflow execution failed");yield this.displayResults(a.data)}catch(e){const n=e instanceof Error?e.message:"Unknown error";new t.Notice(`Workflow error: ${n}`),this.displayError(n)}finally{this.isExecuting=!1,this.executeButton.disabled=!1,this.executeButton.textContent="Execute Workflow"}}else new t.Notice("Please enter a goal for the workflow")})}setupProgressListener(){this.displayProgress("Analyzing goal and context..."),setTimeout(()=>{this.displayProgress("Planning workflow steps...")},1e3),setTimeout(()=>{this.displayProgress("Executing workflow...")},2e3)}displayProgress(t){this.progressContainer.innerHTML=`\n      <div class="vaultpilot-progress-item">\n        <div class="vaultpilot-progress-spinner"></div>\n        <span>${t}</span>\n      </div>\n    `}displayResults(t){return e(this,void 0,void 0,function*(){this.progressContainer.style.display="none",this.resultsContainer.style.display="block",this.resultsContainer.empty();const e=this.resultsContainer.createEl("div",{cls:"vaultpilot-results-header"});e.createEl("h3",{text:"✅ Workflow Completed"}),e.createEl("p",{text:`Execution time: ${t.execution_time}s`,cls:"vaultpilot-execution-time"});const n=this.resultsContainer.createEl("div",{cls:"vaultpilot-result-content"});n.createEl("h4",{text:"Result"});if(n.createEl("div",{cls:"vaultpilot-result-text"}).innerHTML=this.renderMarkdown(t.result),t.steps_taken&&t.steps_taken.length>0){const e=this.resultsContainer.createEl("div",{cls:"vaultpilot-steps-container"});e.createEl("h4",{text:"Steps Taken"});const n=e.createEl("ol",{cls:"vaultpilot-steps-list"});t.steps_taken.forEach(t=>{n.createEl("li",{text:t})})}if(t.artifacts&&t.artifacts.length>0){const e=this.resultsContainer.createEl("div",{cls:"vaultpilot-artifacts-container"});e.createEl("h4",{text:"Generated Artifacts"}),t.artifacts.forEach((t,n)=>{const o=e.createEl("div",{cls:"vaultpilot-artifact"});o.createEl("h5",{text:t.title}),o.createEl("p",{text:`Type: ${t.type}`,cls:"vaultpilot-artifact-type"});o.createEl("button",{text:"Save as Note",cls:"mod-cta"}).onclick=()=>this.saveArtifactAsNote(t,n)})}this.resultsContainer.createEl("div",{cls:"vaultpilot-results-actions"}).createEl("button",{text:"Save Complete Results as Note",cls:"mod-cta"}).onclick=()=>this.saveCompleteResultsAsNote(t)})}saveArtifactAsNote(n,o){return e(this,void 0,void 0,function*(){try{const e=`${n.title.replace(/[^a-zA-Z0-9\s]/g,"")}.md`,o=`# ${n.title}\n\n${n.content}`;yield this.app.vault.create(e,o),new t.Notice(`Artifact saved as ${e}`)}catch(e){new t.Notice(`Failed to save artifact: ${e instanceof Error?e.message:"Unknown error"}`)}})}saveCompleteResultsAsNote(n){return e(this,void 0,void 0,function*(){try{const e=`VaultPilot Workflow Results ${(new Date).toISOString().split("T")[0]}.md`;let o="# VaultPilot Workflow Results\n\n";o+=`**Goal:** ${this.goalInput.value}\n\n`,o+=`**Execution Time:** ${n.execution_time}s\n\n`,o+=`## Result\n\n${n.result}\n\n`,n.steps_taken&&n.steps_taken.length>0&&(o+="## Steps Taken\n\n",n.steps_taken.forEach((t,e)=>{o+=`${e+1}. ${t}\n`}),o+="\n"),n.artifacts&&n.artifacts.length>0&&(o+="## Generated Artifacts\n\n",n.artifacts.forEach(t=>{o+=`### ${t.title}\n\n${t.content}\n\n`})),yield this.app.vault.create(e,o),new t.Notice(`Complete results saved as ${e}`)}catch(e){new t.Notice(`Failed to save results: ${e instanceof Error?e.message:"Unknown error"}`)}})}displayError(t){this.progressContainer.style.display="none",this.resultsContainer.style.display="block",this.resultsContainer.innerHTML=`\n      <div class="vaultpilot-error">\n        <h3>❌ Workflow Failed</h3>\n        <p>${t}</p>\n      </div>\n    `}renderMarkdown(t){return t.replace(/\*\*(.*?)\*\*/g,"<strong>$1</strong>").replace(/\*(.*?)\*/g,"<em>$1</em>").replace(/`(.*?)`/g,"<code>$1</code>").replace(/\n/g,"<br>")}addStyles(){if(!document.getElementById("vaultpilot-workflow-styles")){const t=document.createElement("style");t.id="vaultpilot-workflow-styles",t.textContent="\n        .vaultpilot-workflow-modal {\n          width: 700px;\n          max-height: 80vh;\n          overflow-y: auto;\n        }\n        .vaultpilot-workflow-header {\n          margin-bottom: 20px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-workflow-description {\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-form-group {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-form-label {\n          display: block;\n          margin-bottom: 8px;\n          font-weight: 500;\n          color: var(--text-normal);\n        }\n        .vaultpilot-goal-input,\n        .vaultpilot-context-input {\n          width: 100%;\n          min-height: 80px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n          resize: vertical;\n        }\n        .vaultpilot-checkbox-label {\n          display: block;\n          margin-bottom: 8px;\n          cursor: pointer;\n        }\n        .vaultpilot-checkbox-label input {\n          margin-right: 8px;\n        }\n        .vaultpilot-execute-button {\n          width: 100%;\n          padding: 12px;\n          font-size: 16px;\n        }\n        .vaultpilot-progress-container {\n          margin: 20px 0;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-progress-item {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n        }\n        .vaultpilot-progress-spinner {\n          width: 16px;\n          height: 16px;\n          border: 2px solid var(--background-modifier-border);\n          border-top: 2px solid var(--text-accent);\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n        }\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n        .vaultpilot-results-container {\n          margin-top: 20px;\n        }\n        .vaultpilot-results-header {\n          margin-bottom: 15px;\n        }\n        .vaultpilot-execution-time {\n          color: var(--text-muted);\n          font-size: 0.9em;\n        }\n        .vaultpilot-result-content {\n          margin-bottom: 20px;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-result-text {\n          line-height: 1.5;\n          color: var(--text-normal);\n        }\n        .vaultpilot-steps-container,\n        .vaultpilot-artifacts-container {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-steps-list {\n          padding-left: 20px;\n        }\n        .vaultpilot-artifact {\n          margin-bottom: 15px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary-alt);\n        }\n        .vaultpilot-artifact-type {\n          color: var(--text-muted);\n          font-size: 0.9em;\n          margin-bottom: 10px;\n        }\n        .vaultpilot-results-actions {\n          margin-top: 20px;\n          text-align: center;\n        }\n        .vaultpilot-error {\n          padding: 20px;\n          background: var(--background-primary-alt);\n          border: 1px solid var(--color-red);\n          border-radius: 8px;\n          color: var(--color-red);\n        }\n      ",document.head.appendChild(t)}}onClose(){const{contentEl:t}=this;t.empty()}}class r{constructor(t,e){this.wsCallbacks=new Map,this.baseUrl=t.replace(/\/$/,""),this.apiKey=e}makeRequest(t){return e(this,arguments,void 0,function*(t,e={}){const n=`${this.baseUrl}${t}`,o=Object.assign({"Content-Type":"application/json",Accept:"application/json"},e.headers||{});this.apiKey&&(o.Authorization=`Bearer ${this.apiKey}`);try{const t=yield fetch(n,Object.assign(Object.assign({},e),{headers:o,mode:"cors",credentials:"omit"}));let i;const a=t.headers.get("content-type");if(i=a&&a.includes("application/json")?yield t.json():yield t.text(),!t.ok){const e="object"==typeof i&&i.error?i.error:`HTTP ${t.status}: ${t.statusText}`;return console.error(`API Error [${t.status}]:`,e),{success:!1,error:e}}return{success:!0,data:"string"==typeof i?{message:i}:i}}catch(t){return console.error("API Request Error:",t),{success:!1,error:t instanceof Error?t.message:"Unknown error occurred"}}})}healthCheck(){return e(this,void 0,void 0,function*(){console.log(`VaultPilot: Attempting health check to ${this.baseUrl}/api/obsidian/health`);const t=yield this.makeRequest("/api/obsidian/health",{method:"GET"});return console.log("VaultPilot: Health check result:",t),t})}simpleHealthCheck(){return e(this,void 0,void 0,function*(){try{const t=`${this.baseUrl}/api/obsidian/health`,e=yield fetch(t,{method:"HEAD",mode:"cors",credentials:"omit"});return e.ok||405===e.status?{success:!0,data:{status:"ok"}}:{success:!1,error:`Server responded with status ${e.status}`}}catch(t){return{success:!1,error:t instanceof Error?t.message:"Connection failed"}}})}chat(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/chat",{method:"POST",body:JSON.stringify(t)})})}getConversationHistory(t){return e(this,void 0,void 0,function*(){const e=t?`/api/obsidian/conversation/history?conversation_id=${t}`:"/api/obsidian/conversation/history";return this.makeRequest(e,{method:"POST"})})}deleteConversation(t){return e(this,void 0,void 0,function*(){return this.makeRequest(`/api/obsidian/conversations/${t}`,{method:"DELETE"})})}getCopilotCompletion(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/copilot/complete",{method:"POST",body:JSON.stringify(t)})})}executeWorkflow(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/workflow",{method:"POST",body:JSON.stringify(t)})})}getAgents(){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agents")})}createAgent(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agents/create",{method:"POST",body:JSON.stringify(t)})})}executeAgent(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/agent/execute",{method:"POST",body:JSON.stringify(t)})})}analyzeVaultContext(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/vault/context",{method:"POST",body:JSON.stringify(t)})})}planTasks(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/planning/tasks",{method:"POST",body:JSON.stringify(t)})})}parseIntelligence(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/intelligence/parse",{method:"POST",body:JSON.stringify(t)})})}updateMemory(t){return e(this,void 0,void 0,function*(){return this.makeRequest("/api/obsidian/memory/update",{method:"POST",body:JSON.stringify(t)})})}connectWebSocket(t){const e=this.baseUrl.replace("http","ws")+"/ws/obsidian";console.log(`VaultPilot: Attempting WebSocket connection to ${e}`),this.websocket=new WebSocket(e),this.websocket.onopen=()=>{var e;console.log("VaultPilot: WebSocket connected to EvoAgentX"),null===(e=t.onConnect)||void 0===e||e.call(t)},this.websocket.onmessage=e=>{var n,o,i,a,s,l;try{const l=JSON.parse(e.data);switch(console.log("VaultPilot: WebSocket message received:",l.type),l.type){case"chat":null===(n=t.onChat)||void 0===n||n.call(t,l.data);break;case"workflow_progress":null===(o=t.onWorkflowProgress)||void 0===o||o.call(t,l.data);break;case"copilot":null===(i=t.onCopilot)||void 0===i||i.call(t,l.data);break;case"vault_sync":null===(a=t.onVaultSync)||void 0===a||a.call(t,l.data);break;case"error":null===(s=t.onError)||void 0===s||s.call(t,l.data)}}catch(e){console.error("VaultPilot: Error parsing WebSocket message:",e),null===(l=t.onError)||void 0===l||l.call(t,"Failed to parse WebSocket message")}},this.websocket.onclose=e=>{var n;console.log("VaultPilot: WebSocket disconnected from EvoAgentX",e.code,e.reason),null===(n=t.onDisconnect)||void 0===n||n.call(t)},this.websocket.onerror=e=>{var n;console.error("VaultPilot: WebSocket error:",e),null===(n=t.onError)||void 0===n||n.call(t,"WebSocket connection error")}}disconnectWebSocket(){this.websocket&&(this.websocket.close(),this.websocket=void 0)}sendWebSocketMessage(t,e){this.websocket&&this.websocket.readyState===WebSocket.OPEN&&this.websocket.send(JSON.stringify({type:t,data:e}))}isWebSocketConnected(){var t;return(null===(t=this.websocket)||void 0===t?void 0:t.readyState)===WebSocket.OPEN}}class c extends t.Plugin{constructor(){super(...arguments),this.websocketConnected=!1,this.copilotEnabled=!1}onload(){return e(this,void 0,void 0,function*(){var e;yield this.loadSettings(),this.apiClient=new r(this.settings.backendUrl,this.settings.apiKey);try{let n=yield this.apiClient.healthCheck();if(!n.success&&(null===(e=n.error)||void 0===e?void 0:e.includes("400"))){console.warn("Main health check failed with 400, trying alternative method");const t=yield this.apiClient.simpleHealthCheck();t.success&&t.data&&(n={success:!0,data:{status:t.data.status,version:"unknown"}})}n.success?(new t.Notice("✅ VaultPilot connected to EvoAgentX",3e3),this.settings.enableWebSocket&&this.connectWebSocket()):(console.error("Health check failed:",n.error),new t.Notice("⚠️ EvoAgentX backend offline - some features may not work",5e3))}catch(e){console.error("Health check error:",e),new t.Notice("⚠️ Cannot connect to EvoAgentX backend",5e3)}this.registerView(i,t=>new a(t,this));this.addRibbonIcon("bot","VaultPilot",t=>{this.openChatModal()}).addClass("vaultpilot-ribbon-class"),this.addCommand({id:"open-chat",name:"Open Chat",callback:()=>this.openChatModal()}),this.addCommand({id:"execute-workflow",name:"Execute Workflow",callback:()=>this.openWorkflowModal()}),this.addCommand({id:"analyze-vault",name:"Analyze Current Vault",callback:()=>this.analyzeVault()}),this.addCommand({id:"copilot-complete",name:"Get AI Completion",editorCallback:t=>this.getCopilotCompletion(t)}),this.addCommand({id:"quick-chat",name:"Quick Chat with Selection",editorCallback:t=>this.quickChatWithSelection(t)}),this.addCommand({id:"plan-tasks",name:"Plan Tasks from Note",editorCallback:t=>this.planTasksFromNote(t)}),this.addCommand({id:"open-vaultpilot-view",name:"Open VaultPilot View",callback:()=>this.activateView()}),this.settings.enableCopilot&&this.settings.enableAutoComplete&&this.registerDomEvent(document,"keyup",this.handleKeyUp.bind(this)),this.addSettingTab(new o(this.app,this))})}onunload(){this.app.workspace.detachLeavesOfType(i),this.disconnectWebSocket()}connectWebSocket(){this.websocketConnected||this.apiClient.connectWebSocket({onChat:t=>{console.log("WebSocket chat update:",t)},onWorkflowProgress:e=>{new t.Notice(`Workflow: ${e.step}`,2e3)},onCopilot:t=>{this.handleCopilotSuggestion(t)},onVaultSync:t=>{console.log("Vault sync update:",t)},onError:e=>{new t.Notice(`WebSocket error: ${e}`,5e3)},onConnect:()=>{this.websocketConnected=!0,this.settings.debugMode&&new t.Notice("WebSocket connected",2e3)},onDisconnect:()=>{this.websocketConnected=!1,this.settings.debugMode&&new t.Notice("WebSocket disconnected",2e3)}})}disconnectWebSocket(){this.apiClient.disconnectWebSocket(),this.websocketConnected=!1}isWebSocketConnected(){return this.websocketConnected}openChatModal(){new s(this.app,this).open()}openWorkflowModal(){new l(this.app,this).open()}analyzeVault(){return e(this,void 0,void 0,function*(){const e=new t.Notice("Analyzing vault...",0);try{const n=this.app.vault.getMarkdownFiles();let o="";for(const t of n.slice(0,10)){const e=yield this.app.vault.read(t);o+=`=== ${t.name} ===\n${e}\n\n`}const i=yield this.apiClient.analyzeVaultContext({content:o,analysis_type:"insights"});if(e.hide(),!i.success||!i.data)throw new Error(i.error||"Analysis failed");{const e=(new Date).toISOString().split("T")[0],n=`Vault Analysis ${e}.md`;let o=`# Vault Analysis - ${e}\n\n`;o+=`## Analysis\n\n${i.data.analysis}\n\n`,i.data.insights&&i.data.insights.length>0&&(o+="## Key Insights\n\n",i.data.insights.forEach(t=>{o+=`- ${t}\n`}),o+="\n"),i.data.recommendations&&i.data.recommendations.length>0&&(o+="## Recommendations\n\n",i.data.recommendations.forEach(t=>{o+=`- ${t}\n`})),yield this.app.vault.create(n,o),new t.Notice(`Vault analysis saved as ${n}`)}}catch(n){e.hide(),new t.Notice(`Analysis error: ${n instanceof Error?n.message:"Unknown error"}`)}})}getCopilotCompletion(n){return e(this,void 0,void 0,function*(){if(!this.settings.enableCopilot)return void new t.Notice("Copilot is disabled in settings");const e=n.getCursor(),o=n.getLine(e.line).substring(0,e.ch),i=n.getValue();try{const a=yield this.apiClient.getCopilotCompletion({text:i,cursor_position:n.posToOffset(e),file_type:"markdown",context:o});a.success&&a.data?(n.replaceRange(a.data.completion,e),new t.Notice("Completion inserted",2e3)):new t.Notice(`Copilot error: ${a.error}`)}catch(e){new t.Notice(`Copilot error: ${e instanceof Error?e.message:"Unknown error"}`)}})}quickChatWithSelection(n){return e(this,void 0,void 0,function*(){const e=n.getSelection();if(e)try{const o=yield this.apiClient.chat({message:`Please explain or analyze this text: "${e}"`,vault_context:n.getValue()});if(o.success&&o.data){const e=n.getCursor("to"),i=`\n\n**VaultPilot Analysis:**\n${o.data.response}\n\n`;n.replaceRange(i,e),new t.Notice("Analysis inserted",2e3)}else new t.Notice(`Chat error: ${o.error}`)}catch(e){new t.Notice(`Chat error: ${e instanceof Error?e.message:"Unknown error"}`)}else new t.Notice("No text selected")})}planTasksFromNote(n){return e(this,void 0,void 0,function*(){const e=n.getValue(),o=this.app.workspace.getActiveFile();if(!e.trim())return void new t.Notice("No content to analyze");const i=new t.Notice("Planning tasks...",0);try{const n=yield this.apiClient.planTasks({goal:`Create a task plan based on this note: ${(null==o?void 0:o.name)||"Untitled"}`,context:e,timeframe:"1 week"});if(i.hide(),!n.success||!n.data)throw new Error(n.error||"Task planning failed");{const e=(new Date).toISOString().split("T")[0],i=`Task Plan - ${(null==o?void 0:o.basename)||"Untitled"} - ${e}.md`;let a=`# ${n.data.plan.title}\n\n`;a+=`${n.data.plan.description}\n\n`,a+=`**Estimated Duration:** ${n.data.plan.estimated_duration}\n\n`,n.data.plan.tasks&&n.data.plan.tasks.length>0&&(a+="## Tasks\n\n",n.data.plan.tasks.forEach(t=>{const e="completed"===t.status?"[x]":"[ ]";a+=`${e} **${t.title}** (${t.priority} priority)\n`,a+=`   ${t.description}\n`,a+=`   *Estimated time: ${t.estimated_time}*\n\n`})),n.data.milestones&&n.data.milestones.length>0&&(a+="## Milestones\n\n",n.data.milestones.forEach(t=>{a+=`- **${t.title}** (${t.target_date})\n`,a+=`  ${t.description}\n\n`})),yield this.app.vault.create(i,a),new t.Notice(`Task plan saved as ${i}`)}}catch(e){i.hide(),new t.Notice(`Task planning error: ${e instanceof Error?e.message:"Unknown error"}`)}})}activateView(){return e(this,void 0,void 0,function*(){const t=this.app.workspace.getLeavesOfType(i);if(0===t.length){const t=this.app.workspace.getRightLeaf(!1);t&&(yield t.setViewState({type:i,active:!0}))}else this.app.workspace.revealLeaf(t[0])})}handleKeyUp(t){if(!this.settings.enableAutoComplete||!this.settings.enableCopilot)return;t.target.classList.contains("cm-content")&&(clearTimeout(this.autoCompleteTimeout),this.autoCompleteTimeout=setTimeout(()=>{this.triggerAutoCompletion()},1e3))}triggerAutoCompletion(){return e(this,void 0,void 0,function*(){const e=this.app.workspace.getActiveViewOfType(t.MarkdownView);if(!e)return;const n=e.editor,o=n.getCursor(),i=n.getLine(o.line);if(!(i.trim().length<3||o.ch!==i.length))try{const e=yield this.apiClient.getCopilotCompletion({text:n.getValue(),cursor_position:n.posToOffset(o),file_type:"markdown"});e.success&&e.data&&e.data.suggestions.length>0&&this.settings.debugMode&&new t.Notice(`Suggestion: ${e.data.suggestions[0]}`,3e3)}catch(t){this.settings.debugMode&&console.error("Auto-completion error:",t)}})}handleCopilotSuggestion(e){this.settings.debugMode&&new t.Notice(`Live suggestion: ${e.completion}`,2e3)}loadSettings(){return e(this,void 0,void 0,function*(){this.settings=Object.assign({},n,yield this.loadData())})}saveSettings(){return e(this,void 0,void 0,function*(){yield this.saveData(this.settings),this.apiClient=new r(this.settings.backendUrl,this.settings.apiKey),this.settings.enableWebSocket&&!this.websocketConnected?this.connectWebSocket():!this.settings.enableWebSocket&&this.websocketConnected&&this.disconnectWebSocket()})}}module.exports=c;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXMiOlsiLi4vc3JjL3NldHRpbmdzLnRzIiwiLi4vc3JjL3ZpZXcudHMiLCIuLi9zcmMvY2hhdC1tb2RhbC50cyIsIi4uL3NyYy93b3JrZmxvdy1tb2RhbC50cyIsIi4uL3NyYy9hcGktY2xpZW50LnRzIiwiLi4vc3JjL21haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwLCBQbHVnaW5TZXR0aW5nVGFiLCBTZXR0aW5nLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgdHlwZSBWYXVsdFBpbG90UGx1Z2luIGZyb20gJy4vbWFpbic7XG5pbXBvcnQgeyBWYXVsdFBpbG90U2V0dGluZ3MgfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFZhdWx0UGlsb3RTZXR0aW5ncyA9IHtcbiAgYmFja2VuZFVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6ODAwMCcsXG4gIGFwaUtleTogJycsXG4gIGVuYWJsZVdlYlNvY2tldDogdHJ1ZSxcbiAgZW5hYmxlQ29waWxvdDogdHJ1ZSxcbiAgZW5hYmxlQXV0b0NvbXBsZXRlOiB0cnVlLFxuICBkZWZhdWx0QWdlbnQ6ICcnLFxuICBjaGF0SGlzdG9yeUxpbWl0OiAxMDAsXG4gIGRlYnVnTW9kZTogZmFsc2Vcbn07XG5cbmV4cG9ydCBjbGFzcyBWYXVsdFBpbG90U2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuICBwbHVnaW46IFZhdWx0UGlsb3RQbHVnaW47XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogVmF1bHRQaWxvdFBsdWdpbikge1xuICAgIHN1cGVyKGFwcCwgcGx1Z2luKTtcbiAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcbiAgfVxuXG4gIGRpc3BsYXkoKTogdm9pZCB7XG4gICAgY29uc3QgeyBjb250YWluZXJFbCB9ID0gdGhpcztcbiAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgIFxuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1ZhdWx0UGlsb3QgU2V0dGluZ3MnIH0pO1xuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdwJywgeyBcbiAgICAgIHRleHQ6ICdDb25maWd1cmUgeW91ciBjb25uZWN0aW9uIHRvIEV2b0FnZW50WCBiYWNrZW5kIGFuZCBBSSBmZWF0dXJlcy4nIFxuICAgIH0pO1xuXG4gICAgLy8gQ29ubmVjdGlvbiBTZXR0aW5nc1xuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0Nvbm5lY3Rpb24nIH0pO1xuXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZSgnQmFja2VuZCBVUkwnKVxuICAgICAgLnNldERlc2MoJ1VSTCBvZiBFdm9BZ2VudFggYmFja2VuZCBzZXJ2ZXInKVxuICAgICAgLmFkZFRleHQodGV4dCA9PlxuICAgICAgICB0ZXh0XG4gICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdodHRwOi8vbG9jYWxob3N0OjgwMDAnKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5iYWNrZW5kVXJsKVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5iYWNrZW5kVXJsID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoJ0FQSSBLZXknKVxuICAgICAgLnNldERlc2MoJ09wdGlvbmFsIEFQSSBrZXkgZm9yIGF1dGhlbnRpY2F0aW9uIChpZiByZXF1aXJlZCBieSBiYWNrZW5kKScpXG4gICAgICAuYWRkVGV4dCh0ZXh0ID0+XG4gICAgICAgIHRleHRcbiAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIEFQSSBrZXkuLi4nKVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hcGlLZXkgfHwgJycpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmFwaUtleSA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAvLyBUZXN0IGNvbm5lY3Rpb24gYnV0dG9uXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZSgnQ29ubmVjdGlvbiBUZXN0JylcbiAgICAgIC5zZXREZXNjKCdUZXN0IGNvbm5lY3Rpb24gdG8gRXZvQWdlbnRYIGJhY2tlbmQnKVxuICAgICAgLmFkZEJ1dHRvbihidXR0b24gPT5cbiAgICAgICAgYnV0dG9uXG4gICAgICAgICAgLnNldEJ1dHRvblRleHQoJ1Rlc3QgQ29ubmVjdGlvbicpXG4gICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy50ZXN0Q29ubmVjdGlvbigpO1xuICAgICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgLy8gRmVhdHVyZSBTZXR0aW5nc1xuICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ0ZlYXR1cmVzJyB9KTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoJ0VuYWJsZSBXZWJTb2NrZXQnKVxuICAgICAgLnNldERlc2MoJ0VuYWJsZSByZWFsLXRpbWUgY29tbXVuaWNhdGlvbiBmb3IgbGl2ZSB1cGRhdGVzIGFuZCBwcm9ncmVzcyB0cmFja2luZycpXG4gICAgICAuYWRkVG9nZ2xlKHRvZ2dsZSA9PlxuICAgICAgICB0b2dnbGVcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlV2ViU29ja2V0KVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVXZWJTb2NrZXQgPSB2YWx1ZTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgIHRoaXMucGx1Z2luLmNvbm5lY3RXZWJTb2NrZXQoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRpc2Nvbm5lY3RXZWJTb2NrZXQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoJ0VuYWJsZSBDb3BpbG90JylcbiAgICAgIC5zZXREZXNjKCdFbmFibGUgQUktcG93ZXJlZCB0ZXh0IGNvbXBsZXRpb24gYW5kIHN1Z2dlc3Rpb25zJylcbiAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+XG4gICAgICAgIHRvZ2dsZVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVDb3BpbG90KVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbmFibGVDb3BpbG90ID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoJ0VuYWJsZSBBdXRvLUNvbXBsZXRlJylcbiAgICAgIC5zZXREZXNjKCdBdXRvbWF0aWNhbGx5IHN1Z2dlc3QgY29tcGxldGlvbnMgYXMgeW91IHR5cGUnKVxuICAgICAgLmFkZFRvZ2dsZSh0b2dnbGUgPT5cbiAgICAgICAgdG9nZ2xlXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVuYWJsZUF1dG9Db21wbGV0ZSlcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZW5hYmxlQXV0b0NvbXBsZXRlID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIC8vIEFnZW50IFNldHRpbmdzXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnQWdlbnQgQ29uZmlndXJhdGlvbicgfSk7XG5cbiAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgIC5zZXROYW1lKCdEZWZhdWx0IEFnZW50JylcbiAgICAgIC5zZXREZXNjKCdEZWZhdWx0IGFnZW50IHRvIHVzZSBmb3IgY2hhdCBhbmQgd29ya2Zsb3dzIChsZWF2ZSBlbXB0eSBmb3IgYXV0by1zZWxlY3Rpb24pJylcbiAgICAgIC5hZGRUZXh0KHRleHQgPT5cbiAgICAgICAgdGV4dFxuICAgICAgICAgIC5zZXRQbGFjZWhvbGRlcignQWdlbnQgSUQgb3IgbmFtZS4uLicpXG4gICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRBZ2VudCB8fCAnJylcbiAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgdmFsdWUgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdEFnZW50ID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgLnNldE5hbWUoJ0NoYXQgSGlzdG9yeSBMaW1pdCcpXG4gICAgICAuc2V0RGVzYygnTWF4aW11bSBudW1iZXIgb2YgY2hhdCBtZXNzYWdlcyB0byBrZWVwIGluIGhpc3RvcnknKVxuICAgICAgLmFkZFNsaWRlcihzbGlkZXIgPT5cbiAgICAgICAgc2xpZGVyXG4gICAgICAgICAgLnNldExpbWl0cygxMCwgNTAwLCAxMClcbiAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuY2hhdEhpc3RvcnlMaW1pdClcbiAgICAgICAgICAuc2V0RHluYW1pY1Rvb2x0aXAoKVxuICAgICAgICAgIC5vbkNoYW5nZShhc3luYyB2YWx1ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jaGF0SGlzdG9yeUxpbWl0ID0gdmFsdWU7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIC8vIEFkdmFuY2VkIFNldHRpbmdzXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnQWR2YW5jZWQnIH0pO1xuXG4gICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAuc2V0TmFtZSgnRGVidWcgTW9kZScpXG4gICAgICAuc2V0RGVzYygnRW5hYmxlIGRlYnVnIGxvZ2dpbmcgYW5kIGFkZGl0aW9uYWwgZGV2ZWxvcGVyIGZlYXR1cmVzJylcbiAgICAgIC5hZGRUb2dnbGUodG9nZ2xlID0+XG4gICAgICAgIHRvZ2dsZVxuICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWJ1Z01vZGUpXG4gICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jIHZhbHVlID0+IHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlYnVnTW9kZSA9IHZhbHVlO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICAvLyBJbmZvcm1hdGlvbiBzZWN0aW9uXG4gICAgY29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnSW5mb3JtYXRpb24nIH0pO1xuICAgIGNvbnN0IGluZm9FbCA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NldHRpbmctaXRlbS1kZXNjcmlwdGlvbicgfSk7XG4gICAgaW5mb0VsLmlubmVySFRNTCA9IGBcbiAgICAgIDxwPjxzdHJvbmc+VmF1bHRQaWxvdCB2MS4wLjA8L3N0cm9uZz48L3A+XG4gICAgICA8cD5Db21wcmVoZW5zaXZlIEV2b0FnZW50WCBpbnRlZ3JhdGlvbiBmb3IgT2JzaWRpYW48L3A+XG4gICAgICA8cD5GZWF0dXJlczogQUkgQ2hhdCwgQ29waWxvdCwgV29ya2Zsb3dzLCBWYXVsdCBBbmFseXNpcywgVGFzayBQbGFubmluZzwvcD5cbiAgICAgIDxwPkZvciBoZWxwIGFuZCBkb2N1bWVudGF0aW9uLCB2aXNpdCB0aGUgR2l0SHViIHJlcG9zaXRvcnkuPC9wPlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHRlc3RDb25uZWN0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnN0IG5vdGljZSA9IG5ldyBOb3RpY2UoJ1Rlc3RpbmcgY29ubmVjdGlvbi4uLicsIDApO1xuICAgIFxuICAgIHRyeSB7XG4gICAgICBsZXQgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcGlDbGllbnQuaGVhbHRoQ2hlY2soKTtcbiAgICAgIFxuICAgICAgLy8gSWYgdGhlIG1haW4gaGVhbHRoIGNoZWNrIGZhaWxzIHdpdGggYSA0MDAsIHRyeSB0aGUgc2ltcGxlIGNoZWNrXG4gICAgICBpZiAoIXJlc3BvbnNlLnN1Y2Nlc3MgJiYgcmVzcG9uc2UuZXJyb3I/LmluY2x1ZGVzKCc0MDAnKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ01haW4gaGVhbHRoIGNoZWNrIGZhaWxlZCB3aXRoIDQwMCwgdHJ5aW5nIGFsdGVybmF0aXZlIG1ldGhvZCcpO1xuICAgICAgICBjb25zdCBzaW1wbGVSZXNwb25zZSA9IGF3YWl0IHRoaXMucGx1Z2luLmFwaUNsaWVudC5zaW1wbGVIZWFsdGhDaGVjaygpO1xuICAgICAgICBpZiAoc2ltcGxlUmVzcG9uc2Uuc3VjY2VzcyAmJiBzaW1wbGVSZXNwb25zZS5kYXRhKSB7XG4gICAgICAgICAgcmVzcG9uc2UgPSB7XG4gICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgZGF0YTogeyBzdGF0dXM6IHNpbXBsZVJlc3BvbnNlLmRhdGEuc3RhdHVzLCB2ZXJzaW9uOiAndW5rbm93bicgfVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgICAgbm90aWNlLmhpZGUoKTtcbiAgICAgIFxuICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgbmV3IE5vdGljZSgn4pyFIENvbm5lY3Rpb24gc3VjY2Vzc2Z1bCEnLCAzMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ldyBOb3RpY2UoYOKdjCBDb25uZWN0aW9uIGZhaWxlZDogJHtyZXNwb25zZS5lcnJvcn1gLCA1MDAwKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbm90aWNlLmhpZGUoKTtcbiAgICAgIG5ldyBOb3RpY2UoYOKdjCBDb25uZWN0aW9uIGVycm9yOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWAsIDUwMDApO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYsIE5vdGljZSwgTWFya2Rvd25WaWV3LCBURm9sZGVyIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHR5cGUgVmF1bHRQaWxvdFBsdWdpbiBmcm9tICcuL21haW4nO1xuXG5leHBvcnQgY29uc3QgVklFV19UWVBFX1ZBVUxUUElMT1QgPSAndmF1bHRwaWxvdC12aWV3JztcblxuZXhwb3J0IGNsYXNzIFZhdWx0UGlsb3RWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuICBwbHVnaW46IFZhdWx0UGlsb3RQbHVnaW47XG4gIHByaXZhdGUgc3RhdHVzRWwhOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBxdWlja0FjdGlvbnNFbCE6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIHZhdWx0U3RhdHNFbCE6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHBsdWdpbjogVmF1bHRQaWxvdFBsdWdpbikge1xuICAgIHN1cGVyKGxlYWYpO1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICB9XG5cbiAgZ2V0Vmlld1R5cGUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gVklFV19UWVBFX1ZBVUxUUElMT1Q7XG4gIH1cblxuICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiAnVmF1bHRQaWxvdCc7XG4gIH1cblxuICBnZXRJY29uKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdib3QnO1xuICB9XG5cbiAgYXN5bmMgb25PcGVuKCkge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWw7XG4gICAgY29udGFpbmVyLmVtcHR5KCk7XG4gICAgY29udGFpbmVyLmFkZENsYXNzKCd2YXVsdHBpbG90LXZpZXcnKTtcblxuICAgIC8vIEhlYWRlclxuICAgIGNvbnN0IGhlYWRlckVsID0gY29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3QtaGVhZGVyJyB9KTtcbiAgICBoZWFkZXJFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICfwn6SWIFZhdWx0UGlsb3QnIH0pO1xuICAgIGhlYWRlckVsLmNyZWF0ZUVsKCdwJywgeyBcbiAgICAgIHRleHQ6ICdZb3VyIEFJIGFzc2lzdGFudCBmb3IgT2JzaWRpYW4nLFxuICAgICAgY2xzOiAndmF1bHRwaWxvdC1zdWJ0aXRsZSdcbiAgICB9KTtcblxuICAgIC8vIFN0YXR1cyBzZWN0aW9uXG4gICAgdGhpcy5zdGF0dXNFbCA9IGNvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LXN0YXR1cycgfSk7XG4gICAgdGhpcy51cGRhdGVTdGF0dXMoKTtcblxuICAgIC8vIFF1aWNrIGFjdGlvbnNcbiAgICB0aGlzLnF1aWNrQWN0aW9uc0VsID0gY29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3QtcXVpY2stYWN0aW9ucycgfSk7XG4gICAgdGhpcy5jcmVhdGVRdWlja0FjdGlvbnMoKTtcblxuICAgIC8vIFZhdWx0IHN0YXRzXG4gICAgdGhpcy52YXVsdFN0YXRzRWwgPSBjb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndmF1bHRwaWxvdC12YXVsdC1zdGF0cycgfSk7XG4gICAgdGhpcy51cGRhdGVWYXVsdFN0YXRzKCk7XG5cbiAgICAvLyBSZWNlbnQgYWN0aXZpdGllcyAocGxhY2Vob2xkZXIgZm9yIGZ1dHVyZSBpbXBsZW1lbnRhdGlvbilcbiAgICBjb25zdCBhY3Rpdml0aWVzRWwgPSBjb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndmF1bHRwaWxvdC1hY3Rpdml0aWVzJyB9KTtcbiAgICBhY3Rpdml0aWVzRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnUmVjZW50IEFjdGl2aXRpZXMnIH0pO1xuICAgIGFjdGl2aXRpZXNFbC5jcmVhdGVFbCgncCcsIHsgXG4gICAgICB0ZXh0OiAnQWN0aXZpdHkgdHJhY2tpbmcgY29taW5nIHNvb24uLi4nLFxuICAgICAgY2xzOiAndmF1bHRwaWxvdC1wbGFjZWhvbGRlcidcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkU3R5bGVzKCk7XG4gIH1cblxuICBwcml2YXRlIHVwZGF0ZVN0YXR1cygpIHtcbiAgICB0aGlzLnN0YXR1c0VsLmVtcHR5KCk7XG4gICAgdGhpcy5zdGF0dXNFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdDb25uZWN0aW9uIFN0YXR1cycgfSk7XG5cbiAgICBjb25zdCBzdGF0dXNDb250YWluZXIgPSB0aGlzLnN0YXR1c0VsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3Qtc3RhdHVzLWNvbnRhaW5lcicgfSk7XG5cbiAgICAvLyBCYWNrZW5kIHN0YXR1c1xuICAgIGNvbnN0IGJhY2tlbmRTdGF0dXMgPSBzdGF0dXNDb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndmF1bHRwaWxvdC1zdGF0dXMtaXRlbScgfSk7XG4gICAgYmFja2VuZFN0YXR1cy5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogJ0JhY2tlbmQ6ICcgfSk7XG4gICAgY29uc3QgYmFja2VuZEluZGljYXRvciA9IGJhY2tlbmRTdGF0dXMuY3JlYXRlRWwoJ3NwYW4nLCB7IFxuICAgICAgY2xzOiAndmF1bHRwaWxvdC1zdGF0dXMtaW5kaWNhdG9yJyxcbiAgICAgIHRleHQ6ICdDaGVja2luZy4uLidcbiAgICB9KTtcblxuICAgIC8vIFdlYlNvY2tldCBzdGF0dXNcbiAgICBjb25zdCB3c1N0YXR1cyA9IHN0YXR1c0NvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LXN0YXR1cy1pdGVtJyB9KTtcbiAgICB3c1N0YXR1cy5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogJ1dlYlNvY2tldDogJyB9KTtcbiAgICBjb25zdCB3c0luZGljYXRvciA9IHdzU3RhdHVzLmNyZWF0ZUVsKCdzcGFuJywgeyBcbiAgICAgIGNsczogJ3ZhdWx0cGlsb3Qtc3RhdHVzLWluZGljYXRvcicsXG4gICAgICB0ZXh0OiB0aGlzLnBsdWdpbi5pc1dlYlNvY2tldENvbm5lY3RlZCgpID8gJ/Cfn6IgQ29ubmVjdGVkJyA6ICfwn5S0IERpc2Nvbm5lY3RlZCdcbiAgICB9KTtcblxuICAgIC8vIENoZWNrIGJhY2tlbmQgc3RhdHVzXG4gICAgdGhpcy5jaGVja0JhY2tlbmRTdGF0dXMoYmFja2VuZEluZGljYXRvcik7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGNoZWNrQmFja2VuZFN0YXR1cyhpbmRpY2F0b3I6IEhUTUxFbGVtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIGxldCByZXNwb25zZSA9IGF3YWl0IHRoaXMucGx1Z2luLmFwaUNsaWVudC5oZWFsdGhDaGVjaygpO1xuICAgICAgXG4gICAgICAvLyBJZiB0aGUgbWFpbiBoZWFsdGggY2hlY2sgZmFpbHMgd2l0aCBhIDQwMCwgdHJ5IHRoZSBzaW1wbGUgY2hlY2tcbiAgICAgIGlmICghcmVzcG9uc2Uuc3VjY2VzcyAmJiByZXNwb25zZS5lcnJvcj8uaW5jbHVkZXMoJzQwMCcpKSB7XG4gICAgICAgIGNvbnN0IHNpbXBsZVJlc3BvbnNlID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBpQ2xpZW50LnNpbXBsZUhlYWx0aENoZWNrKCk7XG4gICAgICAgIGlmIChzaW1wbGVSZXNwb25zZS5zdWNjZXNzICYmIHNpbXBsZVJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICByZXNwb25zZSA9IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB7IHN0YXR1czogc2ltcGxlUmVzcG9uc2UuZGF0YS5zdGF0dXMsIHZlcnNpb246ICd1bmtub3duJyB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICBpbmRpY2F0b3IudGV4dENvbnRlbnQgPSAn8J+foiBDb25uZWN0ZWQnO1xuICAgICAgICBpbmRpY2F0b3IuY2xhc3NOYW1lID0gJ3ZhdWx0cGlsb3Qtc3RhdHVzLWluZGljYXRvciB2YXVsdHBpbG90LXN0YXR1cy1jb25uZWN0ZWQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5kaWNhdG9yLnRleHRDb250ZW50ID0gJ/CflLQgRXJyb3InO1xuICAgICAgICBpbmRpY2F0b3IuY2xhc3NOYW1lID0gJ3ZhdWx0cGlsb3Qtc3RhdHVzLWluZGljYXRvciB2YXVsdHBpbG90LXN0YXR1cy1lcnJvcic7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGluZGljYXRvci50ZXh0Q29udGVudCA9ICfwn5S0IE9mZmxpbmUnO1xuICAgICAgaW5kaWNhdG9yLmNsYXNzTmFtZSA9ICd2YXVsdHBpbG90LXN0YXR1cy1pbmRpY2F0b3IgdmF1bHRwaWxvdC1zdGF0dXMtb2ZmbGluZSc7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVRdWlja0FjdGlvbnMoKSB7XG4gICAgdGhpcy5xdWlja0FjdGlvbnNFbC5lbXB0eSgpO1xuICAgIHRoaXMucXVpY2tBY3Rpb25zRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnUXVpY2sgQWN0aW9ucycgfSk7XG5cbiAgICBjb25zdCBhY3Rpb25zR3JpZCA9IHRoaXMucXVpY2tBY3Rpb25zRWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndmF1bHRwaWxvdC1hY3Rpb25zLWdyaWQnIH0pO1xuXG4gICAgLy8gQ2hhdCBhY3Rpb25cbiAgICBjb25zdCBjaGF0QnV0dG9uID0gYWN0aW9uc0dyaWQuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgIHRleHQ6ICfwn5KsIE9wZW4gQ2hhdCcsXG4gICAgICBjbHM6ICd2YXVsdHBpbG90LWFjdGlvbi1idXR0b24nXG4gICAgfSk7XG4gICAgY2hhdEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy5wbHVnaW4ub3BlbkNoYXRNb2RhbCgpO1xuXG4gICAgLy8gV29ya2Zsb3cgYWN0aW9uXG4gICAgY29uc3Qgd29ya2Zsb3dCdXR0b24gPSBhY3Rpb25zR3JpZC5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgdGV4dDogJ+Kame+4jyBFeGVjdXRlIFdvcmtmbG93JyxcbiAgICAgIGNsczogJ3ZhdWx0cGlsb3QtYWN0aW9uLWJ1dHRvbidcbiAgICB9KTtcbiAgICB3b3JrZmxvd0J1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy5wbHVnaW4ub3BlbldvcmtmbG93TW9kYWwoKTtcblxuICAgIC8vIEFuYWx5emUgdmF1bHQgYWN0aW9uXG4gICAgY29uc3QgYW5hbHl6ZUJ1dHRvbiA9IGFjdGlvbnNHcmlkLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICB0ZXh0OiAn8J+UjSBBbmFseXplIFZhdWx0JyxcbiAgICAgIGNsczogJ3ZhdWx0cGlsb3QtYWN0aW9uLWJ1dHRvbidcbiAgICB9KTtcbiAgICBhbmFseXplQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0aGlzLnBsdWdpbi5hbmFseXplVmF1bHQoKTtcblxuICAgIC8vIENvcGlsb3QgYWN0aW9uXG4gICAgY29uc3QgY29waWxvdEJ1dHRvbiA9IGFjdGlvbnNHcmlkLmNyZWF0ZUVsKCdidXR0b24nLCB7XG4gICAgICB0ZXh0OiAn4pyoIEdldCBDb21wbGV0aW9uJyxcbiAgICAgIGNsczogJ3ZhdWx0cGlsb3QtYWN0aW9uLWJ1dHRvbidcbiAgICB9KTtcbiAgICBjb3BpbG90QnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcbiAgICAgIGlmIChhY3RpdmVWaWV3KSB7XG4gICAgICAgIHRoaXMucGx1Z2luLmdldENvcGlsb3RDb21wbGV0aW9uKGFjdGl2ZVZpZXcuZWRpdG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ldyBOb3RpY2UoJ05vIGFjdGl2ZSBlZGl0b3IgZm91bmQnKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gUmVmcmVzaCBidXR0b25cbiAgICBjb25zdCByZWZyZXNoQnV0dG9uID0gdGhpcy5xdWlja0FjdGlvbnNFbC5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgdGV4dDogJ/CflIQgUmVmcmVzaCBTdGF0dXMnLFxuICAgICAgY2xzOiAndmF1bHRwaWxvdC1yZWZyZXNoLWJ1dHRvbidcbiAgICB9KTtcbiAgICByZWZyZXNoQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVN0YXR1cygpO1xuICAgICAgdGhpcy51cGRhdGVWYXVsdFN0YXRzKCk7XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlVmF1bHRTdGF0cygpIHtcbiAgICB0aGlzLnZhdWx0U3RhdHNFbC5lbXB0eSgpO1xuICAgIHRoaXMudmF1bHRTdGF0c0VsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ1ZhdWx0IFN0YXRpc3RpY3MnIH0pO1xuXG4gICAgY29uc3Qgc3RhdHNDb250YWluZXIgPSB0aGlzLnZhdWx0U3RhdHNFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LXN0YXRzLWNvbnRhaW5lcicgfSk7XG5cbiAgICAvLyBHZXQgdmF1bHQgc3RhdGlzdGljc1xuICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0RmlsZXMoKTtcbiAgICBjb25zdCBtYXJrZG93bkZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIFxuICAgIGNvbnN0IHN0YXRzID0gW1xuICAgICAgeyBsYWJlbDogJ1RvdGFsIEZpbGVzJywgdmFsdWU6IGZpbGVzLmxlbmd0aC50b1N0cmluZygpIH0sXG4gICAgICB7IGxhYmVsOiAnTWFya2Rvd24gRmlsZXMnLCB2YWx1ZTogbWFya2Rvd25GaWxlcy5sZW5ndGgudG9TdHJpbmcoKSB9LFxuICAgICAgeyBsYWJlbDogJ0ZvbGRlcnMnLCB2YWx1ZTogdGhpcy5hcHAudmF1bHQuZ2V0QWxsTG9hZGVkRmlsZXMoKS5maWx0ZXIoZiA9PiBmIGluc3RhbmNlb2YgVEZvbGRlcikubGVuZ3RoLnRvU3RyaW5nKCkgfVxuICAgIF07XG5cbiAgICBzdGF0cy5mb3JFYWNoKHN0YXQgPT4ge1xuICAgICAgY29uc3Qgc3RhdEVsID0gc3RhdHNDb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndmF1bHRwaWxvdC1zdGF0LWl0ZW0nIH0pO1xuICAgICAgc3RhdEVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IHN0YXQudmFsdWUsIGNsczogJ3ZhdWx0cGlsb3Qtc3RhdC12YWx1ZScgfSk7XG4gICAgICBzdGF0RWwuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogc3RhdC5sYWJlbCwgY2xzOiAndmF1bHRwaWxvdC1zdGF0LWxhYmVsJyB9KTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBhZ2VudCBpbmZvIGlmIGF2YWlsYWJsZVxuICAgIHRoaXMubG9hZEFnZW50SW5mbygpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsb2FkQWdlbnRJbmZvKCkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucGx1Z2luLmFwaUNsaWVudC5nZXRBZ2VudHMoKTtcbiAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzICYmIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgY29uc3QgYWdlbnRDb3VudCA9IHJlc3BvbnNlLmRhdGEubGVuZ3RoO1xuICAgICAgICBjb25zdCBhY3RpdmVBZ2VudHMgPSByZXNwb25zZS5kYXRhLmZpbHRlcigoYWdlbnQ6IGFueSkgPT4gYWdlbnQuYWN0aXZlKS5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBhZ2VudFN0YXRzRWwgPSB0aGlzLnZhdWx0U3RhdHNFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LWFnZW50LXN0YXRzJyB9KTtcbiAgICAgICAgYWdlbnRTdGF0c0VsLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0F2YWlsYWJsZSBBZ2VudHMnIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgYWdlbnRJbmZvID0gYWdlbnRTdGF0c0VsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3QtYWdlbnQtaW5mbycgfSk7XG4gICAgICAgIGFnZW50SW5mby5jcmVhdGVFbCgnc3BhbicsIHsgdGV4dDogYCR7YWN0aXZlQWdlbnRzfS8ke2FnZW50Q291bnR9IGFjdGl2ZWAgfSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIFNpbGVudGx5IGZhaWwgaWYgYWdlbnRzIGNhbid0IGJlIGxvYWRlZFxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkU3R5bGVzKCkge1xuICAgIGlmICghZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3ZhdWx0cGlsb3Qtdmlldy1zdHlsZXMnKSkge1xuICAgICAgY29uc3Qgc3R5bGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICBzdHlsZUVsLmlkID0gJ3ZhdWx0cGlsb3Qtdmlldy1zdHlsZXMnO1xuICAgICAgc3R5bGVFbC50ZXh0Q29udGVudCA9IGBcbiAgICAgICAgLnZhdWx0cGlsb3QtdmlldyB7XG4gICAgICAgICAgcGFkZGluZzogMjBweDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1oZWFkZXIge1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAzMHB4O1xuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxNXB4O1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3Qtc3VidGl0bGUge1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcbiAgICAgICAgICBtYXJnaW4tdG9wOiA1cHg7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3Qtc3RhdHVzLFxuICAgICAgICAudmF1bHRwaWxvdC1xdWljay1hY3Rpb25zLFxuICAgICAgICAudmF1bHRwaWxvdC12YXVsdC1zdGF0cyxcbiAgICAgICAgLnZhdWx0cGlsb3QtYWN0aXZpdGllcyB7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjVweDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1zdGF0dXMgaDMsXG4gICAgICAgIC52YXVsdHBpbG90LXF1aWNrLWFjdGlvbnMgaDMsXG4gICAgICAgIC52YXVsdHBpbG90LXZhdWx0LXN0YXRzIGgzLFxuICAgICAgICAudmF1bHRwaWxvdC1hY3Rpdml0aWVzIGgzIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG4gICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogNXB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXN0YXR1cy1jb250YWluZXIge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgICBnYXA6IDhweDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1zdGF0dXMtaXRlbSB7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1zdGF0dXMtaW5kaWNhdG9yIHtcbiAgICAgICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXN0YXR1cy1jb25uZWN0ZWQge1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci1ncmVlbik7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3Qtc3RhdHVzLWVycm9yLFxuICAgICAgICAudmF1bHRwaWxvdC1zdGF0dXMtb2ZmbGluZSB7XG4gICAgICAgICAgY29sb3I6IHZhcigtLWNvbG9yLXJlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtYWN0aW9ucy1ncmlkIHtcbiAgICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmcjtcbiAgICAgICAgICBnYXA6IDEwcHg7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1hY3Rpb24tYnV0dG9uIHtcbiAgICAgICAgICBwYWRkaW5nOiAxMnB4IDhweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1pbnRlcmFjdGl2ZS1ub3JtYWwpO1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbm9ybWFsKTtcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgZm9udC1zaXplOiAxM3B4O1xuICAgICAgICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycztcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1hY3Rpb24tYnV0dG9uOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1pbnRlcmFjdGl2ZS1ob3Zlcik7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtcmVmcmVzaC1idXR0b24ge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmc6IDhweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW9uLWFjY2VudCk7XG4gICAgICAgICAgYm9yZGVyOiBub25lO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgICAgICAgZm9udC1zaXplOiAxMnB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXN0YXRzLWNvbnRhaW5lciB7XG4gICAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgzLCAxZnIpO1xuICAgICAgICAgIGdhcDogMTVweDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1zdGF0LWl0ZW0ge1xuICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgICBwYWRkaW5nOiAxNXB4O1xuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXN0YXQtdmFsdWUge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMjRweDtcbiAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1hY2NlbnQpO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1zdGF0LWxhYmVsIHtcbiAgICAgICAgICBmb250LXNpemU6IDEycHg7XG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LWFnZW50LXN0YXRzIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAxNXB4O1xuICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5LWFsdCk7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1hZ2VudC1zdGF0cyBoNCB7XG4gICAgICAgICAgbWFyZ2luOiAwIDAgOHB4IDA7XG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LWFnZW50LWluZm8ge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtcGxhY2Vob2xkZXIge1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcbiAgICAgICAgICBmb250LXN0eWxlOiBpdGFsaWM7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgICAgIH1cbiAgICAgIGA7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHN0eWxlRWwpO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIG9uQ2xvc2UoKSB7XG4gICAgLy8gQ2xlYW4gdXAgYW55IHJlc291cmNlc1xuICB9XG59XG4iLCJpbXBvcnQgeyBNb2RhbCwgQXBwLCBTZXR0aW5nLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgdHlwZSBWYXVsdFBpbG90UGx1Z2luIGZyb20gJy4vbWFpbic7XG5pbXBvcnQgeyBDaGF0TWVzc2FnZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgQ2hhdE1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICBwbHVnaW46IFZhdWx0UGlsb3RQbHVnaW47XG4gIHByaXZhdGUgY2hhdENvbnRhaW5lciE6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIGlucHV0Q29udGFpbmVyITogSFRNTEVsZW1lbnQ7XG4gIHByaXZhdGUgbWVzc2FnZXNFbCE6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIGlucHV0RWwhOiBIVE1MSW5wdXRFbGVtZW50O1xuICBwcml2YXRlIHNlbmRCdXR0b24hOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgcHJpdmF0ZSBjdXJyZW50Q29udmVyc2F0aW9uSWQ6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuICBwcml2YXRlIG1lc3NhZ2VzOiBDaGF0TWVzc2FnZVtdID0gW107XG5cbiAgY29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogVmF1bHRQaWxvdFBsdWdpbikge1xuICAgIHN1cGVyKGFwcCk7XG4gICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XG4gIH1cblxuICBvbk9wZW4oKSB7XG4gICAgY29uc3QgeyBjb250ZW50RWwgfSA9IHRoaXM7XG4gICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgY29udGVudEVsLmFkZENsYXNzKCd2YXVsdHBpbG90LWNoYXQtbW9kYWwnKTtcblxuICAgIC8vIE1vZGFsIGhlYWRlclxuICAgIGNvbnN0IGhlYWRlckVsID0gY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3QtY2hhdC1oZWFkZXInIH0pO1xuICAgIGhlYWRlckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ/CfpJYgVmF1bHRQaWxvdCBDaGF0JyB9KTtcbiAgICBcbiAgICBjb25zdCB0b29sYmFyRWwgPSBoZWFkZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LWNoYXQtdG9vbGJhcicgfSk7XG4gICAgXG4gICAgLy8gQ2xlYXIgY2hhdCBidXR0b25cbiAgICBjb25zdCBjbGVhckJ0biA9IHRvb2xiYXJFbC5jcmVhdGVFbCgnYnV0dG9uJywgeyBcbiAgICAgIHRleHQ6ICdDbGVhciBDaGF0JyxcbiAgICAgIGNsczogJ21vZC1jdGEnXG4gICAgfSk7XG4gICAgY2xlYXJCdG4ub25jbGljayA9ICgpID0+IHRoaXMuY2xlYXJDaGF0KCk7XG5cbiAgICAvLyBBZ2VudCBzZWxlY3RvciAod2lsbCBiZSBwb3B1bGF0ZWQgd2hlbiBhZ2VudHMgYXJlIGxvYWRlZClcbiAgICBjb25zdCBhZ2VudFNlbGVjdCA9IHRvb2xiYXJFbC5jcmVhdGVFbCgnc2VsZWN0JywgeyBjbHM6ICd2YXVsdHBpbG90LWFnZW50LXNlbGVjdCcgfSk7XG4gICAgYWdlbnRTZWxlY3QuY3JlYXRlRWwoJ29wdGlvbicsIHsgdGV4dDogJ0F1dG8tc2VsZWN0IEFnZW50JywgdmFsdWU6ICcnIH0pO1xuICAgIHRoaXMubG9hZEFnZW50cyhhZ2VudFNlbGVjdCk7XG5cbiAgICAvLyBDaGF0IGNvbnRhaW5lclxuICAgIHRoaXMuY2hhdENvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LWNoYXQtY29udGFpbmVyJyB9KTtcbiAgICBcbiAgICAvLyBNZXNzYWdlcyBhcmVhXG4gICAgdGhpcy5tZXNzYWdlc0VsID0gdGhpcy5jaGF0Q29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3QtY2hhdC1tZXNzYWdlcycgfSk7XG4gICAgXG4gICAgLy8gSW5wdXQgY29udGFpbmVyXG4gICAgdGhpcy5pbnB1dENvbnRhaW5lciA9IHRoaXMuY2hhdENvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LWNoYXQtaW5wdXQtY29udGFpbmVyJyB9KTtcbiAgICBcbiAgICB0aGlzLmlucHV0RWwgPSB0aGlzLmlucHV0Q29udGFpbmVyLmNyZWF0ZUVsKCdpbnB1dCcsIHtcbiAgICAgIHR5cGU6ICd0ZXh0JyxcbiAgICAgIHBsYWNlaG9sZGVyOiAnQXNrIG1lIGFueXRoaW5nIGFib3V0IHlvdXIgdmF1bHQuLi4nLFxuICAgICAgY2xzOiAndmF1bHRwaWxvdC1jaGF0LWlucHV0J1xuICAgIH0pO1xuXG4gICAgdGhpcy5zZW5kQnV0dG9uID0gdGhpcy5pbnB1dENvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgdGV4dDogJ1NlbmQnLFxuICAgICAgY2xzOiAnbW9kLWN0YSB2YXVsdHBpbG90LXNlbmQtYnV0dG9uJ1xuICAgIH0pO1xuXG4gICAgLy8gRXZlbnQgbGlzdGVuZXJzXG4gICAgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCAoZSkgPT4ge1xuICAgICAgaWYgKGUua2V5ID09PSAnRW50ZXInICYmICFlLnNoaWZ0S2V5KSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5zZW5kTWVzc2FnZSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgdGhpcy5zZW5kQnV0dG9uLm9uY2xpY2sgPSAoKSA9PiB0aGlzLnNlbmRNZXNzYWdlKCk7XG5cbiAgICAvLyBGb2N1cyB0aGUgaW5wdXRcbiAgICB0aGlzLmlucHV0RWwuZm9jdXMoKTtcblxuICAgIC8vIExvYWQgY29udmVyc2F0aW9uIGhpc3RvcnlcbiAgICB0aGlzLmxvYWRDb252ZXJzYXRpb25IaXN0b3J5KCk7XG5cbiAgICAvLyBBZGQgc3R5bGVzXG4gICAgdGhpcy5hZGRTdHlsZXMoKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgbG9hZEFnZW50cyhzZWxlY3RFbDogSFRNTFNlbGVjdEVsZW1lbnQpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcGlDbGllbnQuZ2V0QWdlbnRzKCk7XG4gICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyAmJiByZXNwb25zZS5kYXRhKSB7XG4gICAgICAgIHJlc3BvbnNlLmRhdGEuZm9yRWFjaChhZ2VudCA9PiB7XG4gICAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0RWwuY3JlYXRlRWwoJ29wdGlvbicsIHtcbiAgICAgICAgICAgIHRleHQ6IGFnZW50Lm5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogYWdlbnQuaWRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIGFnZW50czonLCBlcnJvcik7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBsb2FkQ29udmVyc2F0aW9uSGlzdG9yeSgpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnBsdWdpbi5hcGlDbGllbnQuZ2V0Q29udmVyc2F0aW9uSGlzdG9yeSgpO1xuICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgJiYgcmVzcG9uc2UuZGF0YSAmJiByZXNwb25zZS5kYXRhLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgbGF0ZXN0Q29udmVyc2F0aW9uID0gcmVzcG9uc2UuZGF0YVswXTtcbiAgICAgICAgdGhpcy5jdXJyZW50Q29udmVyc2F0aW9uSWQgPSBsYXRlc3RDb252ZXJzYXRpb24uY29udmVyc2F0aW9uX2lkO1xuICAgICAgICB0aGlzLm1lc3NhZ2VzID0gbGF0ZXN0Q29udmVyc2F0aW9uLm1lc3NhZ2VzO1xuICAgICAgICB0aGlzLnJlbmRlck1lc3NhZ2VzKCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byBsb2FkIGNvbnZlcnNhdGlvbiBoaXN0b3J5OicsIGVycm9yKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIHNlbmRNZXNzYWdlKCkge1xuICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLmlucHV0RWwudmFsdWUudHJpbSgpO1xuICAgIGlmICghbWVzc2FnZSkgcmV0dXJuO1xuXG4gICAgLy8gRGlzYWJsZSBpbnB1dCB3aGlsZSBwcm9jZXNzaW5nXG4gICAgdGhpcy5pbnB1dEVsLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB0aGlzLnNlbmRCdXR0b24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMuc2VuZEJ1dHRvbi50ZXh0Q29udGVudCA9ICdTZW5kaW5nLi4uJztcblxuICAgIC8vIEFkZCB1c2VyIG1lc3NhZ2UgdG8gVUlcbiAgICB0aGlzLmFkZE1lc3NhZ2UoJ3VzZXInLCBtZXNzYWdlKTtcbiAgICB0aGlzLmlucHV0RWwudmFsdWUgPSAnJztcblxuICAgIHRyeSB7XG4gICAgICAvLyBHZXQgdmF1bHQgY29udGV4dCBpZiBhdmFpbGFibGVcbiAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgbGV0IHZhdWx0Q29udGV4dCA9ICcnO1xuICAgICAgXG4gICAgICBpZiAoYWN0aXZlRmlsZSkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChhY3RpdmVGaWxlKTtcbiAgICAgICAgdmF1bHRDb250ZXh0ID0gYEN1cnJlbnQgZmlsZTogJHthY3RpdmVGaWxlLm5hbWV9XFxuXFxuQ29udGVudDpcXG4ke2NvbnRlbnR9YDtcbiAgICAgIH1cblxuICAgICAgLy8gU2VuZCB0byBBUElcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBpQ2xpZW50LmNoYXQoe1xuICAgICAgICBtZXNzYWdlLFxuICAgICAgICBjb252ZXJzYXRpb25faWQ6IHRoaXMuY3VycmVudENvbnZlcnNhdGlvbklkIHx8IHVuZGVmaW5lZCxcbiAgICAgICAgdmF1bHRfY29udGV4dDogdmF1bHRDb250ZXh0LFxuICAgICAgICBhZ2VudF9pZDogdGhpcy5nZXRTZWxlY3RlZEFnZW50KClcbiAgICAgIH0pO1xuXG4gICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyAmJiByZXNwb25zZS5kYXRhKSB7XG4gICAgICAgIHRoaXMuY3VycmVudENvbnZlcnNhdGlvbklkID0gcmVzcG9uc2UuZGF0YS5jb252ZXJzYXRpb25faWQ7XG4gICAgICAgIHRoaXMuYWRkTWVzc2FnZSgnYXNzaXN0YW50JywgcmVzcG9uc2UuZGF0YS5yZXNwb25zZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmFkZE1lc3NhZ2UoJ2Fzc2lzdGFudCcsIGBFcnJvcjogJHtyZXNwb25zZS5lcnJvciB8fCAnRmFpbGVkIHRvIGdldCByZXNwb25zZSd9YCk7XG4gICAgICAgIG5ldyBOb3RpY2UoYENoYXQgZXJyb3I6ICR7cmVzcG9uc2UuZXJyb3J9YCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTXNnID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcic7XG4gICAgICB0aGlzLmFkZE1lc3NhZ2UoJ2Fzc2lzdGFudCcsIGBFcnJvcjogJHtlcnJvck1zZ31gKTtcbiAgICAgIG5ldyBOb3RpY2UoYENoYXQgZXJyb3I6ICR7ZXJyb3JNc2d9YCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIC8vIFJlLWVuYWJsZSBpbnB1dFxuICAgICAgdGhpcy5pbnB1dEVsLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnNlbmRCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuc2VuZEJ1dHRvbi50ZXh0Q29udGVudCA9ICdTZW5kJztcbiAgICAgIHRoaXMuaW5wdXRFbC5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZ2V0U2VsZWN0ZWRBZ2VudCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHNlbGVjdEVsID0gdGhpcy5jb250ZW50RWwucXVlcnlTZWxlY3RvcignLnZhdWx0cGlsb3QtYWdlbnQtc2VsZWN0JykgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XG4gICAgcmV0dXJuIHNlbGVjdEVsPy52YWx1ZSB8fCB1bmRlZmluZWQ7XG4gIH1cblxuICBwcml2YXRlIGFkZE1lc3NhZ2Uocm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCcsIGNvbnRlbnQ6IHN0cmluZykge1xuICAgIGNvbnN0IG1lc3NhZ2U6IENoYXRNZXNzYWdlID0ge1xuICAgICAgcm9sZSxcbiAgICAgIGNvbnRlbnQsXG4gICAgICB0aW1lc3RhbXA6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxuICAgIH07XG5cbiAgICB0aGlzLm1lc3NhZ2VzLnB1c2gobWVzc2FnZSk7XG4gICAgdGhpcy5yZW5kZXJNZXNzYWdlKG1lc3NhZ2UpO1xuICAgIHRoaXMuc2Nyb2xsVG9Cb3R0b20oKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyTWVzc2FnZXMoKSB7XG4gICAgdGhpcy5tZXNzYWdlc0VsLmVtcHR5KCk7XG4gICAgdGhpcy5tZXNzYWdlcy5mb3JFYWNoKG1lc3NhZ2UgPT4gdGhpcy5yZW5kZXJNZXNzYWdlKG1lc3NhZ2UpKTtcbiAgICB0aGlzLnNjcm9sbFRvQm90dG9tKCk7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlck1lc3NhZ2UobWVzc2FnZTogQ2hhdE1lc3NhZ2UpIHtcbiAgICBjb25zdCBtZXNzYWdlRWwgPSB0aGlzLm1lc3NhZ2VzRWwuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsczogYHZhdWx0cGlsb3QtbWVzc2FnZSB2YXVsdHBpbG90LW1lc3NhZ2UtJHttZXNzYWdlLnJvbGV9YFxuICAgIH0pO1xuXG4gICAgY29uc3Qgcm9sZUVsID0gbWVzc2FnZUVsLmNyZWF0ZUVsKCdkaXYnLCB7XG4gICAgICBjbHM6ICd2YXVsdHBpbG90LW1lc3NhZ2Utcm9sZScsXG4gICAgICB0ZXh0OiBtZXNzYWdlLnJvbGUgPT09ICd1c2VyJyA/ICdZb3UnIDogJ1ZhdWx0UGlsb3QnXG4gICAgfSk7XG5cbiAgICBjb25zdCBjb250ZW50RWwgPSBtZXNzYWdlRWwuY3JlYXRlRWwoJ2RpdicsIHtcbiAgICAgIGNsczogJ3ZhdWx0cGlsb3QtbWVzc2FnZS1jb250ZW50J1xuICAgIH0pO1xuXG4gICAgLy8gU2ltcGxlIG1hcmtkb3duIHJlbmRlcmluZyBmb3IgYmFzaWMgZm9ybWF0dGluZ1xuICAgIGNvbnRlbnRFbC5pbm5lckhUTUwgPSB0aGlzLnJlbmRlck1hcmtkb3duKG1lc3NhZ2UuY29udGVudCk7XG5cbiAgICBpZiAobWVzc2FnZS50aW1lc3RhbXApIHtcbiAgICAgIGNvbnN0IHRpbWVFbCA9IG1lc3NhZ2VFbC5jcmVhdGVFbCgnZGl2Jywge1xuICAgICAgICBjbHM6ICd2YXVsdHBpbG90LW1lc3NhZ2UtdGltZScsXG4gICAgICAgIHRleHQ6IG5ldyBEYXRlKG1lc3NhZ2UudGltZXN0YW1wKS50b0xvY2FsZVRpbWVTdHJpbmcoKVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZW5kZXJNYXJrZG93bih0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiB0ZXh0XG4gICAgICAucmVwbGFjZSgvXFwqXFwqKC4qPylcXCpcXCovZywgJzxzdHJvbmc+JDE8L3N0cm9uZz4nKVxuICAgICAgLnJlcGxhY2UoL1xcKiguKj8pXFwqL2csICc8ZW0+JDE8L2VtPicpXG4gICAgICAucmVwbGFjZSgvYCguKj8pYC9nLCAnPGNvZGU+JDE8L2NvZGU+JylcbiAgICAgIC5yZXBsYWNlKC9cXG4vZywgJzxicj4nKTtcbiAgfVxuXG4gIHByaXZhdGUgc2Nyb2xsVG9Cb3R0b20oKSB7XG4gICAgdGhpcy5tZXNzYWdlc0VsLnNjcm9sbFRvcCA9IHRoaXMubWVzc2FnZXNFbC5zY3JvbGxIZWlnaHQ7XG4gIH1cblxuICBwcml2YXRlIGNsZWFyQ2hhdCgpIHtcbiAgICB0aGlzLm1lc3NhZ2VzID0gW107XG4gICAgdGhpcy5jdXJyZW50Q29udmVyc2F0aW9uSWQgPSBudWxsO1xuICAgIHRoaXMubWVzc2FnZXNFbC5lbXB0eSgpO1xuICAgIG5ldyBOb3RpY2UoJ0NoYXQgY2xlYXJlZCcpO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRTdHlsZXMoKSB7XG4gICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmF1bHRwaWxvdC1jaGF0LXN0eWxlcycpKSB7XG4gICAgICBjb25zdCBzdHlsZUVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgIHN0eWxlRWwuaWQgPSAndmF1bHRwaWxvdC1jaGF0LXN0eWxlcyc7XG4gICAgICBzdHlsZUVsLnRleHRDb250ZW50ID0gYFxuICAgICAgICAudmF1bHRwaWxvdC1jaGF0LW1vZGFsIHtcbiAgICAgICAgICB3aWR0aDogNjAwcHg7XG4gICAgICAgICAgaGVpZ2h0OiA3MDBweDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1jaGF0LWhlYWRlciB7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgICAgIHBhZGRpbmctYm90dG9tOiAxMHB4O1xuICAgICAgICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtY2hhdC10b29sYmFyIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGdhcDogMTBweDtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LWFnZW50LXNlbGVjdCB7XG4gICAgICAgICAgcGFkZGluZzogNHB4IDhweDtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4O1xuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbm9ybWFsKTtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1jaGF0LWNvbnRhaW5lciB7XG4gICAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICAgICAgICAgIGhlaWdodDogY2FsYygxMDAlIC0gODBweCk7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtY2hhdC1tZXNzYWdlcyB7XG4gICAgICAgICAgZmxleDogMTtcbiAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1tZXNzYWdlIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LW1lc3NhZ2UtdXNlciB7XG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5LWFsdCk7XG4gICAgICAgICAgbWFyZ2luLWxlZnQ6IDIwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtbWVzc2FnZS1hc3Npc3RhbnQge1xuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAyMHB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LW1lc3NhZ2Utcm9sZSB7XG4gICAgICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogNXB4O1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWFjY2VudCk7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtbWVzc2FnZS1jb250ZW50IHtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS40O1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtbWVzc2FnZS10aW1lIHtcbiAgICAgICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcbiAgICAgICAgICBtYXJnaW4tdG9wOiA1cHg7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtY2hhdC1pbnB1dC1jb250YWluZXIge1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgICAgZ2FwOiAxMHB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LWNoYXQtaW5wdXQge1xuICAgICAgICAgIGZsZXg6IDE7XG4gICAgICAgICAgcGFkZGluZzogMTBweDtcbiAgICAgICAgICBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogNnB4O1xuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbm9ybWFsKTtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1zZW5kLWJ1dHRvbiB7XG4gICAgICAgICAgcGFkZGluZzogMTBweCAyMHB4O1xuICAgICAgICB9XG4gICAgICBgO1xuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsKTtcbiAgICB9XG4gIH1cblxuICBvbkNsb3NlKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBNb2RhbCwgQXBwLCBTZXR0aW5nLCBOb3RpY2UsIFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHR5cGUgVmF1bHRQaWxvdFBsdWdpbiBmcm9tICcuL21haW4nO1xuaW1wb3J0IHsgV29ya2Zsb3dSZXF1ZXN0LCBXb3JrZmxvd1Jlc3BvbnNlLCBXb3JrZmxvd1Byb2dyZXNzIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBXb3JrZmxvd01vZGFsIGV4dGVuZHMgTW9kYWwge1xuICBwbHVnaW46IFZhdWx0UGlsb3RQbHVnaW47XG4gIHByaXZhdGUgZ29hbElucHV0ITogSFRNTFRleHRBcmVhRWxlbWVudDtcbiAgcHJpdmF0ZSBjb250ZXh0SW5wdXQhOiBIVE1MVGV4dEFyZWFFbGVtZW50O1xuICBwcml2YXRlIGV4ZWN1dGVCdXR0b24hOiBIVE1MQnV0dG9uRWxlbWVudDtcbiAgcHJpdmF0ZSBwcm9ncmVzc0NvbnRhaW5lciE6IEhUTUxFbGVtZW50O1xuICBwcml2YXRlIHJlc3VsdHNDb250YWluZXIhOiBIVE1MRWxlbWVudDtcbiAgcHJpdmF0ZSBpc0V4ZWN1dGluZyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwbHVnaW46IFZhdWx0UGlsb3RQbHVnaW4pIHtcbiAgICBzdXBlcihhcHApO1xuICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xuICB9XG5cbiAgb25PcGVuKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICAgIGNvbnRlbnRFbC5hZGRDbGFzcygndmF1bHRwaWxvdC13b3JrZmxvdy1tb2RhbCcpO1xuXG4gICAgLy8gSGVhZGVyXG4gICAgY29uc3QgaGVhZGVyRWwgPSBjb250ZW50RWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndmF1bHRwaWxvdC13b3JrZmxvdy1oZWFkZXInIH0pO1xuICAgIGhlYWRlckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ+Kame+4jyBXb3JrZmxvdyBFeGVjdXRpb24nIH0pO1xuICAgIGhlYWRlckVsLmNyZWF0ZUVsKCdwJywgeyBcbiAgICAgIHRleHQ6ICdEZWZpbmUgYSBnb2FsIGFuZCBsZXQgVmF1bHRQaWxvdCBjcmVhdGUgYW5kIGV4ZWN1dGUgYSBjb21wcmVoZW5zaXZlIHdvcmtmbG93IHRvIGFjaGlldmUgaXQuJyxcbiAgICAgIGNsczogJ3ZhdWx0cGlsb3Qtd29ya2Zsb3ctZGVzY3JpcHRpb24nXG4gICAgfSk7XG5cbiAgICAvLyBGb3JtXG4gICAgY29uc3QgZm9ybUVsID0gY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3Qtd29ya2Zsb3ctZm9ybScgfSk7XG5cbiAgICAvLyBHb2FsIGlucHV0XG4gICAgY29uc3QgZ29hbENvbnRhaW5lciA9IGZvcm1FbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LWZvcm0tZ3JvdXAnIH0pO1xuICAgIGdvYWxDb250YWluZXIuY3JlYXRlRWwoJ2xhYmVsJywgeyBcbiAgICAgIHRleHQ6ICdHb2FsIConLFxuICAgICAgY2xzOiAndmF1bHRwaWxvdC1mb3JtLWxhYmVsJ1xuICAgIH0pO1xuICAgIHRoaXMuZ29hbElucHV0ID0gZ29hbENvbnRhaW5lci5jcmVhdGVFbCgndGV4dGFyZWEnLCB7XG4gICAgICBwbGFjZWhvbGRlcjogJ2UuZy4sIFwiQ3JlYXRlIGEgY29tcHJlaGVuc2l2ZSBzdHVkeSBwbGFuIGZvciBtYWNoaW5lIGxlYXJuaW5nIGJhc2VkIG9uIG15IG5vdGVzXCInLFxuICAgICAgY2xzOiAndmF1bHRwaWxvdC1nb2FsLWlucHV0J1xuICAgIH0pO1xuXG4gICAgLy8gQ29udGV4dCBpbnB1dFxuICAgIGNvbnN0IGNvbnRleHRDb250YWluZXIgPSBmb3JtRWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndmF1bHRwaWxvdC1mb3JtLWdyb3VwJyB9KTtcbiAgICBjb250ZXh0Q29udGFpbmVyLmNyZWF0ZUVsKCdsYWJlbCcsIHsgXG4gICAgICB0ZXh0OiAnQWRkaXRpb25hbCBDb250ZXh0IChvcHRpb25hbCknLFxuICAgICAgY2xzOiAndmF1bHRwaWxvdC1mb3JtLWxhYmVsJ1xuICAgIH0pO1xuICAgIHRoaXMuY29udGV4dElucHV0ID0gY29udGV4dENvbnRhaW5lci5jcmVhdGVFbCgndGV4dGFyZWEnLCB7XG4gICAgICBwbGFjZWhvbGRlcjogJ1Byb3ZpZGUgYW55IGFkZGl0aW9uYWwgY29udGV4dCwgY29uc3RyYWludHMsIG9yIHJlcXVpcmVtZW50cy4uLicsXG4gICAgICBjbHM6ICd2YXVsdHBpbG90LWNvbnRleHQtaW5wdXQnXG4gICAgfSk7XG5cbiAgICAvLyBWYXVsdCBjb250ZW50IG9wdGlvbnNcbiAgICBjb25zdCBvcHRpb25zQ29udGFpbmVyID0gZm9ybUVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3QtZm9ybS1ncm91cCcgfSk7XG4gICAgb3B0aW9uc0NvbnRhaW5lci5jcmVhdGVFbCgnbGFiZWwnLCB7IFxuICAgICAgdGV4dDogJ1ZhdWx0IEludGVncmF0aW9uJyxcbiAgICAgIGNsczogJ3ZhdWx0cGlsb3QtZm9ybS1sYWJlbCdcbiAgICB9KTtcblxuICAgIGNvbnN0IGluY2x1ZGVBY3RpdmVGaWxlID0gb3B0aW9uc0NvbnRhaW5lci5jcmVhdGVFbCgnbGFiZWwnLCB7IGNsczogJ3ZhdWx0cGlsb3QtY2hlY2tib3gtbGFiZWwnIH0pO1xuICAgIGNvbnN0IGFjdGl2ZUZpbGVDaGVja2JveCA9IGluY2x1ZGVBY3RpdmVGaWxlLmNyZWF0ZUVsKCdpbnB1dCcsIHsgdHlwZTogJ2NoZWNrYm94JyB9KTtcbiAgICBpbmNsdWRlQWN0aXZlRmlsZS5jcmVhdGVTcGFuKHsgdGV4dDogJ0luY2x1ZGUgYWN0aXZlIGZpbGUgY29udGVudCcgfSk7XG5cbiAgICBjb25zdCBpbmNsdWRlQWxsRmlsZXMgPSBvcHRpb25zQ29udGFpbmVyLmNyZWF0ZUVsKCdsYWJlbCcsIHsgY2xzOiAndmF1bHRwaWxvdC1jaGVja2JveC1sYWJlbCcgfSk7XG4gICAgY29uc3QgYWxsRmlsZXNDaGVja2JveCA9IGluY2x1ZGVBbGxGaWxlcy5jcmVhdGVFbCgnaW5wdXQnLCB7IHR5cGU6ICdjaGVja2JveCcgfSk7XG4gICAgaW5jbHVkZUFsbEZpbGVzLmNyZWF0ZVNwYW4oeyB0ZXh0OiAnSW5jbHVkZSBhbGwgdmF1bHQgZmlsZXMgKG1heSB0YWtlIGxvbmdlciknIH0pO1xuXG4gICAgLy8gRXhlY3V0ZSBidXR0b25cbiAgICB0aGlzLmV4ZWN1dGVCdXR0b24gPSBmb3JtRWwuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgIHRleHQ6ICdFeGVjdXRlIFdvcmtmbG93JyxcbiAgICAgIGNsczogJ21vZC1jdGEgdmF1bHRwaWxvdC1leGVjdXRlLWJ1dHRvbidcbiAgICB9KTtcbiAgICB0aGlzLmV4ZWN1dGVCdXR0b24ub25jbGljayA9ICgpID0+IHRoaXMuZXhlY3V0ZVdvcmtmbG93KGFjdGl2ZUZpbGVDaGVja2JveC5jaGVja2VkLCBhbGxGaWxlc0NoZWNrYm94LmNoZWNrZWQpO1xuXG4gICAgLy8gUHJvZ3Jlc3MgY29udGFpbmVyXG4gICAgdGhpcy5wcm9ncmVzc0NvbnRhaW5lciA9IGNvbnRlbnRFbC5jcmVhdGVFbCgnZGl2JywgeyBcbiAgICAgIGNsczogJ3ZhdWx0cGlsb3QtcHJvZ3Jlc3MtY29udGFpbmVyJ1xuICAgIH0pO1xuICAgIHRoaXMucHJvZ3Jlc3NDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIC8vIFJlc3VsdHMgY29udGFpbmVyXG4gICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyID0gY29udGVudEVsLmNyZWF0ZUVsKCdkaXYnLCB7IFxuICAgICAgY2xzOiAndmF1bHRwaWxvdC1yZXN1bHRzLWNvbnRhaW5lcidcbiAgICB9KTtcbiAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIC8vIEZvY3VzIHRoZSBnb2FsIGlucHV0XG4gICAgdGhpcy5nb2FsSW5wdXQuZm9jdXMoKTtcblxuICAgIHRoaXMuYWRkU3R5bGVzKCk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGV4ZWN1dGVXb3JrZmxvdyhpbmNsdWRlQWN0aXZlRmlsZTogYm9vbGVhbiwgaW5jbHVkZUFsbEZpbGVzOiBib29sZWFuKSB7XG4gICAgY29uc3QgZ29hbCA9IHRoaXMuZ29hbElucHV0LnZhbHVlLnRyaW0oKTtcbiAgICBpZiAoIWdvYWwpIHtcbiAgICAgIG5ldyBOb3RpY2UoJ1BsZWFzZSBlbnRlciBhIGdvYWwgZm9yIHRoZSB3b3JrZmxvdycpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuaXNFeGVjdXRpbmcgPSB0cnVlO1xuICAgIHRoaXMuZXhlY3V0ZUJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgdGhpcy5leGVjdXRlQnV0dG9uLnRleHRDb250ZW50ID0gJ0V4ZWN1dGluZy4uLic7XG4gICAgdGhpcy5wcm9ncmVzc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgIHRyeSB7XG4gICAgICAvLyBQcmVwYXJlIHZhdWx0IGNvbnRlbnRcbiAgICAgIGxldCB2YXVsdENvbnRlbnQgPSAnJztcbiAgICAgIFxuICAgICAgaWYgKGluY2x1ZGVBY3RpdmVGaWxlKSB7XG4gICAgICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoYWN0aXZlRmlsZSkge1xuICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGFjdGl2ZUZpbGUpO1xuICAgICAgICAgIHZhdWx0Q29udGVudCArPSBgPT09ICR7YWN0aXZlRmlsZS5uYW1lfSA9PT1cXG4ke2NvbnRlbnR9XFxuXFxuYDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaW5jbHVkZUFsbEZpbGVzKSB7XG4gICAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMuc2xpY2UoMCwgMjApKSB7IC8vIExpbWl0IHRvIGZpcnN0IDIwIGZpbGVzIHRvIGF2b2lkIG92ZXJ3aGVsbWluZyB0aGUgQVBJXG4gICAgICAgICAgY29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG4gICAgICAgICAgdmF1bHRDb250ZW50ICs9IGA9PT0gJHtmaWxlLm5hbWV9ID09PVxcbiR7Y29udGVudH1cXG5cXG5gO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIENyZWF0ZSB3b3JrZmxvdyByZXF1ZXN0XG4gICAgICBjb25zdCByZXF1ZXN0OiBXb3JrZmxvd1JlcXVlc3QgPSB7XG4gICAgICAgIGdvYWwsXG4gICAgICAgIGNvbnRleHQ6IHRoaXMuY29udGV4dElucHV0LnZhbHVlLnRyaW0oKSB8fCB1bmRlZmluZWQsXG4gICAgICAgIHZhdWx0X2NvbnRlbnQ6IHZhdWx0Q29udGVudCB8fCB1bmRlZmluZWRcbiAgICAgIH07XG5cbiAgICAgIC8vIFNldHVwIFdlYlNvY2tldCBsaXN0ZW5lciBmb3IgcHJvZ3Jlc3MgdXBkYXRlc1xuICAgICAgaWYgKHRoaXMucGx1Z2luLmlzV2ViU29ja2V0Q29ubmVjdGVkKCkpIHtcbiAgICAgICAgLy8gTGlzdGVuIGZvciB3b3JrZmxvdyBwcm9ncmVzcyB1cGRhdGVzXG4gICAgICAgIHRoaXMuc2V0dXBQcm9ncmVzc0xpc3RlbmVyKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIEV4ZWN1dGUgd29ya2Zsb3dcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBpQ2xpZW50IS5leGVjdXRlV29ya2Zsb3cocmVxdWVzdCk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzICYmIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5kaXNwbGF5UmVzdWx0cyhyZXNwb25zZS5kYXRhKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5lcnJvciB8fCAnV29ya2Zsb3cgZXhlY3V0aW9uIGZhaWxlZCcpO1xuICAgICAgfVxuXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTXNnID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcic7XG4gICAgICBuZXcgTm90aWNlKGBXb3JrZmxvdyBlcnJvcjogJHtlcnJvck1zZ31gKTtcbiAgICAgIHRoaXMuZGlzcGxheUVycm9yKGVycm9yTXNnKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdGhpcy5pc0V4ZWN1dGluZyA9IGZhbHNlO1xuICAgICAgdGhpcy5leGVjdXRlQnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmV4ZWN1dGVCdXR0b24udGV4dENvbnRlbnQgPSAnRXhlY3V0ZSBXb3JrZmxvdyc7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBzZXR1cFByb2dyZXNzTGlzdGVuZXIoKSB7XG4gICAgLy8gVGhpcyB3b3VsZCBiZSBjb25uZWN0ZWQgdG8gdGhlIFdlYlNvY2tldCBwcm9ncmVzcyB1cGRhdGVzXG4gICAgLy8gRm9yIG5vdywgd2UnbGwgc2ltdWxhdGUgcHJvZ3Jlc3NcbiAgICB0aGlzLmRpc3BsYXlQcm9ncmVzcygnQW5hbHl6aW5nIGdvYWwgYW5kIGNvbnRleHQuLi4nKTtcbiAgICBcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHRoaXMuZGlzcGxheVByb2dyZXNzKCdQbGFubmluZyB3b3JrZmxvdyBzdGVwcy4uLicpO1xuICAgIH0sIDEwMDApO1xuICAgIFxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5kaXNwbGF5UHJvZ3Jlc3MoJ0V4ZWN1dGluZyB3b3JrZmxvdy4uLicpO1xuICAgIH0sIDIwMDApO1xuICB9XG5cbiAgcHJpdmF0ZSBkaXNwbGF5UHJvZ3Jlc3MobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5wcm9ncmVzc0NvbnRhaW5lci5pbm5lckhUTUwgPSBgXG4gICAgICA8ZGl2IGNsYXNzPVwidmF1bHRwaWxvdC1wcm9ncmVzcy1pdGVtXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2YXVsdHBpbG90LXByb2dyZXNzLXNwaW5uZXJcIj48L2Rpdj5cbiAgICAgICAgPHNwYW4+JHttZXNzYWdlfTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGRpc3BsYXlSZXN1bHRzKHdvcmtmbG93OiBXb3JrZmxvd1Jlc3BvbnNlKSB7XG4gICAgdGhpcy5wcm9ncmVzc0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIHRoaXMucmVzdWx0c0NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblxuICAgIC8vIENsZWFyIHByZXZpb3VzIHJlc3VsdHNcbiAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuZW1wdHkoKTtcblxuICAgIC8vIEhlYWRlclxuICAgIGNvbnN0IGhlYWRlckVsID0gdGhpcy5yZXN1bHRzQ29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3QtcmVzdWx0cy1oZWFkZXInIH0pO1xuICAgIGhlYWRlckVsLmNyZWF0ZUVsKCdoMycsIHsgdGV4dDogJ+KchSBXb3JrZmxvdyBDb21wbGV0ZWQnIH0pO1xuICAgIGhlYWRlckVsLmNyZWF0ZUVsKCdwJywgeyBcbiAgICAgIHRleHQ6IGBFeGVjdXRpb24gdGltZTogJHt3b3JrZmxvdy5leGVjdXRpb25fdGltZX1zYCxcbiAgICAgIGNsczogJ3ZhdWx0cGlsb3QtZXhlY3V0aW9uLXRpbWUnXG4gICAgfSk7XG5cbiAgICAvLyBNYWluIHJlc3VsdFxuICAgIGNvbnN0IHJlc3VsdEVsID0gdGhpcy5yZXN1bHRzQ29udGFpbmVyLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3QtcmVzdWx0LWNvbnRlbnQnIH0pO1xuICAgIHJlc3VsdEVsLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ1Jlc3VsdCcgfSk7XG4gICAgY29uc3QgcmVzdWx0Q29udGVudEVsID0gcmVzdWx0RWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndmF1bHRwaWxvdC1yZXN1bHQtdGV4dCcgfSk7XG4gICAgcmVzdWx0Q29udGVudEVsLmlubmVySFRNTCA9IHRoaXMucmVuZGVyTWFya2Rvd24od29ya2Zsb3cucmVzdWx0KTtcblxuICAgIC8vIFN0ZXBzIHRha2VuXG4gICAgaWYgKHdvcmtmbG93LnN0ZXBzX3Rha2VuICYmIHdvcmtmbG93LnN0ZXBzX3Rha2VuLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IHN0ZXBzRWwgPSB0aGlzLnJlc3VsdHNDb250YWluZXIuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAndmF1bHRwaWxvdC1zdGVwcy1jb250YWluZXInIH0pO1xuICAgICAgc3RlcHNFbC5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdTdGVwcyBUYWtlbicgfSk7XG4gICAgICBjb25zdCBzdGVwc0xpc3QgPSBzdGVwc0VsLmNyZWF0ZUVsKCdvbCcsIHsgY2xzOiAndmF1bHRwaWxvdC1zdGVwcy1saXN0JyB9KTtcbiAgICAgIHdvcmtmbG93LnN0ZXBzX3Rha2VuLmZvckVhY2goc3RlcCA9PiB7XG4gICAgICAgIHN0ZXBzTGlzdC5jcmVhdGVFbCgnbGknLCB7IHRleHQ6IHN0ZXAgfSk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBcnRpZmFjdHNcbiAgICBpZiAod29ya2Zsb3cuYXJ0aWZhY3RzICYmIHdvcmtmbG93LmFydGlmYWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBhcnRpZmFjdHNFbCA9IHRoaXMucmVzdWx0c0NvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LWFydGlmYWN0cy1jb250YWluZXInIH0pO1xuICAgICAgYXJ0aWZhY3RzRWwuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnR2VuZXJhdGVkIEFydGlmYWN0cycgfSk7XG4gICAgICBcbiAgICAgIHdvcmtmbG93LmFydGlmYWN0cy5mb3JFYWNoKChhcnRpZmFjdCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgYXJ0aWZhY3RFbCA9IGFydGlmYWN0c0VsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3ZhdWx0cGlsb3QtYXJ0aWZhY3QnIH0pO1xuICAgICAgICBhcnRpZmFjdEVsLmNyZWF0ZUVsKCdoNScsIHsgdGV4dDogYXJ0aWZhY3QudGl0bGUgfSk7XG4gICAgICAgIGFydGlmYWN0RWwuY3JlYXRlRWwoJ3AnLCB7IFxuICAgICAgICAgIHRleHQ6IGBUeXBlOiAke2FydGlmYWN0LnR5cGV9YCxcbiAgICAgICAgICBjbHM6ICd2YXVsdHBpbG90LWFydGlmYWN0LXR5cGUnXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgc2F2ZUJ1dHRvbiA9IGFydGlmYWN0RWwuY3JlYXRlRWwoJ2J1dHRvbicsIHtcbiAgICAgICAgICB0ZXh0OiAnU2F2ZSBhcyBOb3RlJyxcbiAgICAgICAgICBjbHM6ICdtb2QtY3RhJ1xuICAgICAgICB9KTtcbiAgICAgICAgc2F2ZUJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy5zYXZlQXJ0aWZhY3RBc05vdGUoYXJ0aWZhY3QsIGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFNhdmUgYWxsIGJ1dHRvblxuICAgIGNvbnN0IGFjdGlvbnNFbCA9IHRoaXMucmVzdWx0c0NvbnRhaW5lci5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICd2YXVsdHBpbG90LXJlc3VsdHMtYWN0aW9ucycgfSk7XG4gICAgY29uc3Qgc2F2ZUFsbEJ1dHRvbiA9IGFjdGlvbnNFbC5jcmVhdGVFbCgnYnV0dG9uJywge1xuICAgICAgdGV4dDogJ1NhdmUgQ29tcGxldGUgUmVzdWx0cyBhcyBOb3RlJyxcbiAgICAgIGNsczogJ21vZC1jdGEnXG4gICAgfSk7XG4gICAgc2F2ZUFsbEJ1dHRvbi5vbmNsaWNrID0gKCkgPT4gdGhpcy5zYXZlQ29tcGxldGVSZXN1bHRzQXNOb3RlKHdvcmtmbG93KTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2F2ZUFydGlmYWN0QXNOb3RlKGFydGlmYWN0OiBhbnksIGluZGV4OiBudW1iZXIpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgZmlsZW5hbWUgPSBgJHthcnRpZmFjdC50aXRsZS5yZXBsYWNlKC9bXmEtekEtWjAtOVxcc10vZywgJycpfS5tZGA7XG4gICAgICBjb25zdCBjb250ZW50ID0gYCMgJHthcnRpZmFjdC50aXRsZX1cXG5cXG4ke2FydGlmYWN0LmNvbnRlbnR9YDtcbiAgICAgIFxuICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKGZpbGVuYW1lLCBjb250ZW50KTtcbiAgICAgIG5ldyBOb3RpY2UoYEFydGlmYWN0IHNhdmVkIGFzICR7ZmlsZW5hbWV9YCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG5ldyBOb3RpY2UoYEZhaWxlZCB0byBzYXZlIGFydGlmYWN0OiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgc2F2ZUNvbXBsZXRlUmVzdWx0c0FzTm90ZSh3b3JrZmxvdzogV29ya2Zsb3dSZXNwb25zZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc3BsaXQoJ1QnKVswXTtcbiAgICAgIGNvbnN0IGZpbGVuYW1lID0gYFZhdWx0UGlsb3QgV29ya2Zsb3cgUmVzdWx0cyAke3RpbWVzdGFtcH0ubWRgO1xuICAgICAgXG4gICAgICBsZXQgY29udGVudCA9IGAjIFZhdWx0UGlsb3QgV29ya2Zsb3cgUmVzdWx0c1xcblxcbmA7XG4gICAgICBjb250ZW50ICs9IGAqKkdvYWw6KiogJHt0aGlzLmdvYWxJbnB1dC52YWx1ZX1cXG5cXG5gO1xuICAgICAgY29udGVudCArPSBgKipFeGVjdXRpb24gVGltZToqKiAke3dvcmtmbG93LmV4ZWN1dGlvbl90aW1lfXNcXG5cXG5gO1xuICAgICAgY29udGVudCArPSBgIyMgUmVzdWx0XFxuXFxuJHt3b3JrZmxvdy5yZXN1bHR9XFxuXFxuYDtcbiAgICAgIFxuICAgICAgaWYgKHdvcmtmbG93LnN0ZXBzX3Rha2VuICYmIHdvcmtmbG93LnN0ZXBzX3Rha2VuLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29udGVudCArPSBgIyMgU3RlcHMgVGFrZW5cXG5cXG5gO1xuICAgICAgICB3b3JrZmxvdy5zdGVwc190YWtlbi5mb3JFYWNoKChzdGVwLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnRlbnQgKz0gYCR7aW5kZXggKyAxfS4gJHtzdGVwfVxcbmA7XG4gICAgICAgIH0pO1xuICAgICAgICBjb250ZW50ICs9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICBpZiAod29ya2Zsb3cuYXJ0aWZhY3RzICYmIHdvcmtmbG93LmFydGlmYWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gYCMjIEdlbmVyYXRlZCBBcnRpZmFjdHNcXG5cXG5gO1xuICAgICAgICB3b3JrZmxvdy5hcnRpZmFjdHMuZm9yRWFjaChhcnRpZmFjdCA9PiB7XG4gICAgICAgICAgY29udGVudCArPSBgIyMjICR7YXJ0aWZhY3QudGl0bGV9XFxuXFxuJHthcnRpZmFjdC5jb250ZW50fVxcblxcbmA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUoZmlsZW5hbWUsIGNvbnRlbnQpO1xuICAgICAgbmV3IE5vdGljZShgQ29tcGxldGUgcmVzdWx0cyBzYXZlZCBhcyAke2ZpbGVuYW1lfWApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBuZXcgTm90aWNlKGBGYWlsZWQgdG8gc2F2ZSByZXN1bHRzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgZGlzcGxheUVycm9yKG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHRoaXMucHJvZ3Jlc3NDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICB0aGlzLnJlc3VsdHNDb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgdGhpcy5yZXN1bHRzQ29udGFpbmVyLmlubmVySFRNTCA9IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJ2YXVsdHBpbG90LWVycm9yXCI+XG4gICAgICAgIDxoMz7inYwgV29ya2Zsb3cgRmFpbGVkPC9oMz5cbiAgICAgICAgPHA+JHttZXNzYWdlfTwvcD5cbiAgICAgIDwvZGl2PlxuICAgIGA7XG4gIH1cblxuICBwcml2YXRlIHJlbmRlck1hcmtkb3duKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRleHRcbiAgICAgIC5yZXBsYWNlKC9cXCpcXCooLio/KVxcKlxcKi9nLCAnPHN0cm9uZz4kMTwvc3Ryb25nPicpXG4gICAgICAucmVwbGFjZSgvXFwqKC4qPylcXCovZywgJzxlbT4kMTwvZW0+JylcbiAgICAgIC5yZXBsYWNlKC9gKC4qPylgL2csICc8Y29kZT4kMTwvY29kZT4nKVxuICAgICAgLnJlcGxhY2UoL1xcbi9nLCAnPGJyPicpO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRTdHlsZXMoKSB7XG4gICAgaWYgKCFkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndmF1bHRwaWxvdC13b3JrZmxvdy1zdHlsZXMnKSkge1xuICAgICAgY29uc3Qgc3R5bGVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICBzdHlsZUVsLmlkID0gJ3ZhdWx0cGlsb3Qtd29ya2Zsb3ctc3R5bGVzJztcbiAgICAgIHN0eWxlRWwudGV4dENvbnRlbnQgPSBgXG4gICAgICAgIC52YXVsdHBpbG90LXdvcmtmbG93LW1vZGFsIHtcbiAgICAgICAgICB3aWR0aDogNzAwcHg7XG4gICAgICAgICAgbWF4LWhlaWdodDogODB2aDtcbiAgICAgICAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXdvcmtmbG93LWhlYWRlciB7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTVweDtcbiAgICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXdvcmtmbG93LWRlc2NyaXB0aW9uIHtcbiAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG4gICAgICAgICAgbWFyZ2luLXRvcDogNXB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LWZvcm0tZ3JvdXAge1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtZm9ybS1sYWJlbCB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICAgICAgICAgIGZvbnQtd2VpZ2h0OiA1MDA7XG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbm9ybWFsKTtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1nb2FsLWlucHV0LFxuICAgICAgICAudmF1bHRwaWxvdC1jb250ZXh0LWlucHV0IHtcbiAgICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgICBtaW4taGVpZ2h0OiA4MHB4O1xuICAgICAgICAgIHBhZGRpbmc6IDEwcHg7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDZweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG4gICAgICAgICAgcmVzaXplOiB2ZXJ0aWNhbDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1jaGVja2JveC1sYWJlbCB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogOHB4O1xuICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1jaGVja2JveC1sYWJlbCBpbnB1dCB7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiA4cHg7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtZXhlY3V0ZS1idXR0b24ge1xuICAgICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICAgIHBhZGRpbmc6IDEycHg7XG4gICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXByb2dyZXNzLWNvbnRhaW5lciB7XG4gICAgICAgICAgbWFyZ2luOiAyMHB4IDA7XG4gICAgICAgICAgcGFkZGluZzogMTVweDtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXNlY29uZGFyeSk7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1wcm9ncmVzcy1pdGVtIHtcbiAgICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgICAgZ2FwOiAxMHB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXByb2dyZXNzLXNwaW5uZXIge1xuICAgICAgICAgIHdpZHRoOiAxNnB4O1xuICAgICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgICBib3JkZXI6IDJweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG4gICAgICAgICAgYm9yZGVyLXRvcDogMnB4IHNvbGlkIHZhcigtLXRleHQtYWNjZW50KTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gICAgICAgICAgYW5pbWF0aW9uOiBzcGluIDFzIGxpbmVhciBpbmZpbml0ZTtcbiAgICAgICAgfVxuICAgICAgICBAa2V5ZnJhbWVzIHNwaW4ge1xuICAgICAgICAgIDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7IH1cbiAgICAgICAgICAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTsgfVxuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXJlc3VsdHMtY29udGFpbmVyIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAyMHB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXJlc3VsdHMtaGVhZGVyIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LWV4ZWN1dGlvbi10aW1lIHtcbiAgICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG4gICAgICAgICAgZm9udC1zaXplOiAwLjllbTtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1yZXN1bHQtY29udGVudCB7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMjBweDtcbiAgICAgICAgICBwYWRkaW5nOiAxNXB4O1xuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA4cHg7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXJlc3VsdC10ZXh0IHtcbiAgICAgICAgICBsaW5lLWhlaWdodDogMS41O1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3Qtc3RlcHMtY29udGFpbmVyLFxuICAgICAgICAudmF1bHRwaWxvdC1hcnRpZmFjdHMtY29udGFpbmVyIHtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LXN0ZXBzLWxpc3Qge1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1hcnRpZmFjdCB7XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTVweDtcbiAgICAgICAgICBwYWRkaW5nOiAxMHB4O1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcbiAgICAgICAgICBib3JkZXItcmFkaXVzOiA2cHg7XG4gICAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5LWFsdCk7XG4gICAgICAgIH1cbiAgICAgICAgLnZhdWx0cGlsb3QtYXJ0aWZhY3QtdHlwZSB7XG4gICAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuICAgICAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcbiAgICAgICAgfVxuICAgICAgICAudmF1bHRwaWxvdC1yZXN1bHRzLWFjdGlvbnMge1xuICAgICAgICAgIG1hcmdpbi10b3A6IDIwcHg7XG4gICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB9XG4gICAgICAgIC52YXVsdHBpbG90LWVycm9yIHtcbiAgICAgICAgICBwYWRkaW5nOiAyMHB4O1xuICAgICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeS1hbHQpO1xuICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWNvbG9yLXJlZCk7XG4gICAgICAgICAgYm9yZGVyLXJhZGl1czogOHB4O1xuICAgICAgICAgIGNvbG9yOiB2YXIoLS1jb2xvci1yZWQpO1xuICAgICAgICB9XG4gICAgICBgO1xuICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZUVsKTtcbiAgICB9XG4gIH1cblxuICBvbkNsb3NlKCkge1xuICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgIGNvbnRlbnRFbC5lbXB0eSgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBcbiAgQVBJUmVzcG9uc2UsIFxuICBDaGF0UmVxdWVzdCwgXG4gIENoYXRSZXNwb25zZSwgXG4gIENvbnZlcnNhdGlvbkhpc3RvcnksXG4gIENvcGlsb3RSZXF1ZXN0LCBcbiAgQ29waWxvdFJlc3BvbnNlLFxuICBXb3JrZmxvd1JlcXVlc3QsXG4gIFdvcmtmbG93UmVzcG9uc2UsXG4gIEFnZW50LFxuICBBZ2VudENyZWF0ZVJlcXVlc3QsXG4gIEFnZW50RXhlY3V0ZVJlcXVlc3QsXG4gIFZhdWx0Q29udGV4dFJlcXVlc3QsXG4gIFZhdWx0Q29udGV4dFJlc3BvbnNlLFxuICBUYXNrUGxhbm5pbmdSZXF1ZXN0LFxuICBUYXNrUGxhbm5pbmdSZXNwb25zZSxcbiAgSW50ZWxsaWdlbmNlUGFyc2VSZXF1ZXN0LFxuICBJbnRlbGxpZ2VuY2VQYXJzZVJlc3BvbnNlLFxuICBNZW1vcnlVcGRhdGVSZXF1ZXN0LFxuICBXZWJTb2NrZXRNZXNzYWdlLFxuICBFcnJvclJlc3BvbnNlXG59IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgRXZvQWdlbnRYQ2xpZW50IHtcbiAgcHJpdmF0ZSBiYXNlVXJsOiBzdHJpbmc7XG4gIHByaXZhdGUgYXBpS2V5Pzogc3RyaW5nO1xuICBwcml2YXRlIHdlYnNvY2tldD86IFdlYlNvY2tldDtcbiAgcHJpdmF0ZSB3c0NhbGxiYWNrczogTWFwPHN0cmluZywgKGRhdGE6IGFueSkgPT4gdm9pZD4gPSBuZXcgTWFwKCk7XG5cbiAgY29uc3RydWN0b3IoYmFzZVVybDogc3RyaW5nLCBhcGlLZXk/OiBzdHJpbmcpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSBiYXNlVXJsLnJlcGxhY2UoL1xcLyQvLCAnJyk7IC8vIFJlbW92ZSB0cmFpbGluZyBzbGFzaFxuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5O1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBtYWtlUmVxdWVzdDxUPihcbiAgICBlbmRwb2ludDogc3RyaW5nLCBcbiAgICBvcHRpb25zOiBSZXF1ZXN0SW5pdCA9IHt9XG4gICk6IFByb21pc2U8QVBJUmVzcG9uc2U8VD4+IHtcbiAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmJhc2VVcmx9JHtlbmRwb2ludH1gO1xuICAgIGNvbnN0IGhlYWRlcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG4gICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgIC4uLihvcHRpb25zLmhlYWRlcnMgYXMgUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8fCB7fSksXG4gICAgfTtcblxuICAgIGlmICh0aGlzLmFwaUtleSkge1xuICAgICAgaGVhZGVyc1snQXV0aG9yaXphdGlvbiddID0gYEJlYXJlciAke3RoaXMuYXBpS2V5fWA7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIG1vZGU6ICdjb3JzJyxcbiAgICAgICAgY3JlZGVudGlhbHM6ICdvbWl0JyxcbiAgICAgIH0pO1xuXG4gICAgICAvLyBIYW5kbGUgbm9uLUpTT04gcmVzcG9uc2VzIGdyYWNlZnVsbHlcbiAgICAgIGxldCBkYXRhO1xuICAgICAgY29uc3QgY29udGVudFR5cGUgPSByZXNwb25zZS5oZWFkZXJzLmdldCgnY29udGVudC10eXBlJyk7XG4gICAgICBpZiAoY29udGVudFR5cGUgJiYgY29udGVudFR5cGUuaW5jbHVkZXMoJ2FwcGxpY2F0aW9uL2pzb24nKSkge1xuICAgICAgICBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSB0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgZGF0YS5lcnJvciBcbiAgICAgICAgICA/IGRhdGEuZXJyb3IgXG4gICAgICAgICAgOiBgSFRUUCAke3Jlc3BvbnNlLnN0YXR1c306ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gO1xuICAgICAgICBcbiAgICAgICAgY29uc29sZS5lcnJvcihgQVBJIEVycm9yIFske3Jlc3BvbnNlLnN0YXR1c31dOmAsIGVycm9yTWVzc2FnZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgZXJyb3I6IGVycm9yTWVzc2FnZSxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgZGF0YTogdHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnID8geyBtZXNzYWdlOiBkYXRhIH0gYXMgVCA6IGRhdGEsXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdBUEkgUmVxdWVzdCBFcnJvcjonLCBlcnJvcik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3Igb2NjdXJyZWQnLFxuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyBIZWFsdGggY2hlY2tcbiAgYXN5bmMgaGVhbHRoQ2hlY2soKTogUHJvbWlzZTxBUElSZXNwb25zZTx7IHN0YXR1czogc3RyaW5nOyB2ZXJzaW9uOiBzdHJpbmcgfT4+IHtcbiAgICBjb25zb2xlLmxvZyhgVmF1bHRQaWxvdDogQXR0ZW1wdGluZyBoZWFsdGggY2hlY2sgdG8gJHt0aGlzLmJhc2VVcmx9L2FwaS9vYnNpZGlhbi9oZWFsdGhgKTtcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0PHsgc3RhdHVzOiBzdHJpbmc7IHZlcnNpb246IHN0cmluZyB9PignL2FwaS9vYnNpZGlhbi9oZWFsdGgnLCB7XG4gICAgICBtZXRob2Q6ICdHRVQnLFxuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKCdWYXVsdFBpbG90OiBIZWFsdGggY2hlY2sgcmVzdWx0OicsIHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIEFsdGVybmF0aXZlIGhlYWx0aCBjaGVjayBtZXRob2QgaWYgdGhlIG1haW4gb25lIGZhaWxzXG4gIGFzeW5jIHNpbXBsZUhlYWx0aENoZWNrKCk6IFByb21pc2U8QVBJUmVzcG9uc2U8eyBzdGF0dXM6IHN0cmluZyB9Pj4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1cmwgPSBgJHt0aGlzLmJhc2VVcmx9L2FwaS9vYnNpZGlhbi9oZWFsdGhgO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcbiAgICAgICAgbWV0aG9kOiAnSEVBRCcsXG4gICAgICAgIG1vZGU6ICdjb3JzJyxcbiAgICAgICAgY3JlZGVudGlhbHM6ICdvbWl0JyxcbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBpZiAocmVzcG9uc2Uub2sgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSA0MDUpIHsgLy8gNDA1IG1lYW5zIHNlcnZlciBpcyB1cCBidXQgZG9lc24ndCBzdXBwb3J0IEhFQURcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgIGRhdGE6IHsgc3RhdHVzOiAnb2snIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIGVycm9yOiBgU2VydmVyIHJlc3BvbmRlZCB3aXRoIHN0YXR1cyAke3Jlc3BvbnNlLnN0YXR1c31gXG4gICAgICB9O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0Nvbm5lY3Rpb24gZmFpbGVkJ1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICAvLyBDaGF0IGZ1bmN0aW9uYWxpdHlcbiAgYXN5bmMgY2hhdChyZXF1ZXN0OiBDaGF0UmVxdWVzdCk6IFByb21pc2U8QVBJUmVzcG9uc2U8Q2hhdFJlc3BvbnNlPj4ge1xuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KCcvYXBpL29ic2lkaWFuL2NoYXQnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLFxuICAgIH0pO1xuICB9XG5cbiAgYXN5bmMgZ2V0Q29udmVyc2F0aW9uSGlzdG9yeShjb252ZXJzYXRpb25JZD86IHN0cmluZyk6IFByb21pc2U8QVBJUmVzcG9uc2U8Q29udmVyc2F0aW9uSGlzdG9yeVtdPj4ge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gY29udmVyc2F0aW9uSWQgXG4gICAgICA/IGAvYXBpL29ic2lkaWFuL2NvbnZlcnNhdGlvbi9oaXN0b3J5P2NvbnZlcnNhdGlvbl9pZD0ke2NvbnZlcnNhdGlvbklkfWBcbiAgICAgIDogJy9hcGkvb2JzaWRpYW4vY29udmVyc2F0aW9uL2hpc3RvcnknO1xuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KGVuZHBvaW50LCB7IG1ldGhvZDogJ1BPU1QnIH0pO1xuICB9XG5cbiAgYXN5bmMgZGVsZXRlQ29udmVyc2F0aW9uKGNvbnZlcnNhdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPEFQSVJlc3BvbnNlPHZvaWQ+PiB7XG4gICAgcmV0dXJuIHRoaXMubWFrZVJlcXVlc3QoYC9hcGkvb2JzaWRpYW4vY29udmVyc2F0aW9ucy8ke2NvbnZlcnNhdGlvbklkfWAsIHtcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXG4gICAgfSk7XG4gIH1cblxuICAvLyBDb3BpbG90IGZ1bmN0aW9uYWxpdHlcbiAgYXN5bmMgZ2V0Q29waWxvdENvbXBsZXRpb24ocmVxdWVzdDogQ29waWxvdFJlcXVlc3QpOiBQcm9taXNlPEFQSVJlc3BvbnNlPENvcGlsb3RSZXNwb25zZT4+IHtcbiAgICByZXR1cm4gdGhpcy5tYWtlUmVxdWVzdCgnL2FwaS9vYnNpZGlhbi9jb3BpbG90L2NvbXBsZXRlJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFdvcmtmbG93IGV4ZWN1dGlvblxuICBhc3luYyBleGVjdXRlV29ya2Zsb3cocmVxdWVzdDogV29ya2Zsb3dSZXF1ZXN0KTogUHJvbWlzZTxBUElSZXNwb25zZTxXb3JrZmxvd1Jlc3BvbnNlPj4ge1xuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KCcvYXBpL29ic2lkaWFuL3dvcmtmbG93Jywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEFnZW50IG1hbmFnZW1lbnRcbiAgYXN5bmMgZ2V0QWdlbnRzKCk6IFByb21pc2U8QVBJUmVzcG9uc2U8QWdlbnRbXT4+IHtcbiAgICByZXR1cm4gdGhpcy5tYWtlUmVxdWVzdCgnL2FwaS9vYnNpZGlhbi9hZ2VudHMnKTtcbiAgfVxuXG4gIGFzeW5jIGNyZWF0ZUFnZW50KHJlcXVlc3Q6IEFnZW50Q3JlYXRlUmVxdWVzdCk6IFByb21pc2U8QVBJUmVzcG9uc2U8QWdlbnQ+PiB7XG4gICAgcmV0dXJuIHRoaXMubWFrZVJlcXVlc3QoJy9hcGkvb2JzaWRpYW4vYWdlbnRzL2NyZWF0ZScsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdCksXG4gICAgfSk7XG4gIH1cblxuICBhc3luYyBleGVjdXRlQWdlbnQocmVxdWVzdDogQWdlbnRFeGVjdXRlUmVxdWVzdCk6IFByb21pc2U8QVBJUmVzcG9uc2U8YW55Pj4ge1xuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KCcvYXBpL29ic2lkaWFuL2FnZW50L2V4ZWN1dGUnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gVmF1bHQgYW5hbHlzaXNcbiAgYXN5bmMgYW5hbHl6ZVZhdWx0Q29udGV4dChyZXF1ZXN0OiBWYXVsdENvbnRleHRSZXF1ZXN0KTogUHJvbWlzZTxBUElSZXNwb25zZTxWYXVsdENvbnRleHRSZXNwb25zZT4+IHtcbiAgICByZXR1cm4gdGhpcy5tYWtlUmVxdWVzdCgnL2FwaS9vYnNpZGlhbi92YXVsdC9jb250ZXh0Jywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIFRhc2sgcGxhbm5pbmdcbiAgYXN5bmMgcGxhblRhc2tzKHJlcXVlc3Q6IFRhc2tQbGFubmluZ1JlcXVlc3QpOiBQcm9taXNlPEFQSVJlc3BvbnNlPFRhc2tQbGFubmluZ1Jlc3BvbnNlPj4ge1xuICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KCcvYXBpL29ic2lkaWFuL3BsYW5uaW5nL3Rhc2tzJywge1xuICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShyZXF1ZXN0KSxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEludGVsbGlnZW5jZSBwYXJzaW5nXG4gIGFzeW5jIHBhcnNlSW50ZWxsaWdlbmNlKHJlcXVlc3Q6IEludGVsbGlnZW5jZVBhcnNlUmVxdWVzdCk6IFByb21pc2U8QVBJUmVzcG9uc2U8SW50ZWxsaWdlbmNlUGFyc2VSZXNwb25zZT4+IHtcbiAgICByZXR1cm4gdGhpcy5tYWtlUmVxdWVzdCgnL2FwaS9vYnNpZGlhbi9pbnRlbGxpZ2VuY2UvcGFyc2UnLCB7XG4gICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHJlcXVlc3QpLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gTWVtb3J5IG1hbmFnZW1lbnRcbiAgYXN5bmMgdXBkYXRlTWVtb3J5KHJlcXVlc3Q6IE1lbW9yeVVwZGF0ZVJlcXVlc3QpOiBQcm9taXNlPEFQSVJlc3BvbnNlPHZvaWQ+PiB7XG4gICAgcmV0dXJuIHRoaXMubWFrZVJlcXVlc3QoJy9hcGkvb2JzaWRpYW4vbWVtb3J5L3VwZGF0ZScsIHtcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdCksXG4gICAgfSk7XG4gIH1cblxuICAvLyBXZWJTb2NrZXQgZnVuY3Rpb25hbGl0eVxuICBjb25uZWN0V2ViU29ja2V0KGNhbGxiYWNrczoge1xuICAgIG9uQ2hhdD86IChkYXRhOiBhbnkpID0+IHZvaWQ7XG4gICAgb25Xb3JrZmxvd1Byb2dyZXNzPzogKGRhdGE6IGFueSkgPT4gdm9pZDtcbiAgICBvbkNvcGlsb3Q/OiAoZGF0YTogYW55KSA9PiB2b2lkO1xuICAgIG9uVmF1bHRTeW5jPzogKGRhdGE6IGFueSkgPT4gdm9pZDtcbiAgICBvbkVycm9yPzogKGVycm9yOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgb25Db25uZWN0PzogKCkgPT4gdm9pZDtcbiAgICBvbkRpc2Nvbm5lY3Q/OiAoKSA9PiB2b2lkO1xuICB9KTogdm9pZCB7XG4gICAgY29uc3Qgd3NVcmwgPSB0aGlzLmJhc2VVcmwucmVwbGFjZSgnaHR0cCcsICd3cycpICsgJy93cy9vYnNpZGlhbic7XG4gICAgY29uc29sZS5sb2coYFZhdWx0UGlsb3Q6IEF0dGVtcHRpbmcgV2ViU29ja2V0IGNvbm5lY3Rpb24gdG8gJHt3c1VybH1gKTtcbiAgICBcbiAgICB0aGlzLndlYnNvY2tldCA9IG5ldyBXZWJTb2NrZXQod3NVcmwpO1xuXG4gICAgdGhpcy53ZWJzb2NrZXQub25vcGVuID0gKCkgPT4ge1xuICAgICAgY29uc29sZS5sb2coJ1ZhdWx0UGlsb3Q6IFdlYlNvY2tldCBjb25uZWN0ZWQgdG8gRXZvQWdlbnRYJyk7XG4gICAgICBjYWxsYmFja3Mub25Db25uZWN0Py4oKTtcbiAgICB9O1xuXG4gICAgdGhpcy53ZWJzb2NrZXQub25tZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBtZXNzYWdlOiBXZWJTb2NrZXRNZXNzYWdlID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTtcbiAgICAgICAgY29uc29sZS5sb2coJ1ZhdWx0UGlsb3Q6IFdlYlNvY2tldCBtZXNzYWdlIHJlY2VpdmVkOicsIG1lc3NhZ2UudHlwZSk7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKG1lc3NhZ2UudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2NoYXQnOlxuICAgICAgICAgICAgY2FsbGJhY2tzLm9uQ2hhdD8uKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd3b3JrZmxvd19wcm9ncmVzcyc6XG4gICAgICAgICAgICBjYWxsYmFja3Mub25Xb3JrZmxvd1Byb2dyZXNzPy4obWVzc2FnZS5kYXRhKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2NvcGlsb3QnOlxuICAgICAgICAgICAgY2FsbGJhY2tzLm9uQ29waWxvdD8uKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICd2YXVsdF9zeW5jJzpcbiAgICAgICAgICAgIGNhbGxiYWNrcy5vblZhdWx0U3luYz8uKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICBjYWxsYmFja3Mub25FcnJvcj8uKG1lc3NhZ2UuZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignVmF1bHRQaWxvdDogRXJyb3IgcGFyc2luZyBXZWJTb2NrZXQgbWVzc2FnZTonLCBlcnJvcik7XG4gICAgICAgIGNhbGxiYWNrcy5vbkVycm9yPy4oJ0ZhaWxlZCB0byBwYXJzZSBXZWJTb2NrZXQgbWVzc2FnZScpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLndlYnNvY2tldC5vbmNsb3NlID0gKGV2ZW50KSA9PiB7XG4gICAgICBjb25zb2xlLmxvZygnVmF1bHRQaWxvdDogV2ViU29ja2V0IGRpc2Nvbm5lY3RlZCBmcm9tIEV2b0FnZW50WCcsIGV2ZW50LmNvZGUsIGV2ZW50LnJlYXNvbik7XG4gICAgICBjYWxsYmFja3Mub25EaXNjb25uZWN0Py4oKTtcbiAgICB9O1xuXG4gICAgdGhpcy53ZWJzb2NrZXQub25lcnJvciA9IChlcnJvcikgPT4ge1xuICAgICAgY29uc29sZS5lcnJvcignVmF1bHRQaWxvdDogV2ViU29ja2V0IGVycm9yOicsIGVycm9yKTtcbiAgICAgIGNhbGxiYWNrcy5vbkVycm9yPy4oJ1dlYlNvY2tldCBjb25uZWN0aW9uIGVycm9yJyk7XG4gICAgfTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RXZWJTb2NrZXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMud2Vic29ja2V0KSB7XG4gICAgICB0aGlzLndlYnNvY2tldC5jbG9zZSgpO1xuICAgICAgdGhpcy53ZWJzb2NrZXQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgc2VuZFdlYlNvY2tldE1lc3NhZ2UodHlwZTogc3RyaW5nLCBkYXRhOiBhbnkpOiB2b2lkIHtcbiAgICBpZiAodGhpcy53ZWJzb2NrZXQgJiYgdGhpcy53ZWJzb2NrZXQucmVhZHlTdGF0ZSA9PT0gV2ViU29ja2V0Lk9QRU4pIHtcbiAgICAgIHRoaXMud2Vic29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoeyB0eXBlLCBkYXRhIH0pKTtcbiAgICB9XG4gIH1cblxuICBpc1dlYlNvY2tldENvbm5lY3RlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy53ZWJzb2NrZXQ/LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOO1xuICB9XG59XG4iLCJpbXBvcnQgeyBQbHVnaW4sIE5vdGljZSwgRWRpdG9yLCBNYXJrZG93blZpZXcsIFRGaWxlLCBFZGl0b3JQb3NpdGlvbiB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IFZhdWx0UGlsb3RTZXR0aW5nVGFiLCBERUZBVUxUX1NFVFRJTkdTIH0gZnJvbSAnLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBWSUVXX1RZUEVfVkFVTFRQSUxPVCwgVmF1bHRQaWxvdFZpZXcgfSBmcm9tICcuL3ZpZXcnO1xuaW1wb3J0IHsgQ2hhdE1vZGFsIH0gZnJvbSAnLi9jaGF0LW1vZGFsJztcbmltcG9ydCB7IFdvcmtmbG93TW9kYWwgfSBmcm9tICcuL3dvcmtmbG93LW1vZGFsJztcbmltcG9ydCB7IEV2b0FnZW50WENsaWVudCB9IGZyb20gJy4vYXBpLWNsaWVudCc7XG5pbXBvcnQgeyBWYXVsdFBpbG90U2V0dGluZ3MsIENvcGlsb3RSZXNwb25zZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWYXVsdFBpbG90UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgc2V0dGluZ3MhOiBWYXVsdFBpbG90U2V0dGluZ3M7XG4gIGFwaUNsaWVudCE6IEV2b0FnZW50WENsaWVudDtcbiAgcHJpdmF0ZSB3ZWJzb2NrZXRDb25uZWN0ZWQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBjb3BpbG90RW5hYmxlZCA9IGZhbHNlO1xuXG4gIGFzeW5jIG9ubG9hZCgpIHtcbiAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG4gICAgLy8gSW5pdGlhbGl6ZSBBUEkgY2xpZW50XG4gICAgdGhpcy5hcGlDbGllbnQgPSBuZXcgRXZvQWdlbnRYQ2xpZW50KHRoaXMuc2V0dGluZ3MuYmFja2VuZFVybCwgdGhpcy5zZXR0aW5ncy5hcGlLZXkpO1xuXG4gICAgLy8gVGVzdCBiYWNrZW5kIGNvbm5lY3Rpb25cbiAgICB0cnkge1xuICAgICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlDbGllbnQuaGVhbHRoQ2hlY2soKTtcbiAgICAgIFxuICAgICAgLy8gSWYgdGhlIG1haW4gaGVhbHRoIGNoZWNrIGZhaWxzIHdpdGggYSA0MDAsIHRyeSB0aGUgc2ltcGxlIGNoZWNrXG4gICAgICBpZiAoIXJlc3BvbnNlLnN1Y2Nlc3MgJiYgcmVzcG9uc2UuZXJyb3I/LmluY2x1ZGVzKCc0MDAnKSkge1xuICAgICAgICBjb25zb2xlLndhcm4oJ01haW4gaGVhbHRoIGNoZWNrIGZhaWxlZCB3aXRoIDQwMCwgdHJ5aW5nIGFsdGVybmF0aXZlIG1ldGhvZCcpO1xuICAgICAgICBjb25zdCBzaW1wbGVSZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpQ2xpZW50LnNpbXBsZUhlYWx0aENoZWNrKCk7XG4gICAgICAgIGlmIChzaW1wbGVSZXNwb25zZS5zdWNjZXNzICYmIHNpbXBsZVJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgICByZXNwb25zZSA9IHtcbiAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICBkYXRhOiB7IHN0YXR1czogc2ltcGxlUmVzcG9uc2UuZGF0YS5zdGF0dXMsIHZlcnNpb246ICd1bmtub3duJyB9XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICBuZXcgTm90aWNlKCfinIUgVmF1bHRQaWxvdCBjb25uZWN0ZWQgdG8gRXZvQWdlbnRYJywgMzAwMCk7XG4gICAgICAgIC8vIENvbm5lY3QgV2ViU29ja2V0IGlmIGVuYWJsZWRcbiAgICAgICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlV2ViU29ja2V0KSB7XG4gICAgICAgICAgdGhpcy5jb25uZWN0V2ViU29ja2V0KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0hlYWx0aCBjaGVjayBmYWlsZWQ6JywgcmVzcG9uc2UuZXJyb3IpO1xuICAgICAgICBuZXcgTm90aWNlKCfimqDvuI8gRXZvQWdlbnRYIGJhY2tlbmQgb2ZmbGluZSAtIHNvbWUgZmVhdHVyZXMgbWF5IG5vdCB3b3JrJywgNTAwMCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0hlYWx0aCBjaGVjayBlcnJvcjonLCBlcnJvcik7XG4gICAgICBuZXcgTm90aWNlKCfimqDvuI8gQ2Fubm90IGNvbm5lY3QgdG8gRXZvQWdlbnRYIGJhY2tlbmQnLCA1MDAwKTtcbiAgICB9XG5cbiAgICAvLyBSZWdpc3RlciB2aWV3XG4gICAgdGhpcy5yZWdpc3RlclZpZXcoXG4gICAgICBWSUVXX1RZUEVfVkFVTFRQSUxPVCxcbiAgICAgIChsZWFmKSA9PiBuZXcgVmF1bHRQaWxvdFZpZXcobGVhZiwgdGhpcylcbiAgICApO1xuXG4gICAgLy8gQWRkIHJpYmJvbiBpY29uXG4gICAgY29uc3QgcmliYm9uSWNvbkVsID0gdGhpcy5hZGRSaWJib25JY29uKCdib3QnLCAnVmF1bHRQaWxvdCcsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgIHRoaXMub3BlbkNoYXRNb2RhbCgpO1xuICAgIH0pO1xuICAgIHJpYmJvbkljb25FbC5hZGRDbGFzcygndmF1bHRwaWxvdC1yaWJib24tY2xhc3MnKTtcblxuICAgIC8vIFJlZ2lzdGVyIGNvbW1hbmRzXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiAnb3Blbi1jaGF0JyxcbiAgICAgIG5hbWU6ICdPcGVuIENoYXQnLFxuICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMub3BlbkNoYXRNb2RhbCgpXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6ICdleGVjdXRlLXdvcmtmbG93JyxcbiAgICAgIG5hbWU6ICdFeGVjdXRlIFdvcmtmbG93JyxcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLm9wZW5Xb3JrZmxvd01vZGFsKClcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogJ2FuYWx5emUtdmF1bHQnLFxuICAgICAgbmFtZTogJ0FuYWx5emUgQ3VycmVudCBWYXVsdCcsXG4gICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5hbmFseXplVmF1bHQoKVxuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgIGlkOiAnY29waWxvdC1jb21wbGV0ZScsXG4gICAgICBuYW1lOiAnR2V0IEFJIENvbXBsZXRpb24nLFxuICAgICAgZWRpdG9yQ2FsbGJhY2s6IChlZGl0b3I6IEVkaXRvcikgPT4gdGhpcy5nZXRDb3BpbG90Q29tcGxldGlvbihlZGl0b3IpXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6ICdxdWljay1jaGF0JyxcbiAgICAgIG5hbWU6ICdRdWljayBDaGF0IHdpdGggU2VsZWN0aW9uJyxcbiAgICAgIGVkaXRvckNhbGxiYWNrOiAoZWRpdG9yOiBFZGl0b3IpID0+IHRoaXMucXVpY2tDaGF0V2l0aFNlbGVjdGlvbihlZGl0b3IpXG4gICAgfSk7XG5cbiAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgaWQ6ICdwbGFuLXRhc2tzJyxcbiAgICAgIG5hbWU6ICdQbGFuIFRhc2tzIGZyb20gTm90ZScsXG4gICAgICBlZGl0b3JDYWxsYmFjazogKGVkaXRvcjogRWRpdG9yKSA9PiB0aGlzLnBsYW5UYXNrc0Zyb21Ob3RlKGVkaXRvcilcbiAgICB9KTtcblxuICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICBpZDogJ29wZW4tdmF1bHRwaWxvdC12aWV3JyxcbiAgICAgIG5hbWU6ICdPcGVuIFZhdWx0UGlsb3QgVmlldycsXG4gICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5hY3RpdmF0ZVZpZXcoKVxuICAgIH0pO1xuXG4gICAgLy8gUmVnaXN0ZXIgZWRpdG9yIGV2ZW50cyBmb3IgY29waWxvdFxuICAgIGlmICh0aGlzLnNldHRpbmdzLmVuYWJsZUNvcGlsb3QgJiYgdGhpcy5zZXR0aW5ncy5lbmFibGVBdXRvQ29tcGxldGUpIHtcbiAgICAgIHRoaXMucmVnaXN0ZXJEb21FdmVudChkb2N1bWVudCwgJ2tleXVwJywgdGhpcy5oYW5kbGVLZXlVcC5iaW5kKHRoaXMpKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgc2V0dGluZ3MgdGFiXG4gICAgdGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBWYXVsdFBpbG90U2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuICB9XG5cbiAgb251bmxvYWQoKSB7XG4gICAgdGhpcy5hcHAud29ya3NwYWNlLmRldGFjaExlYXZlc09mVHlwZShWSUVXX1RZUEVfVkFVTFRQSUxPVCk7XG4gICAgdGhpcy5kaXNjb25uZWN0V2ViU29ja2V0KCk7XG4gIH1cblxuICAvLyBXZWJTb2NrZXQgTWFuYWdlbWVudFxuICBjb25uZWN0V2ViU29ja2V0KCkge1xuICAgIGlmICh0aGlzLndlYnNvY2tldENvbm5lY3RlZCkgcmV0dXJuO1xuXG4gICAgdGhpcy5hcGlDbGllbnQuY29ubmVjdFdlYlNvY2tldCh7XG4gICAgICBvbkNoYXQ6IChkYXRhKSA9PiB7XG4gICAgICAgIC8vIEhhbmRsZSByZWFsLXRpbWUgY2hhdCB1cGRhdGVzXG4gICAgICAgIGNvbnNvbGUubG9nKCdXZWJTb2NrZXQgY2hhdCB1cGRhdGU6JywgZGF0YSk7XG4gICAgICB9LFxuICAgICAgb25Xb3JrZmxvd1Byb2dyZXNzOiAoZGF0YSkgPT4ge1xuICAgICAgICAvLyBIYW5kbGUgd29ya2Zsb3cgcHJvZ3Jlc3MgdXBkYXRlc1xuICAgICAgICBuZXcgTm90aWNlKGBXb3JrZmxvdzogJHtkYXRhLnN0ZXB9YCwgMjAwMCk7XG4gICAgICB9LFxuICAgICAgb25Db3BpbG90OiAoZGF0YSkgPT4ge1xuICAgICAgICAvLyBIYW5kbGUgY29waWxvdCBzdWdnZXN0aW9uc1xuICAgICAgICB0aGlzLmhhbmRsZUNvcGlsb3RTdWdnZXN0aW9uKGRhdGEpO1xuICAgICAgfSxcbiAgICAgIG9uVmF1bHRTeW5jOiAoZGF0YSkgPT4ge1xuICAgICAgICAvLyBIYW5kbGUgdmF1bHQgc3luY2hyb25pemF0aW9uXG4gICAgICAgIGNvbnNvbGUubG9nKCdWYXVsdCBzeW5jIHVwZGF0ZTonLCBkYXRhKTtcbiAgICAgIH0sXG4gICAgICBvbkVycm9yOiAoZXJyb3IpID0+IHtcbiAgICAgICAgbmV3IE5vdGljZShgV2ViU29ja2V0IGVycm9yOiAke2Vycm9yfWAsIDUwMDApO1xuICAgICAgfSxcbiAgICAgIG9uQ29ubmVjdDogKCkgPT4ge1xuICAgICAgICB0aGlzLndlYnNvY2tldENvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRlYnVnTW9kZSkge1xuICAgICAgICAgIG5ldyBOb3RpY2UoJ1dlYlNvY2tldCBjb25uZWN0ZWQnLCAyMDAwKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uRGlzY29ubmVjdDogKCkgPT4ge1xuICAgICAgICB0aGlzLndlYnNvY2tldENvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5zZXR0aW5ncy5kZWJ1Z01vZGUpIHtcbiAgICAgICAgICBuZXcgTm90aWNlKCdXZWJTb2NrZXQgZGlzY29ubmVjdGVkJywgMjAwMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGRpc2Nvbm5lY3RXZWJTb2NrZXQoKSB7XG4gICAgdGhpcy5hcGlDbGllbnQuZGlzY29ubmVjdFdlYlNvY2tldCgpO1xuICAgIHRoaXMud2Vic29ja2V0Q29ubmVjdGVkID0gZmFsc2U7XG4gIH1cblxuICBpc1dlYlNvY2tldENvbm5lY3RlZCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy53ZWJzb2NrZXRDb25uZWN0ZWQ7XG4gIH1cblxuICAvLyBNb2RhbCBNYW5hZ2VtZW50XG4gIG9wZW5DaGF0TW9kYWwoKSB7XG4gICAgbmV3IENoYXRNb2RhbCh0aGlzLmFwcCwgdGhpcykub3BlbigpO1xuICB9XG5cbiAgb3BlbldvcmtmbG93TW9kYWwoKSB7XG4gICAgbmV3IFdvcmtmbG93TW9kYWwodGhpcy5hcHAsIHRoaXMpLm9wZW4oKTtcbiAgfVxuXG4gIC8vIENvbW1hbmQgSW1wbGVtZW50YXRpb25zXG4gIGFzeW5jIGFuYWx5emVWYXVsdCgpIHtcbiAgICBjb25zdCBub3RpY2UgPSBuZXcgTm90aWNlKCdBbmFseXppbmcgdmF1bHQuLi4nLCAwKTtcbiAgICBcbiAgICB0cnkge1xuICAgICAgLy8gR2V0IGFsbCBtYXJrZG93biBmaWxlc1xuICAgICAgY29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICBsZXQgY29udGVudCA9ICcnO1xuICAgICAgXG4gICAgICAvLyBJbmNsdWRlIHVwIHRvIDEwIGZpbGVzIHRvIGF2b2lkIG92ZXJ3aGVsbWluZyB0aGUgQVBJXG4gICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgZmlsZXMuc2xpY2UoMCwgMTApKSB7XG4gICAgICAgIGNvbnN0IGZpbGVDb250ZW50ID0gYXdhaXQgdGhpcy5hcHAudmF1bHQucmVhZChmaWxlKTtcbiAgICAgICAgY29udGVudCArPSBgPT09ICR7ZmlsZS5uYW1lfSA9PT1cXG4ke2ZpbGVDb250ZW50fVxcblxcbmA7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlDbGllbnQuYW5hbHl6ZVZhdWx0Q29udGV4dCh7XG4gICAgICAgIGNvbnRlbnQsXG4gICAgICAgIGFuYWx5c2lzX3R5cGU6ICdpbnNpZ2h0cydcbiAgICAgIH0pO1xuXG4gICAgICBub3RpY2UuaGlkZSgpO1xuXG4gICAgICBpZiAocmVzcG9uc2Uuc3VjY2VzcyAmJiByZXNwb25zZS5kYXRhKSB7XG4gICAgICAgIC8vIENyZWF0ZSBhbmFseXNpcyBub3RlXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IGBWYXVsdCBBbmFseXNpcyAke3RpbWVzdGFtcH0ubWRgO1xuICAgICAgICBcbiAgICAgICAgbGV0IGFuYWx5c2lzQ29udGVudCA9IGAjIFZhdWx0IEFuYWx5c2lzIC0gJHt0aW1lc3RhbXB9XFxuXFxuYDtcbiAgICAgICAgYW5hbHlzaXNDb250ZW50ICs9IGAjIyBBbmFseXNpc1xcblxcbiR7cmVzcG9uc2UuZGF0YS5hbmFseXNpc31cXG5cXG5gO1xuICAgICAgICBcbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuaW5zaWdodHMgJiYgcmVzcG9uc2UuZGF0YS5pbnNpZ2h0cy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYW5hbHlzaXNDb250ZW50ICs9IGAjIyBLZXkgSW5zaWdodHNcXG5cXG5gO1xuICAgICAgICAgIHJlc3BvbnNlLmRhdGEuaW5zaWdodHMuZm9yRWFjaChpbnNpZ2h0ID0+IHtcbiAgICAgICAgICAgIGFuYWx5c2lzQ29udGVudCArPSBgLSAke2luc2lnaHR9XFxuYDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBhbmFseXNpc0NvbnRlbnQgKz0gJ1xcbic7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5yZWNvbW1lbmRhdGlvbnMgJiYgcmVzcG9uc2UuZGF0YS5yZWNvbW1lbmRhdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGFuYWx5c2lzQ29udGVudCArPSBgIyMgUmVjb21tZW5kYXRpb25zXFxuXFxuYDtcbiAgICAgICAgICByZXNwb25zZS5kYXRhLnJlY29tbWVuZGF0aW9ucy5mb3JFYWNoKHJlYyA9PiB7XG4gICAgICAgICAgICBhbmFseXNpc0NvbnRlbnQgKz0gYC0gJHtyZWN9XFxuYDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShmaWxlbmFtZSwgYW5hbHlzaXNDb250ZW50KTtcbiAgICAgICAgbmV3IE5vdGljZShgVmF1bHQgYW5hbHlzaXMgc2F2ZWQgYXMgJHtmaWxlbmFtZX1gKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihyZXNwb25zZS5lcnJvciB8fCAnQW5hbHlzaXMgZmFpbGVkJyk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG5vdGljZS5oaWRlKCk7XG4gICAgICBuZXcgTm90aWNlKGBBbmFseXNpcyBlcnJvcjogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBnZXRDb3BpbG90Q29tcGxldGlvbihlZGl0b3I6IEVkaXRvcikge1xuICAgIGlmICghdGhpcy5zZXR0aW5ncy5lbmFibGVDb3BpbG90KSB7XG4gICAgICBuZXcgTm90aWNlKCdDb3BpbG90IGlzIGRpc2FibGVkIGluIHNldHRpbmdzJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xuICAgIGNvbnN0IGN1cnJlbnRMaW5lID0gZWRpdG9yLmdldExpbmUoY3Vyc29yLmxpbmUpO1xuICAgIGNvbnN0IHRleHRCZWZvcmVDdXJzb3IgPSBjdXJyZW50TGluZS5zdWJzdHJpbmcoMCwgY3Vyc29yLmNoKTtcbiAgICBjb25zdCBmdWxsVGV4dCA9IGVkaXRvci5nZXRWYWx1ZSgpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5hcGlDbGllbnQuZ2V0Q29waWxvdENvbXBsZXRpb24oe1xuICAgICAgICB0ZXh0OiBmdWxsVGV4dCxcbiAgICAgICAgY3Vyc29yX3Bvc2l0aW9uOiBlZGl0b3IucG9zVG9PZmZzZXQoY3Vyc29yKSxcbiAgICAgICAgZmlsZV90eXBlOiAnbWFya2Rvd24nLFxuICAgICAgICBjb250ZXh0OiB0ZXh0QmVmb3JlQ3Vyc29yXG4gICAgICB9KTtcblxuICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MgJiYgcmVzcG9uc2UuZGF0YSkge1xuICAgICAgICAvLyBJbnNlcnQgY29tcGxldGlvbiBhdCBjdXJzb3JcbiAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShyZXNwb25zZS5kYXRhLmNvbXBsZXRpb24sIGN1cnNvcik7XG4gICAgICAgIG5ldyBOb3RpY2UoJ0NvbXBsZXRpb24gaW5zZXJ0ZWQnLCAyMDAwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ldyBOb3RpY2UoYENvcGlsb3QgZXJyb3I6ICR7cmVzcG9uc2UuZXJyb3J9YCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIG5ldyBOb3RpY2UoYENvcGlsb3QgZXJyb3I6ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgcXVpY2tDaGF0V2l0aFNlbGVjdGlvbihlZGl0b3I6IEVkaXRvcikge1xuICAgIGNvbnN0IHNlbGVjdGlvbiA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcbiAgICBpZiAoIXNlbGVjdGlvbikge1xuICAgICAgbmV3IE5vdGljZSgnTm8gdGV4dCBzZWxlY3RlZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpQ2xpZW50LmNoYXQoe1xuICAgICAgICBtZXNzYWdlOiBgUGxlYXNlIGV4cGxhaW4gb3IgYW5hbHl6ZSB0aGlzIHRleHQ6IFwiJHtzZWxlY3Rpb259XCJgLFxuICAgICAgICB2YXVsdF9jb250ZXh0OiBlZGl0b3IuZ2V0VmFsdWUoKVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzICYmIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgLy8gSW5zZXJ0IHJlc3BvbnNlIGJlbG93IHNlbGVjdGlvblxuICAgICAgICBjb25zdCBjdXJzb3IgPSBlZGl0b3IuZ2V0Q3Vyc29yKCd0bycpO1xuICAgICAgICBjb25zdCBuZXdMaW5lID0gYFxcblxcbioqVmF1bHRQaWxvdCBBbmFseXNpczoqKlxcbiR7cmVzcG9uc2UuZGF0YS5yZXNwb25zZX1cXG5cXG5gO1xuICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKG5ld0xpbmUsIGN1cnNvcik7XG4gICAgICAgIG5ldyBOb3RpY2UoJ0FuYWx5c2lzIGluc2VydGVkJywgMjAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXcgTm90aWNlKGBDaGF0IGVycm9yOiAke3Jlc3BvbnNlLmVycm9yfWApO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBuZXcgTm90aWNlKGBDaGF0IGVycm9yOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIHBsYW5UYXNrc0Zyb21Ob3RlKGVkaXRvcjogRWRpdG9yKSB7XG4gICAgY29uc3QgY29udGVudCA9IGVkaXRvci5nZXRWYWx1ZSgpO1xuICAgIGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlRmlsZSgpO1xuICAgIFxuICAgIGlmICghY29udGVudC50cmltKCkpIHtcbiAgICAgIG5ldyBOb3RpY2UoJ05vIGNvbnRlbnQgdG8gYW5hbHl6ZScpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5vdGljZSA9IG5ldyBOb3RpY2UoJ1BsYW5uaW5nIHRhc2tzLi4uJywgMCk7XG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmFwaUNsaWVudC5wbGFuVGFza3Moe1xuICAgICAgICBnb2FsOiBgQ3JlYXRlIGEgdGFzayBwbGFuIGJhc2VkIG9uIHRoaXMgbm90ZTogJHthY3RpdmVGaWxlPy5uYW1lIHx8ICdVbnRpdGxlZCd9YCxcbiAgICAgICAgY29udGV4dDogY29udGVudCxcbiAgICAgICAgdGltZWZyYW1lOiAnMSB3ZWVrJ1xuICAgICAgfSk7XG5cbiAgICAgIG5vdGljZS5oaWRlKCk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzICYmIHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgICAgLy8gQ3JlYXRlIHRhc2sgcGxhbiBub3RlXG4gICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdO1xuICAgICAgICBjb25zdCBmaWxlbmFtZSA9IGBUYXNrIFBsYW4gLSAke2FjdGl2ZUZpbGU/LmJhc2VuYW1lIHx8ICdVbnRpdGxlZCd9IC0gJHt0aW1lc3RhbXB9Lm1kYDtcbiAgICAgICAgXG4gICAgICAgIGxldCB0YXNrQ29udGVudCA9IGAjICR7cmVzcG9uc2UuZGF0YS5wbGFuLnRpdGxlfVxcblxcbmA7XG4gICAgICAgIHRhc2tDb250ZW50ICs9IGAke3Jlc3BvbnNlLmRhdGEucGxhbi5kZXNjcmlwdGlvbn1cXG5cXG5gO1xuICAgICAgICB0YXNrQ29udGVudCArPSBgKipFc3RpbWF0ZWQgRHVyYXRpb246KiogJHtyZXNwb25zZS5kYXRhLnBsYW4uZXN0aW1hdGVkX2R1cmF0aW9ufVxcblxcbmA7XG4gICAgICAgIFxuICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5wbGFuLnRhc2tzICYmIHJlc3BvbnNlLmRhdGEucGxhbi50YXNrcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgdGFza0NvbnRlbnQgKz0gYCMjIFRhc2tzXFxuXFxuYDtcbiAgICAgICAgICByZXNwb25zZS5kYXRhLnBsYW4udGFza3MuZm9yRWFjaCh0YXNrID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoZWNrYm94ID0gdGFzay5zdGF0dXMgPT09ICdjb21wbGV0ZWQnID8gJ1t4XScgOiAnWyBdJztcbiAgICAgICAgICAgIHRhc2tDb250ZW50ICs9IGAke2NoZWNrYm94fSAqKiR7dGFzay50aXRsZX0qKiAoJHt0YXNrLnByaW9yaXR5fSBwcmlvcml0eSlcXG5gO1xuICAgICAgICAgICAgdGFza0NvbnRlbnQgKz0gYCAgICR7dGFzay5kZXNjcmlwdGlvbn1cXG5gO1xuICAgICAgICAgICAgdGFza0NvbnRlbnQgKz0gYCAgICpFc3RpbWF0ZWQgdGltZTogJHt0YXNrLmVzdGltYXRlZF90aW1lfSpcXG5cXG5gO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEubWlsZXN0b25lcyAmJiByZXNwb25zZS5kYXRhLm1pbGVzdG9uZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHRhc2tDb250ZW50ICs9IGAjIyBNaWxlc3RvbmVzXFxuXFxuYDtcbiAgICAgICAgICByZXNwb25zZS5kYXRhLm1pbGVzdG9uZXMuZm9yRWFjaChtaWxlc3RvbmUgPT4ge1xuICAgICAgICAgICAgdGFza0NvbnRlbnQgKz0gYC0gKioke21pbGVzdG9uZS50aXRsZX0qKiAoJHttaWxlc3RvbmUudGFyZ2V0X2RhdGV9KVxcbmA7XG4gICAgICAgICAgICB0YXNrQ29udGVudCArPSBgICAke21pbGVzdG9uZS5kZXNjcmlwdGlvbn1cXG5cXG5gO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQuY3JlYXRlKGZpbGVuYW1lLCB0YXNrQ29udGVudCk7XG4gICAgICAgIG5ldyBOb3RpY2UoYFRhc2sgcGxhbiBzYXZlZCBhcyAke2ZpbGVuYW1lfWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHJlc3BvbnNlLmVycm9yIHx8ICdUYXNrIHBsYW5uaW5nIGZhaWxlZCcpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBub3RpY2UuaGlkZSgpO1xuICAgICAgbmV3IE5vdGljZShgVGFzayBwbGFubmluZyBlcnJvcjogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBhY3RpdmF0ZVZpZXcoKSB7XG4gICAgY29uc3QgbGVhdmVzID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfVkFVTFRQSUxPVCk7XG4gICAgaWYgKGxlYXZlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbnN0IHJpZ2h0TGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpO1xuICAgICAgaWYgKHJpZ2h0TGVhZikge1xuICAgICAgICBhd2FpdCByaWdodExlYWYuc2V0Vmlld1N0YXRlKHtcbiAgICAgICAgICB0eXBlOiBWSUVXX1RZUEVfVkFVTFRQSUxPVCxcbiAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYXZlc1swXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQXV0by1jb21wbGV0aW9uIGhhbmRsaW5nXG4gIHByaXZhdGUgaGFuZGxlS2V5VXAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICBpZiAoIXRoaXMuc2V0dGluZ3MuZW5hYmxlQXV0b0NvbXBsZXRlIHx8ICF0aGlzLnNldHRpbmdzLmVuYWJsZUNvcGlsb3QpIHJldHVybjtcbiAgICBcbiAgICBjb25zdCB0YXJnZXQgPSBldmVudC50YXJnZXQgYXMgSFRNTEVsZW1lbnQ7XG4gICAgaWYgKCF0YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdjbS1jb250ZW50JykpIHJldHVybjtcblxuICAgIC8vIERlYm91bmNlIGF1dG8tY29tcGxldGlvbiByZXF1ZXN0c1xuICAgIGNsZWFyVGltZW91dCgodGhpcyBhcyBhbnkpLmF1dG9Db21wbGV0ZVRpbWVvdXQpO1xuICAgICh0aGlzIGFzIGFueSkuYXV0b0NvbXBsZXRlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy50cmlnZ2VyQXV0b0NvbXBsZXRpb24oKTtcbiAgICB9LCAxMDAwKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgdHJpZ2dlckF1dG9Db21wbGV0aW9uKCkge1xuICAgIGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuICAgIGlmICghYWN0aXZlVmlldykgcmV0dXJuO1xuXG4gICAgY29uc3QgZWRpdG9yID0gYWN0aXZlVmlldy5lZGl0b3I7XG4gICAgY29uc3QgY3Vyc29yID0gZWRpdG9yLmdldEN1cnNvcigpO1xuICAgIGNvbnN0IGN1cnJlbnRMaW5lID0gZWRpdG9yLmdldExpbmUoY3Vyc29yLmxpbmUpO1xuICAgIFxuICAgIC8vIE9ubHkgdHJpZ2dlciBpZiBsaW5lIGhhcyBzb21lIGNvbnRlbnQgYW5kIGN1cnNvciBpcyBhdCBlbmRcbiAgICBpZiAoY3VycmVudExpbmUudHJpbSgpLmxlbmd0aCA8IDMgfHwgY3Vyc29yLmNoICE9PSBjdXJyZW50TGluZS5sZW5ndGgpIHJldHVybjtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuYXBpQ2xpZW50LmdldENvcGlsb3RDb21wbGV0aW9uKHtcbiAgICAgICAgdGV4dDogZWRpdG9yLmdldFZhbHVlKCksXG4gICAgICAgIGN1cnNvcl9wb3NpdGlvbjogZWRpdG9yLnBvc1RvT2Zmc2V0KGN1cnNvciksXG4gICAgICAgIGZpbGVfdHlwZTogJ21hcmtkb3duJ1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXNwb25zZS5zdWNjZXNzICYmIHJlc3BvbnNlLmRhdGEgJiYgcmVzcG9uc2UuZGF0YS5zdWdnZXN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIFNob3cgc3VnZ2VzdGlvbnMgKGZvciBub3cganVzdCBzaG93IGZpcnN0IHN1Z2dlc3Rpb24pXG4gICAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRlYnVnTW9kZSkge1xuICAgICAgICAgIG5ldyBOb3RpY2UoYFN1Z2dlc3Rpb246ICR7cmVzcG9uc2UuZGF0YS5zdWdnZXN0aW9uc1swXX1gLCAzMDAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAvLyBTaWxlbnRseSBmYWlsIGZvciBhdXRvLWNvbXBsZXRpb25cbiAgICAgIGlmICh0aGlzLnNldHRpbmdzLmRlYnVnTW9kZSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdBdXRvLWNvbXBsZXRpb24gZXJyb3I6JywgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQ29waWxvdFN1Z2dlc3Rpb24oZGF0YTogQ29waWxvdFJlc3BvbnNlKSB7XG4gICAgLy8gSGFuZGxlIHJlYWwtdGltZSBjb3BpbG90IHN1Z2dlc3Rpb25zIGZyb20gV2ViU29ja2V0XG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuZGVidWdNb2RlKSB7XG4gICAgICBuZXcgTm90aWNlKGBMaXZlIHN1Z2dlc3Rpb246ICR7ZGF0YS5jb21wbGV0aW9ufWAsIDIwMDApO1xuICAgIH1cbiAgfVxuXG4gIC8vIFNldHRpbmdzIG1hbmFnZW1lbnRcbiAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLmxvYWREYXRhKCkpO1xuICB9XG5cbiAgYXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG4gICAgXG4gICAgLy8gVXBkYXRlIEFQSSBjbGllbnQgaWYgVVJMIGNoYW5nZWRcbiAgICB0aGlzLmFwaUNsaWVudCA9IG5ldyBFdm9BZ2VudFhDbGllbnQodGhpcy5zZXR0aW5ncy5iYWNrZW5kVXJsLCB0aGlzLnNldHRpbmdzLmFwaUtleSk7XG4gICAgXG4gICAgLy8gUmVjb25uZWN0IFdlYlNvY2tldCBpZiBzZXR0aW5ncyBjaGFuZ2VkXG4gICAgaWYgKHRoaXMuc2V0dGluZ3MuZW5hYmxlV2ViU29ja2V0ICYmICF0aGlzLndlYnNvY2tldENvbm5lY3RlZCkge1xuICAgICAgdGhpcy5jb25uZWN0V2ViU29ja2V0KCk7XG4gICAgfSBlbHNlIGlmICghdGhpcy5zZXR0aW5ncy5lbmFibGVXZWJTb2NrZXQgJiYgdGhpcy53ZWJzb2NrZXRDb25uZWN0ZWQpIHtcbiAgICAgIHRoaXMuZGlzY29ubmVjdFdlYlNvY2tldCgpO1xuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIkRFRkFVTFRfU0VUVElOR1MiLCJiYWNrZW5kVXJsIiwiYXBpS2V5IiwiZW5hYmxlV2ViU29ja2V0IiwiZW5hYmxlQ29waWxvdCIsImVuYWJsZUF1dG9Db21wbGV0ZSIsImRlZmF1bHRBZ2VudCIsImNoYXRIaXN0b3J5TGltaXQiLCJkZWJ1Z01vZGUiLCJWYXVsdFBpbG90U2V0dGluZ1RhYiIsIlBsdWdpblNldHRpbmdUYWIiLCJjb25zdHJ1Y3RvciIsImFwcCIsInBsdWdpbiIsInN1cGVyIiwidGhpcyIsImRpc3BsYXkiLCJjb250YWluZXJFbCIsImVtcHR5IiwiY3JlYXRlRWwiLCJ0ZXh0IiwiU2V0dGluZyIsInNldE5hbWUiLCJzZXREZXNjIiwiYWRkVGV4dCIsInNldFBsYWNlaG9sZGVyIiwic2V0VmFsdWUiLCJzZXR0aW5ncyIsIm9uQ2hhbmdlIiwidmFsdWUiLCJfX2F3YWl0ZXIiLCJzYXZlU2V0dGluZ3MiLCJhZGRCdXR0b24iLCJidXR0b24iLCJzZXRCdXR0b25UZXh0Iiwib25DbGljayIsInRlc3RDb25uZWN0aW9uIiwiYWRkVG9nZ2xlIiwidG9nZ2xlIiwiY29ubmVjdFdlYlNvY2tldCIsImRpc2Nvbm5lY3RXZWJTb2NrZXQiLCJhZGRTbGlkZXIiLCJzbGlkZXIiLCJzZXRMaW1pdHMiLCJzZXREeW5hbWljVG9vbHRpcCIsImNscyIsImlubmVySFRNTCIsIm5vdGljZSIsIk5vdGljZSIsInJlc3BvbnNlIiwiYXBpQ2xpZW50IiwiaGVhbHRoQ2hlY2siLCJzdWNjZXNzIiwiZXJyb3IiLCJfYSIsImluY2x1ZGVzIiwiY29uc29sZSIsIndhcm4iLCJzaW1wbGVSZXNwb25zZSIsInNpbXBsZUhlYWx0aENoZWNrIiwiZGF0YSIsInN0YXR1cyIsInZlcnNpb24iLCJoaWRlIiwiRXJyb3IiLCJtZXNzYWdlIiwiVklFV19UWVBFX1ZBVUxUUElMT1QiLCJWYXVsdFBpbG90VmlldyIsIkl0ZW1WaWV3IiwibGVhZiIsImdldFZpZXdUeXBlIiwiZ2V0RGlzcGxheVRleHQiLCJnZXRJY29uIiwib25PcGVuIiwiY29udGFpbmVyIiwiYWRkQ2xhc3MiLCJoZWFkZXJFbCIsInN0YXR1c0VsIiwidXBkYXRlU3RhdHVzIiwicXVpY2tBY3Rpb25zRWwiLCJjcmVhdGVRdWlja0FjdGlvbnMiLCJ2YXVsdFN0YXRzRWwiLCJ1cGRhdGVWYXVsdFN0YXRzIiwiYWN0aXZpdGllc0VsIiwiYWRkU3R5bGVzIiwic3RhdHVzQ29udGFpbmVyIiwiYmFja2VuZFN0YXR1cyIsImJhY2tlbmRJbmRpY2F0b3IiLCJ3c1N0YXR1cyIsImlzV2ViU29ja2V0Q29ubmVjdGVkIiwiY2hlY2tCYWNrZW5kU3RhdHVzIiwiaW5kaWNhdG9yIiwidGV4dENvbnRlbnQiLCJjbGFzc05hbWUiLCJhY3Rpb25zR3JpZCIsIm9uY2xpY2siLCJvcGVuQ2hhdE1vZGFsIiwib3BlbldvcmtmbG93TW9kYWwiLCJhbmFseXplVmF1bHQiLCJhY3RpdmVWaWV3Iiwid29ya3NwYWNlIiwiZ2V0QWN0aXZlVmlld09mVHlwZSIsIk1hcmtkb3duVmlldyIsImdldENvcGlsb3RDb21wbGV0aW9uIiwiZWRpdG9yIiwic3RhdHNDb250YWluZXIiLCJmaWxlcyIsInZhdWx0IiwiZ2V0RmlsZXMiLCJtYXJrZG93bkZpbGVzIiwiZ2V0TWFya2Rvd25GaWxlcyIsImxhYmVsIiwibGVuZ3RoIiwidG9TdHJpbmciLCJnZXRBbGxMb2FkZWRGaWxlcyIsImZpbHRlciIsImYiLCJURm9sZGVyIiwiZm9yRWFjaCIsInN0YXQiLCJzdGF0RWwiLCJsb2FkQWdlbnRJbmZvIiwiZ2V0QWdlbnRzIiwiYWdlbnRDb3VudCIsImFjdGl2ZUFnZW50cyIsImFnZW50IiwiYWN0aXZlIiwiYWdlbnRTdGF0c0VsIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlRWwiLCJjcmVhdGVFbGVtZW50IiwiaWQiLCJoZWFkIiwiYXBwZW5kQ2hpbGQiLCJvbkNsb3NlIiwiQ2hhdE1vZGFsIiwiTW9kYWwiLCJjdXJyZW50Q29udmVyc2F0aW9uSWQiLCJtZXNzYWdlcyIsImNvbnRlbnRFbCIsInRvb2xiYXJFbCIsImNsZWFyQ2hhdCIsImFnZW50U2VsZWN0IiwibG9hZEFnZW50cyIsImNoYXRDb250YWluZXIiLCJtZXNzYWdlc0VsIiwiaW5wdXRDb250YWluZXIiLCJpbnB1dEVsIiwidHlwZSIsInBsYWNlaG9sZGVyIiwic2VuZEJ1dHRvbiIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwia2V5Iiwic2hpZnRLZXkiLCJwcmV2ZW50RGVmYXVsdCIsInNlbmRNZXNzYWdlIiwiZm9jdXMiLCJsb2FkQ29udmVyc2F0aW9uSGlzdG9yeSIsInNlbGVjdEVsIiwibmFtZSIsImdldENvbnZlcnNhdGlvbkhpc3RvcnkiLCJsYXRlc3RDb252ZXJzYXRpb24iLCJjb252ZXJzYXRpb25faWQiLCJyZW5kZXJNZXNzYWdlcyIsInRyaW0iLCJkaXNhYmxlZCIsImFkZE1lc3NhZ2UiLCJhY3RpdmVGaWxlIiwiZ2V0QWN0aXZlRmlsZSIsInZhdWx0Q29udGV4dCIsImNvbnRlbnQiLCJyZWFkIiwiY2hhdCIsInVuZGVmaW5lZCIsInZhdWx0X2NvbnRleHQiLCJhZ2VudF9pZCIsImdldFNlbGVjdGVkQWdlbnQiLCJlcnJvck1zZyIsInF1ZXJ5U2VsZWN0b3IiLCJyb2xlIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwicHVzaCIsInJlbmRlck1lc3NhZ2UiLCJzY3JvbGxUb0JvdHRvbSIsIm1lc3NhZ2VFbCIsInJlbmRlck1hcmtkb3duIiwidG9Mb2NhbGVUaW1lU3RyaW5nIiwicmVwbGFjZSIsInNjcm9sbFRvcCIsInNjcm9sbEhlaWdodCIsIldvcmtmbG93TW9kYWwiLCJpc0V4ZWN1dGluZyIsImZvcm1FbCIsImdvYWxDb250YWluZXIiLCJnb2FsSW5wdXQiLCJjb250ZXh0Q29udGFpbmVyIiwiY29udGV4dElucHV0Iiwib3B0aW9uc0NvbnRhaW5lciIsImluY2x1ZGVBY3RpdmVGaWxlIiwiYWN0aXZlRmlsZUNoZWNrYm94IiwiY3JlYXRlU3BhbiIsImluY2x1ZGVBbGxGaWxlcyIsImFsbEZpbGVzQ2hlY2tib3giLCJleGVjdXRlQnV0dG9uIiwiZXhlY3V0ZVdvcmtmbG93IiwiY2hlY2tlZCIsInByb2dyZXNzQ29udGFpbmVyIiwic3R5bGUiLCJyZXN1bHRzQ29udGFpbmVyIiwiZ29hbCIsInZhdWx0Q29udGVudCIsImZpbGUiLCJzbGljZSIsInJlcXVlc3QiLCJjb250ZXh0IiwidmF1bHRfY29udGVudCIsInNldHVwUHJvZ3Jlc3NMaXN0ZW5lciIsImRpc3BsYXlSZXN1bHRzIiwiZGlzcGxheUVycm9yIiwiZGlzcGxheVByb2dyZXNzIiwic2V0VGltZW91dCIsIndvcmtmbG93IiwiZXhlY3V0aW9uX3RpbWUiLCJyZXN1bHRFbCIsInJlc3VsdCIsInN0ZXBzX3Rha2VuIiwic3RlcHNFbCIsInN0ZXBzTGlzdCIsInN0ZXAiLCJhcnRpZmFjdHMiLCJhcnRpZmFjdHNFbCIsImFydGlmYWN0IiwiaW5kZXgiLCJhcnRpZmFjdEVsIiwidGl0bGUiLCJzYXZlQXJ0aWZhY3RBc05vdGUiLCJzYXZlQ29tcGxldGVSZXN1bHRzQXNOb3RlIiwiZmlsZW5hbWUiLCJjcmVhdGUiLCJzcGxpdCIsIkV2b0FnZW50WENsaWVudCIsImJhc2VVcmwiLCJ3c0NhbGxiYWNrcyIsIk1hcCIsIm1ha2VSZXF1ZXN0IiwiZW5kcG9pbnRfMSIsImVuZHBvaW50Iiwib3B0aW9ucyIsInVybCIsImhlYWRlcnMiLCJPYmplY3QiLCJhc3NpZ24iLCJBY2NlcHQiLCJmZXRjaCIsIm1vZGUiLCJjcmVkZW50aWFscyIsImNvbnRlbnRUeXBlIiwiZ2V0IiwianNvbiIsIm9rIiwiZXJyb3JNZXNzYWdlIiwic3RhdHVzVGV4dCIsImxvZyIsIm1ldGhvZCIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiY29udmVyc2F0aW9uSWQiLCJkZWxldGVDb252ZXJzYXRpb24iLCJjcmVhdGVBZ2VudCIsImV4ZWN1dGVBZ2VudCIsImFuYWx5emVWYXVsdENvbnRleHQiLCJwbGFuVGFza3MiLCJwYXJzZUludGVsbGlnZW5jZSIsInVwZGF0ZU1lbW9yeSIsImNhbGxiYWNrcyIsIndzVXJsIiwid2Vic29ja2V0IiwiV2ViU29ja2V0Iiwib25vcGVuIiwib25Db25uZWN0IiwiY2FsbCIsIm9ubWVzc2FnZSIsImV2ZW50IiwicGFyc2UiLCJvbkNoYXQiLCJfYiIsIm9uV29ya2Zsb3dQcm9ncmVzcyIsIl9jIiwib25Db3BpbG90IiwiX2QiLCJvblZhdWx0U3luYyIsIl9lIiwib25FcnJvciIsIl9mIiwib25jbG9zZSIsImNvZGUiLCJyZWFzb24iLCJvbkRpc2Nvbm5lY3QiLCJvbmVycm9yIiwiY2xvc2UiLCJzZW5kV2ViU29ja2V0TWVzc2FnZSIsInJlYWR5U3RhdGUiLCJPUEVOIiwic2VuZCIsIlZhdWx0UGlsb3RQbHVnaW4iLCJQbHVnaW4iLCJ3ZWJzb2NrZXRDb25uZWN0ZWQiLCJjb3BpbG90RW5hYmxlZCIsIm9ubG9hZCIsImxvYWRTZXR0aW5ncyIsInJlZ2lzdGVyVmlldyIsImFkZFJpYmJvbkljb24iLCJldnQiLCJhZGRDb21tYW5kIiwiY2FsbGJhY2siLCJlZGl0b3JDYWxsYmFjayIsInF1aWNrQ2hhdFdpdGhTZWxlY3Rpb24iLCJwbGFuVGFza3NGcm9tTm90ZSIsImFjdGl2YXRlVmlldyIsInJlZ2lzdGVyRG9tRXZlbnQiLCJoYW5kbGVLZXlVcCIsImJpbmQiLCJhZGRTZXR0aW5nVGFiIiwib251bmxvYWQiLCJkZXRhY2hMZWF2ZXNPZlR5cGUiLCJoYW5kbGVDb3BpbG90U3VnZ2VzdGlvbiIsIm9wZW4iLCJmaWxlQ29udGVudCIsImFuYWx5c2lzX3R5cGUiLCJhbmFseXNpc0NvbnRlbnQiLCJhbmFseXNpcyIsImluc2lnaHRzIiwiaW5zaWdodCIsInJlY29tbWVuZGF0aW9ucyIsInJlYyIsImN1cnNvciIsImdldEN1cnNvciIsInRleHRCZWZvcmVDdXJzb3IiLCJnZXRMaW5lIiwibGluZSIsInN1YnN0cmluZyIsImNoIiwiZnVsbFRleHQiLCJnZXRWYWx1ZSIsImN1cnNvcl9wb3NpdGlvbiIsInBvc1RvT2Zmc2V0IiwiZmlsZV90eXBlIiwicmVwbGFjZVJhbmdlIiwiY29tcGxldGlvbiIsInNlbGVjdGlvbiIsImdldFNlbGVjdGlvbiIsIm5ld0xpbmUiLCJ0aW1lZnJhbWUiLCJiYXNlbmFtZSIsInRhc2tDb250ZW50IiwicGxhbiIsImRlc2NyaXB0aW9uIiwiZXN0aW1hdGVkX2R1cmF0aW9uIiwidGFza3MiLCJ0YXNrIiwiY2hlY2tib3giLCJwcmlvcml0eSIsImVzdGltYXRlZF90aW1lIiwibWlsZXN0b25lcyIsIm1pbGVzdG9uZSIsInRhcmdldF9kYXRlIiwibGVhdmVzIiwiZ2V0TGVhdmVzT2ZUeXBlIiwicmlnaHRMZWFmIiwiZ2V0UmlnaHRMZWFmIiwic2V0Vmlld1N0YXRlIiwicmV2ZWFsTGVhZiIsInRhcmdldCIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiY2xlYXJUaW1lb3V0IiwiYXV0b0NvbXBsZXRlVGltZW91dCIsInRyaWdnZXJBdXRvQ29tcGxldGlv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
