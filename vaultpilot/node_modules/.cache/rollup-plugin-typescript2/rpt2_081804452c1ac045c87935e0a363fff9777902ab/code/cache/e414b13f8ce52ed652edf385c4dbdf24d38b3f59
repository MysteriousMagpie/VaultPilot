{"code":"import { __awaiter } from \"tslib\";\nimport { Plugin, Notice } from 'obsidian';\nimport { VaultPilotSettingTab, DEFAULT_SETTINGS } from './settings';\nimport { VIEW_TYPE_VAULTPILOT, VaultPilotView } from './view';\nexport default class VaultPilotPlugin extends Plugin {\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.loadSettings();\n            try {\n                const res = yield fetch(`${this.settings.backendUrl}/status`);\n                if (!res.ok)\n                    throw new Error('offline');\n            }\n            catch (e) {\n                new Notice('EvoAgent backend offline');\n            }\n            this.registerView(VIEW_TYPE_VAULTPILOT, (leaf) => new VaultPilotView(leaf, this));\n            this.addRibbonIcon('dice', 'Open VaultPilot', () => {\n                this.activateView();\n            });\n            this.addCommand({\n                id: 'open-vaultpilot-view',\n                name: 'Open VaultPilot View',\n                callback: () => this.activateView()\n            });\n            this.addSettingTab(new VaultPilotSettingTab(this.app, this));\n        });\n    }\n    onunload() {\n        this.app.workspace.detachLeavesOfType(VIEW_TYPE_VAULTPILOT);\n    }\n    activateView() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_VAULTPILOT);\n            if (leaves.length === 0) {\n                const rightLeaf = this.app.workspace.getRightLeaf(false);\n                if (rightLeaf) {\n                    yield rightLeaf.setViewState({\n                        type: VIEW_TYPE_VAULTPILOT,\n                        active: true\n                    });\n                }\n            }\n            else {\n                this.app.workspace.revealLeaf(leaves[0]);\n            }\n        });\n    }\n    loadSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());\n        });\n    }\n    saveSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.saveData(this.settings);\n        });\n    }\n}\n//# sourceMappingURL=main.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/settings.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/view.ts"],"map":"{\"version\":3,\"file\":\"main.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/main.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAC1C,OAAO,EAAE,oBAAoB,EAAE,gBAAgB,EAAsB,MAAM,YAAY,CAAC;AACxF,OAAO,EAAE,oBAAoB,EAAE,cAAc,EAAE,MAAM,QAAQ,CAAC;AAE9D,MAAM,CAAC,OAAO,OAAO,gBAAiB,SAAQ,MAAM;IAG5C,MAAM;;YACV,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;YAE1B,IAAI,CAAC;gBACH,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,SAAS,CAAC,CAAC;gBAC9D,IAAI,CAAC,GAAG,CAAC,EAAE;oBAAE,MAAM,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC;YAC1C,CAAC;YAAC,OAAO,CAAC,EAAE,CAAC;gBACX,IAAI,MAAM,CAAC,0BAA0B,CAAC,CAAC;YACzC,CAAC;YAED,IAAI,CAAC,YAAY,CACf,oBAAoB,EACpB,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CACzC,CAAC;YAEF,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,iBAAiB,EAAE,GAAG,EAAE;gBACjD,IAAI,CAAC,YAAY,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,UAAU,CAAC;gBACd,EAAE,EAAE,sBAAsB;gBAC1B,IAAI,EAAE,sBAAsB;gBAC5B,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE;aACpC,CAAC,CAAC;YAEH,IAAI,CAAC,aAAa,CAAC,IAAI,oBAAoB,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;QAC/D,CAAC;KAAA;IAED,QAAQ;QACN,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,CAAC;IAC9D,CAAC;IAEK,YAAY;;YAChB,MAAM,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,oBAAoB,CAAC,CAAC;YACxE,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBACxB,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBACzD,IAAI,SAAS,EAAE,CAAC;oBACd,MAAM,SAAS,CAAC,YAAY,CAAC;wBAC3B,IAAI,EAAE,oBAAoB;wBAC1B,MAAM,EAAE,IAAI;qBACb,CAAC,CAAC;gBACL,CAAC;YACH,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3C,CAAC;QACH,CAAC;KAAA;IAEK,YAAY;;YAChB,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,gBAAgB,EAAE,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7E,CAAC;KAAA;IAEK,YAAY;;YAChB,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC;KAAA;CACF\",\"sourcesContent\":[\"import { Plugin, Notice } from 'obsidian';\\nimport { VaultPilotSettingTab, DEFAULT_SETTINGS, VaultPilotSettings } from './settings';\\nimport { VIEW_TYPE_VAULTPILOT, VaultPilotView } from './view';\\n\\nexport default class VaultPilotPlugin extends Plugin {\\n  settings!: VaultPilotSettings;\\n\\n  async onload() {\\n    await this.loadSettings();\\n\\n    try {\\n      const res = await fetch(`${this.settings.backendUrl}/status`);\\n      if (!res.ok) throw new Error('offline');\\n    } catch (e) {\\n      new Notice('EvoAgent backend offline');\\n    }\\n\\n    this.registerView(\\n      VIEW_TYPE_VAULTPILOT,\\n      (leaf) => new VaultPilotView(leaf, this)\\n    );\\n\\n    this.addRibbonIcon('dice', 'Open VaultPilot', () => {\\n      this.activateView();\\n    });\\n\\n    this.addCommand({\\n      id: 'open-vaultpilot-view',\\n      name: 'Open VaultPilot View',\\n      callback: () => this.activateView()\\n    });\\n\\n    this.addSettingTab(new VaultPilotSettingTab(this.app, this));\\n  }\\n\\n  onunload() {\\n    this.app.workspace.detachLeavesOfType(VIEW_TYPE_VAULTPILOT);\\n  }\\n\\n  async activateView() {\\n    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_VAULTPILOT);\\n    if (leaves.length === 0) {\\n      const rightLeaf = this.app.workspace.getRightLeaf(false);\\n      if (rightLeaf) {\\n        await rightLeaf.setViewState({\\n          type: VIEW_TYPE_VAULTPILOT,\\n          active: true\\n        });\\n      }\\n    } else {\\n      this.app.workspace.revealLeaf(leaves[0]);\\n    }\\n  }\\n\\n  async loadSettings() {\\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\\n  }\\n\\n  async saveSettings() {\\n    await this.saveData(this.settings);\\n  }\\n}\\n\"]}"}
