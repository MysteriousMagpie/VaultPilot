{"code":"import { __awaiter } from \"tslib\";\nimport { ItemView, Notice } from 'obsidian';\nexport const VIEW_TYPE_VAULTPILOT = 'vaultpilot-view';\nexport class VaultPilotView extends ItemView {\n    constructor(leaf, plugin) {\n        super(leaf);\n        this.outputEl = null;\n        this.plugin = plugin;\n    }\n    getViewType() {\n        return VIEW_TYPE_VAULTPILOT;\n    }\n    getDisplayText() {\n        return 'VaultPilot';\n    }\n    onOpen() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const container = this.containerEl;\n            container.empty();\n            container.createEl('h2', { text: 'VaultPilot' });\n            const btn = container.createEl('button', { text: 'Run Workflow' });\n            btn.addEventListener('click', () => this.runWorkflow());\n            this.outputEl = container.createEl('pre');\n        });\n    }\n    runWorkflow() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const file = this.app.workspace.getActiveFile();\n            if (!file) {\n                new Notice('No active file');\n                return;\n            }\n            const content = yield this.app.vault.read(file);\n            try {\n                const resp = yield fetch(`${this.plugin.settings.backendUrl}/run`, {\n                    method: 'POST',\n                    headers: { 'Content-Type': 'application/json' },\n                    body: JSON.stringify({ content })\n                });\n                const text = yield resp.text();\n                if (this.outputEl)\n                    this.outputEl.textContent = text;\n            }\n            catch (err) {\n                new Notice('Failed to run workflow');\n                console.error(err);\n            }\n        });\n    }\n    onClose() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // nothing\n        });\n    }\n}\n//# sourceMappingURL=view.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts"],"map":"{\"version\":3,\"file\":\"view.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/view.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAE,QAAQ,EAAiB,MAAM,EAAE,MAAM,UAAU,CAAC;AAG3D,MAAM,CAAC,MAAM,oBAAoB,GAAG,iBAAiB,CAAC;AAEtD,MAAM,OAAO,cAAe,SAAQ,QAAQ;IAI1C,YAAY,IAAmB,EAAE,MAAwB;QACvD,KAAK,CAAC,IAAI,CAAC,CAAC;QAJN,aAAQ,GAAuB,IAAI,CAAC;QAK1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED,WAAW;QACT,OAAO,oBAAoB,CAAC;IAC9B,CAAC;IAED,cAAc;QACZ,OAAO,YAAY,CAAC;IACtB,CAAC;IAEK,MAAM;;YACV,MAAM,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC;YACnC,SAAS,CAAC,KAAK,EAAE,CAAC;YAClB,SAAS,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC;YACjD,MAAM,GAAG,GAAG,SAAS,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC;YACnE,GAAG,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;YACxD,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;KAAA;IAEK,WAAW;;YACf,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;YAChD,IAAI,CAAC,IAAI,EAAE,CAAC;gBACV,IAAI,MAAM,CAAC,gBAAgB,CAAC,CAAC;gBAC7B,OAAO;YACT,CAAC;YACD,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAChD,IAAI,CAAC;gBACH,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,MAAM,EAAE;oBACjE,MAAM,EAAE,MAAM;oBACd,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;oBAC/C,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,CAAC;iBAClC,CAAC,CAAC;gBACH,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC;gBAC/B,IAAI,IAAI,CAAC,QAAQ;oBAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,CAAC;YACtD,CAAC;YAAC,OAAO,GAAG,EAAE,CAAC;gBACb,IAAI,MAAM,CAAC,wBAAwB,CAAC,CAAC;gBACrC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACrB,CAAC;QACH,CAAC;KAAA;IAEK,OAAO;;YACX,UAAU;QACZ,CAAC;KAAA;CACF\",\"sourcesContent\":[\"import { ItemView, WorkspaceLeaf, Notice } from 'obsidian';\\nimport type VaultPilotPlugin from './main';\\n\\nexport const VIEW_TYPE_VAULTPILOT = 'vaultpilot-view';\\n\\nexport class VaultPilotView extends ItemView {\\n  private outputEl: HTMLElement | null = null;\\n  plugin: VaultPilotPlugin;\\n\\n  constructor(leaf: WorkspaceLeaf, plugin: VaultPilotPlugin) {\\n    super(leaf);\\n    this.plugin = plugin;\\n  }\\n\\n  getViewType(): string {\\n    return VIEW_TYPE_VAULTPILOT;\\n  }\\n\\n  getDisplayText(): string {\\n    return 'VaultPilot';\\n  }\\n\\n  async onOpen() {\\n    const container = this.containerEl;\\n    container.empty();\\n    container.createEl('h2', { text: 'VaultPilot' });\\n    const btn = container.createEl('button', { text: 'Run Workflow' });\\n    btn.addEventListener('click', () => this.runWorkflow());\\n    this.outputEl = container.createEl('pre');\\n  }\\n\\n  async runWorkflow() {\\n    const file = this.app.workspace.getActiveFile();\\n    if (!file) {\\n      new Notice('No active file');\\n      return;\\n    }\\n    const content = await this.app.vault.read(file);\\n    try {\\n      const resp = await fetch(`${this.plugin.settings.backendUrl}/run`, {\\n        method: 'POST',\\n        headers: { 'Content-Type': 'application/json' },\\n        body: JSON.stringify({ content })\\n      });\\n      const text = await resp.text();\\n      if (this.outputEl) this.outputEl.textContent = text;\\n    } catch (err) {\\n      new Notice('Failed to run workflow');\\n      console.error(err);\\n    }\\n  }\\n\\n  async onClose() {\\n    // nothing\\n  }\\n}\\n\"]}"}
