{"code":"import { __awaiter } from \"tslib\";\nimport { Plugin, Notice, MarkdownView } from 'obsidian';\nimport { VaultPilotSettingTab, DEFAULT_SETTINGS } from './settings';\nimport { VIEW_TYPE_VAULTPILOT, VaultPilotView } from './view';\nimport { VIEW_TYPE_VAULTPILOT_FULL_TAB, VaultPilotFullTabView } from './full-tab-view';\nimport { ChatModal } from './chat-modal';\nimport { WorkflowModal } from './workflow-modal';\nimport { EvoAgentXClient } from './api-client';\nimport { fetchSchedule, injectSchedule, validateScheduleMarkdown, findScheduleSection, findPlanSection } from './planner';\nimport { planMyDayDebugger } from './plan-my-day-debug';\nimport { setApp } from './vault-utils';\nimport { VaultManagementClient } from './vault-api-client';\nimport { createVaultManagementCommands } from './vault-commands';\nimport { ModelSelectionService } from './services/ModelSelectionService';\nimport { EnvironmentDetector } from './utils/EnvironmentDetector';\nimport { VaultStructureModal, SmartSearchModal, FileOperationsModal } from './vault-modals';\nimport { Phase3Integration } from './components/Phase3Integration';\nexport default class VaultPilotPlugin extends Plugin {\n    constructor() {\n        super(...arguments);\n        this.websocketConnected = false;\n        this.copilotEnabled = false;\n    }\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c;\n            yield this.loadSettings();\n            // Initialize app instance for vault-utils\n            setApp(this.app);\n            // Initialize API client\n            this.apiClient = new EvoAgentXClient(this.settings.backendUrl, this.settings.apiKey);\n            // Initialize vault management if enabled\n            if ((_a = this.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.enableVaultManagement) {\n                this.initializeVaultManagement();\n            }\n            // Initialize model selection if enabled (with error handling)\n            if ((_b = this.settings.modelSelection) === null || _b === void 0 ? void 0 : _b.enabled) {\n                // Don't await - initialize in background to avoid blocking plugin load\n                this.initializeModelSelection().catch(error => {\n                    if (this.settings.debugMode) {\n                        console.warn('Model selection initialization failed during plugin load:', error);\n                    }\n                    // Silently fail during plugin initialization\n                });\n            }\n            // Test backend connection\n            try {\n                let response = yield this.apiClient.healthCheck();\n                // If the main health check fails with a 400, try the simple check\n                if (!response.success && ((_c = response.error) === null || _c === void 0 ? void 0 : _c.includes('400'))) {\n                    console.warn('Main health check failed with 400, trying alternative method');\n                    const simpleResponse = yield this.apiClient.simpleHealthCheck();\n                    if (simpleResponse.success && simpleResponse.data) {\n                        response = {\n                            success: true,\n                            data: { status: simpleResponse.data.status, version: 'unknown' }\n                        };\n                    }\n                }\n                if (response.success) {\n                    new Notice('✅ VaultPilot connected to EvoAgentX', 3000);\n                    // Connect WebSocket if enabled\n                    if (this.settings.enableWebSocket) {\n                        this.connectWebSocket();\n                    }\n                }\n                else {\n                    console.error('Health check failed:', response.error);\n                    new Notice('⚠️ EvoAgentX backend offline - some features may not work', 5000);\n                }\n            }\n            catch (error) {\n                console.error('Health check error:', error);\n                new Notice('⚠️ Cannot connect to EvoAgentX backend', 5000);\n            }\n            // Register views\n            this.registerView(VIEW_TYPE_VAULTPILOT, (leaf) => new VaultPilotView(leaf, this));\n            this.registerView(VIEW_TYPE_VAULTPILOT_FULL_TAB, (leaf) => new VaultPilotFullTabView(leaf, this));\n            // Add ribbon icon\n            const ribbonIconEl = this.addRibbonIcon('bot', 'VaultPilot', (evt) => {\n                if (evt.ctrlKey || evt.metaKey) {\n                    // Open full tab view on Ctrl/Cmd + click\n                    this.activateFullTabView();\n                }\n                else {\n                    // Default action: open chat modal\n                    this.openChatModal();\n                }\n            });\n            ribbonIconEl.addClass('vaultpilot-ribbon-class');\n            ribbonIconEl.title = 'VaultPilot (Ctrl+click for Dashboard)';\n            // Register commands\n            this.addCommand({\n                id: 'open-chat',\n                name: 'Open Chat',\n                callback: () => this.openChatModal()\n            });\n            this.addCommand({\n                id: 'execute-workflow',\n                name: 'Execute Workflow',\n                callback: () => this.openWorkflowModal()\n            });\n            this.addCommand({\n                id: 'analyze-vault',\n                name: 'Analyze Current Vault',\n                callback: () => this.analyzeVault()\n            });\n            this.addCommand({\n                id: 'copilot-complete',\n                name: 'Get AI Completion',\n                editorCallback: (editor) => this.getCopilotCompletion(editor)\n            });\n            this.addCommand({\n                id: 'quick-chat',\n                name: 'Quick Chat with Selection',\n                editorCallback: (editor) => this.quickChatWithSelection(editor)\n            });\n            this.addCommand({\n                id: 'plan-tasks',\n                name: 'Plan Tasks from Note',\n                editorCallback: (editor) => this.planTasksFromNote(editor)\n            });\n            this.addCommand({\n                id: 'plan-my-day',\n                name: 'Plan My Day',\n                callback: () => this.planMyDay()\n            });\n            this.addCommand({\n                id: 'plan-my-day-debug',\n                name: 'Plan My Day - Debug Connection',\n                callback: () => this.debugPlanMyDay()\n            });\n            this.addCommand({\n                id: 'test-model-selection',\n                name: 'Test Smart Model Selection',\n                callback: () => this.testModelSelection()\n            });\n            this.addCommand({\n                id: 'show-model-health',\n                name: 'Show Model Health Status',\n                callback: () => this.showModelHealth()\n            });\n            this.addCommand({\n                id: 'retry-model-selection',\n                name: 'Retry Model Selection Initialization',\n                callback: () => this.retryModelSelectionManual()\n            });\n            this.addCommand({\n                id: 'check-service-status',\n                name: 'Check VaultPilot Service Status',\n                callback: () => this.checkServiceStatus()\n            });\n            this.addCommand({\n                id: 'open-vaultpilot-view',\n                name: 'Open VaultPilot View',\n                callback: () => this.activateView()\n            });\n            this.addCommand({\n                id: 'open-vaultpilot-full-tab',\n                name: 'Open VaultPilot Dashboard',\n                callback: () => this.activateFullTabView()\n            });\n            // Register vault management commands\n            this.registerVaultManagementCommands();\n            // Initialize Phase 3 features\n            this.initializePhase3();\n            // Register editor events for copilot\n            if (this.settings.enableCopilot && this.settings.enableAutoComplete) {\n                this.registerDomEvent(document, 'keyup', this.handleKeyUp.bind(this));\n            }\n            // Add settings tab\n            this.addSettingTab(new VaultPilotSettingTab(this.app, this));\n        });\n    }\n    onunload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.app.workspace.detachLeavesOfType(VIEW_TYPE_VAULTPILOT);\n            this.app.workspace.detachLeavesOfType(VIEW_TYPE_VAULTPILOT_FULL_TAB);\n            this.disconnectWebSocket();\n            yield this.disconnectModelSelection();\n            this.disablePhase3();\n        });\n    }\n    // WebSocket Management\n    connectWebSocket() {\n        if (this.websocketConnected)\n            return;\n        this.apiClient.connectWebSocket({\n            onChat: (data) => {\n                // Handle real-time chat updates\n                console.log('WebSocket chat update:', data);\n            },\n            onWorkflowProgress: (data) => {\n                // Handle workflow progress updates\n                new Notice(`Workflow: ${data.step}`, 2000);\n            },\n            onCopilot: (data) => {\n                // Handle copilot suggestions\n                this.handleCopilotSuggestion(data);\n            },\n            onVaultSync: (data) => {\n                // Handle vault synchronization\n                console.log('Vault sync update:', data);\n            },\n            onIntentDebug: (debug) => {\n                // Handle intent debug info (only in debug mode)\n                if (this.settings.showIntentDebug && this.settings.debugMode) {\n                    console.log('Intent debug:', debug);\n                }\n            },\n            onError: (error) => {\n                new Notice(`WebSocket error: ${error}`, 5000);\n            },\n            onConnect: () => {\n                this.websocketConnected = true;\n                if (this.settings.debugMode) {\n                    new Notice('WebSocket connected', 2000);\n                }\n            },\n            onDisconnect: () => {\n                this.websocketConnected = false;\n                if (this.settings.debugMode) {\n                    new Notice('WebSocket disconnected', 2000);\n                }\n            }\n        });\n    }\n    disconnectWebSocket() {\n        this.apiClient.disconnectWebSocket();\n        this.websocketConnected = false;\n    }\n    isWebSocketConnected() {\n        return this.websocketConnected;\n    }\n    // Modal Management\n    openChatModal() {\n        new ChatModal(this.app, this).open();\n    }\n    openWorkflowModal() {\n        new WorkflowModal(this.app, this).open();\n    }\n    // Command Implementations\n    analyzeVault() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const notice = new Notice('Analyzing vault...', 0);\n            try {\n                // Get all markdown files\n                const files = this.app.vault.getMarkdownFiles();\n                let content = '';\n                // Include up to 10 files to avoid overwhelming the API\n                for (const file of files.slice(0, 10)) {\n                    const fileContent = yield this.app.vault.read(file);\n                    content += `=== ${file.name} ===\\n${fileContent}\\n\\n`;\n                }\n                const response = yield this.apiClient.analyzeVaultContext({\n                    content,\n                    analysis_type: 'insights'\n                });\n                notice.hide();\n                if (response.success && response.data) {\n                    // Create analysis note\n                    const timestamp = new Date().toISOString().split('T')[0];\n                    const filename = `Vault Analysis ${timestamp}.md`;\n                    let analysisContent = `# Vault Analysis - ${timestamp}\\n\\n`;\n                    analysisContent += `## Analysis\\n\\n${response.data.analysis}\\n\\n`;\n                    if (response.data.insights && response.data.insights.length > 0) {\n                        analysisContent += `## Key Insights\\n\\n`;\n                        response.data.insights.forEach(insight => {\n                            analysisContent += `- ${insight}\\n`;\n                        });\n                        analysisContent += '\\n';\n                    }\n                    if (response.data.recommendations && response.data.recommendations.length > 0) {\n                        analysisContent += `## Recommendations\\n\\n`;\n                        response.data.recommendations.forEach(rec => {\n                            analysisContent += `- ${rec}\\n`;\n                        });\n                    }\n                    yield this.app.vault.create(filename, analysisContent);\n                    new Notice(`Vault analysis saved as ${filename}`);\n                }\n                else {\n                    throw new Error(response.error || 'Analysis failed');\n                }\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`Analysis error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    getCopilotCompletion(editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.settings.enableCopilot) {\n                new Notice('Copilot is disabled in settings');\n                return;\n            }\n            const cursor = editor.getCursor();\n            const currentLine = editor.getLine(cursor.line);\n            const textBeforeCursor = currentLine.substring(0, cursor.ch);\n            const fullText = editor.getValue();\n            // Client-side validation to prevent 422 errors\n            if (!fullText || fullText.trim().length === 0) {\n                new Notice('Cannot complete empty text');\n                return;\n            }\n            try {\n                const response = yield this.apiClient.getCopilotCompletion({\n                    text: fullText,\n                    cursor_position: editor.posToOffset(cursor),\n                    file_type: 'markdown',\n                    context: textBeforeCursor\n                });\n                if (response.success && response.data) {\n                    // Insert completion at cursor\n                    editor.replaceRange(response.data.completion, cursor);\n                    new Notice('Completion inserted', 2000);\n                }\n                else {\n                    new Notice(`Copilot error: ${response.error}`);\n                }\n            }\n            catch (error) {\n                new Notice(`Copilot error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    quickChatWithSelection(editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const selection = editor.getSelection();\n            if (!selection) {\n                new Notice('No text selected');\n                return;\n            }\n            try {\n                const response = yield this.apiClient.chat({\n                    message: `Please explain or analyze this text: \"${selection}\"`,\n                    vault_context: editor.getValue()\n                });\n                if (response.success && response.data) {\n                    // Insert response below selection\n                    const cursor = editor.getCursor('to');\n                    const newLine = `\\n\\n**VaultPilot Analysis:**\\n${response.data.response}\\n\\n`;\n                    editor.replaceRange(newLine, cursor);\n                    new Notice('Analysis inserted', 2000);\n                }\n                else {\n                    new Notice(`Chat error: ${response.error}`);\n                }\n            }\n            catch (error) {\n                new Notice(`Chat error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    planTasksFromNote(editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const content = editor.getValue();\n            const activeFile = this.app.workspace.getActiveFile();\n            if (!content.trim()) {\n                new Notice('No content to analyze');\n                return;\n            }\n            const notice = new Notice('Planning tasks...', 0);\n            try {\n                const response = yield this.apiClient.planTasks({\n                    goal: `Create a task plan based on this note: ${(activeFile === null || activeFile === void 0 ? void 0 : activeFile.name) || 'Untitled'}`,\n                    context: content,\n                    timeframe: '1 week'\n                });\n                notice.hide();\n                if (response.success && response.data) {\n                    // Create task plan note\n                    const timestamp = new Date().toISOString().split('T')[0];\n                    const filename = `Task Plan - ${(activeFile === null || activeFile === void 0 ? void 0 : activeFile.basename) || 'Untitled'} - ${timestamp}.md`;\n                    let taskContent = `# ${response.data.plan.title}\\n\\n`;\n                    taskContent += `${response.data.plan.description}\\n\\n`;\n                    taskContent += `**Estimated Duration:** ${response.data.plan.estimated_duration}\\n\\n`;\n                    if (response.data.plan.tasks && response.data.plan.tasks.length > 0) {\n                        taskContent += `## Tasks\\n\\n`;\n                        response.data.plan.tasks.forEach((task) => {\n                            const checkbox = task.status === 'completed' ? '[x]' : '[ ]';\n                            taskContent += `${checkbox} **${task.title}** (${task.priority} priority)\\n`;\n                            taskContent += `   ${task.description}\\n`;\n                            taskContent += `   *Estimated time: ${task.estimated_time}*\\n\\n`;\n                        });\n                    }\n                    if (response.data.milestones && response.data.milestones.length > 0) {\n                        taskContent += `## Milestones\\n\\n`;\n                        response.data.milestones.forEach((milestone) => {\n                            taskContent += `- **${milestone.title}** (${milestone.target_date})\\n`;\n                            taskContent += `  ${milestone.description}\\n\\n`;\n                        });\n                    }\n                    yield this.app.vault.create(filename, taskContent);\n                    new Notice(`Task plan saved as ${filename}`);\n                }\n                else {\n                    throw new Error(response.error || 'Task planning failed');\n                }\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`Task planning error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    planMyDay() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            console.log('🚀 [Plan My Day] Command started');\n            const activeFile = this.app.workspace.getActiveFile();\n            if (!activeFile) {\n                console.warn('⚠️ [Plan My Day] No active file found');\n                new Notice('No active note—open today\\'s daily note first.');\n                return;\n            }\n            console.log('📁 [Plan My Day] Active file:', {\n                name: activeFile.name,\n                path: activeFile.path,\n                extension: activeFile.extension\n            });\n            const notice = new Notice('Planning your day with AI...', 0);\n            try {\n                console.log('📖 [Plan My Day] Reading file content...');\n                // Read the entire file content\n                const fileText = yield this.app.vault.read(activeFile);\n                console.log('📝 [Plan My Day] File content read:', {\n                    length: fileText.length,\n                    hasContent: fileText.trim().length > 0,\n                    firstLine: fileText.split('\\n')[0],\n                    lineCount: fileText.split('\\n').length\n                });\n                console.log('🔍 [Plan My Day] Checking API client...');\n                console.log('🔗 [Plan My Day] API client status:', {\n                    exists: !!this.apiClient,\n                    type: typeof this.apiClient,\n                    isConnected: this.apiClient ? 'available' : 'not available'\n                });\n                if (!this.apiClient) {\n                    const error = 'API client not initialized. Check VaultPilot settings and connection.';\n                    console.error('❌ [Plan My Day] Error:', error);\n                    throw new Error(error);\n                }\n                console.log('📤 [Plan My Day] Fetching schedule from EvoAgentX...');\n                // Fetch schedule from EvoAgentX instead of localhost:3000\n                const { scheduleMarkdown, headline } = yield fetchSchedule(fileText, this.apiClient);\n                console.log('📋 [Plan My Day] Schedule received:', {\n                    markdownLength: scheduleMarkdown.length,\n                    headline: headline,\n                    firstLine: scheduleMarkdown.split('\\n')[0]\n                });\n                console.log('✅ [Plan My Day] Validating schedule...');\n                // Validate the returned schedule\n                if (!validateScheduleMarkdown(scheduleMarkdown)) {\n                    const error = 'Invalid schedule data received from API';\n                    console.error('❌ [Plan My Day] Validation failed:', {\n                        scheduleMarkdown: scheduleMarkdown.substring(0, 200),\n                        length: scheduleMarkdown.length\n                    });\n                    throw new Error(error);\n                }\n                console.log('📝 [Plan My Day] Injecting schedule into note...');\n                // Check if note already has a plan section (comment wrapper) or schedule section\n                const existingPlanSection = findPlanSection(fileText);\n                const existingScheduleSection = findScheduleSection(fileText);\n                console.log('🔍 [Plan My Day] Existing sections:', {\n                    hasPlanWrapper: !!existingPlanSection,\n                    hasScheduleSection: !!existingScheduleSection,\n                    planContent: (_a = existingPlanSection === null || existingPlanSection === void 0 ? void 0 : existingPlanSection[2]) === null || _a === void 0 ? void 0 : _a.substring(0, 50),\n                    scheduleHeading: (_b = existingScheduleSection === null || existingScheduleSection === void 0 ? void 0 : existingScheduleSection[1]) === null || _b === void 0 ? void 0 : _b.substring(0, 50)\n                });\n                // Inject the schedule into the note\n                const updatedText = injectSchedule(fileText, scheduleMarkdown);\n                console.log('💾 [Plan My Day] Updating file...', {\n                    originalLength: fileText.length,\n                    updatedLength: updatedText.length,\n                    changed: fileText !== updatedText\n                });\n                // Update the file\n                yield this.app.vault.modify(activeFile, updatedText);\n                console.log('✅ [Plan My Day] File updated successfully');\n                // Hide the progress notice\n                notice.hide();\n                // Show success notice\n                const successMessage = headline ? `${headline} ✅` : 'Schedule inserted ✅';\n                console.log('🎉 [Plan My Day] Success:', successMessage);\n                new Notice(successMessage);\n            }\n            catch (error) {\n                console.error('❌ [Plan My Day] Operation failed:', error);\n                console.error('🔍 [Plan My Day] Error details:', {\n                    message: error instanceof Error ? error.message : String(error),\n                    stack: error instanceof Error ? error.stack : 'No stack trace',\n                    type: typeof error,\n                    name: error instanceof Error ? error.name : 'Unknown'\n                });\n                notice.hide();\n                // Handle different types of errors from EvoAgentX\n                if (error instanceof Error) {\n                    const errorMessage = error.message;\n                    console.log('🔍 [Plan My Day] Analyzing error message:', errorMessage);\n                    if (errorMessage.includes('API client not initialized')) {\n                        console.error('❌ [Plan My Day] API client not initialized');\n                        new Notice('Planning error: VaultPilot not connected to EvoAgentX. Check settings and restart plugin.');\n                    }\n                    else if (errorMessage.includes('does not have planTasks method')) {\n                        console.error('❌ [Plan My Day] API client missing planTasks method');\n                        new Notice('Planning error: EvoAgentX API client outdated. Please update VaultPilot plugin.');\n                    }\n                    else if (errorMessage.includes('JSON') || errorMessage.includes('Invalid schedule data')) {\n                        console.error('❌ [Plan My Day] Invalid response format');\n                        new Notice('Planning error: Invalid response format from EvoAgentX');\n                    }\n                    else if (errorMessage.includes('fetch') || errorMessage.includes('network') || errorMessage.includes('Failed to fetch')) {\n                        console.error('❌ [Plan My Day] Network error');\n                        new Notice('Planning error: Unable to connect to EvoAgentX server. Check your connection and server status.');\n                    }\n                    else if (errorMessage.includes('Failed to generate schedule') || errorMessage.includes('Schedule fetch failed')) {\n                        console.error('❌ [Plan My Day] Schedule generation failed');\n                        new Notice('Planning error: EvoAgentX task planning failed. Check server logs for details.');\n                    }\n                    else if (errorMessage.includes('No data in API response')) {\n                        console.error('❌ [Plan My Day] Empty API response');\n                        new Notice('Planning error: EvoAgentX returned empty response. Try again or check server status.');\n                    }\n                    else {\n                        console.error('❌ [Plan My Day] Unhandled error');\n                        new Notice(`Planning error: ${errorMessage.substring(0, 100)}${errorMessage.length > 100 ? '...' : ''}`);\n                    }\n                }\n                else {\n                    console.error('❌ [Plan My Day] Non-Error object thrown');\n                    new Notice('Planning error: Unknown error occurred with EvoAgentX');\n                }\n                // Always log the full error for debugging\n                console.log('🔍 [Plan My Day] Full error log completed');\n            }\n        });\n    }\n    debugPlanMyDay() {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('🔍 [Plan My Day Debug] Starting comprehensive debug...');\n            planMyDayDebugger.clearLogs();\n            const notice = new Notice('Running Plan My Day diagnostics...', 0);\n            try {\n                // Test 1: Check active file\n                const activeFile = this.app.workspace.getActiveFile();\n                planMyDayDebugger.log('📁 Active file check', {\n                    hasActiveFile: !!activeFile,\n                    fileName: activeFile === null || activeFile === void 0 ? void 0 : activeFile.name,\n                    fileExtension: activeFile === null || activeFile === void 0 ? void 0 : activeFile.extension\n                });\n                // Test 2: Analyze API client\n                const apiAnalysis = planMyDayDebugger.analyzeApiClient(this.apiClient);\n                planMyDayDebugger.log('🔗 API client analysis', apiAnalysis);\n                // Test 3: Test EvoAgentX connection\n                if (this.apiClient) {\n                    const connectionTest = yield planMyDayDebugger.testConnection(this.apiClient);\n                    planMyDayDebugger.log('🌐 Connection test result', connectionTest);\n                    // Test 4: Test task planning functionality\n                    if (connectionTest.success) {\n                        const planningTest = yield planMyDayDebugger.testTaskPlanning(this.apiClient, 'Test note with some tasks:\\n- Write code\\n- Test functionality\\n- Review results');\n                        planMyDayDebugger.log('📋 Task planning test result', planningTest);\n                    }\n                }\n                // Test 5: Check settings\n                planMyDayDebugger.log('⚙️ Plugin settings', {\n                    backendUrl: this.settings.backendUrl,\n                    hasApiKey: !!this.settings.apiKey,\n                    debugMode: this.settings.debugMode\n                });\n                notice.hide();\n                // Show results in a modal or console\n                const logs = planMyDayDebugger.getLogs();\n                console.log('🔍 [Plan My Day Debug] Complete diagnostic log:', logs);\n                const logSummary = logs.slice(-5).join('\\n'); // Last 5 entries\n                new Notice(`Debug complete! Check console for full logs.\\n\\nLast entries:\\n${logSummary}`, 10000);\n                // Create a debug file if active file exists\n                if (activeFile) {\n                    const debugContent = `# Plan My Day Debug Report\\n\\nGenerated: ${new Date().toISOString()}\\n\\n## Diagnostic Results\\n\\n\\`\\`\\`\\n${planMyDayDebugger.exportLogs()}\\n\\`\\`\\``;\n                    yield this.app.vault.create(`Plan My Day Debug - ${Date.now()}.md`, debugContent);\n                    new Notice('Debug report saved as new note!');\n                }\n            }\n            catch (error) {\n                notice.hide();\n                planMyDayDebugger.error('Debug process failed', error);\n                new Notice(`Debug failed: ${error instanceof Error ? error.message : String(error)}`);\n            }\n        });\n    }\n    activateView() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_VAULTPILOT);\n            if (leaves.length === 0) {\n                const rightLeaf = this.app.workspace.getRightLeaf(false);\n                if (rightLeaf) {\n                    yield rightLeaf.setViewState({\n                        type: VIEW_TYPE_VAULTPILOT,\n                        active: true\n                    });\n                }\n            }\n            else {\n                this.app.workspace.revealLeaf(leaves[0]);\n            }\n        });\n    }\n    activateFullTabView() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_VAULTPILOT_FULL_TAB);\n            if (leaves.length === 0) {\n                // Create a new tab in the main workspace\n                const newLeaf = this.app.workspace.getLeaf('tab');\n                if (newLeaf) {\n                    yield newLeaf.setViewState({\n                        type: VIEW_TYPE_VAULTPILOT_FULL_TAB,\n                        active: true\n                    });\n                }\n            }\n            else {\n                this.app.workspace.revealLeaf(leaves[0]);\n            }\n        });\n    }\n    // === VAULT MANAGEMENT METHODS ===\n    initializeVaultManagement() {\n        var _a;\n        if (!((_a = this.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.enableVaultManagement))\n            return;\n        this.vaultClient = new VaultManagementClient(this.settings.backendUrl, this.settings.apiKey);\n        if (this.settings.debugMode) {\n            console.log('Vault management initialized');\n        }\n    }\n    disableVaultManagement() {\n        this.vaultClient = null;\n        if (this.settings.debugMode) {\n            console.log('Vault management disabled');\n        }\n    }\n    registerVaultManagementCommands() {\n        const commands = createVaultManagementCommands();\n        commands.forEach(command => {\n            var _a, _b;\n            this.addCommand(Object.assign(Object.assign({}, command), { callback: (_a = command.callback) === null || _a === void 0 ? void 0 : _a.bind(this), editorCallback: (_b = command.editorCallback) === null || _b === void 0 ? void 0 : _b.bind(this) }));\n        });\n    }\n    // Modal opening methods for vault management\n    openVaultStructureModal() {\n        if (!this.vaultClient) {\n            new Notice('Vault management not available');\n            return;\n        }\n        new VaultStructureModal(this.app, this).open();\n    }\n    openSmartSearchModal(query, type) {\n        if (!this.vaultClient) {\n            new Notice('Vault management not available');\n            return;\n        }\n        const modal = new SmartSearchModal(this.app, this);\n        if (query)\n            modal.setInitialQuery(query, type);\n        modal.open();\n    }\n    openFileOperationsModal(path, operation) {\n        if (!this.vaultClient) {\n            new Notice('Vault management not available');\n            return;\n        }\n        const modal = new FileOperationsModal(this.app, this);\n        if (path)\n            modal.setInitialPath(path);\n        if (operation)\n            modal.setOperation(operation);\n        modal.open();\n    }\n    openVaultOrganizerModal() {\n        new Notice('Vault organizer modal not yet implemented');\n    }\n    openBatchOperationsModal() {\n        new Notice('Batch operations modal not yet implemented');\n    }\n    // === END VAULT MANAGEMENT METHODS ===\n    // === PHASE 3 INTEGRATION ===\n    initializePhase3() {\n        // For now, always initialize Phase 3 features\n        try {\n            this.phase3Integration = new Phase3Integration(this, {\n                autoShowOnboarding: !this.settings.onboardingComplete\n            });\n            // Load the Phase 3 integration\n            this.phase3Integration.onload();\n            if (this.settings.debugMode) {\n                console.log('Phase 3 features initialized successfully');\n            }\n            // Show onboarding for first-time users\n            if (!this.settings.onboardingComplete) {\n                // Delay onboarding slightly to let plugin fully load\n                setTimeout(() => {\n                    var _a;\n                    (_a = this.phase3Integration) === null || _a === void 0 ? void 0 : _a.showOnboardingIfNeeded();\n                }, 1000);\n            }\n        }\n        catch (error) {\n            console.error('Failed to initialize Phase 3 features:', error);\n            if (this.settings.debugMode) {\n                new Notice('Phase 3 features failed to initialize - check console for details', 5000);\n            }\n        }\n    }\n    disablePhase3() {\n        if (this.phase3Integration) {\n            this.phase3Integration.onunload();\n            this.phase3Integration = undefined;\n        }\n        if (this.settings.debugMode) {\n            console.log('Phase 3 features disabled');\n        }\n    }\n    // === END PHASE 3 INTEGRATION ===\n    // Auto-completion handling\n    handleKeyUp(event) {\n        if (!this.settings.enableAutoComplete || !this.settings.enableCopilot)\n            return;\n        const target = event.target;\n        if (!target.classList.contains('cm-content'))\n            return;\n        // Only trigger on specific keys and conditions\n        if (!this.shouldTriggerAutoComplete(event))\n            return;\n        // Debounce auto-completion requests with longer delay\n        clearTimeout(this.autoCompleteTimeout);\n        this.autoCompleteTimeout = setTimeout(() => {\n            this.triggerAutoCompletion();\n        }, 3000); // Increased to 3 seconds\n    }\n    shouldTriggerAutoComplete(event) {\n        // Don't trigger on navigation or modifier keys\n        const nonTriggerKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Tab', 'Shift', 'Control', 'Alt', 'Meta', 'Escape'];\n        if (nonTriggerKeys.indexOf(event.key) !== -1) {\n            return false;\n        }\n        const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);\n        if (!activeView)\n            return false;\n        const editor = activeView.editor;\n        const cursor = editor.getCursor();\n        const currentLine = editor.getLine(cursor.line);\n        // Only trigger at the end of a line\n        if (cursor.ch !== currentLine.length)\n            return false;\n        // Check for sentence-ending triggers\n        const triggerChars = ['.', '!', '?', ':', '\\n'];\n        const lastChar = currentLine.slice(-1);\n        // Trigger after sentence endings with space\n        if (triggerChars.indexOf(lastChar) !== -1 && event.key === ' ') {\n            return true;\n        }\n        // Trigger after Enter key (new line)\n        if (event.key === 'Enter' && currentLine.trim().length > 10) {\n            return true;\n        }\n        return false;\n    }\n    triggerAutoCompletion() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);\n            if (!activeView)\n                return;\n            const editor = activeView.editor;\n            const cursor = editor.getCursor();\n            const currentLine = editor.getLine(cursor.line);\n            const fullText = editor.getValue();\n            // More restrictive conditions for auto-completion\n            if (currentLine.trim().length < 10 || cursor.ch !== currentLine.length)\n                return;\n            // Prevent 422 errors from empty text\n            if (!fullText || fullText.trim().length === 0)\n                return;\n            // Add cooldown to prevent too frequent requests\n            const now = Date.now();\n            const lastRequest = this.lastAutoCompleteRequest || 0;\n            if (now - lastRequest < 10000)\n                return; // 10 second cooldown\n            this.lastAutoCompleteRequest = now;\n            try {\n                const response = yield this.apiClient.getCopilotCompletion({\n                    text: fullText,\n                    cursor_position: editor.posToOffset(cursor),\n                    file_type: 'markdown'\n                });\n                if (response.success && response.data && response.data.suggestions.length > 0) {\n                    // Show suggestions (for now just show first suggestion)\n                    if (this.settings.debugMode) {\n                        new Notice(`Auto-suggestion: ${response.data.suggestions[0]}`, 3000);\n                    }\n                }\n            }\n            catch (error) {\n                // Silently fail for auto-completion\n                if (this.settings.debugMode) {\n                    console.error('Auto-completion error:', error);\n                }\n            }\n        });\n    }\n    handleCopilotSuggestion(data) {\n        // Handle real-time copilot suggestions from WebSocket\n        if (this.settings.debugMode) {\n            new Notice(`Live suggestion: ${data.completion}`, 2000);\n        }\n    }\n    // Settings management\n    loadSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());\n        });\n    }\n    saveSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            yield this.saveData(this.settings);\n            // Update API client if URL changed\n            this.apiClient = new EvoAgentXClient(this.settings.backendUrl, this.settings.apiKey);\n            // Reinitialize vault management if settings changed\n            if ((_a = this.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.enableVaultManagement) {\n                this.initializeVaultManagement();\n            }\n            else {\n                this.disableVaultManagement();\n            }\n            // Reinitialize model selection if settings changed\n            if ((_b = this.settings.modelSelection) === null || _b === void 0 ? void 0 : _b.enabled) {\n                yield this.initializeModelSelection();\n            }\n            else {\n                yield this.disconnectModelSelection();\n            }\n            // Reconnect WebSocket if settings changed\n            if (this.settings.enableWebSocket && !this.websocketConnected) {\n                this.connectWebSocket();\n            }\n            else if (!this.settings.enableWebSocket && this.websocketConnected) {\n                this.disconnectWebSocket();\n            }\n        });\n    }\n    // Model Selection Management Methods\n    initializeModelSelection() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (!((_a = this.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.enabled)) {\n                if (this.settings.debugMode) {\n                    console.log('Model selection disabled in settings');\n                }\n                return;\n            }\n            try {\n                // Validate environment\n                const env = EnvironmentDetector.detect();\n                if (!env.hasHTTP) {\n                    throw new Error('HTTP transport not available');\n                }\n                // Initialize service with error boundary\n                this.modelSelectionService = new ModelSelectionService(this.settings.backendUrl, this.settings.modelSelection.devpipePath, {\n                    monitoring_interval: this.settings.modelSelection.monitoringInterval,\n                    fallback_enabled: this.settings.modelSelection.fallbackEnabled,\n                    cache_duration: this.settings.modelSelection.cacheDuration,\n                    retry_attempts: this.settings.modelSelection.retryAttempts,\n                    timeout: this.settings.modelSelection.timeout,\n                    debug_mode: this.settings.modelSelection.debugMode\n                });\n                yield this.modelSelectionService.updatePreferences({\n                    priority: this.settings.modelSelection.userPreferences.priority,\n                    max_cost_per_request: this.settings.modelSelection.userPreferences.maxCostPerRequest,\n                    preferred_providers: this.settings.modelSelection.userPreferences.preferredProviders,\n                    fallback_enabled: this.settings.modelSelection.fallbackEnabled,\n                    quality_threshold: this.settings.modelSelection.userPreferences.qualityThreshold,\n                    timeout_preference: this.settings.modelSelection.timeout\n                });\n                yield this.modelSelectionService.initialize();\n                if (this.settings.debugMode) {\n                    console.log('ModelSelectionService initialized successfully');\n                }\n                new Notice('🤖 Smart model selection enabled', 3000);\n            }\n            catch (error) {\n                console.error('Failed to initialize ModelSelectionService:', error);\n                // Show user-friendly error message\n                if (error instanceof Error) {\n                    if (error.message.includes('not accessible') || error.message.includes('Failed to fetch')) {\n                        if (this.settings.debugMode) {\n                            new Notice('⚠️ Model selection service unavailable - using fallback mode', 4000);\n                        }\n                        // Don't show error to user in production - just log it\n                    }\n                    else if (error.message.includes('transport not available')) {\n                        new Notice('⚠️ Model selection not supported in this environment', 5000);\n                    }\n                    else {\n                        if (this.settings.debugMode) {\n                            new Notice('⚠️ Model selection initialization failed', 3000);\n                        }\n                    }\n                }\n                // Set up retry mechanism\n                if (this.settings.modelSelection.retryAttempts > 0) {\n                    setTimeout(() => {\n                        this.retryModelSelectionInit(1);\n                    }, 10000); // Retry after 10 seconds\n                }\n            }\n        });\n    }\n    retryModelSelectionInit(attempt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (attempt > (((_a = this.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.retryAttempts) || 3)) {\n                if (this.settings.debugMode) {\n                    console.log('Model selection initialization retry limit reached');\n                }\n                return;\n            }\n            try {\n                if (this.settings.debugMode) {\n                    console.log(`Retrying model selection initialization (attempt ${attempt})`);\n                }\n                yield this.initializeModelSelection();\n            }\n            catch (error) {\n                // Exponential backoff for retries\n                const delay = Math.min(30000, 5000 * Math.pow(2, attempt - 1));\n                setTimeout(() => {\n                    this.retryModelSelectionInit(attempt + 1);\n                }, delay);\n            }\n        });\n    }\n    checkServiceStatus() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            const notice = new Notice('Checking VaultPilot service status...', 0);\n            try {\n                let statusText = '🔍 VaultPilot Service Status:\\n\\n';\n                // Check main backend connection\n                try {\n                    const response = yield this.apiClient.healthCheck();\n                    if (response.success) {\n                        statusText += '✅ Main Backend: Connected\\n';\n                        statusText += `   Server: ${this.settings.backendUrl}\\n`;\n                    }\n                    else {\n                        statusText += '❌ Main Backend: Failed\\n';\n                        statusText += `   Error: ${response.error}\\n`;\n                    }\n                }\n                catch (error) {\n                    statusText += '❌ Main Backend: Connection Error\\n';\n                }\n                // Check WebSocket connection\n                if (this.isWebSocketConnected()) {\n                    statusText += '✅ WebSocket: Connected\\n';\n                }\n                else {\n                    statusText += '❌ WebSocket: Disconnected\\n';\n                }\n                // Check model selection service\n                if ((_a = this.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.enabled) {\n                    if (this.modelSelectionService && this.modelSelectionService.isConnected()) {\n                        statusText += '✅ Model Selection: Connected\\n';\n                    }\n                    else {\n                        statusText += '❌ Model Selection: Not Available\\n';\n                        if (!this.modelSelectionService) {\n                            statusText += '   Reason: Service not initialized\\n';\n                        }\n                        else {\n                            statusText += '   Reason: Service disconnected\\n';\n                        }\n                    }\n                }\n                else {\n                    statusText += '⚠️ Model Selection: Disabled in settings\\n';\n                }\n                // Check vault management\n                if ((_b = this.settings.vaultManagement) === null || _b === void 0 ? void 0 : _b.enableVaultManagement) {\n                    if (this.vaultClient) {\n                        statusText += '✅ Vault Management: Enabled\\n';\n                    }\n                    else {\n                        statusText += '❌ Vault Management: Failed to initialize\\n';\n                    }\n                }\n                else {\n                    statusText += '⚠️ Vault Management: Disabled in settings\\n';\n                }\n                notice.hide();\n                new Notice(statusText, 15000);\n                if (this.settings.debugMode) {\n                    console.log('VaultPilot Service Status:', statusText);\n                }\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`❌ Failed to check service status: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\n            }\n        });\n    }\n    retryModelSelectionManual() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.modelSelectionService && this.modelSelectionService.isConnected()) {\n                new Notice('Model selection already connected', 3000);\n                return;\n            }\n            const notice = new Notice('Retrying model selection initialization...', 0);\n            try {\n                yield this.initializeModelSelection();\n                notice.hide();\n                new Notice('✅ Model selection connected successfully', 3000);\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`❌ Model selection retry failed: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\n            }\n        });\n    }\n    disconnectModelSelection() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.modelSelectionService) {\n                try {\n                    yield this.modelSelectionService.disconnect();\n                    this.modelSelectionService = undefined;\n                    if (this.settings.debugMode) {\n                        console.log('ModelSelectionService disconnected');\n                    }\n                }\n                catch (error) {\n                    console.error('Error disconnecting ModelSelectionService:', error);\n                }\n            }\n        });\n    }\n    testModelSelection() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.modelSelectionService) {\n                new Notice('❌ Model selection service not initialized', 5000);\n                return;\n            }\n            const notice = new Notice('🤖 Testing model selection...', 0);\n            try {\n                const tasks = [\n                    { type: 'text-generation', quality: 'medium' },\n                    { type: 'code-generation', quality: 'high' },\n                    { type: 'chat', quality: 'low' },\n                    { type: 'summarization', quality: 'medium' }\n                ];\n                let results = [];\n                for (const task of tasks) {\n                    try {\n                        const selection = yield this.modelSelectionService.selectForTask(task.type, task.quality);\n                        results.push(`✅ ${task.type}: ${selection.selected_model.name} ($${selection.estimated_cost.toFixed(4)})`);\n                    }\n                    catch (error) {\n                        results.push(`❌ ${task.type}: Failed - ${error instanceof Error ? error.message : 'Unknown error'}`);\n                    }\n                }\n                notice.hide();\n                const resultText = results.join('\\n');\n                new Notice(`Model Selection Test Results:\\n${resultText}`, 10000);\n                if (this.settings.debugMode) {\n                    console.log('Model selection test results:', results);\n                }\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`❌ Model selection test failed: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\n            }\n        });\n    }\n    showModelHealth() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.modelSelectionService) {\n                new Notice('❌ Model selection service not initialized', 5000);\n                return;\n            }\n            const notice = new Notice('🏥 Checking model health...', 0);\n            try {\n                const health = yield this.modelSelectionService.getModelHealth();\n                notice.hide();\n                if (health.length === 0) {\n                    new Notice('⚠️ No model health information available', 5000);\n                    return;\n                }\n                const healthInfo = health.map(h => {\n                    const status = h.status === 'healthy' ? '✅' : h.status === 'degraded' ? '⚠️' : '❌';\n                    return `${status} ${h.model_id}: ${h.status} (${h.response_time}ms, ${h.availability_percentage}%)`;\n                }).join('\\n');\n                new Notice(`Model Health Status:\\n${healthInfo}`, 15000);\n                if (this.settings.debugMode) {\n                    console.log('Model health status:', health);\n                }\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`❌ Failed to get model health: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\n            }\n        });\n    }\n    getBestModelForTask(taskType_1) {\n        return __awaiter(this, arguments, void 0, function* (taskType, quality = 'medium') {\n            var _a, _b;\n            // Check if model selection service is available and connected\n            if (this.modelSelectionService && this.modelSelectionService.isConnected()) {\n                try {\n                    const selection = yield this.modelSelectionService.selectForTask(taskType, quality);\n                    if (this.settings.debugMode) {\n                        console.log(`Selected model ${selection.selected_model.name} for ${taskType} task`);\n                    }\n                    return selection;\n                }\n                catch (error) {\n                    if (this.settings.debugMode) {\n                        console.warn('Model selection failed, using default:', error);\n                    }\n                    // If enabled, try to reinitialize the service\n                    if (((_a = this.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.enabled) && !this.modelSelectionService.isConnected()) {\n                        this.retryModelSelectionInit(1).catch(() => {\n                            // Silently fail retry\n                        });\n                    }\n                }\n            }\n            else if (((_b = this.settings.modelSelection) === null || _b === void 0 ? void 0 : _b.enabled) && !this.modelSelectionService) {\n                // Service not initialized, try to initialize it\n                if (this.settings.debugMode) {\n                    console.log('Model selection service not initialized, attempting initialization...');\n                }\n                this.initializeModelSelection().catch(() => {\n                    // Silently fail initialization\n                });\n            }\n            return null;\n        });\n    }\n}\n//# sourceMappingURL=main.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/settings.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/view.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/full-tab-view.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/chat-modal.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/workflow-modal.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/api-client.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/planner.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/plan-my-day-debug.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/vault-utils.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/vault-api-client.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/vault-commands.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/services/ModelSelectionService.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/utils/EnvironmentDetector.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/vault-modals.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/components/Phase3Integration.ts"],"map":"{\"version\":3,\"file\":\"main.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/main.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { Plugin, Notice, Editor, MarkdownView, TFile, EditorPosition, request } from 'obsidian';\\nimport { VaultPilotSettingTab, DEFAULT_SETTINGS } from './settings';\\nimport { VIEW_TYPE_VAULTPILOT, VaultPilotView } from './view';\\nimport { VIEW_TYPE_VAULTPILOT_FULL_TAB, VaultPilotFullTabView } from './full-tab-view';\\nimport { ChatModal } from './chat-modal';\\nimport { WorkflowModal } from './workflow-modal';\\nimport { EvoAgentXClient } from './api-client';\\nimport { VaultPilotSettings, CopilotResponse } from './types';\\nimport { fetchSchedule, injectSchedule, validateScheduleMarkdown, findScheduleSection, findPlanSection } from './planner';\\nimport { planMyDayDebugger } from './plan-my-day-debug';\\nimport { setApp } from './vault-utils';\\nimport { VaultManagementClient } from './vault-api-client';\\nimport { createVaultManagementCommands } from './vault-commands';\\nimport { ModelSelectionService } from './services/ModelSelectionService';\\nimport { EnvironmentDetector } from './utils/EnvironmentDetector';\\nimport { \\n  VaultStructureModal, \\n  SmartSearchModal, \\n  FileOperationsModal\\n} from './vault-modals';\\nimport { Phase3Integration } from './components/Phase3Integration';\\n\\nexport default class VaultPilotPlugin extends Plugin {\\n  settings!: VaultPilotSettings;\\n  apiClient!: EvoAgentXClient;\\n  vaultClient!: VaultManagementClient;\\n  modelSelectionService?: ModelSelectionService;\\n  phase3Integration?: Phase3Integration;\\n  private websocketConnected = false;\\n  private copilotEnabled = false;\\n\\n  async onload() {\\n    await this.loadSettings();\\n\\n    // Initialize app instance for vault-utils\\n    setApp(this.app);\\n\\n    // Initialize API client\\n    this.apiClient = new EvoAgentXClient(this.settings.backendUrl, this.settings.apiKey);\\n\\n    // Initialize vault management if enabled\\n    if (this.settings.vaultManagement?.enableVaultManagement) {\\n      this.initializeVaultManagement();\\n    }\\n\\n    // Initialize model selection if enabled (with error handling)\\n    if (this.settings.modelSelection?.enabled) {\\n      // Don't await - initialize in background to avoid blocking plugin load\\n      this.initializeModelSelection().catch(error => {\\n        if (this.settings.debugMode) {\\n          console.warn('Model selection initialization failed during plugin load:', error);\\n        }\\n        // Silently fail during plugin initialization\\n      });\\n    }\\n\\n    // Test backend connection\\n    try {\\n      let response = await this.apiClient.healthCheck();\\n      \\n      // If the main health check fails with a 400, try the simple check\\n      if (!response.success && response.error?.includes('400')) {\\n        console.warn('Main health check failed with 400, trying alternative method');\\n        const simpleResponse = await this.apiClient.simpleHealthCheck();\\n        if (simpleResponse.success && simpleResponse.data) {\\n          response = {\\n            success: true,\\n            data: { status: simpleResponse.data.status, version: 'unknown' }\\n          };\\n        }\\n      }\\n      \\n      if (response.success) {\\n        new Notice('✅ VaultPilot connected to EvoAgentX', 3000);\\n        // Connect WebSocket if enabled\\n        if (this.settings.enableWebSocket) {\\n          this.connectWebSocket();\\n        }\\n      } else {\\n        console.error('Health check failed:', response.error);\\n        new Notice('⚠️ EvoAgentX backend offline - some features may not work', 5000);\\n      }\\n    } catch (error) {\\n      console.error('Health check error:', error);\\n      new Notice('⚠️ Cannot connect to EvoAgentX backend', 5000);\\n    }\\n\\n    // Register views\\n    this.registerView(\\n      VIEW_TYPE_VAULTPILOT,\\n      (leaf) => new VaultPilotView(leaf, this)\\n    );\\n    \\n    this.registerView(\\n      VIEW_TYPE_VAULTPILOT_FULL_TAB,\\n      (leaf) => new VaultPilotFullTabView(leaf, this)\\n    );\\n\\n    // Add ribbon icon\\n    const ribbonIconEl = this.addRibbonIcon('bot', 'VaultPilot', (evt: MouseEvent) => {\\n      if (evt.ctrlKey || evt.metaKey) {\\n        // Open full tab view on Ctrl/Cmd + click\\n        this.activateFullTabView();\\n      } else {\\n        // Default action: open chat modal\\n        this.openChatModal();\\n      }\\n    });\\n    ribbonIconEl.addClass('vaultpilot-ribbon-class');\\n    ribbonIconEl.title = 'VaultPilot (Ctrl+click for Dashboard)';\\n\\n    // Register commands\\n    this.addCommand({\\n      id: 'open-chat',\\n      name: 'Open Chat',\\n      callback: () => this.openChatModal()\\n    });\\n\\n    this.addCommand({\\n      id: 'execute-workflow',\\n      name: 'Execute Workflow',\\n      callback: () => this.openWorkflowModal()\\n    });\\n\\n    this.addCommand({\\n      id: 'analyze-vault',\\n      name: 'Analyze Current Vault',\\n      callback: () => this.analyzeVault()\\n    });\\n\\n    this.addCommand({\\n      id: 'copilot-complete',\\n      name: 'Get AI Completion',\\n      editorCallback: (editor: Editor) => this.getCopilotCompletion(editor)\\n    });\\n\\n    this.addCommand({\\n      id: 'quick-chat',\\n      name: 'Quick Chat with Selection',\\n      editorCallback: (editor: Editor) => this.quickChatWithSelection(editor)\\n    });\\n\\n    this.addCommand({\\n      id: 'plan-tasks',\\n      name: 'Plan Tasks from Note',\\n      editorCallback: (editor: Editor) => this.planTasksFromNote(editor)\\n    });\\n\\n    this.addCommand({\\n      id: 'plan-my-day',\\n      name: 'Plan My Day',\\n      callback: () => this.planMyDay()\\n    });\\n\\n    this.addCommand({\\n      id: 'plan-my-day-debug',\\n      name: 'Plan My Day - Debug Connection',\\n      callback: () => this.debugPlanMyDay()\\n    });\\n\\n    this.addCommand({\\n      id: 'test-model-selection',\\n      name: 'Test Smart Model Selection',\\n      callback: () => this.testModelSelection()\\n    });\\n\\n    this.addCommand({\\n      id: 'show-model-health',\\n      name: 'Show Model Health Status',\\n      callback: () => this.showModelHealth()\\n    });\\n\\n    this.addCommand({\\n      id: 'retry-model-selection',\\n      name: 'Retry Model Selection Initialization',\\n      callback: () => this.retryModelSelectionManual()\\n    });\\n\\n    this.addCommand({\\n      id: 'check-service-status',\\n      name: 'Check VaultPilot Service Status',\\n      callback: () => this.checkServiceStatus()\\n    });\\n\\n    this.addCommand({\\n      id: 'open-vaultpilot-view',\\n      name: 'Open VaultPilot View',\\n      callback: () => this.activateView()\\n    });\\n\\n    this.addCommand({\\n      id: 'open-vaultpilot-full-tab',\\n      name: 'Open VaultPilot Dashboard',\\n      callback: () => this.activateFullTabView()\\n    });\\n\\n    // Register vault management commands\\n    this.registerVaultManagementCommands();\\n\\n    // Initialize Phase 3 features\\n    this.initializePhase3();\\n\\n    // Register editor events for copilot\\n    if (this.settings.enableCopilot && this.settings.enableAutoComplete) {\\n      this.registerDomEvent(document, 'keyup', this.handleKeyUp.bind(this));\\n    }\\n\\n    // Add settings tab\\n    this.addSettingTab(new VaultPilotSettingTab(this.app, this));\\n  }\\n\\n  async onunload() {\\n    this.app.workspace.detachLeavesOfType(VIEW_TYPE_VAULTPILOT);\\n    this.app.workspace.detachLeavesOfType(VIEW_TYPE_VAULTPILOT_FULL_TAB);\\n    this.disconnectWebSocket();\\n    await this.disconnectModelSelection();\\n    this.disablePhase3();\\n  }\\n\\n  // WebSocket Management\\n  connectWebSocket() {\\n    if (this.websocketConnected) return;\\n\\n    this.apiClient.connectWebSocket({\\n      onChat: (data) => {\\n        // Handle real-time chat updates\\n        console.log('WebSocket chat update:', data);\\n      },\\n      onWorkflowProgress: (data) => {\\n        // Handle workflow progress updates\\n        new Notice(`Workflow: ${data.step}`, 2000);\\n      },\\n      onCopilot: (data) => {\\n        // Handle copilot suggestions\\n        this.handleCopilotSuggestion(data);\\n      },\\n      onVaultSync: (data) => {\\n        // Handle vault synchronization\\n        console.log('Vault sync update:', data);\\n      },\\n      onIntentDebug: (debug) => {\\n        // Handle intent debug info (only in debug mode)\\n        if (this.settings.showIntentDebug && this.settings.debugMode) {\\n          console.log('Intent debug:', debug);\\n        }\\n      },\\n      onError: (error) => {\\n        new Notice(`WebSocket error: ${error}`, 5000);\\n      },\\n      onConnect: () => {\\n        this.websocketConnected = true;\\n        if (this.settings.debugMode) {\\n          new Notice('WebSocket connected', 2000);\\n        }\\n      },\\n      onDisconnect: () => {\\n        this.websocketConnected = false;\\n        if (this.settings.debugMode) {\\n          new Notice('WebSocket disconnected', 2000);\\n        }\\n      }\\n    });\\n  }\\n\\n  disconnectWebSocket() {\\n    this.apiClient.disconnectWebSocket();\\n    this.websocketConnected = false;\\n  }\\n\\n  isWebSocketConnected(): boolean {\\n    return this.websocketConnected;\\n  }\\n\\n  // Modal Management\\n  openChatModal() {\\n    new ChatModal(this.app, this).open();\\n  }\\n\\n  openWorkflowModal() {\\n    new WorkflowModal(this.app, this).open();\\n  }\\n\\n  // Command Implementations\\n  async analyzeVault() {\\n    const notice = new Notice('Analyzing vault...', 0);\\n    \\n    try {\\n      // Get all markdown files\\n      const files = this.app.vault.getMarkdownFiles();\\n      let content = '';\\n      \\n      // Include up to 10 files to avoid overwhelming the API\\n      for (const file of files.slice(0, 10)) {\\n        const fileContent = await this.app.vault.read(file);\\n        content += `=== ${file.name} ===\\\\n${fileContent}\\\\n\\\\n`;\\n      }\\n\\n      const response = await this.apiClient.analyzeVaultContext({\\n        content,\\n        analysis_type: 'insights'\\n      });\\n\\n      notice.hide();\\n\\n      if (response.success && response.data) {\\n        // Create analysis note\\n        const timestamp = new Date().toISOString().split('T')[0];\\n        const filename = `Vault Analysis ${timestamp}.md`;\\n        \\n        let analysisContent = `# Vault Analysis - ${timestamp}\\\\n\\\\n`;\\n        analysisContent += `## Analysis\\\\n\\\\n${response.data.analysis}\\\\n\\\\n`;\\n        \\n        if (response.data.insights && response.data.insights.length > 0) {\\n          analysisContent += `## Key Insights\\\\n\\\\n`;\\n          response.data.insights.forEach(insight => {\\n            analysisContent += `- ${insight}\\\\n`;\\n          });\\n          analysisContent += '\\\\n';\\n        }\\n\\n        if (response.data.recommendations && response.data.recommendations.length > 0) {\\n          analysisContent += `## Recommendations\\\\n\\\\n`;\\n          response.data.recommendations.forEach(rec => {\\n            analysisContent += `- ${rec}\\\\n`;\\n          });\\n        }\\n\\n        await this.app.vault.create(filename, analysisContent);\\n        new Notice(`Vault analysis saved as ${filename}`);\\n      } else {\\n        throw new Error(response.error || 'Analysis failed');\\n      }\\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`Analysis error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  async getCopilotCompletion(editor: Editor) {\\n    if (!this.settings.enableCopilot) {\\n      new Notice('Copilot is disabled in settings');\\n      return;\\n    }\\n\\n    const cursor = editor.getCursor();\\n    const currentLine = editor.getLine(cursor.line);\\n    const textBeforeCursor = currentLine.substring(0, cursor.ch);\\n    const fullText = editor.getValue();\\n\\n    // Client-side validation to prevent 422 errors\\n    if (!fullText || fullText.trim().length === 0) {\\n      new Notice('Cannot complete empty text');\\n      return;\\n    }\\n\\n    try {\\n      const response = await this.apiClient.getCopilotCompletion({\\n        text: fullText,\\n        cursor_position: editor.posToOffset(cursor),\\n        file_type: 'markdown',\\n        context: textBeforeCursor\\n      });\\n\\n      if (response.success && response.data) {\\n        // Insert completion at cursor\\n        editor.replaceRange(response.data.completion, cursor);\\n        new Notice('Completion inserted', 2000);\\n      } else {\\n        new Notice(`Copilot error: ${response.error}`);\\n      }\\n    } catch (error) {\\n      new Notice(`Copilot error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  async quickChatWithSelection(editor: Editor) {\\n    const selection = editor.getSelection();\\n    if (!selection) {\\n      new Notice('No text selected');\\n      return;\\n    }\\n\\n    try {\\n      const response = await this.apiClient.chat({\\n        message: `Please explain or analyze this text: \\\"${selection}\\\"`,\\n        vault_context: editor.getValue()\\n      });\\n\\n      if (response.success && response.data) {\\n        // Insert response below selection\\n        const cursor = editor.getCursor('to');\\n        const newLine = `\\\\n\\\\n**VaultPilot Analysis:**\\\\n${response.data.response}\\\\n\\\\n`;\\n        editor.replaceRange(newLine, cursor);\\n        new Notice('Analysis inserted', 2000);\\n      } else {\\n        new Notice(`Chat error: ${response.error}`);\\n      }\\n    } catch (error) {\\n      new Notice(`Chat error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  async planTasksFromNote(editor: Editor) {\\n    const content = editor.getValue();\\n    const activeFile = this.app.workspace.getActiveFile();\\n    \\n    if (!content.trim()) {\\n      new Notice('No content to analyze');\\n      return;\\n    }\\n\\n    const notice = new Notice('Planning tasks...', 0);\\n\\n    try {\\n      const response = await this.apiClient.planTasks({\\n        goal: `Create a task plan based on this note: ${activeFile?.name || 'Untitled'}`,\\n        context: content,\\n        timeframe: '1 week'\\n      });\\n\\n      notice.hide();\\n\\n      if (response.success && response.data) {\\n        // Create task plan note\\n        const timestamp = new Date().toISOString().split('T')[0];\\n        const filename = `Task Plan - ${activeFile?.basename || 'Untitled'} - ${timestamp}.md`;\\n        \\n        let taskContent = `# ${response.data.plan.title}\\\\n\\\\n`;\\n        taskContent += `${response.data.plan.description}\\\\n\\\\n`;\\n        taskContent += `**Estimated Duration:** ${response.data.plan.estimated_duration}\\\\n\\\\n`;\\n        \\n        if (response.data.plan.tasks && response.data.plan.tasks.length > 0) {\\n          taskContent += `## Tasks\\\\n\\\\n`;\\n          response.data.plan.tasks.forEach((task: any) => {\\n            const checkbox = task.status === 'completed' ? '[x]' : '[ ]';\\n            taskContent += `${checkbox} **${task.title}** (${task.priority} priority)\\\\n`;\\n            taskContent += `   ${task.description}\\\\n`;\\n            taskContent += `   *Estimated time: ${task.estimated_time}*\\\\n\\\\n`;\\n          });\\n        }\\n\\n        if (response.data.milestones && response.data.milestones.length > 0) {\\n          taskContent += `## Milestones\\\\n\\\\n`;\\n          response.data.milestones.forEach((milestone: any) => {\\n            taskContent += `- **${milestone.title}** (${milestone.target_date})\\\\n`;\\n            taskContent += `  ${milestone.description}\\\\n\\\\n`;\\n          });\\n        }\\n\\n        await this.app.vault.create(filename, taskContent);\\n        new Notice(`Task plan saved as ${filename}`);\\n      } else {\\n        throw new Error(response.error || 'Task planning failed');\\n      }\\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`Task planning error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  async planMyDay() {\\n    console.log('🚀 [Plan My Day] Command started');\\n    \\n    const activeFile = this.app.workspace.getActiveFile();\\n    \\n    if (!activeFile) {\\n      console.warn('⚠️ [Plan My Day] No active file found');\\n      new Notice('No active note—open today\\\\'s daily note first.');\\n      return;\\n    }\\n\\n    console.log('📁 [Plan My Day] Active file:', {\\n      name: activeFile.name,\\n      path: activeFile.path,\\n      extension: activeFile.extension\\n    });\\n\\n    const notice = new Notice('Planning your day with AI...', 0);\\n\\n    try {\\n      console.log('📖 [Plan My Day] Reading file content...');\\n      \\n      // Read the entire file content\\n      const fileText = await this.app.vault.read(activeFile);\\n      \\n      console.log('📝 [Plan My Day] File content read:', {\\n        length: fileText.length,\\n        hasContent: fileText.trim().length > 0,\\n        firstLine: fileText.split('\\\\n')[0],\\n        lineCount: fileText.split('\\\\n').length\\n      });\\n\\n      console.log('🔍 [Plan My Day] Checking API client...');\\n      console.log('🔗 [Plan My Day] API client status:', {\\n        exists: !!this.apiClient,\\n        type: typeof this.apiClient,\\n        isConnected: this.apiClient ? 'available' : 'not available'\\n      });\\n\\n      if (!this.apiClient) {\\n        const error = 'API client not initialized. Check VaultPilot settings and connection.';\\n        console.error('❌ [Plan My Day] Error:', error);\\n        throw new Error(error);\\n      }\\n      \\n      console.log('📤 [Plan My Day] Fetching schedule from EvoAgentX...');\\n      \\n      // Fetch schedule from EvoAgentX instead of localhost:3000\\n      const { scheduleMarkdown, headline } = await fetchSchedule(fileText, this.apiClient);\\n\\n      console.log('📋 [Plan My Day] Schedule received:', {\\n        markdownLength: scheduleMarkdown.length,\\n        headline: headline,\\n        firstLine: scheduleMarkdown.split('\\\\n')[0]\\n      });\\n\\n      console.log('✅ [Plan My Day] Validating schedule...');\\n      \\n      // Validate the returned schedule\\n      if (!validateScheduleMarkdown(scheduleMarkdown)) {\\n        const error = 'Invalid schedule data received from API';\\n        console.error('❌ [Plan My Day] Validation failed:', {\\n          scheduleMarkdown: scheduleMarkdown.substring(0, 200),\\n          length: scheduleMarkdown.length\\n        });\\n        throw new Error(error);\\n      }\\n\\n      console.log('📝 [Plan My Day] Injecting schedule into note...');\\n      \\n      // Check if note already has a plan section (comment wrapper) or schedule section\\n      const existingPlanSection = findPlanSection(fileText);\\n      const existingScheduleSection = findScheduleSection(fileText);\\n      \\n      console.log('🔍 [Plan My Day] Existing sections:', {\\n        hasPlanWrapper: !!existingPlanSection,\\n        hasScheduleSection: !!existingScheduleSection,\\n        planContent: existingPlanSection?.[2]?.substring(0, 50),\\n        scheduleHeading: existingScheduleSection?.[1]?.substring(0, 50)\\n      });\\n\\n      // Inject the schedule into the note\\n      const updatedText = injectSchedule(fileText, scheduleMarkdown);\\n\\n      console.log('💾 [Plan My Day] Updating file...', {\\n        originalLength: fileText.length,\\n        updatedLength: updatedText.length,\\n        changed: fileText !== updatedText\\n      });\\n\\n      // Update the file\\n      await this.app.vault.modify(activeFile, updatedText);\\n\\n      console.log('✅ [Plan My Day] File updated successfully');\\n\\n      // Hide the progress notice\\n      notice.hide();\\n\\n      // Show success notice\\n      const successMessage = headline ? `${headline} ✅` : 'Schedule inserted ✅';\\n      console.log('🎉 [Plan My Day] Success:', successMessage);\\n      new Notice(successMessage);\\n\\n    } catch (error) {\\n      console.error('❌ [Plan My Day] Operation failed:', error);\\n      console.error('🔍 [Plan My Day] Error details:', {\\n        message: error instanceof Error ? error.message : String(error),\\n        stack: error instanceof Error ? error.stack : 'No stack trace',\\n        type: typeof error,\\n        name: error instanceof Error ? error.name : 'Unknown'\\n      });\\n      \\n      notice.hide();\\n      \\n      // Handle different types of errors from EvoAgentX\\n      if (error instanceof Error) {\\n        const errorMessage = error.message;\\n        console.log('🔍 [Plan My Day] Analyzing error message:', errorMessage);\\n        \\n        if (errorMessage.includes('API client not initialized')) {\\n          console.error('❌ [Plan My Day] API client not initialized');\\n          new Notice('Planning error: VaultPilot not connected to EvoAgentX. Check settings and restart plugin.');\\n        } else if (errorMessage.includes('does not have planTasks method')) {\\n          console.error('❌ [Plan My Day] API client missing planTasks method');\\n          new Notice('Planning error: EvoAgentX API client outdated. Please update VaultPilot plugin.');\\n        } else if (errorMessage.includes('JSON') || errorMessage.includes('Invalid schedule data')) {\\n          console.error('❌ [Plan My Day] Invalid response format');\\n          new Notice('Planning error: Invalid response format from EvoAgentX');\\n        } else if (errorMessage.includes('fetch') || errorMessage.includes('network') || errorMessage.includes('Failed to fetch')) {\\n          console.error('❌ [Plan My Day] Network error');\\n          new Notice('Planning error: Unable to connect to EvoAgentX server. Check your connection and server status.');\\n        } else if (errorMessage.includes('Failed to generate schedule') || errorMessage.includes('Schedule fetch failed')) {\\n          console.error('❌ [Plan My Day] Schedule generation failed');\\n          new Notice('Planning error: EvoAgentX task planning failed. Check server logs for details.');\\n        } else if (errorMessage.includes('No data in API response')) {\\n          console.error('❌ [Plan My Day] Empty API response');\\n          new Notice('Planning error: EvoAgentX returned empty response. Try again or check server status.');\\n        } else {\\n          console.error('❌ [Plan My Day] Unhandled error');\\n          new Notice(`Planning error: ${errorMessage.substring(0, 100)}${errorMessage.length > 100 ? '...' : ''}`);\\n        }\\n      } else {\\n        console.error('❌ [Plan My Day] Non-Error object thrown');\\n        new Notice('Planning error: Unknown error occurred with EvoAgentX');\\n      }\\n      \\n      // Always log the full error for debugging\\n      console.log('🔍 [Plan My Day] Full error log completed');\\n    }\\n  }\\n\\n  async debugPlanMyDay() {\\n    console.log('🔍 [Plan My Day Debug] Starting comprehensive debug...');\\n    planMyDayDebugger.clearLogs();\\n    \\n    const notice = new Notice('Running Plan My Day diagnostics...', 0);\\n\\n    try {\\n      // Test 1: Check active file\\n      const activeFile = this.app.workspace.getActiveFile();\\n      planMyDayDebugger.log('📁 Active file check', {\\n        hasActiveFile: !!activeFile,\\n        fileName: activeFile?.name,\\n        fileExtension: activeFile?.extension\\n      });\\n\\n      // Test 2: Analyze API client\\n      const apiAnalysis = planMyDayDebugger.analyzeApiClient(this.apiClient);\\n      planMyDayDebugger.log('🔗 API client analysis', apiAnalysis);\\n\\n      // Test 3: Test EvoAgentX connection\\n      if (this.apiClient) {\\n        const connectionTest = await planMyDayDebugger.testConnection(this.apiClient);\\n        planMyDayDebugger.log('🌐 Connection test result', connectionTest);\\n\\n        // Test 4: Test task planning functionality\\n        if (connectionTest.success) {\\n          const planningTest = await planMyDayDebugger.testTaskPlanning(\\n            this.apiClient, \\n            'Test note with some tasks:\\\\n- Write code\\\\n- Test functionality\\\\n- Review results'\\n          );\\n          planMyDayDebugger.log('📋 Task planning test result', planningTest);\\n        }\\n      }\\n\\n      // Test 5: Check settings\\n      planMyDayDebugger.log('⚙️ Plugin settings', {\\n        backendUrl: this.settings.backendUrl,\\n        hasApiKey: !!this.settings.apiKey,\\n        debugMode: this.settings.debugMode\\n      });\\n\\n      notice.hide();\\n\\n      // Show results in a modal or console\\n      const logs = planMyDayDebugger.getLogs();\\n      console.log('🔍 [Plan My Day Debug] Complete diagnostic log:', logs);\\n      \\n      const logSummary = logs.slice(-5).join('\\\\n'); // Last 5 entries\\n      new Notice(`Debug complete! Check console for full logs.\\\\n\\\\nLast entries:\\\\n${logSummary}`, 10000);\\n\\n      // Create a debug file if active file exists\\n      if (activeFile) {\\n        const debugContent = `# Plan My Day Debug Report\\\\n\\\\nGenerated: ${new Date().toISOString()}\\\\n\\\\n## Diagnostic Results\\\\n\\\\n\\\\`\\\\`\\\\`\\\\n${planMyDayDebugger.exportLogs()}\\\\n\\\\`\\\\`\\\\``;\\n        await this.app.vault.create(`Plan My Day Debug - ${Date.now()}.md`, debugContent);\\n        new Notice('Debug report saved as new note!');\\n      }\\n\\n    } catch (error) {\\n      notice.hide();\\n      planMyDayDebugger.error('Debug process failed', error);\\n      new Notice(`Debug failed: ${error instanceof Error ? error.message : String(error)}`);\\n    }\\n  }\\n\\n  async activateView() {\\n    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_VAULTPILOT);\\n    if (leaves.length === 0) {\\n      const rightLeaf = this.app.workspace.getRightLeaf(false);\\n      if (rightLeaf) {\\n        await rightLeaf.setViewState({\\n          type: VIEW_TYPE_VAULTPILOT,\\n          active: true\\n        });\\n      }\\n    } else {\\n      this.app.workspace.revealLeaf(leaves[0]);\\n    }\\n  }\\n\\n  async activateFullTabView() {\\n    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_VAULTPILOT_FULL_TAB);\\n    if (leaves.length === 0) {\\n      // Create a new tab in the main workspace\\n      const newLeaf = this.app.workspace.getLeaf('tab');\\n      if (newLeaf) {\\n        await newLeaf.setViewState({\\n          type: VIEW_TYPE_VAULTPILOT_FULL_TAB,\\n          active: true\\n        });\\n      }\\n    } else {\\n      this.app.workspace.revealLeaf(leaves[0]);\\n    }\\n  }\\n\\n  // === VAULT MANAGEMENT METHODS ===\\n\\n  initializeVaultManagement() {\\n    if (!this.settings.vaultManagement?.enableVaultManagement) return;\\n    \\n    this.vaultClient = new VaultManagementClient(\\n      this.settings.backendUrl,\\n      this.settings.apiKey\\n    );\\n    \\n    if (this.settings.debugMode) {\\n      console.log('Vault management initialized');\\n    }\\n  }\\n\\n  disableVaultManagement() {\\n    this.vaultClient = null as any;\\n    if (this.settings.debugMode) {\\n      console.log('Vault management disabled');\\n    }\\n  }\\n\\n  registerVaultManagementCommands() {\\n    const commands = createVaultManagementCommands();\\n    commands.forEach(command => {\\n      this.addCommand({\\n        ...command,\\n        callback: command.callback?.bind(this),\\n        editorCallback: command.editorCallback?.bind(this)\\n      });\\n    });\\n  }\\n\\n  // Modal opening methods for vault management\\n  openVaultStructureModal() {\\n    if (!this.vaultClient) {\\n      new Notice('Vault management not available');\\n      return;\\n    }\\n    new VaultStructureModal(this.app, this).open();\\n  }\\n\\n  openSmartSearchModal(query?: string, type?: string) {\\n    if (!this.vaultClient) {\\n      new Notice('Vault management not available');\\n      return;\\n    }\\n    const modal = new SmartSearchModal(this.app, this);\\n    if (query) modal.setInitialQuery(query, type as any);\\n    modal.open();\\n  }\\n\\n  openFileOperationsModal(path?: string, operation?: string) {\\n    if (!this.vaultClient) {\\n      new Notice('Vault management not available');\\n      return;\\n    }\\n    const modal = new FileOperationsModal(this.app, this);\\n    if (path) modal.setInitialPath(path);\\n    if (operation) modal.setOperation(operation);\\n    modal.open();\\n  }\\n\\n  openVaultOrganizerModal() {\\n    new Notice('Vault organizer modal not yet implemented');\\n  }\\n\\n  openBatchOperationsModal() {\\n    new Notice('Batch operations modal not yet implemented');\\n  }\\n\\n  // === END VAULT MANAGEMENT METHODS ===\\n\\n  // === PHASE 3 INTEGRATION ===\\n\\n  initializePhase3() {\\n    // For now, always initialize Phase 3 features\\n    try {\\n      this.phase3Integration = new Phase3Integration(this, {\\n        autoShowOnboarding: !this.settings.onboardingComplete\\n      });\\n      \\n      // Load the Phase 3 integration\\n      this.phase3Integration.onload();\\n      \\n      if (this.settings.debugMode) {\\n        console.log('Phase 3 features initialized successfully');\\n      }\\n\\n      // Show onboarding for first-time users\\n      if (!this.settings.onboardingComplete) {\\n        // Delay onboarding slightly to let plugin fully load\\n        setTimeout(() => {\\n          this.phase3Integration?.showOnboardingIfNeeded();\\n        }, 1000);\\n      }\\n    } catch (error) {\\n      console.error('Failed to initialize Phase 3 features:', error);\\n      if (this.settings.debugMode) {\\n        new Notice('Phase 3 features failed to initialize - check console for details', 5000);\\n      }\\n    }\\n  }\\n\\n  disablePhase3() {\\n    if (this.phase3Integration) {\\n      this.phase3Integration.onunload();\\n      this.phase3Integration = undefined;\\n    }\\n    if (this.settings.debugMode) {\\n      console.log('Phase 3 features disabled');\\n    }\\n  }\\n\\n  // === END PHASE 3 INTEGRATION ===\\n\\n  // Auto-completion handling\\n  private handleKeyUp(event: KeyboardEvent) {\\n    if (!this.settings.enableAutoComplete || !this.settings.enableCopilot) return;\\n    \\n    const target = event.target as HTMLElement;\\n    if (!target.classList.contains('cm-content')) return;\\n\\n    // Only trigger on specific keys and conditions\\n    if (!this.shouldTriggerAutoComplete(event)) return;\\n\\n    // Debounce auto-completion requests with longer delay\\n    clearTimeout((this as any).autoCompleteTimeout);\\n    (this as any).autoCompleteTimeout = setTimeout(() => {\\n      this.triggerAutoCompletion();\\n    }, 3000); // Increased to 3 seconds\\n  }\\n\\n  private shouldTriggerAutoComplete(event: KeyboardEvent): boolean {\\n    // Don't trigger on navigation or modifier keys\\n    const nonTriggerKeys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight', 'Tab', 'Shift', 'Control', 'Alt', 'Meta', 'Escape'];\\n    if (nonTriggerKeys.indexOf(event.key) !== -1) {\\n      return false;\\n    }\\n\\n    const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);\\n    if (!activeView) return false;\\n\\n    const editor = activeView.editor;\\n    const cursor = editor.getCursor();\\n    const currentLine = editor.getLine(cursor.line);\\n    \\n    // Only trigger at the end of a line\\n    if (cursor.ch !== currentLine.length) return false;\\n    \\n    // Check for sentence-ending triggers\\n    const triggerChars = ['.', '!', '?', ':', '\\\\n'];\\n    const lastChar = currentLine.slice(-1);\\n    \\n    // Trigger after sentence endings with space\\n    if (triggerChars.indexOf(lastChar) !== -1 && event.key === ' ') {\\n      return true;\\n    }\\n    \\n    // Trigger after Enter key (new line)\\n    if (event.key === 'Enter' && currentLine.trim().length > 10) {\\n      return true;\\n    }\\n    \\n    return false;\\n  }\\n\\n  private async triggerAutoCompletion() {\\n    const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);\\n    if (!activeView) return;\\n\\n    const editor = activeView.editor;\\n    const cursor = editor.getCursor();\\n    const currentLine = editor.getLine(cursor.line);\\n    const fullText = editor.getValue();\\n    \\n    // More restrictive conditions for auto-completion\\n    if (currentLine.trim().length < 10 || cursor.ch !== currentLine.length) return;\\n    \\n    // Prevent 422 errors from empty text\\n    if (!fullText || fullText.trim().length === 0) return;\\n\\n    // Add cooldown to prevent too frequent requests\\n    const now = Date.now();\\n    const lastRequest = (this as any).lastAutoCompleteRequest || 0;\\n    if (now - lastRequest < 10000) return; // 10 second cooldown\\n    \\n    (this as any).lastAutoCompleteRequest = now;\\n\\n    try {\\n      const response = await this.apiClient.getCopilotCompletion({\\n        text: fullText,\\n        cursor_position: editor.posToOffset(cursor),\\n        file_type: 'markdown'\\n      });\\n\\n      if (response.success && response.data && response.data.suggestions.length > 0) {\\n        // Show suggestions (for now just show first suggestion)\\n        if (this.settings.debugMode) {\\n          new Notice(`Auto-suggestion: ${response.data.suggestions[0]}`, 3000);\\n        }\\n      }\\n    } catch (error) {\\n      // Silently fail for auto-completion\\n      if (this.settings.debugMode) {\\n        console.error('Auto-completion error:', error);\\n      }\\n    }\\n  }\\n\\n  private handleCopilotSuggestion(data: CopilotResponse) {\\n    // Handle real-time copilot suggestions from WebSocket\\n    if (this.settings.debugMode) {\\n      new Notice(`Live suggestion: ${data.completion}`, 2000);\\n    }\\n  }\\n\\n  // Settings management\\n  async loadSettings() {\\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\\n  }\\n\\n  async saveSettings() {\\n    await this.saveData(this.settings);\\n    \\n    // Update API client if URL changed\\n    this.apiClient = new EvoAgentXClient(this.settings.backendUrl, this.settings.apiKey);\\n    \\n    // Reinitialize vault management if settings changed\\n    if (this.settings.vaultManagement?.enableVaultManagement) {\\n      this.initializeVaultManagement();\\n    } else {\\n      this.disableVaultManagement();\\n    }\\n    \\n    // Reinitialize model selection if settings changed\\n    if (this.settings.modelSelection?.enabled) {\\n      await this.initializeModelSelection();\\n    } else {\\n      await this.disconnectModelSelection();\\n    }\\n    \\n    // Reconnect WebSocket if settings changed\\n    if (this.settings.enableWebSocket && !this.websocketConnected) {\\n      this.connectWebSocket();\\n    } else if (!this.settings.enableWebSocket && this.websocketConnected) {\\n      this.disconnectWebSocket();\\n    }\\n  }\\n\\n  // Model Selection Management Methods\\n  async initializeModelSelection(): Promise<void> {\\n    if (!this.settings.modelSelection?.enabled) {\\n      if (this.settings.debugMode) {\\n        console.log('Model selection disabled in settings');\\n      }\\n      return;\\n    }\\n\\n    try {\\n      // Validate environment\\n      const env = EnvironmentDetector.detect();\\n      if (!env.hasHTTP) {\\n        throw new Error('HTTP transport not available');\\n      }\\n\\n      // Initialize service with error boundary\\n      this.modelSelectionService = new ModelSelectionService(\\n        this.settings.backendUrl,\\n        this.settings.modelSelection.devpipePath,\\n        {\\n          monitoring_interval: this.settings.modelSelection.monitoringInterval,\\n          fallback_enabled: this.settings.modelSelection.fallbackEnabled,\\n          cache_duration: this.settings.modelSelection.cacheDuration,\\n          retry_attempts: this.settings.modelSelection.retryAttempts,\\n          timeout: this.settings.modelSelection.timeout,\\n          debug_mode: this.settings.modelSelection.debugMode\\n        }\\n      );\\n\\n      await this.modelSelectionService.updatePreferences({\\n        priority: this.settings.modelSelection.userPreferences.priority,\\n        max_cost_per_request: this.settings.modelSelection.userPreferences.maxCostPerRequest,\\n        preferred_providers: this.settings.modelSelection.userPreferences.preferredProviders,\\n        fallback_enabled: this.settings.modelSelection.fallbackEnabled,\\n        quality_threshold: this.settings.modelSelection.userPreferences.qualityThreshold,\\n        timeout_preference: this.settings.modelSelection.timeout\\n      });\\n\\n      await this.modelSelectionService.initialize();\\n\\n      if (this.settings.debugMode) {\\n        console.log('ModelSelectionService initialized successfully');\\n      }\\n\\n      new Notice('🤖 Smart model selection enabled', 3000);\\n\\n    } catch (error) {\\n      console.error('Failed to initialize ModelSelectionService:', error);\\n      \\n      // Show user-friendly error message\\n      if (error instanceof Error) {\\n        if (error.message.includes('not accessible') || error.message.includes('Failed to fetch')) {\\n          if (this.settings.debugMode) {\\n            new Notice('⚠️ Model selection service unavailable - using fallback mode', 4000);\\n          }\\n          // Don't show error to user in production - just log it\\n        } else if (error.message.includes('transport not available')) {\\n          new Notice('⚠️ Model selection not supported in this environment', 5000);\\n        } else {\\n          if (this.settings.debugMode) {\\n            new Notice('⚠️ Model selection initialization failed', 3000);\\n          }\\n        }\\n      }\\n      \\n      // Set up retry mechanism\\n      if (this.settings.modelSelection.retryAttempts > 0) {\\n        setTimeout(() => {\\n          this.retryModelSelectionInit(1);\\n        }, 10000); // Retry after 10 seconds\\n      }\\n    }\\n  }\\n\\n  private async retryModelSelectionInit(attempt: number): Promise<void> {\\n    if (attempt > (this.settings.modelSelection?.retryAttempts || 3)) {\\n      if (this.settings.debugMode) {\\n        console.log('Model selection initialization retry limit reached');\\n      }\\n      return;\\n    }\\n\\n    try {\\n      if (this.settings.debugMode) {\\n        console.log(`Retrying model selection initialization (attempt ${attempt})`);\\n      }\\n      \\n      await this.initializeModelSelection();\\n    } catch (error) {\\n      // Exponential backoff for retries\\n      const delay = Math.min(30000, 5000 * Math.pow(2, attempt - 1));\\n      setTimeout(() => {\\n        this.retryModelSelectionInit(attempt + 1);\\n      }, delay);\\n    }\\n  }\\n\\n  async checkServiceStatus(): Promise<void> {\\n    const notice = new Notice('Checking VaultPilot service status...', 0);\\n    \\n    try {\\n      let statusText = '🔍 VaultPilot Service Status:\\\\n\\\\n';\\n      \\n      // Check main backend connection\\n      try {\\n        const response = await this.apiClient.healthCheck();\\n        if (response.success) {\\n          statusText += '✅ Main Backend: Connected\\\\n';\\n          statusText += `   Server: ${this.settings.backendUrl}\\\\n`;\\n        } else {\\n          statusText += '❌ Main Backend: Failed\\\\n';\\n          statusText += `   Error: ${response.error}\\\\n`;\\n        }\\n      } catch (error) {\\n        statusText += '❌ Main Backend: Connection Error\\\\n';\\n      }\\n      \\n      // Check WebSocket connection\\n      if (this.isWebSocketConnected()) {\\n        statusText += '✅ WebSocket: Connected\\\\n';\\n      } else {\\n        statusText += '❌ WebSocket: Disconnected\\\\n';\\n      }\\n      \\n      // Check model selection service\\n      if (this.settings.modelSelection?.enabled) {\\n        if (this.modelSelectionService && this.modelSelectionService.isConnected()) {\\n          statusText += '✅ Model Selection: Connected\\\\n';\\n        } else {\\n          statusText += '❌ Model Selection: Not Available\\\\n';\\n          if (!this.modelSelectionService) {\\n            statusText += '   Reason: Service not initialized\\\\n';\\n          } else {\\n            statusText += '   Reason: Service disconnected\\\\n';\\n          }\\n        }\\n      } else {\\n        statusText += '⚠️ Model Selection: Disabled in settings\\\\n';\\n      }\\n      \\n      // Check vault management\\n      if (this.settings.vaultManagement?.enableVaultManagement) {\\n        if (this.vaultClient) {\\n          statusText += '✅ Vault Management: Enabled\\\\n';\\n        } else {\\n          statusText += '❌ Vault Management: Failed to initialize\\\\n';\\n        }\\n      } else {\\n        statusText += '⚠️ Vault Management: Disabled in settings\\\\n';\\n      }\\n      \\n      notice.hide();\\n      new Notice(statusText, 15000);\\n      \\n      if (this.settings.debugMode) {\\n        console.log('VaultPilot Service Status:', statusText);\\n      }\\n      \\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`❌ Failed to check service status: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\\n    }\\n  }\\n\\n  async retryModelSelectionManual(): Promise<void> {\\n    if (this.modelSelectionService && this.modelSelectionService.isConnected()) {\\n      new Notice('Model selection already connected', 3000);\\n      return;\\n    }\\n\\n    const notice = new Notice('Retrying model selection initialization...', 0);\\n    \\n    try {\\n      await this.initializeModelSelection();\\n      notice.hide();\\n      new Notice('✅ Model selection connected successfully', 3000);\\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`❌ Model selection retry failed: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\\n    }\\n  }\\n\\n  async disconnectModelSelection(): Promise<void> {\\n    if (this.modelSelectionService) {\\n      try {\\n        await this.modelSelectionService.disconnect();\\n        this.modelSelectionService = undefined;\\n        \\n        if (this.settings.debugMode) {\\n          console.log('ModelSelectionService disconnected');\\n        }\\n      } catch (error) {\\n        console.error('Error disconnecting ModelSelectionService:', error);\\n      }\\n    }\\n  }\\n\\n  async testModelSelection(): Promise<void> {\\n    if (!this.modelSelectionService) {\\n      new Notice('❌ Model selection service not initialized', 5000);\\n      return;\\n    }\\n\\n    const notice = new Notice('🤖 Testing model selection...', 0);\\n\\n    try {\\n      const tasks = [\\n        { type: 'text-generation', quality: 'medium' as const },\\n        { type: 'code-generation', quality: 'high' as const },\\n        { type: 'chat', quality: 'low' as const },\\n        { type: 'summarization', quality: 'medium' as const }\\n      ];\\n\\n      let results = [];\\n      for (const task of tasks) {\\n        try {\\n          const selection = await this.modelSelectionService.selectForTask(task.type, task.quality);\\n          results.push(`✅ ${task.type}: ${selection.selected_model.name} ($${selection.estimated_cost.toFixed(4)})`);\\n        } catch (error) {\\n          results.push(`❌ ${task.type}: Failed - ${error instanceof Error ? error.message : 'Unknown error'}`);\\n        }\\n      }\\n\\n      notice.hide();\\n      const resultText = results.join('\\\\n');\\n      new Notice(`Model Selection Test Results:\\\\n${resultText}`, 10000);\\n\\n      if (this.settings.debugMode) {\\n        console.log('Model selection test results:', results);\\n      }\\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`❌ Model selection test failed: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\\n    }\\n  }\\n\\n  async showModelHealth(): Promise<void> {\\n    if (!this.modelSelectionService) {\\n      new Notice('❌ Model selection service not initialized', 5000);\\n      return;\\n    }\\n\\n    const notice = new Notice('🏥 Checking model health...', 0);\\n\\n    try {\\n      const health = await this.modelSelectionService.getModelHealth();\\n      \\n      notice.hide();\\n\\n      if (health.length === 0) {\\n        new Notice('⚠️ No model health information available', 5000);\\n        return;\\n      }\\n\\n      const healthInfo = health.map(h => {\\n        const status = h.status === 'healthy' ? '✅' : h.status === 'degraded' ? '⚠️' : '❌';\\n        return `${status} ${h.model_id}: ${h.status} (${h.response_time}ms, ${h.availability_percentage}%)`;\\n      }).join('\\\\n');\\n\\n      new Notice(`Model Health Status:\\\\n${healthInfo}`, 15000);\\n\\n      if (this.settings.debugMode) {\\n        console.log('Model health status:', health);\\n      }\\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`❌ Failed to get model health: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\\n    }\\n  }\\n\\n  async getBestModelForTask(taskType: string, quality: 'low' | 'medium' | 'high' = 'medium') {\\n    // Check if model selection service is available and connected\\n    if (this.modelSelectionService && this.modelSelectionService.isConnected()) {\\n      try {\\n        const selection = await this.modelSelectionService.selectForTask(taskType, quality);\\n        \\n        if (this.settings.debugMode) {\\n          console.log(`Selected model ${selection.selected_model.name} for ${taskType} task`);\\n        }\\n        \\n        return selection;\\n      } catch (error) {\\n        if (this.settings.debugMode) {\\n          console.warn('Model selection failed, using default:', error);\\n        }\\n        \\n        // If enabled, try to reinitialize the service\\n        if (this.settings.modelSelection?.enabled && !this.modelSelectionService.isConnected()) {\\n          this.retryModelSelectionInit(1).catch(() => {\\n            // Silently fail retry\\n          });\\n        }\\n      }\\n    } else if (this.settings.modelSelection?.enabled && !this.modelSelectionService) {\\n      // Service not initialized, try to initialize it\\n      if (this.settings.debugMode) {\\n        console.log('Model selection service not initialized, attempting initialization...');\\n      }\\n      this.initializeModelSelection().catch(() => {\\n        // Silently fail initialization\\n      });\\n    }\\n    \\n    return null;\\n  }\\n}\\n\"]}"}
