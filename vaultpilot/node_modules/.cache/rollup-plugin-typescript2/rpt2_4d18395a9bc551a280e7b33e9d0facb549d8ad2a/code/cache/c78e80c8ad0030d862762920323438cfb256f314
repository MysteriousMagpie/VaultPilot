{"code":"/**\n * Settings Extensions for VaultPilot Vault Management\n */\nimport { __awaiter } from \"tslib\";\nimport { Setting } from 'obsidian';\nexport const DEFAULT_VAULT_MANAGEMENT_SETTINGS = {\n    enableVaultManagement: true,\n    autoSyncVaultStructure: false,\n    searchResultsLimit: 50,\n    enableSmartSearch: true,\n    batchOperationTimeout: 30000,\n    showVaultStats: true,\n    maxSearchResults: 100,\n    defaultSearchType: 'content',\n    enableFileOperations: true,\n    confirmDestructiveOperations: true,\n    autoBackupBeforeOperations: false\n};\n/**\n * Add vault management settings to the settings tab\n */\nexport function addVaultManagementSettings(containerEl, plugin) {\n    // Vault Management Section Header\n    containerEl.createEl('h2', { text: 'Vault Management' });\n    containerEl.createEl('p', {\n        text: 'Configure AI-powered vault structure analysis and file operations.'\n    });\n    // Enable Vault Management\n    new Setting(containerEl)\n        .setName('Enable Vault Management')\n        .setDesc('Enable AI-powered vault structure analysis and file operations')\n        .addToggle(toggle => {\n        var _a, _b;\n        return toggle\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.enableVaultManagement) !== null && _b !== void 0 ? _b : true)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.enableVaultManagement = value;\n            yield plugin.saveSettings();\n            if (value) {\n                plugin.initializeVaultManagement();\n            }\n            else {\n                plugin.disableVaultManagement();\n            }\n        }));\n    });\n    // Auto Sync Vault Structure\n    new Setting(containerEl)\n        .setName('Auto Sync Vault Structure')\n        .setDesc('Automatically update vault structure analysis when files change')\n        .addToggle(toggle => {\n        var _a, _b;\n        return toggle\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.autoSyncVaultStructure) !== null && _b !== void 0 ? _b : false)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.autoSyncVaultStructure = value;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Enable Smart Search\n    new Setting(containerEl)\n        .setName('Enable Smart Search')\n        .setDesc('Use AI-powered search with context and insights')\n        .addToggle(toggle => {\n        var _a, _b;\n        return toggle\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.enableSmartSearch) !== null && _b !== void 0 ? _b : true)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.enableSmartSearch = value;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Search Results Limit\n    new Setting(containerEl)\n        .setName('Search Results Limit')\n        .setDesc('Maximum number of search results to display')\n        .addSlider(slider => {\n        var _a, _b;\n        return slider\n            .setLimits(10, 200, 10)\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.searchResultsLimit) !== null && _b !== void 0 ? _b : 50)\n            .setDynamicTooltip()\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.searchResultsLimit = value;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Default Search Type\n    new Setting(containerEl)\n        .setName('Default Search Type')\n        .setDesc('Default search mode for smart search')\n        .addDropdown(dropdown => {\n        var _a, _b;\n        return dropdown\n            .addOption('content', 'Content Search')\n            .addOption('filename', 'Filename Search')\n            .addOption('tags', 'Tag Search')\n            .addOption('links', 'Link Search')\n            .addOption('comprehensive', 'Comprehensive Search')\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.defaultSearchType) !== null && _b !== void 0 ? _b : 'content')\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.defaultSearchType = value;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Enable File Operations\n    new Setting(containerEl)\n        .setName('Enable File Operations')\n        .setDesc('Allow file creation, deletion, and modification through the interface')\n        .addToggle(toggle => {\n        var _a, _b;\n        return toggle\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.enableFileOperations) !== null && _b !== void 0 ? _b : true)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.enableFileOperations = value;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Confirm Destructive Operations\n    new Setting(containerEl)\n        .setName('Confirm Destructive Operations')\n        .setDesc('Show confirmation dialog for file deletion and destructive operations')\n        .addToggle(toggle => {\n        var _a, _b;\n        return toggle\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.confirmDestructiveOperations) !== null && _b !== void 0 ? _b : true)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.confirmDestructiveOperations = value;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Auto Backup Before Operations\n    new Setting(containerEl)\n        .setName('Auto Backup Before Operations')\n        .setDesc('Automatically create backups before destructive file operations')\n        .addToggle(toggle => {\n        var _a, _b;\n        return toggle\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.autoBackupBeforeOperations) !== null && _b !== void 0 ? _b : false)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.autoBackupBeforeOperations = value;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Batch Operation Timeout\n    new Setting(containerEl)\n        .setName('Batch Operation Timeout')\n        .setDesc('Timeout for batch operations in milliseconds')\n        .addText(text => {\n        var _a, _b;\n        return text\n            .setPlaceholder('30000')\n            .setValue(String((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.batchOperationTimeout) !== null && _b !== void 0 ? _b : 30000))\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            const timeout = parseInt(value) || 30000;\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.batchOperationTimeout = timeout;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Show Vault Stats\n    new Setting(containerEl)\n        .setName('Show Vault Statistics')\n        .setDesc('Display vault statistics in modals and interfaces')\n        .addToggle(toggle => {\n        var _a, _b;\n        return toggle\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.showVaultStats) !== null && _b !== void 0 ? _b : true)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.showVaultStats = value;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Test Connection Button\n    new Setting(containerEl)\n        .setName('Test Vault Management Connection')\n        .setDesc('Test connection to vault management endpoints')\n        .addButton(button => button\n        .setButtonText('Test Connection')\n        .setCta()\n        .onClick(() => __awaiter(this, void 0, void 0, function* () {\n        if (!plugin.vaultClient) {\n            button.setButtonText('Not Available');\n            setTimeout(() => button.setButtonText('Test Connection'), 2000);\n            return;\n        }\n        button.setButtonText('Testing...');\n        button.setDisabled(true);\n        try {\n            const result = yield plugin.vaultClient.testConnection();\n            if (result.success) {\n                button.setButtonText('✅ Connected');\n            }\n            else {\n                button.setButtonText('❌ Failed');\n            }\n        }\n        catch (error) {\n            button.setButtonText('❌ Error');\n        }\n        button.setDisabled(false);\n        setTimeout(() => button.setButtonText('Test Connection'), 3000);\n    })));\n    // Advanced Settings Section\n    containerEl.createEl('h3', { text: 'Advanced Vault Management' });\n    // Max Search Results\n    new Setting(containerEl)\n        .setName('Maximum Search Results')\n        .setDesc('Absolute maximum number of search results to fetch from backend')\n        .addSlider(slider => {\n        var _a, _b;\n        return slider\n            .setLimits(50, 500, 25)\n            .setValue((_b = (_a = plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.maxSearchResults) !== null && _b !== void 0 ? _b : 100)\n            .setDynamicTooltip()\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            if (!plugin.settings.vaultManagement) {\n                plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n            }\n            plugin.settings.vaultManagement.maxSearchResults = value;\n            yield plugin.saveSettings();\n        }));\n    });\n    // Reset to Defaults Button\n    new Setting(containerEl)\n        .setName('Reset Vault Management Settings')\n        .setDesc('Reset all vault management settings to their default values')\n        .addButton(button => button\n        .setButtonText('Reset to Defaults')\n        .setWarning()\n        .onClick(() => __awaiter(this, void 0, void 0, function* () {\n        plugin.settings.vaultManagement = Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS);\n        yield plugin.saveSettings();\n        // Refresh the settings display\n        const settingsTab = plugin.app.setting.activeTab;\n        if (settingsTab && settingsTab.display) {\n            settingsTab.display();\n        }\n    })));\n}\n/**\n * Validate vault management settings\n */\nexport function validateVaultManagementSettings(settings) {\n    const errors = [];\n    if (settings.searchResultsLimit < 1 || settings.searchResultsLimit > 1000) {\n        errors.push('Search results limit must be between 1 and 1000');\n    }\n    if (settings.maxSearchResults < settings.searchResultsLimit) {\n        errors.push('Maximum search results must be greater than or equal to search results limit');\n    }\n    if (settings.batchOperationTimeout < 1000 || settings.batchOperationTimeout > 300000) {\n        errors.push('Batch operation timeout must be between 1 second and 5 minutes');\n    }\n    const validSearchTypes = ['content', 'filename', 'tags', 'links', 'comprehensive'];\n    if (!validSearchTypes.includes(settings.defaultSearchType)) {\n        errors.push('Invalid default search type');\n    }\n    return errors;\n}\n/**\n * Get vault management settings with defaults\n */\nexport function getVaultManagementSettings(pluginSettings) {\n    return Object.assign(Object.assign({}, DEFAULT_VAULT_MANAGEMENT_SETTINGS), (pluginSettings.vaultManagement || {}));\n}\n//# sourceMappingURL=vault-settings.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/vault-types.ts"],"map":"{\"version\":3,\"file\":\"vault-settings.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/vault-settings.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * Settings Extensions for VaultPilot Vault Management\\n */\\n\\nimport { Setting } from 'obsidian';\\nimport { VaultManagementSettings } from './vault-types';\\n\\nexport const DEFAULT_VAULT_MANAGEMENT_SETTINGS: VaultManagementSettings = {\\n  enableVaultManagement: true,\\n  autoSyncVaultStructure: false,\\n  searchResultsLimit: 50,\\n  enableSmartSearch: true,\\n  batchOperationTimeout: 30000,\\n  showVaultStats: true,\\n  maxSearchResults: 100,\\n  defaultSearchType: 'content',\\n  enableFileOperations: true,\\n  confirmDestructiveOperations: true,\\n  autoBackupBeforeOperations: false\\n};\\n\\n/**\\n * Add vault management settings to the settings tab\\n */\\nexport function addVaultManagementSettings(containerEl: HTMLElement, plugin: any) {\\n  // Vault Management Section Header\\n  containerEl.createEl('h2', { text: 'Vault Management' });\\n  containerEl.createEl('p', { \\n    text: 'Configure AI-powered vault structure analysis and file operations.' \\n  });\\n\\n  // Enable Vault Management\\n  new Setting(containerEl)\\n    .setName('Enable Vault Management')\\n    .setDesc('Enable AI-powered vault structure analysis and file operations')\\n    .addToggle(toggle => toggle\\n      .setValue(plugin.settings.vaultManagement?.enableVaultManagement ?? true)\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.enableVaultManagement = value;\\n        await plugin.saveSettings();\\n        \\n        if (value) {\\n          plugin.initializeVaultManagement();\\n        } else {\\n          plugin.disableVaultManagement();\\n        }\\n      }));\\n\\n  // Auto Sync Vault Structure\\n  new Setting(containerEl)\\n    .setName('Auto Sync Vault Structure')\\n    .setDesc('Automatically update vault structure analysis when files change')\\n    .addToggle(toggle => toggle\\n      .setValue(plugin.settings.vaultManagement?.autoSyncVaultStructure ?? false)\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.autoSyncVaultStructure = value;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Enable Smart Search\\n  new Setting(containerEl)\\n    .setName('Enable Smart Search')\\n    .setDesc('Use AI-powered search with context and insights')\\n    .addToggle(toggle => toggle\\n      .setValue(plugin.settings.vaultManagement?.enableSmartSearch ?? true)\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.enableSmartSearch = value;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Search Results Limit\\n  new Setting(containerEl)\\n    .setName('Search Results Limit')\\n    .setDesc('Maximum number of search results to display')\\n    .addSlider(slider => slider\\n      .setLimits(10, 200, 10)\\n      .setValue(plugin.settings.vaultManagement?.searchResultsLimit ?? 50)\\n      .setDynamicTooltip()\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.searchResultsLimit = value;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Default Search Type\\n  new Setting(containerEl)\\n    .setName('Default Search Type')\\n    .setDesc('Default search mode for smart search')\\n    .addDropdown(dropdown => dropdown\\n      .addOption('content', 'Content Search')\\n      .addOption('filename', 'Filename Search')\\n      .addOption('tags', 'Tag Search')\\n      .addOption('links', 'Link Search')\\n      .addOption('comprehensive', 'Comprehensive Search')\\n      .setValue(plugin.settings.vaultManagement?.defaultSearchType ?? 'content')\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.defaultSearchType = value as any;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Enable File Operations\\n  new Setting(containerEl)\\n    .setName('Enable File Operations')\\n    .setDesc('Allow file creation, deletion, and modification through the interface')\\n    .addToggle(toggle => toggle\\n      .setValue(plugin.settings.vaultManagement?.enableFileOperations ?? true)\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.enableFileOperations = value;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Confirm Destructive Operations\\n  new Setting(containerEl)\\n    .setName('Confirm Destructive Operations')\\n    .setDesc('Show confirmation dialog for file deletion and destructive operations')\\n    .addToggle(toggle => toggle\\n      .setValue(plugin.settings.vaultManagement?.confirmDestructiveOperations ?? true)\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.confirmDestructiveOperations = value;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Auto Backup Before Operations\\n  new Setting(containerEl)\\n    .setName('Auto Backup Before Operations')\\n    .setDesc('Automatically create backups before destructive file operations')\\n    .addToggle(toggle => toggle\\n      .setValue(plugin.settings.vaultManagement?.autoBackupBeforeOperations ?? false)\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.autoBackupBeforeOperations = value;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Batch Operation Timeout\\n  new Setting(containerEl)\\n    .setName('Batch Operation Timeout')\\n    .setDesc('Timeout for batch operations in milliseconds')\\n    .addText(text => text\\n      .setPlaceholder('30000')\\n      .setValue(String(plugin.settings.vaultManagement?.batchOperationTimeout ?? 30000))\\n      .onChange(async (value) => {\\n        const timeout = parseInt(value) || 30000;\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.batchOperationTimeout = timeout;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Show Vault Stats\\n  new Setting(containerEl)\\n    .setName('Show Vault Statistics')\\n    .setDesc('Display vault statistics in modals and interfaces')\\n    .addToggle(toggle => toggle\\n      .setValue(plugin.settings.vaultManagement?.showVaultStats ?? true)\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.showVaultStats = value;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Test Connection Button\\n  new Setting(containerEl)\\n    .setName('Test Vault Management Connection')\\n    .setDesc('Test connection to vault management endpoints')\\n    .addButton(button => button\\n      .setButtonText('Test Connection')\\n      .setCta()\\n      .onClick(async () => {\\n        if (!plugin.vaultClient) {\\n          button.setButtonText('Not Available');\\n          setTimeout(() => button.setButtonText('Test Connection'), 2000);\\n          return;\\n        }\\n\\n        button.setButtonText('Testing...');\\n        button.setDisabled(true);\\n\\n        try {\\n          const result = await plugin.vaultClient.testConnection();\\n          if (result.success) {\\n            button.setButtonText('✅ Connected');\\n          } else {\\n            button.setButtonText('❌ Failed');\\n          }\\n        } catch (error) {\\n          button.setButtonText('❌ Error');\\n        }\\n\\n        button.setDisabled(false);\\n        setTimeout(() => button.setButtonText('Test Connection'), 3000);\\n      }));\\n\\n  // Advanced Settings Section\\n  containerEl.createEl('h3', { text: 'Advanced Vault Management' });\\n\\n  // Max Search Results\\n  new Setting(containerEl)\\n    .setName('Maximum Search Results')\\n    .setDesc('Absolute maximum number of search results to fetch from backend')\\n    .addSlider(slider => slider\\n      .setLimits(50, 500, 25)\\n      .setValue(plugin.settings.vaultManagement?.maxSearchResults ?? 100)\\n      .setDynamicTooltip()\\n      .onChange(async (value) => {\\n        if (!plugin.settings.vaultManagement) {\\n          plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        }\\n        plugin.settings.vaultManagement.maxSearchResults = value;\\n        await plugin.saveSettings();\\n      }));\\n\\n  // Reset to Defaults Button\\n  new Setting(containerEl)\\n    .setName('Reset Vault Management Settings')\\n    .setDesc('Reset all vault management settings to their default values')\\n    .addButton(button => button\\n      .setButtonText('Reset to Defaults')\\n      .setWarning()\\n      .onClick(async () => {\\n        plugin.settings.vaultManagement = { ...DEFAULT_VAULT_MANAGEMENT_SETTINGS };\\n        await plugin.saveSettings();\\n        \\n        // Refresh the settings display\\n        const settingsTab = plugin.app.setting.activeTab;\\n        if (settingsTab && settingsTab.display) {\\n          settingsTab.display();\\n        }\\n      }));\\n}\\n\\n/**\\n * Validate vault management settings\\n */\\nexport function validateVaultManagementSettings(settings: VaultManagementSettings): string[] {\\n  const errors: string[] = [];\\n\\n  if (settings.searchResultsLimit < 1 || settings.searchResultsLimit > 1000) {\\n    errors.push('Search results limit must be between 1 and 1000');\\n  }\\n\\n  if (settings.maxSearchResults < settings.searchResultsLimit) {\\n    errors.push('Maximum search results must be greater than or equal to search results limit');\\n  }\\n\\n  if (settings.batchOperationTimeout < 1000 || settings.batchOperationTimeout > 300000) {\\n    errors.push('Batch operation timeout must be between 1 second and 5 minutes');\\n  }\\n\\n  const validSearchTypes = ['content', 'filename', 'tags', 'links', 'comprehensive'];\\n  if (!validSearchTypes.includes(settings.defaultSearchType)) {\\n    errors.push('Invalid default search type');\\n  }\\n\\n  return errors;\\n}\\n\\n/**\\n * Get vault management settings with defaults\\n */\\nexport function getVaultManagementSettings(pluginSettings: any): VaultManagementSettings {\\n  return {\\n    ...DEFAULT_VAULT_MANAGEMENT_SETTINGS,\\n    ...(pluginSettings.vaultManagement || {})\\n  };\\n}\\n\"]}"}
