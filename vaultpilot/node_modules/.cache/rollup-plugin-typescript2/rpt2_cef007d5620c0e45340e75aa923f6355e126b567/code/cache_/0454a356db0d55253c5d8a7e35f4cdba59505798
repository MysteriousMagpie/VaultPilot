{"code":"import { __awaiter } from \"tslib\";\nimport { PluginSettingTab, Setting, Notice } from 'obsidian';\nimport { addVaultManagementSettings, DEFAULT_VAULT_MANAGEMENT_SETTINGS } from './vault-settings';\nexport const DEFAULT_SETTINGS = {\n    backendUrl: 'http://localhost:8000',\n    apiKey: '',\n    enableWebSocket: true,\n    enableCopilot: true,\n    enableAutoComplete: false, // Disabled by default to prevent frequent requests\n    defaultAgent: '',\n    defaultMode: 'ask',\n    chatHistoryLimit: 100,\n    debugMode: false,\n    showIntentDebug: false,\n    vaultManagement: DEFAULT_VAULT_MANAGEMENT_SETTINGS,\n    modelSelection: {\n        enabled: true,\n        devpipePath: '../dev-pipe',\n        monitoringInterval: 30000,\n        fallbackEnabled: true,\n        cacheDuration: 300000,\n        retryAttempts: 3,\n        timeout: 30000,\n        debugMode: false,\n        userPreferences: {\n            priority: 'balanced',\n            maxCostPerRequest: 0.50,\n            preferredProviders: [],\n            qualityThreshold: 0.7\n        }\n    }\n};\nexport class VaultPilotSettingTab extends PluginSettingTab {\n    constructor(app, plugin) {\n        super(app, plugin);\n        this.plugin = plugin;\n    }\n    display() {\n        const { containerEl } = this;\n        containerEl.empty();\n        containerEl.createEl('h2', { text: 'VaultPilot Settings' });\n        containerEl.createEl('p', {\n            text: 'Configure your connection to EvoAgentX backend and AI features.'\n        });\n        // Connection Settings\n        containerEl.createEl('h3', { text: 'Connection' });\n        new Setting(containerEl)\n            .setName('Backend URL')\n            .setDesc('URL of EvoAgentX backend server')\n            .addText(text => text\n            .setPlaceholder('http://localhost:8000')\n            .setValue(this.plugin.settings.backendUrl)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.backendUrl = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('API Key')\n            .setDesc('Optional API key for authentication (if required by backend)')\n            .addText(text => text\n            .setPlaceholder('Enter API key...')\n            .setValue(this.plugin.settings.apiKey || '')\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.apiKey = value;\n            yield this.plugin.saveSettings();\n        })));\n        // Test connection button\n        new Setting(containerEl)\n            .setName('Connection Test')\n            .setDesc('Test connection to EvoAgentX backend')\n            .addButton(button => button\n            .setButtonText('Test Connection')\n            .onClick(() => __awaiter(this, void 0, void 0, function* () {\n            yield this.testConnection();\n        })));\n        // Feature Settings\n        containerEl.createEl('h3', { text: 'Features' });\n        new Setting(containerEl)\n            .setName('Enable WebSocket')\n            .setDesc('Enable real-time communication for live updates and progress tracking')\n            .addToggle(toggle => toggle\n            .setValue(this.plugin.settings.enableWebSocket)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.enableWebSocket = value;\n            yield this.plugin.saveSettings();\n            if (value) {\n                this.plugin.connectWebSocket();\n            }\n            else {\n                this.plugin.disconnectWebSocket();\n            }\n        })));\n        new Setting(containerEl)\n            .setName('Enable Copilot')\n            .setDesc('Enable AI-powered text completion and suggestions')\n            .addToggle(toggle => toggle\n            .setValue(this.plugin.settings.enableCopilot)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.enableCopilot = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Enable Auto-Complete')\n            .setDesc('Automatically suggest completions after sentence endings and new lines (with 10s cooldown)')\n            .addToggle(toggle => toggle\n            .setValue(this.plugin.settings.enableAutoComplete)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.enableAutoComplete = value;\n            yield this.plugin.saveSettings();\n        })));\n        // Agent Settings\n        containerEl.createEl('h3', { text: 'Agent Configuration' });\n        new Setting(containerEl)\n            .setName('Default Agent')\n            .setDesc('Default agent to use for chat and workflows (leave empty for auto-selection)')\n            .addText(text => text\n            .setPlaceholder('Agent ID or name...')\n            .setValue(this.plugin.settings.defaultAgent || '')\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.defaultAgent = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Default Chat Mode')\n            .setDesc('Default mode for new chat sessions: Ask for simple Q&A, Agent for complex workflows')\n            .addDropdown(dropdown => dropdown\n            .addOption('ask', 'Ask Mode - Simple Q&A')\n            .addOption('agent', 'Agent Mode - Complex Workflows')\n            .setValue(this.plugin.settings.defaultMode)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.defaultMode = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Chat History Limit')\n            .setDesc('Maximum number of chat messages to keep in history')\n            .addSlider(slider => slider\n            .setLimits(10, 500, 10)\n            .setValue(this.plugin.settings.chatHistoryLimit)\n            .setDynamicTooltip()\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.chatHistoryLimit = value;\n            yield this.plugin.saveSettings();\n        })));\n        // Advanced Settings\n        containerEl.createEl('h3', { text: 'Advanced' });\n        new Setting(containerEl)\n            .setName('Debug Mode')\n            .setDesc('Enable debug logging and additional developer features')\n            .addToggle(toggle => toggle\n            .setValue(this.plugin.settings.debugMode)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.debugMode = value;\n            yield this.plugin.saveSettings();\n        })));\n        new Setting(containerEl)\n            .setName('Show Intent Debug Overlay')\n            .setDesc('Display automatic intent detection in chat (Ask vs Agent mode)')\n            .addToggle(toggle => toggle\n            .setValue(this.plugin.settings.showIntentDebug)\n            .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n            this.plugin.settings.showIntentDebug = value;\n            yield this.plugin.saveSettings();\n        })));\n        // Vault Management Settings\n        containerEl.createEl('h3', { text: 'Vault Management' });\n        addVaultManagementSettings(containerEl, this.plugin);\n        // Model Selection Settings\n        containerEl.createEl('h3', { text: 'Model Selection' });\n        new Setting(containerEl)\n            .setName('Enable Model Selection')\n            .setDesc('Enable intelligent AI model selection based on task type and requirements')\n            .addToggle(toggle => {\n            var _a, _b;\n            return toggle\n                .setValue((_b = (_a = this.plugin.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.enabled) !== null && _b !== void 0 ? _b : true)\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                if (!this.plugin.settings.modelSelection) {\n                    this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection;\n                }\n                this.plugin.settings.modelSelection.enabled = value;\n                yield this.plugin.saveSettings();\n                if (value) {\n                    // Initialize model selection service if enabled\n                    yield this.plugin.initializeModelSelection();\n                }\n                else {\n                    // Disconnect model selection service if disabled\n                    yield this.plugin.disconnectModelSelection();\n                }\n            }));\n        });\n        new Setting(containerEl)\n            .setName('DevPipe Path')\n            .setDesc('Path to the DevPipe communication directory')\n            .addText(text => {\n            var _a, _b;\n            return text\n                .setPlaceholder('../dev-pipe')\n                .setValue((_b = (_a = this.plugin.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.devpipePath) !== null && _b !== void 0 ? _b : '../dev-pipe')\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                if (!this.plugin.settings.modelSelection) {\n                    this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection;\n                }\n                this.plugin.settings.modelSelection.devpipePath = value;\n                yield this.plugin.saveSettings();\n            }));\n        });\n        new Setting(containerEl)\n            .setName('Priority Mode')\n            .setDesc('How to prioritize model selection: performance, cost, or balanced')\n            .addDropdown(dropdown => {\n            var _a, _b;\n            return dropdown\n                .addOption('performance', 'Performance - Best quality models')\n                .addOption('cost', 'Cost - Most economical models')\n                .addOption('balanced', 'Balanced - Optimal quality/cost ratio')\n                .setValue((_b = (_a = this.plugin.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.userPreferences.priority) !== null && _b !== void 0 ? _b : 'balanced')\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                if (!this.plugin.settings.modelSelection) {\n                    this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection;\n                }\n                this.plugin.settings.modelSelection.userPreferences.priority = value;\n                yield this.plugin.saveSettings();\n            }));\n        });\n        new Setting(containerEl)\n            .setName('Max Cost Per Request')\n            .setDesc('Maximum cost per AI request (in USD)')\n            .addSlider(slider => {\n            var _a, _b;\n            return slider\n                .setLimits(0.01, 2.00, 0.01)\n                .setValue((_b = (_a = this.plugin.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.userPreferences.maxCostPerRequest) !== null && _b !== void 0 ? _b : 0.50)\n                .setDynamicTooltip()\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                if (!this.plugin.settings.modelSelection) {\n                    this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection;\n                }\n                this.plugin.settings.modelSelection.userPreferences.maxCostPerRequest = value;\n                yield this.plugin.saveSettings();\n            }));\n        });\n        new Setting(containerEl)\n            .setName('Model Selection Debug')\n            .setDesc('Enable debug logging for model selection decisions')\n            .addToggle(toggle => {\n            var _a, _b;\n            return toggle\n                .setValue((_b = (_a = this.plugin.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.debugMode) !== null && _b !== void 0 ? _b : false)\n                .onChange((value) => __awaiter(this, void 0, void 0, function* () {\n                if (!this.plugin.settings.modelSelection) {\n                    this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection;\n                }\n                this.plugin.settings.modelSelection.debugMode = value;\n                yield this.plugin.saveSettings();\n            }));\n        });\n        // Help section\n        containerEl.createEl('h2', { text: 'Help & Documentation' });\n        // Information section\n        containerEl.createEl('h3', { text: 'Information' });\n        const infoEl = containerEl.createEl('div', { cls: 'setting-item-description' });\n        infoEl.innerHTML = `\n      <p><strong>VaultPilot v1.0.0</strong></p>\n      <p>Comprehensive EvoAgentX integration for Obsidian</p>\n      <p>Features: AI Chat, Copilot, Workflows, Vault Analysis, Task Planning</p>\n      <p>For help and documentation, visit the GitHub repository.</p>\n    `;\n    }\n    testConnection() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const notice = new Notice('Testing connection...', 0);\n            try {\n                let response = yield this.plugin.apiClient.healthCheck();\n                // If the main health check fails with a 400, try the simple check\n                if (!response.success && ((_a = response.error) === null || _a === void 0 ? void 0 : _a.includes('400'))) {\n                    console.warn('Main health check failed with 400, trying alternative method');\n                    const simpleResponse = yield this.plugin.apiClient.simpleHealthCheck();\n                    if (simpleResponse.success && simpleResponse.data) {\n                        response = {\n                            success: true,\n                            data: { status: simpleResponse.data.status, version: 'unknown' }\n                        };\n                    }\n                }\n                notice.hide();\n                if (response.success) {\n                    new Notice('✅ Connection successful!', 3000);\n                }\n                else {\n                    new Notice(`❌ Connection failed: ${response.error}`, 5000);\n                }\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`❌ Connection error: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\n            }\n        });\n    }\n}\n//# sourceMappingURL=settings.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/vault-settings.ts"],"map":"{\"version\":3,\"file\":\"settings.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/settings.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { App, PluginSettingTab, Setting, Notice } from 'obsidian';\\nimport type VaultPilotPlugin from './main';\\nimport { VaultPilotSettings, ModelSelectionSettings } from './types';\\nimport { addVaultManagementSettings, DEFAULT_VAULT_MANAGEMENT_SETTINGS } from './vault-settings';\\n\\nexport const DEFAULT_SETTINGS: VaultPilotSettings = {\\n  backendUrl: 'http://localhost:8000',\\n  apiKey: '',\\n  enableWebSocket: true,\\n  enableCopilot: true,\\n  enableAutoComplete: false, // Disabled by default to prevent frequent requests\\n  defaultAgent: '',\\n  defaultMode: 'ask',\\n  chatHistoryLimit: 100,\\n  debugMode: false,\\n  showIntentDebug: false,\\n  vaultManagement: DEFAULT_VAULT_MANAGEMENT_SETTINGS,\\n  modelSelection: {\\n    enabled: true,\\n    devpipePath: '../dev-pipe',\\n    monitoringInterval: 30000,\\n    fallbackEnabled: true,\\n    cacheDuration: 300000,\\n    retryAttempts: 3,\\n    timeout: 30000,\\n    debugMode: false,\\n    userPreferences: {\\n      priority: 'balanced',\\n      maxCostPerRequest: 0.50,\\n      preferredProviders: [],\\n      qualityThreshold: 0.7\\n    }\\n  }\\n};\\n\\nexport class VaultPilotSettingTab extends PluginSettingTab {\\n  plugin: VaultPilotPlugin;\\n\\n  constructor(app: App, plugin: VaultPilotPlugin) {\\n    super(app, plugin);\\n    this.plugin = plugin;\\n  }\\n\\n  display(): void {\\n    const { containerEl } = this;\\n    containerEl.empty();\\n    \\n    containerEl.createEl('h2', { text: 'VaultPilot Settings' });\\n    containerEl.createEl('p', { \\n      text: 'Configure your connection to EvoAgentX backend and AI features.' \\n    });\\n\\n    // Connection Settings\\n    containerEl.createEl('h3', { text: 'Connection' });\\n\\n    new Setting(containerEl)\\n      .setName('Backend URL')\\n      .setDesc('URL of EvoAgentX backend server')\\n      .addText(text =>\\n        text\\n          .setPlaceholder('http://localhost:8000')\\n          .setValue(this.plugin.settings.backendUrl)\\n          .onChange(async value => {\\n            this.plugin.settings.backendUrl = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('API Key')\\n      .setDesc('Optional API key for authentication (if required by backend)')\\n      .addText(text =>\\n        text\\n          .setPlaceholder('Enter API key...')\\n          .setValue(this.plugin.settings.apiKey || '')\\n          .onChange(async value => {\\n            this.plugin.settings.apiKey = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    // Test connection button\\n    new Setting(containerEl)\\n      .setName('Connection Test')\\n      .setDesc('Test connection to EvoAgentX backend')\\n      .addButton(button =>\\n        button\\n          .setButtonText('Test Connection')\\n          .onClick(async () => {\\n            await this.testConnection();\\n          })\\n      );\\n\\n    // Feature Settings\\n    containerEl.createEl('h3', { text: 'Features' });\\n\\n    new Setting(containerEl)\\n      .setName('Enable WebSocket')\\n      .setDesc('Enable real-time communication for live updates and progress tracking')\\n      .addToggle(toggle =>\\n        toggle\\n          .setValue(this.plugin.settings.enableWebSocket)\\n          .onChange(async value => {\\n            this.plugin.settings.enableWebSocket = value;\\n            await this.plugin.saveSettings();\\n            if (value) {\\n              this.plugin.connectWebSocket();\\n            } else {\\n              this.plugin.disconnectWebSocket();\\n            }\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('Enable Copilot')\\n      .setDesc('Enable AI-powered text completion and suggestions')\\n      .addToggle(toggle =>\\n        toggle\\n          .setValue(this.plugin.settings.enableCopilot)\\n          .onChange(async value => {\\n            this.plugin.settings.enableCopilot = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('Enable Auto-Complete')\\n      .setDesc('Automatically suggest completions after sentence endings and new lines (with 10s cooldown)')\\n      .addToggle(toggle =>\\n        toggle\\n          .setValue(this.plugin.settings.enableAutoComplete)\\n          .onChange(async value => {\\n            this.plugin.settings.enableAutoComplete = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    // Agent Settings\\n    containerEl.createEl('h3', { text: 'Agent Configuration' });\\n\\n    new Setting(containerEl)\\n      .setName('Default Agent')\\n      .setDesc('Default agent to use for chat and workflows (leave empty for auto-selection)')\\n      .addText(text =>\\n        text\\n          .setPlaceholder('Agent ID or name...')\\n          .setValue(this.plugin.settings.defaultAgent || '')\\n          .onChange(async value => {\\n            this.plugin.settings.defaultAgent = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('Default Chat Mode')\\n      .setDesc('Default mode for new chat sessions: Ask for simple Q&A, Agent for complex workflows')\\n      .addDropdown(dropdown =>\\n        dropdown\\n          .addOption('ask', 'Ask Mode - Simple Q&A')\\n          .addOption('agent', 'Agent Mode - Complex Workflows')\\n          .setValue(this.plugin.settings.defaultMode)\\n          .onChange(async value => {\\n            this.plugin.settings.defaultMode = value as 'ask' | 'agent';\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('Chat History Limit')\\n      .setDesc('Maximum number of chat messages to keep in history')\\n      .addSlider(slider =>\\n        slider\\n          .setLimits(10, 500, 10)\\n          .setValue(this.plugin.settings.chatHistoryLimit)\\n          .setDynamicTooltip()\\n          .onChange(async value => {\\n            this.plugin.settings.chatHistoryLimit = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    // Advanced Settings\\n    containerEl.createEl('h3', { text: 'Advanced' });\\n\\n    new Setting(containerEl)\\n      .setName('Debug Mode')\\n      .setDesc('Enable debug logging and additional developer features')\\n      .addToggle(toggle =>\\n        toggle\\n          .setValue(this.plugin.settings.debugMode)\\n          .onChange(async value => {\\n            this.plugin.settings.debugMode = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('Show Intent Debug Overlay')\\n      .setDesc('Display automatic intent detection in chat (Ask vs Agent mode)')\\n      .addToggle(toggle =>\\n        toggle\\n          .setValue(this.plugin.settings.showIntentDebug)\\n          .onChange(async value => {\\n            this.plugin.settings.showIntentDebug = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    // Vault Management Settings\\n    containerEl.createEl('h3', { text: 'Vault Management' });\\n    addVaultManagementSettings(containerEl, this.plugin);\\n\\n    // Model Selection Settings\\n    containerEl.createEl('h3', { text: 'Model Selection' });\\n    \\n    new Setting(containerEl)\\n      .setName('Enable Model Selection')\\n      .setDesc('Enable intelligent AI model selection based on task type and requirements')\\n      .addToggle(toggle =>\\n        toggle\\n          .setValue(this.plugin.settings.modelSelection?.enabled ?? true)\\n          .onChange(async value => {\\n            if (!this.plugin.settings.modelSelection) {\\n              this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection!;\\n            }\\n            this.plugin.settings.modelSelection.enabled = value;\\n            await this.plugin.saveSettings();\\n            \\n            if (value) {\\n              // Initialize model selection service if enabled\\n              await this.plugin.initializeModelSelection();\\n            } else {\\n              // Disconnect model selection service if disabled\\n              await this.plugin.disconnectModelSelection();\\n            }\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('DevPipe Path')\\n      .setDesc('Path to the DevPipe communication directory')\\n      .addText(text =>\\n        text\\n          .setPlaceholder('../dev-pipe')\\n          .setValue(this.plugin.settings.modelSelection?.devpipePath ?? '../dev-pipe')\\n          .onChange(async value => {\\n            if (!this.plugin.settings.modelSelection) {\\n              this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection!;\\n            }\\n            this.plugin.settings.modelSelection.devpipePath = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('Priority Mode')\\n      .setDesc('How to prioritize model selection: performance, cost, or balanced')\\n      .addDropdown(dropdown =>\\n        dropdown\\n          .addOption('performance', 'Performance - Best quality models')\\n          .addOption('cost', 'Cost - Most economical models')\\n          .addOption('balanced', 'Balanced - Optimal quality/cost ratio')\\n          .setValue(this.plugin.settings.modelSelection?.userPreferences.priority ?? 'balanced')\\n          .onChange(async value => {\\n            if (!this.plugin.settings.modelSelection) {\\n              this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection!;\\n            }\\n            this.plugin.settings.modelSelection.userPreferences.priority = value as 'performance' | 'cost' | 'balanced';\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('Max Cost Per Request')\\n      .setDesc('Maximum cost per AI request (in USD)')\\n      .addSlider(slider =>\\n        slider\\n          .setLimits(0.01, 2.00, 0.01)\\n          .setValue(this.plugin.settings.modelSelection?.userPreferences.maxCostPerRequest ?? 0.50)\\n          .setDynamicTooltip()\\n          .onChange(async value => {\\n            if (!this.plugin.settings.modelSelection) {\\n              this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection!;\\n            }\\n            this.plugin.settings.modelSelection.userPreferences.maxCostPerRequest = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    new Setting(containerEl)\\n      .setName('Model Selection Debug')\\n      .setDesc('Enable debug logging for model selection decisions')\\n      .addToggle(toggle =>\\n        toggle\\n          .setValue(this.plugin.settings.modelSelection?.debugMode ?? false)\\n          .onChange(async value => {\\n            if (!this.plugin.settings.modelSelection) {\\n              this.plugin.settings.modelSelection = DEFAULT_SETTINGS.modelSelection!;\\n            }\\n            this.plugin.settings.modelSelection.debugMode = value;\\n            await this.plugin.saveSettings();\\n          })\\n      );\\n\\n    // Help section\\n    containerEl.createEl('h2', { text: 'Help & Documentation' });\\n\\n    // Information section\\n    containerEl.createEl('h3', { text: 'Information' });\\n    const infoEl = containerEl.createEl('div', { cls: 'setting-item-description' });\\n    infoEl.innerHTML = `\\n      <p><strong>VaultPilot v1.0.0</strong></p>\\n      <p>Comprehensive EvoAgentX integration for Obsidian</p>\\n      <p>Features: AI Chat, Copilot, Workflows, Vault Analysis, Task Planning</p>\\n      <p>For help and documentation, visit the GitHub repository.</p>\\n    `;\\n  }\\n\\n  private async testConnection(): Promise<void> {\\n    const notice = new Notice('Testing connection...', 0);\\n    \\n    try {\\n      let response = await this.plugin.apiClient.healthCheck();\\n      \\n      // If the main health check fails with a 400, try the simple check\\n      if (!response.success && response.error?.includes('400')) {\\n        console.warn('Main health check failed with 400, trying alternative method');\\n        const simpleResponse = await this.plugin.apiClient.simpleHealthCheck();\\n        if (simpleResponse.success && simpleResponse.data) {\\n          response = {\\n            success: true,\\n            data: { status: simpleResponse.data.status, version: 'unknown' }\\n          };\\n        }\\n      }\\n      \\n      notice.hide();\\n      \\n      if (response.success) {\\n        new Notice('✅ Connection successful!', 3000);\\n      } else {\\n        new Notice(`❌ Connection failed: ${response.error}`, 5000);\\n      }\\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`❌ Connection error: ${error instanceof Error ? error.message : 'Unknown error'}`, 5000);\\n    }\\n  }\\n}\\n\"]}"}
