{"code":"import { __awaiter } from \"tslib\";\nimport { DevPipeClient } from '../devpipe/DevPipeClient';\nimport { ModelSelectionError } from '../types/ModelSelection';\nexport class ModelSelectionService {\n    constructor(serverUrl, devPipePath = '', options = {}) {\n        this.cachedHealth = [];\n        this.lastHealthUpdate = 0;\n        this.eventListeners = new Map();\n        this.config = {\n            devpipe_path: devPipePath,\n            server_url: serverUrl,\n            monitoring_interval: options.monitoring_interval || 30000,\n            fallback_enabled: options.fallback_enabled !== false,\n            cache_duration: options.cache_duration || 300000, // 5 minutes\n            retry_attempts: options.retry_attempts || 3,\n            timeout: options.timeout || 30000,\n            debug_mode: options.debug_mode || false\n        };\n        this.devPipeClient = new DevPipeClient(this.config);\n        // Default user preferences\n        this.userPreferences = {\n            priority: 'balanced',\n            max_cost_per_request: 0.50,\n            preferred_providers: [],\n            fallback_enabled: true,\n            quality_threshold: 0.7,\n            timeout_preference: 30000\n        };\n        this.setupEventListeners();\n    }\n    setupEventListeners() {\n        this.devPipeClient.on('connected', () => {\n            this.emit('connected', { status: 'connected' });\n        });\n        this.devPipeClient.on('disconnected', () => {\n            this.emit('disconnected', { status: 'disconnected' });\n        });\n        this.devPipeClient.on('health-updated', (healthData) => {\n            this.cachedHealth = healthData;\n            this.lastHealthUpdate = Date.now();\n            this.emit('health-updated', healthData);\n        });\n        this.devPipeClient.on('performance-metrics', (metrics) => {\n            this.emit('performance-metrics', metrics);\n        });\n    }\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this.devPipeClient.initialize();\n                // Load initial health status\n                yield this.refreshModelHealth();\n                // Start health monitoring\n                this.startHealthMonitoring();\n                if (this.config.debug_mode) {\n                    console.log('ModelSelectionService initialized successfully');\n                }\n            }\n            catch (error) {\n                throw new Error(`Failed to initialize ModelSelectionService: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    selectModel(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield this.performSelection(request);\n            }\n            catch (error) {\n                if (this.config.fallback_enabled) {\n                    return yield this.fallbackSelection(request, error);\n                }\n                throw error;\n            }\n        });\n    }\n    performSelection(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.devPipeClient.isReady()) {\n                throw new ModelSelectionError('NO_HEALTHY_MODELS', 'DevPipe client not connected', {}, ['Check server connection', 'Retry initialization']);\n            }\n            // Add user preferences to request\n            const enhancedRequest = Object.assign(Object.assign({}, request), { user_preferences: this.userPreferences, timeout_ms: request.timeout_ms || this.config.timeout });\n            const response = yield this.devPipeClient.sendMessage('model-selection-request', enhancedRequest, this.config.timeout);\n            return response;\n        });\n    }\n    fallbackSelection(request, originalError) {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.warn('Model selection failed, using fallback:', originalError);\n            // Try cached selection first\n            const cached = this.getCachedSelection(request);\n            if (cached) {\n                return cached;\n            }\n            // Use static rules as last resort\n            return this.staticModelSelection(request);\n        });\n    }\n    staticModelSelection(request) {\n        // Simple static rules for fallback\n        const defaultModels = {\n            'text-generation': { name: 'gpt-3.5-turbo', cost: 0.002 },\n            'code-generation': { name: 'gpt-4', cost: 0.03 },\n            'chat': { name: 'gpt-3.5-turbo', cost: 0.002 },\n            'summarization': { name: 'gpt-3.5-turbo', cost: 0.002 },\n            'translation': { name: 'gpt-3.5-turbo', cost: 0.002 }\n        };\n        const defaultModel = defaultModels[request.task_type] || defaultModels['text-generation'];\n        return {\n            selected_model: {\n                id: defaultModel.name,\n                name: defaultModel.name,\n                provider: 'openai',\n                capabilities: [{ type: request.task_type, score: 0.8 }],\n                cost_per_token: defaultModel.cost,\n                max_tokens: 4000,\n                response_time_avg_ms: 2000,\n                availability_score: 0.9,\n                quality_score: 0.8\n            },\n            reasoning: 'Fallback selection due to service unavailability',\n            fallback_models: [],\n            estimated_cost: defaultModel.cost * 100, // Estimate for 100 tokens\n            estimated_time_ms: 2000,\n            selection_metadata: {\n                selection_time_ms: 0,\n                factors_considered: ['fallback'],\n                confidence_score: 0.5\n            }\n        };\n    }\n    getCachedSelection(request) {\n        // Implementation of cache lookup\n        // For now, return null (no cache)\n        return null;\n    }\n    // Original selectModel method renamed to performSelection (see above)\n    selectModel_OLD(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.devPipeClient.isReady()) {\n                throw new ModelSelectionError('NO_HEALTHY_MODELS', 'DevPipe client not connected', {}, ['Check server connection', 'Retry initialization']);\n            }\n            try {\n                // Add user preferences to request\n                const enhancedRequest = Object.assign(Object.assign({}, request), { user_preferences: this.userPreferences, timeout_ms: request.timeout_ms || this.config.timeout });\n                const response = yield this.devPipeClient.sendMessage('model-selection-request', enhancedRequest, request.timeout_ms || this.config.timeout);\n                // Emit selection event\n                this.emit('model-selected', response);\n                if (this.config.debug_mode) {\n                    console.log('Model selected:', response.selected_model.name, 'for task:', request.task_type);\n                }\n                return response;\n            }\n            catch (error) {\n                if (error instanceof Error) {\n                    if (error.message.includes('timeout')) {\n                        throw new ModelSelectionError('TIMEOUT', 'Model selection request timed out', { originalError: error }, ['Increase timeout', 'Check server performance']);\n                    }\n                    else if (error.message.includes('budget') || error.message.includes('cost')) {\n                        throw new ModelSelectionError('BUDGET_EXCEEDED', 'Request exceeds budget limits', { originalError: error }, ['Increase budget', 'Use lower cost models']);\n                    }\n                }\n                throw new ModelSelectionError('SERVICE_UNAVAILABLE', 'Model selection service unavailable', { originalError: error }, ['Check server status', 'Retry request']);\n            }\n        });\n    }\n    getModelHealth() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Return cached health if recent\n            if (this.cachedHealth.length > 0 && (Date.now() - this.lastHealthUpdate) < this.config.cache_duration) {\n                return this.cachedHealth;\n            }\n            return yield this.refreshModelHealth();\n        });\n    }\n    refreshModelHealth() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const health = yield this.devPipeClient.sendMessage('health-check-request', {}, 10000 // Short timeout for health checks\n                );\n                this.cachedHealth = health;\n                this.lastHealthUpdate = Date.now();\n                return health;\n            }\n            catch (error) {\n                if (this.config.debug_mode) {\n                    console.warn('Failed to refresh model health:', error);\n                }\n                return this.cachedHealth; // Return cached data on error\n            }\n        });\n    }\n    updatePreferences(preferences) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.userPreferences = Object.assign(Object.assign({}, this.userPreferences), preferences);\n            try {\n                yield this.devPipeClient.sendMessage('preferences-update', this.userPreferences, 5000);\n                this.emit('preferences-updated', this.userPreferences);\n                if (this.config.debug_mode) {\n                    console.log('User preferences updated:', this.userPreferences);\n                }\n            }\n            catch (error) {\n                if (this.config.debug_mode) {\n                    console.warn('Failed to sync preferences with server:', error);\n                }\n                // Continue with local preferences even if server sync fails\n            }\n        });\n    }\n    getPreferences() {\n        return Object.assign({}, this.userPreferences);\n    }\n    startHealthMonitoring() {\n        if (this.config.monitoring_interval > 0) {\n            setInterval(() => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    yield this.refreshModelHealth();\n                }\n                catch (error) {\n                    if (this.config.debug_mode) {\n                        console.warn('Health monitoring failed:', error);\n                    }\n                }\n            }), this.config.monitoring_interval);\n        }\n    }\n    // Event system\n    on(event, listener) {\n        if (!this.eventListeners.has(event)) {\n            this.eventListeners.set(event, []);\n        }\n        this.eventListeners.get(event).push(listener);\n    }\n    off(event, listener) {\n        const listeners = this.eventListeners.get(event);\n        if (listeners) {\n            const index = listeners.indexOf(listener);\n            if (index > -1) {\n                listeners.splice(index, 1);\n            }\n        }\n    }\n    emit(event, data) {\n        const listeners = this.eventListeners.get(event);\n        if (listeners) {\n            listeners.forEach(listener => {\n                try {\n                    listener(data);\n                }\n                catch (error) {\n                    if (this.config.debug_mode) {\n                        console.error('Event listener error:', error);\n                    }\n                }\n            });\n        }\n    }\n    // Quick selection methods for common use cases\n    selectForTask(taskType_1) {\n        return __awaiter(this, arguments, void 0, function* (taskType, quality = 'medium') {\n            return this.selectModel({\n                task_type: taskType,\n                quality_requirement: quality\n            });\n        });\n    }\n    selectCostOptimized(taskType_1) {\n        return __awaiter(this, arguments, void 0, function* (taskType, maxCost = 0.01) {\n            return this.selectModel({\n                task_type: taskType,\n                quality_requirement: 'medium',\n                max_cost: maxCost\n            });\n        });\n    }\n    selectHighPerformance(taskType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.selectModel({\n                task_type: taskType,\n                quality_requirement: 'high'\n            });\n        });\n    }\n    // Utility methods\n    isConnected() {\n        return this.devPipeClient.isReady();\n    }\n    getConfig() {\n        return Object.assign({}, this.config);\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.devPipeClient.disconnect();\n        });\n    }\n}\n//# sourceMappingURL=ModelSelectionService.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/devpipe/DevPipeClient.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types/ModelSelection.ts"],"map":"{\"version\":3,\"file\":\"ModelSelectionService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/ModelSelectionService.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { DevPipeClient } from '../devpipe/DevPipeClient';\\nimport { \\n  ModelSelectionRequest, \\n  ModelSelectionResponse, \\n  ModelHealthStatus, \\n  UserPreferences, \\n  ModelPerformanceMetrics,\\n  ModelSelectionConfig,\\n  ModelSelectionError,\\n  ModelSelectionEvent \\n} from '../types/ModelSelection';\\n\\nexport class ModelSelectionService {\\n  private devPipeClient: DevPipeClient;\\n  private config: ModelSelectionConfig;\\n  private userPreferences: UserPreferences;\\n  private cachedHealth: ModelHealthStatus[] = [];\\n  private lastHealthUpdate: number = 0;\\n  private eventListeners: Map<string, Function[]> = new Map();\\n\\n  constructor(serverUrl: string, devPipePath: string = '', options: Partial<ModelSelectionConfig> = {}) {\\n    this.config = {\\n      devpipe_path: devPipePath,\\n      server_url: serverUrl,\\n      monitoring_interval: options.monitoring_interval || 30000,\\n      fallback_enabled: options.fallback_enabled !== false,\\n      cache_duration: options.cache_duration || 300000, // 5 minutes\\n      retry_attempts: options.retry_attempts || 3,\\n      timeout: options.timeout || 30000,\\n      debug_mode: options.debug_mode || false\\n    };\\n\\n    this.devPipeClient = new DevPipeClient(this.config);\\n    \\n    // Default user preferences\\n    this.userPreferences = {\\n      priority: 'balanced',\\n      max_cost_per_request: 0.50,\\n      preferred_providers: [],\\n      fallback_enabled: true,\\n      quality_threshold: 0.7,\\n      timeout_preference: 30000\\n    };\\n\\n    this.setupEventListeners();\\n  }\\n\\n  private setupEventListeners(): void {\\n    this.devPipeClient.on('connected', () => {\\n      this.emit('connected', { status: 'connected' });\\n    });\\n\\n    this.devPipeClient.on('disconnected', () => {\\n      this.emit('disconnected', { status: 'disconnected' });\\n    });\\n\\n    this.devPipeClient.on('health-updated', (healthData: ModelHealthStatus[]) => {\\n      this.cachedHealth = healthData;\\n      this.lastHealthUpdate = Date.now();\\n      this.emit('health-updated', healthData);\\n    });\\n\\n    this.devPipeClient.on('performance-metrics', (metrics: ModelPerformanceMetrics[]) => {\\n      this.emit('performance-metrics', metrics);\\n    });\\n  }\\n\\n  async initialize(): Promise<void> {\\n    try {\\n      await this.devPipeClient.initialize();\\n      \\n      // Load initial health status\\n      await this.refreshModelHealth();\\n      \\n      // Start health monitoring\\n      this.startHealthMonitoring();\\n      \\n      if (this.config.debug_mode) {\\n        console.log('ModelSelectionService initialized successfully');\\n      }\\n    } catch (error) {\\n      throw new Error(`Failed to initialize ModelSelectionService: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  async selectModel(request: ModelSelectionRequest): Promise<ModelSelectionResponse> {\\n    try {\\n      return await this.performSelection(request);\\n    } catch (error) {\\n      if (this.config.fallback_enabled) {\\n        return await this.fallbackSelection(request, error);\\n      }\\n      throw error;\\n    }\\n  }\\n\\n  private async performSelection(request: ModelSelectionRequest): Promise<ModelSelectionResponse> {\\n    if (!this.devPipeClient.isReady()) {\\n      throw new ModelSelectionError('NO_HEALTHY_MODELS', 'DevPipe client not connected', {}, ['Check server connection', 'Retry initialization']);\\n    }\\n\\n    // Add user preferences to request\\n    const enhancedRequest = {\\n      ...request,\\n      user_preferences: this.userPreferences,\\n      timeout_ms: request.timeout_ms || this.config.timeout\\n    };\\n\\n    const response = await this.devPipeClient.sendMessage<ModelSelectionResponse>(\\n      'model-selection-request',\\n      enhancedRequest,\\n      this.config.timeout\\n    );\\n\\n    return response;\\n  }\\n\\n  private async fallbackSelection(\\n    request: ModelSelectionRequest, \\n    originalError: any\\n  ): Promise<ModelSelectionResponse> {\\n    console.warn('Model selection failed, using fallback:', originalError);\\n\\n    // Try cached selection first\\n    const cached = this.getCachedSelection(request);\\n    if (cached) {\\n      return cached;\\n    }\\n\\n    // Use static rules as last resort\\n    return this.staticModelSelection(request);\\n  }\\n\\n  private staticModelSelection(request: ModelSelectionRequest): ModelSelectionResponse {\\n    // Simple static rules for fallback\\n    const defaultModels: { [key: string]: { name: string; cost: number } } = {\\n      'text-generation': { name: 'gpt-3.5-turbo', cost: 0.002 },\\n      'code-generation': { name: 'gpt-4', cost: 0.03 },\\n      'chat': { name: 'gpt-3.5-turbo', cost: 0.002 },\\n      'summarization': { name: 'gpt-3.5-turbo', cost: 0.002 },\\n      'translation': { name: 'gpt-3.5-turbo', cost: 0.002 }\\n    };\\n\\n    const defaultModel = defaultModels[request.task_type] || defaultModels['text-generation'];\\n\\n    return {\\n      selected_model: {\\n        id: defaultModel.name,\\n        name: defaultModel.name,\\n        provider: 'openai',\\n        capabilities: [{ type: request.task_type, score: 0.8 }],\\n        cost_per_token: defaultModel.cost,\\n        max_tokens: 4000,\\n        response_time_avg_ms: 2000,\\n        availability_score: 0.9,\\n        quality_score: 0.8\\n      },\\n      reasoning: 'Fallback selection due to service unavailability',\\n      fallback_models: [],\\n      estimated_cost: defaultModel.cost * 100, // Estimate for 100 tokens\\n      estimated_time_ms: 2000,\\n      selection_metadata: {\\n        selection_time_ms: 0,\\n        factors_considered: ['fallback'],\\n        confidence_score: 0.5\\n      }\\n    };\\n  }\\n\\n  private getCachedSelection(request: ModelSelectionRequest): ModelSelectionResponse | null {\\n    // Implementation of cache lookup\\n    // For now, return null (no cache)\\n    return null;\\n  }\\n\\n  // Original selectModel method renamed to performSelection (see above)\\n  async selectModel_OLD(request: ModelSelectionRequest): Promise<ModelSelectionResponse> {\\n    if (!this.devPipeClient.isReady()) {\\n      throw new ModelSelectionError('NO_HEALTHY_MODELS', 'DevPipe client not connected', {}, ['Check server connection', 'Retry initialization']);\\n    }\\n\\n    try {\\n      // Add user preferences to request\\n      const enhancedRequest = {\\n        ...request,\\n        user_preferences: this.userPreferences,\\n        timeout_ms: request.timeout_ms || this.config.timeout\\n      };\\n\\n      const response = await this.devPipeClient.sendMessage<ModelSelectionResponse>(\\n        'model-selection-request',\\n        enhancedRequest,\\n        request.timeout_ms || this.config.timeout\\n      );\\n\\n      // Emit selection event\\n      this.emit('model-selected', response);\\n\\n      if (this.config.debug_mode) {\\n        console.log('Model selected:', response.selected_model.name, 'for task:', request.task_type);\\n      }\\n\\n      return response;\\n    } catch (error) {\\n      if (error instanceof Error) {\\n        if (error.message.includes('timeout')) {\\n          throw new ModelSelectionError('TIMEOUT', 'Model selection request timed out', { originalError: error }, ['Increase timeout', 'Check server performance']);\\n        } else if (error.message.includes('budget') || error.message.includes('cost')) {\\n          throw new ModelSelectionError('BUDGET_EXCEEDED', 'Request exceeds budget limits', { originalError: error }, ['Increase budget', 'Use lower cost models']);\\n        }\\n      }\\n      \\n      throw new ModelSelectionError('SERVICE_UNAVAILABLE', 'Model selection service unavailable', { originalError: error }, ['Check server status', 'Retry request']);\\n    }\\n  }\\n\\n  async getModelHealth(): Promise<ModelHealthStatus[]> {\\n    // Return cached health if recent\\n    if (this.cachedHealth.length > 0 && (Date.now() - this.lastHealthUpdate) < this.config.cache_duration) {\\n      return this.cachedHealth;\\n    }\\n\\n    return await this.refreshModelHealth();\\n  }\\n\\n  private async refreshModelHealth(): Promise<ModelHealthStatus[]> {\\n    try {\\n      const health = await this.devPipeClient.sendMessage<ModelHealthStatus[]>(\\n        'health-check-request',\\n        {},\\n        10000 // Short timeout for health checks\\n      );\\n\\n      this.cachedHealth = health;\\n      this.lastHealthUpdate = Date.now();\\n      \\n      return health;\\n    } catch (error) {\\n      if (this.config.debug_mode) {\\n        console.warn('Failed to refresh model health:', error);\\n      }\\n      return this.cachedHealth; // Return cached data on error\\n    }\\n  }\\n\\n  async updatePreferences(preferences: Partial<UserPreferences>): Promise<void> {\\n    this.userPreferences = {\\n      ...this.userPreferences,\\n      ...preferences\\n    };\\n\\n    try {\\n      await this.devPipeClient.sendMessage(\\n        'preferences-update',\\n        this.userPreferences,\\n        5000\\n      );\\n\\n      this.emit('preferences-updated', this.userPreferences);\\n      \\n      if (this.config.debug_mode) {\\n        console.log('User preferences updated:', this.userPreferences);\\n      }\\n    } catch (error) {\\n      if (this.config.debug_mode) {\\n        console.warn('Failed to sync preferences with server:', error);\\n      }\\n      // Continue with local preferences even if server sync fails\\n    }\\n  }\\n\\n  getPreferences(): UserPreferences {\\n    return { ...this.userPreferences };\\n  }\\n\\n  private startHealthMonitoring(): void {\\n    if (this.config.monitoring_interval > 0) {\\n      setInterval(async () => {\\n        try {\\n          await this.refreshModelHealth();\\n        } catch (error) {\\n          if (this.config.debug_mode) {\\n            console.warn('Health monitoring failed:', error);\\n          }\\n        }\\n      }, this.config.monitoring_interval);\\n    }\\n  }\\n\\n  // Event system\\n  on(event: string, listener: Function): void {\\n    if (!this.eventListeners.has(event)) {\\n      this.eventListeners.set(event, []);\\n    }\\n    this.eventListeners.get(event)!.push(listener);\\n  }\\n\\n  off(event: string, listener: Function): void {\\n    const listeners = this.eventListeners.get(event);\\n    if (listeners) {\\n      const index = listeners.indexOf(listener);\\n      if (index > -1) {\\n        listeners.splice(index, 1);\\n      }\\n    }\\n  }\\n\\n  private emit(event: string, data: any): void {\\n    const listeners = this.eventListeners.get(event);\\n    if (listeners) {\\n      listeners.forEach(listener => {\\n        try {\\n          listener(data);\\n        } catch (error) {\\n          if (this.config.debug_mode) {\\n            console.error('Event listener error:', error);\\n          }\\n        }\\n      });\\n    }\\n  }\\n\\n  // Quick selection methods for common use cases\\n  async selectForTask(taskType: string, quality: 'low' | 'medium' | 'high' = 'medium'): Promise<ModelSelectionResponse> {\\n    return this.selectModel({\\n      task_type: taskType as any,\\n      quality_requirement: quality\\n    });\\n  }\\n\\n  async selectCostOptimized(taskType: string, maxCost: number = 0.01): Promise<ModelSelectionResponse> {\\n    return this.selectModel({\\n      task_type: taskType as any,\\n      quality_requirement: 'medium',\\n      max_cost: maxCost\\n    });\\n  }\\n\\n  async selectHighPerformance(taskType: string): Promise<ModelSelectionResponse> {\\n    return this.selectModel({\\n      task_type: taskType as any,\\n      quality_requirement: 'high'\\n    });\\n  }\\n\\n  // Utility methods\\n  isConnected(): boolean {\\n    return this.devPipeClient.isReady();\\n  }\\n\\n  getConfig(): ModelSelectionConfig {\\n    return { ...this.config };\\n  }\\n\\n  async disconnect(): Promise<void> {\\n    await this.devPipeClient.disconnect();\\n  }\\n}\\n\"]}"}
