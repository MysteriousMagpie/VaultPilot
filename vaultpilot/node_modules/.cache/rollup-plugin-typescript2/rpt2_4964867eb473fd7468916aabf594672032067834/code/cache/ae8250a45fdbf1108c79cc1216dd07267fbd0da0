{"code":"/**\n * TypeScript type definitions for VaultPilot vault management integration\n */\n// === ERROR HANDLING ===\nexport class VaultManagementError extends Error {\n    constructor(message, code, feature) {\n        super(message);\n        this.name = 'VaultManagementError';\n        this.code = code;\n        this.feature = feature;\n    }\n}\n//# sourceMappingURL=vault-types.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts"],"map":"{\"version\":3,\"file\":\"vault-types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/vault-types.ts\"],\"names\":[],\"mappings\":\"AAAA;;GAEG;AAyJH,yBAAyB;AAEzB,MAAM,OAAO,oBAAqB,SAAQ,KAAK;IAI7C,YAAY,OAAe,EAAE,IAAY,EAAE,OAAe;QACxD,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,sBAAsB,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;CACF\",\"sourcesContent\":[\"/**\\n * TypeScript type definitions for VaultPilot vault management integration\\n */\\n\\nimport { App } from 'obsidian';\\n\\n// === VAULT STRUCTURE TYPES ===\\n\\nexport interface VaultStructureRequest {\\n  include_content?: boolean;\\n  max_depth?: number;\\n  file_types?: string[];\\n}\\n\\nexport interface VaultFileInfo {\\n  path: string;\\n  name: string;\\n  size: number;\\n  modified: string;\\n  file_type: string;\\n  content_preview?: string;\\n  tags?: string[];\\n  links?: string[];\\n}\\n\\nexport interface VaultFolderInfo {\\n  name: string;\\n  path: string;\\n  children: (VaultFileInfo | VaultFolderInfo)[];\\n  type: 'folder';\\n}\\n\\nexport interface VaultStructureResponse {\\n  vault_name: string;\\n  total_files: number;\\n  total_folders: number;\\n  total_size: number;\\n  structure: VaultFolderInfo;\\n  recent_files: VaultFileInfo[];\\n  orphaned_files: VaultFileInfo[];\\n}\\n\\n// === FILE OPERATION TYPES ===\\n\\nexport type FileOperationType = 'create' | 'update' | 'delete' | 'move' | 'copy';\\n\\nexport interface FileOperationRequest {\\n  operation: FileOperationType;\\n  file_path: string;\\n  new_path?: string;\\n  content?: string;\\n  backup?: boolean;\\n}\\n\\nexport interface FileOperationResponse {\\n  success: boolean;\\n  message: string;\\n  file_path: string;\\n  backup_path?: string;\\n  new_path?: string;\\n}\\n\\n// === BATCH OPERATIONS ===\\n\\nexport interface BatchFileOperationRequest {\\n  operations: FileOperationRequest[];\\n  atomic?: boolean;\\n  timeout?: number;\\n}\\n\\nexport interface BatchFileOperationResponse {\\n  success: boolean;\\n  completed: number;\\n  failed: number;\\n  results: FileOperationResponse[];\\n  errors?: string[];\\n}\\n\\n// === SEARCH TYPES ===\\n\\nexport type SearchType = 'content' | 'filename' | 'tags' | 'links' | 'comprehensive';\\n\\nexport interface VaultSearchRequest {\\n  query: string;\\n  search_type?: SearchType;\\n  max_results?: number;\\n  include_content?: boolean;\\n  file_types?: string[];\\n  folders?: string[];\\n}\\n\\nexport interface VaultSearchResult {\\n  file_path: string;\\n  file_name: string;\\n  match_type: 'content' | 'filename' | 'tag' | 'link';\\n  matches: string[];\\n  preview: string;\\n  score: number;\\n  line_numbers?: number[];\\n}\\n\\nexport interface VaultSearchResponse {\\n  results: VaultSearchResult[];\\n  total_found: number;\\n  search_type: SearchType;\\n  query: string;\\n  insights?: string;\\n  suggested_queries?: string[];\\n}\\n\\n// === ORGANIZATION TYPES ===\\n\\nexport interface VaultOrganizationRequest {\\n  focus_folders?: string[];\\n  organization_mode: 'by_topic' | 'by_date' | 'by_type' | 'custom';\\n  create_folders?: boolean;\\n  move_files?: boolean;\\n  custom_rules?: OrganizationRule[];\\n}\\n\\nexport interface OrganizationRule {\\n  pattern: string;\\n  target_folder: string;\\n  rule_type: 'filename' | 'content' | 'tag';\\n}\\n\\nexport interface VaultOrganizationResponse {\\n  suggested_moves: FileMoveOperation[];\\n  suggested_folders: string[];\\n  organization_insights: string;\\n  estimated_improvements: string;\\n}\\n\\nexport interface FileMoveOperation {\\n  from_path: string;\\n  to_path: string;\\n  reason: string;\\n  confidence: number;\\n}\\n\\n// === BACKUP TYPES ===\\n\\nexport interface VaultBackupRequest {\\n  include_settings?: boolean;\\n  compression?: boolean;\\n  backup_name?: string;\\n}\\n\\nexport interface VaultBackupResponse {\\n  backup_path: string;\\n  backup_size: number;\\n  files_backed_up: number;\\n  timestamp: string;\\n}\\n\\n// === ERROR HANDLING ===\\n\\nexport class VaultManagementError extends Error {\\n  public code: string;\\n  public feature: string;\\n\\n  constructor(message: string, code: string, feature: string) {\\n    super(message);\\n    this.name = 'VaultManagementError';\\n    this.code = code;\\n    this.feature = feature;\\n  }\\n}\\n\\n// === SETTINGS TYPES ===\\n\\nexport interface VaultManagementSettings {\\n  enableVaultManagement: boolean;\\n  autoSyncVaultStructure: boolean;\\n  searchResultsLimit: number;\\n  enableSmartSearch: boolean;\\n  batchOperationTimeout: number;\\n  showVaultStats: boolean;\\n  maxSearchResults: number;\\n  defaultSearchType: SearchType;\\n  enableFileOperations: boolean;\\n  confirmDestructiveOperations: boolean;\\n  autoBackupBeforeOperations: boolean;\\n}\\n\\n// === API INTERFACE ===\\n\\nexport interface VaultManagementAPI {\\n  getVaultStructure(request: VaultStructureRequest): Promise<VaultStructureResponse>;\\n  performFileOperation(request: FileOperationRequest): Promise<FileOperationResponse>;\\n  performBatchOperations(request: BatchFileOperationRequest): Promise<BatchFileOperationResponse>;\\n  searchVault(request: VaultSearchRequest): Promise<VaultSearchResponse>;\\n  organizeVault(request: VaultOrganizationRequest): Promise<VaultOrganizationResponse>;\\n  backupVault(request: VaultBackupRequest): Promise<VaultBackupResponse>;\\n}\\n\\n// === UTILITY TYPES ===\\n\\nexport interface VaultModalProps {\\n  app: App;\\n  plugin: any;\\n  onClose?: () => void;\\n}\\n\\nexport interface FileTreeNode {\\n  name: string;\\n  path: string;\\n  type: 'file' | 'folder';\\n  children?: FileTreeNode[];\\n  size?: number;\\n  modified?: string;\\n}\\n\\nexport interface VaultStats {\\n  totalFiles: number;\\n  totalFolders: number;\\n  totalSize: number;\\n  averageFileSize: number;\\n  largestFile: VaultFileInfo;\\n  mostRecentFile: VaultFileInfo;\\n  fileTypeDistribution: Record<string, number>;\\n}\\n\\nexport interface SearchFilter {\\n  fileTypes?: string[];\\n  folders?: string[];\\n  dateRange?: {\\n    start: string;\\n    end: string;\\n  };\\n  sizeRange?: {\\n    min: number;\\n    max: number;\\n  };\\n  tags?: string[];\\n}\\n\\nexport interface VaultHealthCheck {\\n  status: 'healthy' | 'warning' | 'error';\\n  issues: HealthIssue[];\\n  recommendations: string[];\\n  lastCheck: string;\\n}\\n\\nexport interface HealthIssue {\\n  type: 'orphaned_file' | 'broken_link' | 'duplicate_name' | 'large_file' | 'empty_folder';\\n  description: string;\\n  files: string[];\\n  severity: 'low' | 'medium' | 'high';\\n}\\n\"]}"}
