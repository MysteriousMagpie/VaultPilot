{"code":"import { __awaiter } from \"tslib\";\nimport { Modal, Notice } from 'obsidian';\nexport class WorkflowModal extends Modal {\n    constructor(app, plugin) {\n        super(app);\n        this.isExecuting = false;\n        this.plugin = plugin;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.empty();\n        contentEl.addClass('vaultpilot-workflow-modal');\n        // Header\n        const headerEl = contentEl.createEl('div', { cls: 'vaultpilot-workflow-header' });\n        headerEl.createEl('h2', { text: '⚙️ Workflow Execution' });\n        headerEl.createEl('p', {\n            text: 'Define a goal and let VaultPilot create and execute a comprehensive workflow to achieve it.',\n            cls: 'vaultpilot-workflow-description'\n        });\n        // Form\n        const formEl = contentEl.createEl('div', { cls: 'vaultpilot-workflow-form' });\n        // Goal input\n        const goalContainer = formEl.createEl('div', { cls: 'vaultpilot-form-group' });\n        goalContainer.createEl('label', {\n            text: 'Goal *',\n            cls: 'vaultpilot-form-label'\n        });\n        this.goalInput = goalContainer.createEl('textarea', {\n            placeholder: 'e.g., \"Create a comprehensive study plan for machine learning based on my notes\"',\n            cls: 'vaultpilot-goal-input'\n        });\n        // Context input\n        const contextContainer = formEl.createEl('div', { cls: 'vaultpilot-form-group' });\n        contextContainer.createEl('label', {\n            text: 'Additional Context (optional)',\n            cls: 'vaultpilot-form-label'\n        });\n        this.contextInput = contextContainer.createEl('textarea', {\n            placeholder: 'Provide any additional context, constraints, or requirements...',\n            cls: 'vaultpilot-context-input'\n        });\n        // Vault content options\n        const optionsContainer = formEl.createEl('div', { cls: 'vaultpilot-form-group' });\n        optionsContainer.createEl('label', {\n            text: 'Vault Integration',\n            cls: 'vaultpilot-form-label'\n        });\n        const includeActiveFile = optionsContainer.createEl('label', { cls: 'vaultpilot-checkbox-label' });\n        const activeFileCheckbox = includeActiveFile.createEl('input', { type: 'checkbox' });\n        includeActiveFile.createSpan({ text: 'Include active file content' });\n        const includeAllFiles = optionsContainer.createEl('label', { cls: 'vaultpilot-checkbox-label' });\n        const allFilesCheckbox = includeAllFiles.createEl('input', { type: 'checkbox' });\n        includeAllFiles.createSpan({ text: 'Include all vault files (may take longer)' });\n        // Execute button\n        this.executeButton = formEl.createEl('button', {\n            text: 'Execute Workflow',\n            cls: 'mod-cta vaultpilot-execute-button'\n        });\n        this.executeButton.onclick = () => this.executeWorkflow(activeFileCheckbox.checked, allFilesCheckbox.checked);\n        // Progress container\n        this.progressContainer = contentEl.createEl('div', {\n            cls: 'vaultpilot-progress-container'\n        });\n        this.progressContainer.style.display = 'none';\n        // Results container\n        this.resultsContainer = contentEl.createEl('div', {\n            cls: 'vaultpilot-results-container'\n        });\n        this.resultsContainer.style.display = 'none';\n        // Focus the goal input\n        this.goalInput.focus();\n        this.addStyles();\n    }\n    executeWorkflow(includeActiveFile, includeAllFiles) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const goal = this.goalInput.value.trim();\n            if (!goal) {\n                new Notice('Please enter a goal for the workflow');\n                return;\n            }\n            this.isExecuting = true;\n            this.executeButton.disabled = true;\n            this.executeButton.textContent = 'Executing...';\n            this.progressContainer.style.display = 'block';\n            this.resultsContainer.style.display = 'none';\n            try {\n                // Prepare vault content\n                let vaultContent = '';\n                if (includeActiveFile) {\n                    const activeFile = this.app.workspace.getActiveFile();\n                    if (activeFile) {\n                        const content = yield this.app.vault.read(activeFile);\n                        vaultContent += `=== ${activeFile.name} ===\\n${content}\\n\\n`;\n                    }\n                }\n                if (includeAllFiles) {\n                    const files = this.app.vault.getMarkdownFiles();\n                    for (const file of files.slice(0, 20)) { // Limit to first 20 files to avoid overwhelming the API\n                        const content = yield this.app.vault.read(file);\n                        vaultContent += `=== ${file.name} ===\\n${content}\\n\\n`;\n                    }\n                }\n                // Create workflow request\n                const request = {\n                    goal,\n                    context: this.contextInput.value.trim() || undefined,\n                    vault_content: vaultContent || undefined\n                };\n                // Setup WebSocket listener for progress updates\n                if (this.plugin.isWebSocketConnected()) {\n                    // Listen for workflow progress updates\n                    this.setupProgressListener();\n                }\n                // Execute workflow\n                const response = yield this.plugin.apiClient.executeWorkflow(request);\n                if (response.success && response.data) {\n                    yield this.displayResults(response.data);\n                }\n                else {\n                    throw new Error(response.error || 'Workflow execution failed');\n                }\n            }\n            catch (error) {\n                const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n                new Notice(`Workflow error: ${errorMsg}`);\n                this.displayError(errorMsg);\n            }\n            finally {\n                this.isExecuting = false;\n                this.executeButton.disabled = false;\n                this.executeButton.textContent = 'Execute Workflow';\n            }\n        });\n    }\n    setupProgressListener() {\n        // This would be connected to the WebSocket progress updates\n        // For now, we'll simulate progress\n        this.displayProgress('Analyzing goal and context...');\n        setTimeout(() => {\n            this.displayProgress('Planning workflow steps...');\n        }, 1000);\n        setTimeout(() => {\n            this.displayProgress('Executing workflow...');\n        }, 2000);\n    }\n    displayProgress(message) {\n        this.progressContainer.innerHTML = `\n      <div class=\"vaultpilot-progress-item\">\n        <div class=\"vaultpilot-progress-spinner\"></div>\n        <span>${message}</span>\n      </div>\n    `;\n    }\n    displayResults(workflow) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.progressContainer.style.display = 'none';\n            this.resultsContainer.style.display = 'block';\n            // Clear previous results\n            this.resultsContainer.empty();\n            // Header\n            const headerEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-results-header' });\n            headerEl.createEl('h3', { text: '✅ Workflow Completed' });\n            headerEl.createEl('p', {\n                text: `Execution time: ${workflow.execution_time}s`,\n                cls: 'vaultpilot-execution-time'\n            });\n            // Main result\n            const resultEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-result-content' });\n            resultEl.createEl('h4', { text: 'Result' });\n            const resultContentEl = resultEl.createEl('div', { cls: 'vaultpilot-result-text' });\n            resultContentEl.innerHTML = this.renderMarkdown(workflow.result);\n            // Steps taken\n            if (workflow.steps_taken && workflow.steps_taken.length > 0) {\n                const stepsEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-steps-container' });\n                stepsEl.createEl('h4', { text: 'Steps Taken' });\n                const stepsList = stepsEl.createEl('ol', { cls: 'vaultpilot-steps-list' });\n                workflow.steps_taken.forEach(step => {\n                    stepsList.createEl('li', { text: step });\n                });\n            }\n            // Artifacts\n            if (workflow.artifacts && workflow.artifacts.length > 0) {\n                const artifactsEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-artifacts-container' });\n                artifactsEl.createEl('h4', { text: 'Generated Artifacts' });\n                workflow.artifacts.forEach((artifact, index) => {\n                    const artifactEl = artifactsEl.createEl('div', { cls: 'vaultpilot-artifact' });\n                    artifactEl.createEl('h5', { text: artifact.title });\n                    artifactEl.createEl('p', {\n                        text: `Type: ${artifact.type}`,\n                        cls: 'vaultpilot-artifact-type'\n                    });\n                    const saveButton = artifactEl.createEl('button', {\n                        text: 'Save as Note',\n                        cls: 'mod-cta'\n                    });\n                    saveButton.onclick = () => this.saveArtifactAsNote(artifact, index);\n                });\n            }\n            // Save all button\n            const actionsEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-results-actions' });\n            const saveAllButton = actionsEl.createEl('button', {\n                text: 'Save Complete Results as Note',\n                cls: 'mod-cta'\n            });\n            saveAllButton.onclick = () => this.saveCompleteResultsAsNote(workflow);\n        });\n    }\n    saveArtifactAsNote(artifact, index) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const filename = `${artifact.title.replace(/[^a-zA-Z0-9\\s]/g, '')}.md`;\n                const content = `# ${artifact.title}\\n\\n${artifact.content}`;\n                yield this.app.vault.create(filename, content);\n                new Notice(`Artifact saved as ${filename}`);\n            }\n            catch (error) {\n                new Notice(`Failed to save artifact: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    saveCompleteResultsAsNote(workflow) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const timestamp = new Date().toISOString().split('T')[0];\n                const filename = `VaultPilot Workflow Results ${timestamp}.md`;\n                let content = `# VaultPilot Workflow Results\\n\\n`;\n                content += `**Goal:** ${this.goalInput.value}\\n\\n`;\n                content += `**Execution Time:** ${workflow.execution_time}s\\n\\n`;\n                content += `## Result\\n\\n${workflow.result}\\n\\n`;\n                if (workflow.steps_taken && workflow.steps_taken.length > 0) {\n                    content += `## Steps Taken\\n\\n`;\n                    workflow.steps_taken.forEach((step, index) => {\n                        content += `${index + 1}. ${step}\\n`;\n                    });\n                    content += '\\n';\n                }\n                if (workflow.artifacts && workflow.artifacts.length > 0) {\n                    content += `## Generated Artifacts\\n\\n`;\n                    workflow.artifacts.forEach(artifact => {\n                        content += `### ${artifact.title}\\n\\n${artifact.content}\\n\\n`;\n                    });\n                }\n                yield this.app.vault.create(filename, content);\n                new Notice(`Complete results saved as ${filename}`);\n            }\n            catch (error) {\n                new Notice(`Failed to save results: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    displayError(message) {\n        this.progressContainer.style.display = 'none';\n        this.resultsContainer.style.display = 'block';\n        this.resultsContainer.innerHTML = `\n      <div class=\"vaultpilot-error\">\n        <h3>❌ Workflow Failed</h3>\n        <p>${message}</p>\n      </div>\n    `;\n    }\n    renderMarkdown(text) {\n        return text\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n            .replace(/`(.*?)`/g, '<code>$1</code>')\n            .replace(/\\n/g, '<br>');\n    }\n    addStyles() {\n        if (!document.getElementById('vaultpilot-workflow-styles')) {\n            const styleEl = document.createElement('style');\n            styleEl.id = 'vaultpilot-workflow-styles';\n            styleEl.textContent = `\n        .vaultpilot-workflow-modal {\n          width: 700px;\n          max-height: 80vh;\n          overflow-y: auto;\n        }\n        .vaultpilot-workflow-header {\n          margin-bottom: 20px;\n          padding-bottom: 15px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-workflow-description {\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-form-group {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-form-label {\n          display: block;\n          margin-bottom: 8px;\n          font-weight: 500;\n          color: var(--text-normal);\n        }\n        .vaultpilot-goal-input,\n        .vaultpilot-context-input {\n          width: 100%;\n          min-height: 80px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n          resize: vertical;\n        }\n        .vaultpilot-checkbox-label {\n          display: block;\n          margin-bottom: 8px;\n          cursor: pointer;\n        }\n        .vaultpilot-checkbox-label input {\n          margin-right: 8px;\n        }\n        .vaultpilot-execute-button {\n          width: 100%;\n          padding: 12px;\n          font-size: 16px;\n        }\n        .vaultpilot-progress-container {\n          margin: 20px 0;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-progress-item {\n          display: flex;\n          align-items: center;\n          gap: 10px;\n        }\n        .vaultpilot-progress-spinner {\n          width: 16px;\n          height: 16px;\n          border: 2px solid var(--background-modifier-border);\n          border-top: 2px solid var(--text-accent);\n          border-radius: 50%;\n          animation: spin 1s linear infinite;\n        }\n        @keyframes spin {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n        .vaultpilot-results-container {\n          margin-top: 20px;\n        }\n        .vaultpilot-results-header {\n          margin-bottom: 15px;\n        }\n        .vaultpilot-execution-time {\n          color: var(--text-muted);\n          font-size: 0.9em;\n        }\n        .vaultpilot-result-content {\n          margin-bottom: 20px;\n          padding: 15px;\n          background: var(--background-secondary);\n          border-radius: 8px;\n          border: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-result-text {\n          line-height: 1.5;\n          color: var(--text-normal);\n        }\n        .vaultpilot-steps-container,\n        .vaultpilot-artifacts-container {\n          margin-bottom: 20px;\n        }\n        .vaultpilot-steps-list {\n          padding-left: 20px;\n        }\n        .vaultpilot-artifact {\n          margin-bottom: 15px;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary-alt);\n        }\n        .vaultpilot-artifact-type {\n          color: var(--text-muted);\n          font-size: 0.9em;\n          margin-bottom: 10px;\n        }\n        .vaultpilot-results-actions {\n          margin-top: 20px;\n          text-align: center;\n        }\n        .vaultpilot-error {\n          padding: 20px;\n          background: var(--background-primary-alt);\n          border: 1px solid var(--color-red);\n          border-radius: 8px;\n          color: var(--color-red);\n        }\n      `;\n            document.head.appendChild(styleEl);\n        }\n    }\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n//# sourceMappingURL=workflow-modal.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types.ts"],"map":"{\"version\":3,\"file\":\"workflow-modal.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/workflow-modal.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { Modal, App, Setting, Notice, TFile } from 'obsidian';\\nimport type VaultPilotPlugin from './main';\\nimport { WorkflowRequest, WorkflowResponse, WorkflowProgress } from './types';\\n\\nexport class WorkflowModal extends Modal {\\n  plugin: VaultPilotPlugin;\\n  private goalInput!: HTMLTextAreaElement;\\n  private contextInput!: HTMLTextAreaElement;\\n  private executeButton!: HTMLButtonElement;\\n  private progressContainer!: HTMLElement;\\n  private resultsContainer!: HTMLElement;\\n  private isExecuting = false;\\n\\n  constructor(app: App, plugin: VaultPilotPlugin) {\\n    super(app);\\n    this.plugin = plugin;\\n  }\\n\\n  onOpen() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n    contentEl.addClass('vaultpilot-workflow-modal');\\n\\n    // Header\\n    const headerEl = contentEl.createEl('div', { cls: 'vaultpilot-workflow-header' });\\n    headerEl.createEl('h2', { text: '⚙️ Workflow Execution' });\\n    headerEl.createEl('p', { \\n      text: 'Define a goal and let VaultPilot create and execute a comprehensive workflow to achieve it.',\\n      cls: 'vaultpilot-workflow-description'\\n    });\\n\\n    // Form\\n    const formEl = contentEl.createEl('div', { cls: 'vaultpilot-workflow-form' });\\n\\n    // Goal input\\n    const goalContainer = formEl.createEl('div', { cls: 'vaultpilot-form-group' });\\n    goalContainer.createEl('label', { \\n      text: 'Goal *',\\n      cls: 'vaultpilot-form-label'\\n    });\\n    this.goalInput = goalContainer.createEl('textarea', {\\n      placeholder: 'e.g., \\\"Create a comprehensive study plan for machine learning based on my notes\\\"',\\n      cls: 'vaultpilot-goal-input'\\n    });\\n\\n    // Context input\\n    const contextContainer = formEl.createEl('div', { cls: 'vaultpilot-form-group' });\\n    contextContainer.createEl('label', { \\n      text: 'Additional Context (optional)',\\n      cls: 'vaultpilot-form-label'\\n    });\\n    this.contextInput = contextContainer.createEl('textarea', {\\n      placeholder: 'Provide any additional context, constraints, or requirements...',\\n      cls: 'vaultpilot-context-input'\\n    });\\n\\n    // Vault content options\\n    const optionsContainer = formEl.createEl('div', { cls: 'vaultpilot-form-group' });\\n    optionsContainer.createEl('label', { \\n      text: 'Vault Integration',\\n      cls: 'vaultpilot-form-label'\\n    });\\n\\n    const includeActiveFile = optionsContainer.createEl('label', { cls: 'vaultpilot-checkbox-label' });\\n    const activeFileCheckbox = includeActiveFile.createEl('input', { type: 'checkbox' });\\n    includeActiveFile.createSpan({ text: 'Include active file content' });\\n\\n    const includeAllFiles = optionsContainer.createEl('label', { cls: 'vaultpilot-checkbox-label' });\\n    const allFilesCheckbox = includeAllFiles.createEl('input', { type: 'checkbox' });\\n    includeAllFiles.createSpan({ text: 'Include all vault files (may take longer)' });\\n\\n    // Execute button\\n    this.executeButton = formEl.createEl('button', {\\n      text: 'Execute Workflow',\\n      cls: 'mod-cta vaultpilot-execute-button'\\n    });\\n    this.executeButton.onclick = () => this.executeWorkflow(activeFileCheckbox.checked, allFilesCheckbox.checked);\\n\\n    // Progress container\\n    this.progressContainer = contentEl.createEl('div', { \\n      cls: 'vaultpilot-progress-container'\\n    });\\n    this.progressContainer.style.display = 'none';\\n\\n    // Results container\\n    this.resultsContainer = contentEl.createEl('div', { \\n      cls: 'vaultpilot-results-container'\\n    });\\n    this.resultsContainer.style.display = 'none';\\n\\n    // Focus the goal input\\n    this.goalInput.focus();\\n\\n    this.addStyles();\\n  }\\n\\n  private async executeWorkflow(includeActiveFile: boolean, includeAllFiles: boolean) {\\n    const goal = this.goalInput.value.trim();\\n    if (!goal) {\\n      new Notice('Please enter a goal for the workflow');\\n      return;\\n    }\\n\\n    this.isExecuting = true;\\n    this.executeButton.disabled = true;\\n    this.executeButton.textContent = 'Executing...';\\n    this.progressContainer.style.display = 'block';\\n    this.resultsContainer.style.display = 'none';\\n\\n    try {\\n      // Prepare vault content\\n      let vaultContent = '';\\n      \\n      if (includeActiveFile) {\\n        const activeFile = this.app.workspace.getActiveFile();\\n        if (activeFile) {\\n          const content = await this.app.vault.read(activeFile);\\n          vaultContent += `=== ${activeFile.name} ===\\\\n${content}\\\\n\\\\n`;\\n        }\\n      }\\n\\n      if (includeAllFiles) {\\n        const files = this.app.vault.getMarkdownFiles();\\n        for (const file of files.slice(0, 20)) { // Limit to first 20 files to avoid overwhelming the API\\n          const content = await this.app.vault.read(file);\\n          vaultContent += `=== ${file.name} ===\\\\n${content}\\\\n\\\\n`;\\n        }\\n      }\\n\\n      // Create workflow request\\n      const request: WorkflowRequest = {\\n        goal,\\n        context: this.contextInput.value.trim() || undefined,\\n        vault_content: vaultContent || undefined\\n      };\\n\\n      // Setup WebSocket listener for progress updates\\n      if (this.plugin.isWebSocketConnected()) {\\n        // Listen for workflow progress updates\\n        this.setupProgressListener();\\n      }\\n\\n      // Execute workflow\\n      const response = await this.plugin.apiClient!.executeWorkflow(request);\\n\\n      if (response.success && response.data) {\\n        await this.displayResults(response.data);\\n      } else {\\n        throw new Error(response.error || 'Workflow execution failed');\\n      }\\n\\n    } catch (error) {\\n      const errorMsg = error instanceof Error ? error.message : 'Unknown error';\\n      new Notice(`Workflow error: ${errorMsg}`);\\n      this.displayError(errorMsg);\\n    } finally {\\n      this.isExecuting = false;\\n      this.executeButton.disabled = false;\\n      this.executeButton.textContent = 'Execute Workflow';\\n    }\\n  }\\n\\n  private setupProgressListener() {\\n    // This would be connected to the WebSocket progress updates\\n    // For now, we'll simulate progress\\n    this.displayProgress('Analyzing goal and context...');\\n    \\n    setTimeout(() => {\\n      this.displayProgress('Planning workflow steps...');\\n    }, 1000);\\n    \\n    setTimeout(() => {\\n      this.displayProgress('Executing workflow...');\\n    }, 2000);\\n  }\\n\\n  private displayProgress(message: string) {\\n    this.progressContainer.innerHTML = `\\n      <div class=\\\"vaultpilot-progress-item\\\">\\n        <div class=\\\"vaultpilot-progress-spinner\\\"></div>\\n        <span>${message}</span>\\n      </div>\\n    `;\\n  }\\n\\n  private async displayResults(workflow: WorkflowResponse) {\\n    this.progressContainer.style.display = 'none';\\n    this.resultsContainer.style.display = 'block';\\n\\n    // Clear previous results\\n    this.resultsContainer.empty();\\n\\n    // Header\\n    const headerEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-results-header' });\\n    headerEl.createEl('h3', { text: '✅ Workflow Completed' });\\n    headerEl.createEl('p', { \\n      text: `Execution time: ${workflow.execution_time}s`,\\n      cls: 'vaultpilot-execution-time'\\n    });\\n\\n    // Main result\\n    const resultEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-result-content' });\\n    resultEl.createEl('h4', { text: 'Result' });\\n    const resultContentEl = resultEl.createEl('div', { cls: 'vaultpilot-result-text' });\\n    resultContentEl.innerHTML = this.renderMarkdown(workflow.result);\\n\\n    // Steps taken\\n    if (workflow.steps_taken && workflow.steps_taken.length > 0) {\\n      const stepsEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-steps-container' });\\n      stepsEl.createEl('h4', { text: 'Steps Taken' });\\n      const stepsList = stepsEl.createEl('ol', { cls: 'vaultpilot-steps-list' });\\n      workflow.steps_taken.forEach(step => {\\n        stepsList.createEl('li', { text: step });\\n      });\\n    }\\n\\n    // Artifacts\\n    if (workflow.artifacts && workflow.artifacts.length > 0) {\\n      const artifactsEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-artifacts-container' });\\n      artifactsEl.createEl('h4', { text: 'Generated Artifacts' });\\n      \\n      workflow.artifacts.forEach((artifact, index) => {\\n        const artifactEl = artifactsEl.createEl('div', { cls: 'vaultpilot-artifact' });\\n        artifactEl.createEl('h5', { text: artifact.title });\\n        artifactEl.createEl('p', { \\n          text: `Type: ${artifact.type}`,\\n          cls: 'vaultpilot-artifact-type'\\n        });\\n        \\n        const saveButton = artifactEl.createEl('button', {\\n          text: 'Save as Note',\\n          cls: 'mod-cta'\\n        });\\n        saveButton.onclick = () => this.saveArtifactAsNote(artifact, index);\\n      });\\n    }\\n\\n    // Save all button\\n    const actionsEl = this.resultsContainer.createEl('div', { cls: 'vaultpilot-results-actions' });\\n    const saveAllButton = actionsEl.createEl('button', {\\n      text: 'Save Complete Results as Note',\\n      cls: 'mod-cta'\\n    });\\n    saveAllButton.onclick = () => this.saveCompleteResultsAsNote(workflow);\\n  }\\n\\n  private async saveArtifactAsNote(artifact: any, index: number) {\\n    try {\\n      const filename = `${artifact.title.replace(/[^a-zA-Z0-9\\\\s]/g, '')}.md`;\\n      const content = `# ${artifact.title}\\\\n\\\\n${artifact.content}`;\\n      \\n      await this.app.vault.create(filename, content);\\n      new Notice(`Artifact saved as ${filename}`);\\n    } catch (error) {\\n      new Notice(`Failed to save artifact: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  private async saveCompleteResultsAsNote(workflow: WorkflowResponse) {\\n    try {\\n      const timestamp = new Date().toISOString().split('T')[0];\\n      const filename = `VaultPilot Workflow Results ${timestamp}.md`;\\n      \\n      let content = `# VaultPilot Workflow Results\\\\n\\\\n`;\\n      content += `**Goal:** ${this.goalInput.value}\\\\n\\\\n`;\\n      content += `**Execution Time:** ${workflow.execution_time}s\\\\n\\\\n`;\\n      content += `## Result\\\\n\\\\n${workflow.result}\\\\n\\\\n`;\\n      \\n      if (workflow.steps_taken && workflow.steps_taken.length > 0) {\\n        content += `## Steps Taken\\\\n\\\\n`;\\n        workflow.steps_taken.forEach((step, index) => {\\n          content += `${index + 1}. ${step}\\\\n`;\\n        });\\n        content += '\\\\n';\\n      }\\n\\n      if (workflow.artifacts && workflow.artifacts.length > 0) {\\n        content += `## Generated Artifacts\\\\n\\\\n`;\\n        workflow.artifacts.forEach(artifact => {\\n          content += `### ${artifact.title}\\\\n\\\\n${artifact.content}\\\\n\\\\n`;\\n        });\\n      }\\n\\n      await this.app.vault.create(filename, content);\\n      new Notice(`Complete results saved as ${filename}`);\\n    } catch (error) {\\n      new Notice(`Failed to save results: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  private displayError(message: string) {\\n    this.progressContainer.style.display = 'none';\\n    this.resultsContainer.style.display = 'block';\\n    this.resultsContainer.innerHTML = `\\n      <div class=\\\"vaultpilot-error\\\">\\n        <h3>❌ Workflow Failed</h3>\\n        <p>${message}</p>\\n      </div>\\n    `;\\n  }\\n\\n  private renderMarkdown(text: string): string {\\n    return text\\n      .replace(/\\\\*\\\\*(.*?)\\\\*\\\\*/g, '<strong>$1</strong>')\\n      .replace(/\\\\*(.*?)\\\\*/g, '<em>$1</em>')\\n      .replace(/`(.*?)`/g, '<code>$1</code>')\\n      .replace(/\\\\n/g, '<br>');\\n  }\\n\\n  private addStyles() {\\n    if (!document.getElementById('vaultpilot-workflow-styles')) {\\n      const styleEl = document.createElement('style');\\n      styleEl.id = 'vaultpilot-workflow-styles';\\n      styleEl.textContent = `\\n        .vaultpilot-workflow-modal {\\n          width: 700px;\\n          max-height: 80vh;\\n          overflow-y: auto;\\n        }\\n        .vaultpilot-workflow-header {\\n          margin-bottom: 20px;\\n          padding-bottom: 15px;\\n          border-bottom: 1px solid var(--background-modifier-border);\\n        }\\n        .vaultpilot-workflow-description {\\n          color: var(--text-muted);\\n          margin-top: 5px;\\n        }\\n        .vaultpilot-form-group {\\n          margin-bottom: 20px;\\n        }\\n        .vaultpilot-form-label {\\n          display: block;\\n          margin-bottom: 8px;\\n          font-weight: 500;\\n          color: var(--text-normal);\\n        }\\n        .vaultpilot-goal-input,\\n        .vaultpilot-context-input {\\n          width: 100%;\\n          min-height: 80px;\\n          padding: 10px;\\n          border: 1px solid var(--background-modifier-border);\\n          border-radius: 6px;\\n          background: var(--background-primary);\\n          color: var(--text-normal);\\n          resize: vertical;\\n        }\\n        .vaultpilot-checkbox-label {\\n          display: block;\\n          margin-bottom: 8px;\\n          cursor: pointer;\\n        }\\n        .vaultpilot-checkbox-label input {\\n          margin-right: 8px;\\n        }\\n        .vaultpilot-execute-button {\\n          width: 100%;\\n          padding: 12px;\\n          font-size: 16px;\\n        }\\n        .vaultpilot-progress-container {\\n          margin: 20px 0;\\n          padding: 15px;\\n          background: var(--background-secondary);\\n          border-radius: 8px;\\n          border: 1px solid var(--background-modifier-border);\\n        }\\n        .vaultpilot-progress-item {\\n          display: flex;\\n          align-items: center;\\n          gap: 10px;\\n        }\\n        .vaultpilot-progress-spinner {\\n          width: 16px;\\n          height: 16px;\\n          border: 2px solid var(--background-modifier-border);\\n          border-top: 2px solid var(--text-accent);\\n          border-radius: 50%;\\n          animation: spin 1s linear infinite;\\n        }\\n        @keyframes spin {\\n          0% { transform: rotate(0deg); }\\n          100% { transform: rotate(360deg); }\\n        }\\n        .vaultpilot-results-container {\\n          margin-top: 20px;\\n        }\\n        .vaultpilot-results-header {\\n          margin-bottom: 15px;\\n        }\\n        .vaultpilot-execution-time {\\n          color: var(--text-muted);\\n          font-size: 0.9em;\\n        }\\n        .vaultpilot-result-content {\\n          margin-bottom: 20px;\\n          padding: 15px;\\n          background: var(--background-secondary);\\n          border-radius: 8px;\\n          border: 1px solid var(--background-modifier-border);\\n        }\\n        .vaultpilot-result-text {\\n          line-height: 1.5;\\n          color: var(--text-normal);\\n        }\\n        .vaultpilot-steps-container,\\n        .vaultpilot-artifacts-container {\\n          margin-bottom: 20px;\\n        }\\n        .vaultpilot-steps-list {\\n          padding-left: 20px;\\n        }\\n        .vaultpilot-artifact {\\n          margin-bottom: 15px;\\n          padding: 10px;\\n          border: 1px solid var(--background-modifier-border);\\n          border-radius: 6px;\\n          background: var(--background-primary-alt);\\n        }\\n        .vaultpilot-artifact-type {\\n          color: var(--text-muted);\\n          font-size: 0.9em;\\n          margin-bottom: 10px;\\n        }\\n        .vaultpilot-results-actions {\\n          margin-top: 20px;\\n          text-align: center;\\n        }\\n        .vaultpilot-error {\\n          padding: 20px;\\n          background: var(--background-primary-alt);\\n          border: 1px solid var(--color-red);\\n          border-radius: 8px;\\n          color: var(--color-red);\\n        }\\n      `;\\n      document.head.appendChild(styleEl);\\n    }\\n  }\\n\\n  onClose() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n  }\\n}\\n\"]}"}
