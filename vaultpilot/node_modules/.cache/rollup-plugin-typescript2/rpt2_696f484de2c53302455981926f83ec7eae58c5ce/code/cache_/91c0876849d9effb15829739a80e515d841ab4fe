{"code":"// EvoAgentX API Type Definitions\nexport {};\n//# sourceMappingURL=types.js.map","references":[],"map":"{\"version\":3,\"file\":\"types.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/types.ts\"],\"names\":[],\"mappings\":\"AAAA,iCAAiC\",\"sourcesContent\":[\"// EvoAgentX API Type Definitions\\n\\n// Intent classification types\\nexport type Intent = \\\"ask\\\" | \\\"agent\\\";\\n\\nexport interface IntentResult {\\n  intent: Intent;\\n  confidence: number;\\n}\\n\\nexport interface IntentDebug {\\n  intent: Intent;\\n  confidence: number;\\n  matched_example?: string;\\n  reasoning?: string;\\n  features?: Record<string, number>;\\n}\\n\\n// Base response structure\\nexport interface APIResponse<T = any> {\\n  success: boolean;\\n  data?: T;\\n  error?: string;\\n  message?: string;\\n}\\n\\n// Chat related types\\nexport interface ChatMessage {\\n  role: 'user' | 'assistant' | 'system';\\n  content: string;\\n  timestamp?: string;\\n}\\n\\nexport interface ChatRequest {\\n  message: string;\\n  conversation_id?: string;\\n  vault_context?: string;\\n  agent_id?: string;\\n  mode?: 'ask' | 'agent'; // Default: \\\"ask\\\"\\n}\\n\\nexport interface ChatResponse {\\n  response: string;\\n  conversation_id: string;\\n  agent_used: string;\\n}\\n\\nexport interface ConversationHistory {\\n  conversation_id: string;\\n  messages: ChatMessage[];\\n  total_count: number;\\n}\\n\\nexport interface ConversationHistoryRequest {\\n  conversation_id: string;  // Required field according to backend API\\n  limit?: number;\\n  include_messages?: boolean;\\n}\\n\\n// Copilot types\\nexport interface CopilotRequest {\\n  text: string;\\n  cursor_position: number;\\n  file_type?: string;\\n  context?: string;\\n}\\n\\nexport interface CopilotResponse {\\n  completion: string;\\n  confidence: number;\\n  suggestions: string[];\\n}\\n\\n// Workflow types\\nexport interface WorkflowRequest {\\n  goal: string;\\n  context?: string;\\n  vault_content?: string;\\n  constraints?: string[];\\n}\\n\\nexport interface WorkflowResponse {\\n  result: string;\\n  steps_taken: string[];\\n  artifacts: WorkflowArtifact[];\\n  execution_time: number;\\n}\\n\\nexport interface WorkflowArtifact {\\n  type: 'note' | 'plan' | 'analysis';\\n  title: string;\\n  content: string;\\n  metadata?: Record<string, any>;\\n}\\n\\n// Agent types\\nexport interface Agent {\\n  id: string;\\n  name: string;\\n  description: string;\\n  capabilities: string[];\\n  active: boolean;\\n}\\n\\nexport interface AgentCreateRequest {\\n  name: string;\\n  description: string;\\n  system_prompt: string;\\n  capabilities?: string[];\\n}\\n\\nexport interface AgentExecuteRequest {\\n  agent_id: string;\\n  task: string;\\n  context?: string;\\n}\\n\\n// Vault analysis types\\nexport interface VaultContextRequest {\\n  content: string;\\n  analysis_type?: 'summary' | 'connections' | 'insights' | 'gaps';\\n}\\n\\nexport interface VaultContextResponse {\\n  analysis: string;\\n  insights: string[];\\n  connections: Connection[];\\n  recommendations: string[];\\n}\\n\\nexport interface Connection {\\n  from: string;\\n  to: string;\\n  type: string;\\n  strength: number;\\n}\\n\\n// Task planning types\\nexport interface TaskPlanningRequest {\\n  goal: string;\\n  timeframe?: string;\\n  context?: string;\\n  constraints?: string[];\\n}\\n\\nexport interface TaskPlanningResponse {\\n  plan: TaskPlan;\\n  timeline: string;\\n  milestones: Milestone[];\\n}\\n\\nexport interface TaskPlan {\\n  title: string;\\n  description: string;\\n  tasks: Task[];\\n  estimated_duration: string;\\n}\\n\\nexport interface Task {\\n  id: string;\\n  title: string;\\n  description: string;\\n  priority: 'low' | 'medium' | 'high';\\n  estimated_time: string;\\n  dependencies: string[];\\n  status: 'pending' | 'in_progress' | 'completed';\\n}\\n\\nexport interface Milestone {\\n  title: string;\\n  description: string;\\n  target_date: string;\\n  tasks: string[];\\n}\\n\\n// Intelligence parsing types\\nexport interface IntelligenceParseRequest {\\n  text: string;\\n  parse_type?: 'intent' | 'entities' | 'context' | 'all';\\n}\\n\\nexport interface IntelligenceParseResponse {\\n  intent: string;\\n  entities: Entity[];\\n  context: ContextInfo;\\n  confidence: number;\\n}\\n\\nexport interface Entity {\\n  type: string;\\n  value: string;\\n  confidence: number;\\n  start: number;\\n  end: number;\\n}\\n\\nexport interface ContextInfo {\\n  domain: string;\\n  sentiment: string;\\n  topics: string[];\\n  keywords: string[];\\n}\\n\\n// Memory types\\nexport interface MemoryUpdateRequest {\\n  user_id?: string;\\n  information: string;\\n  context?: string;\\n  importance?: number;\\n}\\n\\n// WebSocket types\\nexport interface WebSocketMessage {\\n  type: 'chat' | 'workflow_progress' | 'copilot' | 'vault_sync' | 'intent_debug' | 'error';\\n  data: any;\\n  timestamp: string;\\n}\\n\\nexport interface WorkflowProgress {\\n  step: string;\\n  progress: number;\\n  status: 'running' | 'completed' | 'error';\\n  details?: string;\\n}\\n\\n// Settings types\\nexport interface VaultPilotSettings {\\n  backendUrl: string;\\n  apiKey?: string;\\n  enableWebSocket: boolean;\\n  enableCopilot: boolean;\\n  enableAutoComplete: boolean;\\n  defaultAgent?: string;\\n  defaultMode: 'ask' | 'agent';\\n  chatHistoryLimit: number;\\n  debugMode: boolean;\\n  showIntentDebug: boolean;\\n}\\n\\n// Planner types for \\\"Plan My Day\\\" feature\\nexport interface PlannerResponse {\\n  scheduleMarkdown: string;\\n  headline: string;\\n}\\n\\nexport interface PlannerRequest {\\n  note: string;\\n}\\n\\n// Error types\\nexport interface ErrorResponse {\\n  error: string;\\n  code?: number;\\n  details?: string;\\n  timestamp: string;\\n}\\n\"]}"}
