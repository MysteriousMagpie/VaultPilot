{"code":"/**\n * Enhanced UI Components for VaultPilot\n * Provides progress indicators and response optimization\n */\nimport { __awaiter } from \"tslib\";\nimport { Component } from 'obsidian';\n/**\n * Progress Indicator UI Class\n * Handles real-time progress bars with animations and ETA calculation\n */\nexport class ProgressIndicatorUI extends Component {\n    constructor(plugin) {\n        super();\n        this.activeProgress = new Map();\n        this.progressContainer = null;\n        this.updateInterval = null;\n        this.plugin = plugin;\n        this.app = plugin.app;\n        this.initializeContainer();\n    }\n    initializeContainer() {\n        this.progressContainer = document.createElement('div');\n        this.progressContainer.className = 'vaultpilot-progress-container';\n        this.progressContainer.style.cssText = `\n            position: fixed;\n            top: 20px;\n            right: 20px;\n            z-index: 10000;\n            pointer-events: none;\n            max-width: 400px;\n        `;\n        document.body.appendChild(this.progressContainer);\n    }\n    showProgress(config) {\n        this.activeProgress.set(config.id, config);\n        this.renderProgress(config);\n        if (config.timeout) {\n            setTimeout(() => {\n                this.hideProgress(config.id);\n            }, config.timeout);\n        }\n    }\n    updateProgress(id, updates) {\n        const existing = this.activeProgress.get(id);\n        if (existing) {\n            const updated = Object.assign(Object.assign({}, existing), updates);\n            this.activeProgress.set(id, updated);\n            this.renderProgress(updated);\n        }\n    }\n    hideProgress(id) {\n        this.activeProgress.delete(id);\n        const element = document.getElementById(`progress-${id}`);\n        if (element) {\n            element.style.animation = 'slideOutRight 0.3s ease-in';\n            setTimeout(() => {\n                element.remove();\n            }, 300);\n        }\n    }\n    renderProgress(config) {\n        var _a;\n        let element = document.getElementById(`progress-${config.id}`);\n        if (!element) {\n            element = this.createProgressElement(config);\n            (_a = this.progressContainer) === null || _a === void 0 ? void 0 : _a.appendChild(element);\n        }\n        else {\n            this.updateProgressElement(element, config);\n        }\n    }\n    createProgressElement(config) {\n        const element = document.createElement('div');\n        element.id = `progress-${config.id}`;\n        element.className = 'vaultpilot-progress-item';\n        element.style.cssText = `\n            background: var(--background-primary);\n            border: 1px solid var(--background-modifier-border);\n            border-radius: 8px;\n            padding: 12px 16px;\n            margin-bottom: 8px;\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\n            animation: slideInRight 0.3s ease-out;\n            pointer-events: auto;\n            min-width: 300px;\n        `;\n        this.updateProgressElement(element, config);\n        return element;\n    }\n    updateProgressElement(element, config) {\n        const percentage = config.percentage || 0;\n        const eta = config.eta ? this.formatETA(config.eta) : '';\n        element.innerHTML = `\n            <div class=\"progress-header\" style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;\">\n                <div class=\"progress-title\" style=\"font-weight: 600; color: var(--text-normal);\">\n                    ${config.title}\n                </div>\n                ${config.cancelable ? '<button class=\"progress-cancel\" style=\"background: none; border: none; color: var(--text-muted); cursor: pointer;\">Ã—</button>' : ''}\n            </div>\n            ${config.message ? `<div class=\"progress-message\" style=\"color: var(--text-muted); font-size: 0.9em; margin-bottom: 8px;\">${config.message}</div>` : ''}\n            <div class=\"progress-bar-container\" style=\"background: var(--background-modifier-border); border-radius: 4px; height: 6px; overflow: hidden;\">\n                <div class=\"progress-bar\" style=\"\n                    background: var(--interactive-accent);\n                    height: 100%;\n                    width: ${percentage}%;\n                    transition: width 0.3s ease;\n                    border-radius: 4px;\n                \"></div>\n            </div>\n            <div class=\"progress-info\" style=\"display: flex; justify-content: space-between; margin-top: 8px; font-size: 0.8em; color: var(--text-muted);\">\n                <span>${Math.round(percentage)}%</span>\n                ${eta ? `<span>ETA: ${eta}</span>` : ''}\n            </div>\n        `;\n        // Add cancel handler if cancelable\n        if (config.cancelable) {\n            const cancelBtn = element.querySelector('.progress-cancel');\n            cancelBtn === null || cancelBtn === void 0 ? void 0 : cancelBtn.addEventListener('click', () => {\n                this.hideProgress(config.id);\n                // Emit cancel event\n                this.plugin.app.workspace.trigger('vaultpilot:progress-cancelled', config.id);\n            });\n        }\n    }\n    formatETA(seconds) {\n        if (seconds < 60) {\n            return `${Math.round(seconds)}s`;\n        }\n        else if (seconds < 3600) {\n            const minutes = Math.floor(seconds / 60);\n            const secs = Math.round(seconds % 60);\n            return `${minutes}m ${secs}s`;\n        }\n        else {\n            const hours = Math.floor(seconds / 3600);\n            const minutes = Math.floor((seconds % 3600) / 60);\n            return `${hours}h ${minutes}m`;\n        }\n    }\n    getActiveProgress() {\n        return Array.from(this.activeProgress.values());\n    }\n    clearAllProgress() {\n        for (const id of this.activeProgress.keys()) {\n            this.hideProgress(id);\n        }\n    }\n    onunload() {\n        if (this.progressContainer) {\n            this.progressContainer.remove();\n        }\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n        }\n    }\n}\n/**\n * Response Time Optimizer Class\n * Handles client-side caching, request deduplication, and performance optimization\n */\nexport class ResponseTimeOptimizer extends Component {\n    constructor(plugin) {\n        super();\n        this.cache = new Map();\n        this.requestQueue = new Map();\n        this.maxCacheSize = 100; // Maximum number of cached entries\n        this.defaultTTL = 300000; // 5 minutes default TTL\n        this.plugin = plugin;\n        this.initializeMetrics();\n        this.startCleanupInterval();\n    }\n    initializeMetrics() {\n        this.metrics = {\n            totalRequests: 0,\n            cacheHits: 0,\n            cacheMisses: 0,\n            averageResponseTime: 0,\n            slowestResponse: 0,\n            fastestResponse: Infinity,\n            currentCacheSize: 0,\n            memoryUsage: 0\n        };\n    }\n    optimizedRequest(key_1, requestFn_1) {\n        return __awaiter(this, arguments, void 0, function* (key, requestFn, options = {}) {\n            const startTime = performance.now();\n            this.metrics.totalRequests++;\n            // Check cache first (unless skipped)\n            if (!options.skipCache) {\n                const cached = this.getFromCache(key);\n                if (cached) {\n                    this.metrics.cacheHits++;\n                    this.updateResponseTimeMetrics(performance.now() - startTime);\n                    return cached;\n                }\n            }\n            this.metrics.cacheMisses++;\n            // Check if request is already in progress (deduplication)\n            const existingRequest = this.requestQueue.get(key);\n            if (existingRequest) {\n                return existingRequest;\n            }\n            // Make the request\n            const requestPromise = this.executeRequest(requestFn, key, options.ttl || this.defaultTTL);\n            this.requestQueue.set(key, requestPromise);\n            try {\n                const result = yield requestPromise;\n                this.updateResponseTimeMetrics(performance.now() - startTime);\n                return result;\n            }\n            finally {\n                this.requestQueue.delete(key);\n            }\n        });\n    }\n    executeRequest(requestFn, key, ttl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const result = yield requestFn();\n                this.setCache(key, result, ttl);\n                return result;\n            }\n            catch (error) {\n                // Don't cache errors, but still remove from queue\n                throw error;\n            }\n        });\n    }\n    getFromCache(key) {\n        const entry = this.cache.get(key);\n        if (!entry) {\n            return null;\n        }\n        // Check if expired\n        if (Date.now() - entry.timestamp > entry.ttl) {\n            this.cache.delete(key);\n            return null;\n        }\n        // Update hit count\n        entry.hitCount++;\n        return entry.data;\n    }\n    setCache(key, data, ttl) {\n        // Enforce cache size limit\n        if (this.cache.size >= this.maxCacheSize) {\n            this.evictLeastUsed();\n        }\n        const entry = {\n            data,\n            timestamp: Date.now(),\n            ttl,\n            hitCount: 0,\n            size: this.estimateSize(data)\n        };\n        this.cache.set(key, entry);\n        this.updateCacheMetrics();\n    }\n    evictLeastUsed() {\n        let leastUsedKey = '';\n        let leastUsedCount = Infinity;\n        for (const [key, entry] of this.cache.entries()) {\n            if (entry.hitCount < leastUsedCount) {\n                leastUsedCount = entry.hitCount;\n                leastUsedKey = key;\n            }\n        }\n        if (leastUsedKey) {\n            this.cache.delete(leastUsedKey);\n        }\n    }\n    estimateSize(data) {\n        // Rough estimation of object size in bytes\n        return JSON.stringify(data).length * 2; // Approximate UTF-16 encoding\n    }\n    updateResponseTimeMetrics(responseTime) {\n        const currentAvg = this.metrics.averageResponseTime;\n        const totalRequests = this.metrics.totalRequests;\n        this.metrics.averageResponseTime =\n            (currentAvg * (totalRequests - 1) + responseTime) / totalRequests;\n        if (responseTime > this.metrics.slowestResponse) {\n            this.metrics.slowestResponse = responseTime;\n        }\n        if (responseTime < this.metrics.fastestResponse) {\n            this.metrics.fastestResponse = responseTime;\n        }\n    }\n    updateCacheMetrics() {\n        this.metrics.currentCacheSize = this.cache.size;\n        this.metrics.memoryUsage = Array.from(this.cache.values())\n            .reduce((total, entry) => total + entry.size, 0);\n    }\n    startCleanupInterval() {\n        // Clean up expired entries every minute\n        setInterval(() => {\n            this.cleanupExpiredEntries();\n        }, 60000);\n    }\n    cleanupExpiredEntries() {\n        const now = Date.now();\n        for (const [key, entry] of this.cache.entries()) {\n            if (now - entry.timestamp > entry.ttl) {\n                this.cache.delete(key);\n            }\n        }\n        this.updateCacheMetrics();\n    }\n    getMetrics() {\n        return Object.assign({}, this.metrics);\n    }\n    getCacheHitRate() {\n        const total = this.metrics.cacheHits + this.metrics.cacheMisses;\n        return total > 0 ? (this.metrics.cacheHits / total) * 100 : 0;\n    }\n    clearCache() {\n        this.cache.clear();\n        this.updateCacheMetrics();\n    }\n    setCacheConfig(maxSize, defaultTTL) {\n        this.maxCacheSize = maxSize;\n        this.defaultTTL = defaultTTL;\n    }\n    onunload() {\n        this.clearCache();\n    }\n}\n/**\n * WebSocket Handler for Real-time Updates\n */\nexport class WebSocketHandler extends Component {\n    constructor(plugin) {\n        super();\n        this.ws = null;\n        this.reconnectInterval = null;\n        this.isConnected = false;\n        this.messageHandlers = new Map();\n        this.plugin = plugin;\n        this.setupMessageHandlers();\n    }\n    setupMessageHandlers() {\n        this.messageHandlers.set('progress_update', (data) => {\n            // Find the enhancement manager instance\n            const enhancementManager = this.plugin.enhancementManager;\n            if (enhancementManager === null || enhancementManager === void 0 ? void 0 : enhancementManager.progressIndicator) {\n                enhancementManager.progressIndicator.updateProgress(data.id, {\n                    percentage: data.percentage,\n                    message: data.message,\n                    eta: data.eta\n                });\n            }\n        });\n        this.messageHandlers.set('performance_stats', (data) => {\n            // Handle performance statistics updates\n            console.log('Performance stats:', data);\n        });\n        this.messageHandlers.set('ping', () => {\n            this.send({ type: 'pong', data: {}, timestamp: Date.now() });\n        });\n    }\n    connect(url) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            return;\n        }\n        try {\n            this.ws = new WebSocket(url);\n            this.ws.onopen = () => {\n                this.isConnected = true;\n                console.log('VaultPilot WebSocket connected');\n                if (this.reconnectInterval) {\n                    clearInterval(this.reconnectInterval);\n                    this.reconnectInterval = null;\n                }\n            };\n            this.ws.onmessage = (event) => {\n                try {\n                    const message = JSON.parse(event.data);\n                    this.handleMessage(message);\n                }\n                catch (error) {\n                    console.error('Failed to parse WebSocket message:', error);\n                }\n            };\n            this.ws.onclose = () => {\n                this.isConnected = false;\n                console.log('VaultPilot WebSocket disconnected');\n                this.startReconnect(url);\n            };\n            this.ws.onerror = (error) => {\n                console.error('VaultPilot WebSocket error:', error);\n            };\n        }\n        catch (error) {\n            console.error('Failed to connect WebSocket:', error);\n            this.startReconnect(url);\n        }\n    }\n    handleMessage(message) {\n        const handler = this.messageHandlers.get(message.type);\n        if (handler) {\n            handler(message.data);\n        }\n    }\n    startReconnect(url) {\n        if (this.reconnectInterval) {\n            return;\n        }\n        this.reconnectInterval = window.setInterval(() => {\n            console.log('Attempting to reconnect VaultPilot WebSocket...');\n            this.connect(url);\n        }, 5000);\n    }\n    send(message) {\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n            this.ws.send(JSON.stringify(message));\n            return true;\n        }\n        return false;\n    }\n    disconnect() {\n        if (this.reconnectInterval) {\n            clearInterval(this.reconnectInterval);\n            this.reconnectInterval = null;\n        }\n        if (this.ws) {\n            this.ws.close();\n            this.ws = null;\n        }\n        this.isConnected = false;\n    }\n    isSocketConnected() {\n        return this.isConnected;\n    }\n    onunload() {\n        this.disconnect();\n    }\n}\n/**\n * Main Enhancement Manager\n * Orchestrates all enhancement features\n */\nexport class VaultPilotEnhancementManager extends Component {\n    constructor(plugin) {\n        super();\n        this.isInitialized = false;\n        this.plugin = plugin;\n        this.progressIndicator = new ProgressIndicatorUI(plugin);\n        this.responseOptimizer = new ResponseTimeOptimizer(plugin);\n        this.webSocketHandler = new WebSocketHandler(plugin);\n    }\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.isInitialized) {\n                return;\n            }\n            try {\n                // Initialize progress indicator\n                this.addChild(this.progressIndicator);\n                // Initialize response optimizer\n                this.addChild(this.responseOptimizer);\n                // Initialize WebSocket connection\n                this.addChild(this.webSocketHandler);\n                const wsUrl = this.plugin.settings.backendUrl.replace(/^http/, 'ws') + '/api/obsidian/ws/enhanced';\n                this.webSocketHandler.connect(wsUrl);\n                this.isInitialized = true;\n                console.log('VaultPilot Enhancement Manager initialized');\n            }\n            catch (error) {\n                console.error('Failed to initialize Enhancement Manager:', error);\n            }\n        });\n    }\n    showProgress(config) {\n        this.progressIndicator.showProgress(config);\n    }\n    optimizedAPICall(endpoint, requestFn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.responseOptimizer.optimizedRequest(endpoint, requestFn, options);\n        });\n    }\n    getPerformanceMetrics() {\n        return this.responseOptimizer.getMetrics();\n    }\n    getCacheHitRate() {\n        return this.responseOptimizer.getCacheHitRate();\n    }\n    clearCache() {\n        this.responseOptimizer.clearCache();\n    }\n    isWebSocketConnected() {\n        return this.webSocketHandler.isSocketConnected();\n    }\n    onunload() {\n        this.isInitialized = false;\n        super.onunload();\n    }\n}\nexport default {\n    ProgressIndicatorUI,\n    ResponseTimeOptimizer,\n    WebSocketHandler,\n    VaultPilotEnhancementManager\n};\n//# sourceMappingURL=enhanced-ui-components.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts"],"map":"{\"version\":3,\"file\":\"enhanced-ui-components.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/vault-management/enhanced-ui-components.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * Enhanced UI Components for VaultPilot\\n * Provides progress indicators and response optimization\\n */\\n\\nimport { App, Notice, Component } from 'obsidian';\\nimport VaultPilotPlugin from '../main';\\n\\nexport interface ProgressConfig {\\n    id: string;\\n    title: string;\\n    message?: string;\\n    percentage?: number;\\n    eta?: number;\\n    cancelable?: boolean;\\n    position?: 'top-right' | 'bottom-right' | 'center';\\n    timeout?: number;\\n}\\n\\nexport interface CacheEntry<T = any> {\\n    data: T;\\n    timestamp: number;\\n    ttl: number;\\n    hitCount: number;\\n    size: number;\\n}\\n\\nexport interface PerformanceMetrics {\\n    totalRequests: number;\\n    cacheHits: number;\\n    cacheMisses: number;\\n    averageResponseTime: number;\\n    slowestResponse: number;\\n    fastestResponse: number;\\n    currentCacheSize: number;\\n    memoryUsage: number;\\n}\\n\\nexport interface WebSocketMessage {\\n    type: 'progress_update' | 'performance_stats' | 'shortcuts' | 'ping' | 'pong' | 'error';\\n    data: any;\\n    timestamp: number;\\n    id?: string;\\n}\\n\\n/**\\n * Progress Indicator UI Class\\n * Handles real-time progress bars with animations and ETA calculation\\n */\\nexport class ProgressIndicatorUI extends Component {\\n    private plugin: VaultPilotPlugin;\\n    private app: App;\\n    private activeProgress: Map<string, ProgressConfig> = new Map();\\n    private progressContainer: HTMLElement | null = null;\\n    private updateInterval: number | null = null;\\n    \\n    constructor(plugin: VaultPilotPlugin) {\\n        super();\\n        this.plugin = plugin;\\n        this.app = plugin.app;\\n        this.initializeContainer();\\n    }\\n\\n    private initializeContainer() {\\n        this.progressContainer = document.createElement('div');\\n        this.progressContainer.className = 'vaultpilot-progress-container';\\n        this.progressContainer.style.cssText = `\\n            position: fixed;\\n            top: 20px;\\n            right: 20px;\\n            z-index: 10000;\\n            pointer-events: none;\\n            max-width: 400px;\\n        `;\\n        document.body.appendChild(this.progressContainer);\\n    }\\n\\n    showProgress(config: ProgressConfig): void {\\n        this.activeProgress.set(config.id, config);\\n        this.renderProgress(config);\\n        \\n        if (config.timeout) {\\n            setTimeout(() => {\\n                this.hideProgress(config.id);\\n            }, config.timeout);\\n        }\\n    }\\n\\n    updateProgress(id: string, updates: Partial<ProgressConfig>): void {\\n        const existing = this.activeProgress.get(id);\\n        if (existing) {\\n            const updated = { ...existing, ...updates };\\n            this.activeProgress.set(id, updated);\\n            this.renderProgress(updated);\\n        }\\n    }\\n\\n    hideProgress(id: string): void {\\n        this.activeProgress.delete(id);\\n        const element = document.getElementById(`progress-${id}`);\\n        if (element) {\\n            element.style.animation = 'slideOutRight 0.3s ease-in';\\n            setTimeout(() => {\\n                element.remove();\\n            }, 300);\\n        }\\n    }\\n\\n    private renderProgress(config: ProgressConfig): void {\\n        let element = document.getElementById(`progress-${config.id}`);\\n        \\n        if (!element) {\\n            element = this.createProgressElement(config);\\n            this.progressContainer?.appendChild(element);\\n        } else {\\n            this.updateProgressElement(element, config);\\n        }\\n    }\\n\\n    private createProgressElement(config: ProgressConfig): HTMLElement {\\n        const element = document.createElement('div');\\n        element.id = `progress-${config.id}`;\\n        element.className = 'vaultpilot-progress-item';\\n        element.style.cssText = `\\n            background: var(--background-primary);\\n            border: 1px solid var(--background-modifier-border);\\n            border-radius: 8px;\\n            padding: 12px 16px;\\n            margin-bottom: 8px;\\n            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);\\n            animation: slideInRight 0.3s ease-out;\\n            pointer-events: auto;\\n            min-width: 300px;\\n        `;\\n        \\n        this.updateProgressElement(element, config);\\n        return element;\\n    }\\n\\n    private updateProgressElement(element: HTMLElement, config: ProgressConfig): void {\\n        const percentage = config.percentage || 0;\\n        const eta = config.eta ? this.formatETA(config.eta) : '';\\n        \\n        element.innerHTML = `\\n            <div class=\\\"progress-header\\\" style=\\\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px;\\\">\\n                <div class=\\\"progress-title\\\" style=\\\"font-weight: 600; color: var(--text-normal);\\\">\\n                    ${config.title}\\n                </div>\\n                ${config.cancelable ? '<button class=\\\"progress-cancel\\\" style=\\\"background: none; border: none; color: var(--text-muted); cursor: pointer;\\\">Ã—</button>' : ''}\\n            </div>\\n            ${config.message ? `<div class=\\\"progress-message\\\" style=\\\"color: var(--text-muted); font-size: 0.9em; margin-bottom: 8px;\\\">${config.message}</div>` : ''}\\n            <div class=\\\"progress-bar-container\\\" style=\\\"background: var(--background-modifier-border); border-radius: 4px; height: 6px; overflow: hidden;\\\">\\n                <div class=\\\"progress-bar\\\" style=\\\"\\n                    background: var(--interactive-accent);\\n                    height: 100%;\\n                    width: ${percentage}%;\\n                    transition: width 0.3s ease;\\n                    border-radius: 4px;\\n                \\\"></div>\\n            </div>\\n            <div class=\\\"progress-info\\\" style=\\\"display: flex; justify-content: space-between; margin-top: 8px; font-size: 0.8em; color: var(--text-muted);\\\">\\n                <span>${Math.round(percentage)}%</span>\\n                ${eta ? `<span>ETA: ${eta}</span>` : ''}\\n            </div>\\n        `;\\n\\n        // Add cancel handler if cancelable\\n        if (config.cancelable) {\\n            const cancelBtn = element.querySelector('.progress-cancel');\\n            cancelBtn?.addEventListener('click', () => {\\n                this.hideProgress(config.id);\\n                // Emit cancel event\\n                this.plugin.app.workspace.trigger('vaultpilot:progress-cancelled', config.id);\\n            });\\n        }\\n    }\\n\\n    private formatETA(seconds: number): string {\\n        if (seconds < 60) {\\n            return `${Math.round(seconds)}s`;\\n        } else if (seconds < 3600) {\\n            const minutes = Math.floor(seconds / 60);\\n            const secs = Math.round(seconds % 60);\\n            return `${minutes}m ${secs}s`;\\n        } else {\\n            const hours = Math.floor(seconds / 3600);\\n            const minutes = Math.floor((seconds % 3600) / 60);\\n            return `${hours}h ${minutes}m`;\\n        }\\n    }\\n\\n    getActiveProgress(): ProgressConfig[] {\\n        return Array.from(this.activeProgress.values());\\n    }\\n\\n    clearAllProgress(): void {\\n        for (const id of this.activeProgress.keys()) {\\n            this.hideProgress(id);\\n        }\\n    }\\n\\n    onunload(): void {\\n        if (this.progressContainer) {\\n            this.progressContainer.remove();\\n        }\\n        if (this.updateInterval) {\\n            clearInterval(this.updateInterval);\\n        }\\n    }\\n}\\n\\n/**\\n * Response Time Optimizer Class\\n * Handles client-side caching, request deduplication, and performance optimization\\n */\\nexport class ResponseTimeOptimizer extends Component {\\n    private plugin: VaultPilotPlugin;\\n    private cache: Map<string, CacheEntry> = new Map();\\n    private requestQueue: Map<string, Promise<any>> = new Map();\\n    private metrics!: PerformanceMetrics;\\n    private maxCacheSize = 100; // Maximum number of cached entries\\n    private defaultTTL = 300000; // 5 minutes default TTL\\n\\n    constructor(plugin: VaultPilotPlugin) {\\n        super();\\n        this.plugin = plugin;\\n        this.initializeMetrics();\\n        this.startCleanupInterval();\\n    }\\n\\n    private initializeMetrics(): void {\\n        this.metrics = {\\n            totalRequests: 0,\\n            cacheHits: 0,\\n            cacheMisses: 0,\\n            averageResponseTime: 0,\\n            slowestResponse: 0,\\n            fastestResponse: Infinity,\\n            currentCacheSize: 0,\\n            memoryUsage: 0\\n        };\\n    }\\n\\n    async optimizedRequest<T>(\\n        key: string,\\n        requestFn: () => Promise<T>,\\n        options: {\\n            ttl?: number;\\n            skipCache?: boolean;\\n            priority?: 'high' | 'normal' | 'low';\\n        } = {}\\n    ): Promise<T> {\\n        const startTime = performance.now();\\n        this.metrics.totalRequests++;\\n\\n        // Check cache first (unless skipped)\\n        if (!options.skipCache) {\\n            const cached = this.getFromCache<T>(key);\\n            if (cached) {\\n                this.metrics.cacheHits++;\\n                this.updateResponseTimeMetrics(performance.now() - startTime);\\n                return cached;\\n            }\\n        }\\n\\n        this.metrics.cacheMisses++;\\n\\n        // Check if request is already in progress (deduplication)\\n        const existingRequest = this.requestQueue.get(key);\\n        if (existingRequest) {\\n            return existingRequest as Promise<T>;\\n        }\\n\\n        // Make the request\\n        const requestPromise = this.executeRequest(requestFn, key, options.ttl || this.defaultTTL);\\n        this.requestQueue.set(key, requestPromise);\\n\\n        try {\\n            const result = await requestPromise;\\n            this.updateResponseTimeMetrics(performance.now() - startTime);\\n            return result;\\n        } finally {\\n            this.requestQueue.delete(key);\\n        }\\n    }\\n\\n    private async executeRequest<T>(\\n        requestFn: () => Promise<T>,\\n        key: string,\\n        ttl: number\\n    ): Promise<T> {\\n        try {\\n            const result = await requestFn();\\n            this.setCache(key, result, ttl);\\n            return result;\\n        } catch (error) {\\n            // Don't cache errors, but still remove from queue\\n            throw error;\\n        }\\n    }\\n\\n    private getFromCache<T>(key: string): T | null {\\n        const entry = this.cache.get(key);\\n        if (!entry) {\\n            return null;\\n        }\\n\\n        // Check if expired\\n        if (Date.now() - entry.timestamp > entry.ttl) {\\n            this.cache.delete(key);\\n            return null;\\n        }\\n\\n        // Update hit count\\n        entry.hitCount++;\\n        return entry.data as T;\\n    }\\n\\n    private setCache<T>(key: string, data: T, ttl: number): void {\\n        // Enforce cache size limit\\n        if (this.cache.size >= this.maxCacheSize) {\\n            this.evictLeastUsed();\\n        }\\n\\n        const entry: CacheEntry<T> = {\\n            data,\\n            timestamp: Date.now(),\\n            ttl,\\n            hitCount: 0,\\n            size: this.estimateSize(data)\\n        };\\n\\n        this.cache.set(key, entry);\\n        this.updateCacheMetrics();\\n    }\\n\\n    private evictLeastUsed(): void {\\n        let leastUsedKey = '';\\n        let leastUsedCount = Infinity;\\n\\n        for (const [key, entry] of this.cache.entries()) {\\n            if (entry.hitCount < leastUsedCount) {\\n                leastUsedCount = entry.hitCount;\\n                leastUsedKey = key;\\n            }\\n        }\\n\\n        if (leastUsedKey) {\\n            this.cache.delete(leastUsedKey);\\n        }\\n    }\\n\\n    private estimateSize(data: any): number {\\n        // Rough estimation of object size in bytes\\n        return JSON.stringify(data).length * 2; // Approximate UTF-16 encoding\\n    }\\n\\n    private updateResponseTimeMetrics(responseTime: number): void {\\n        const currentAvg = this.metrics.averageResponseTime;\\n        const totalRequests = this.metrics.totalRequests;\\n        \\n        this.metrics.averageResponseTime = \\n            (currentAvg * (totalRequests - 1) + responseTime) / totalRequests;\\n        \\n        if (responseTime > this.metrics.slowestResponse) {\\n            this.metrics.slowestResponse = responseTime;\\n        }\\n        \\n        if (responseTime < this.metrics.fastestResponse) {\\n            this.metrics.fastestResponse = responseTime;\\n        }\\n    }\\n\\n    private updateCacheMetrics(): void {\\n        this.metrics.currentCacheSize = this.cache.size;\\n        this.metrics.memoryUsage = Array.from(this.cache.values())\\n            .reduce((total, entry) => total + entry.size, 0);\\n    }\\n\\n    private startCleanupInterval(): void {\\n        // Clean up expired entries every minute\\n        setInterval(() => {\\n            this.cleanupExpiredEntries();\\n        }, 60000);\\n    }\\n\\n    private cleanupExpiredEntries(): void {\\n        const now = Date.now();\\n        for (const [key, entry] of this.cache.entries()) {\\n            if (now - entry.timestamp > entry.ttl) {\\n                this.cache.delete(key);\\n            }\\n        }\\n        this.updateCacheMetrics();\\n    }\\n\\n    getMetrics(): PerformanceMetrics {\\n        return { ...this.metrics };\\n    }\\n\\n    getCacheHitRate(): number {\\n        const total = this.metrics.cacheHits + this.metrics.cacheMisses;\\n        return total > 0 ? (this.metrics.cacheHits / total) * 100 : 0;\\n    }\\n\\n    clearCache(): void {\\n        this.cache.clear();\\n        this.updateCacheMetrics();\\n    }\\n\\n    setCacheConfig(maxSize: number, defaultTTL: number): void {\\n        this.maxCacheSize = maxSize;\\n        this.defaultTTL = defaultTTL;\\n    }\\n\\n    onunload(): void {\\n        this.clearCache();\\n    }\\n}\\n\\n/**\\n * WebSocket Handler for Real-time Updates\\n */\\nexport class WebSocketHandler extends Component {\\n    private plugin: VaultPilotPlugin;\\n    private ws: WebSocket | null = null;\\n    private reconnectInterval: number | null = null;\\n    private isConnected = false;\\n    private messageHandlers = new Map<string, (data: any) => void>();\\n\\n    constructor(plugin: VaultPilotPlugin) {\\n        super();\\n        this.plugin = plugin;\\n        this.setupMessageHandlers();\\n    }\\n\\n    private setupMessageHandlers(): void {\\n        this.messageHandlers.set('progress_update', (data) => {\\n            // Find the enhancement manager instance\\n            const enhancementManager = (this.plugin as any).enhancementManager;\\n            if (enhancementManager?.progressIndicator) {\\n                enhancementManager.progressIndicator.updateProgress(\\n                    data.id,\\n                    {\\n                        percentage: data.percentage,\\n                        message: data.message,\\n                        eta: data.eta\\n                    }\\n                );\\n            }\\n        });\\n\\n        this.messageHandlers.set('performance_stats', (data) => {\\n            // Handle performance statistics updates\\n            console.log('Performance stats:', data);\\n        });\\n\\n        this.messageHandlers.set('ping', () => {\\n            this.send({ type: 'pong', data: {}, timestamp: Date.now() });\\n        });\\n    }\\n\\n    connect(url: string): void {\\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\\n            return;\\n        }\\n\\n        try {\\n            this.ws = new WebSocket(url);\\n            \\n            this.ws.onopen = () => {\\n                this.isConnected = true;\\n                console.log('VaultPilot WebSocket connected');\\n                if (this.reconnectInterval) {\\n                    clearInterval(this.reconnectInterval);\\n                    this.reconnectInterval = null;\\n                }\\n            };\\n\\n            this.ws.onmessage = (event) => {\\n                try {\\n                    const message: WebSocketMessage = JSON.parse(event.data);\\n                    this.handleMessage(message);\\n                } catch (error) {\\n                    console.error('Failed to parse WebSocket message:', error);\\n                }\\n            };\\n\\n            this.ws.onclose = () => {\\n                this.isConnected = false;\\n                console.log('VaultPilot WebSocket disconnected');\\n                this.startReconnect(url);\\n            };\\n\\n            this.ws.onerror = (error) => {\\n                console.error('VaultPilot WebSocket error:', error);\\n            };\\n        } catch (error) {\\n            console.error('Failed to connect WebSocket:', error);\\n            this.startReconnect(url);\\n        }\\n    }\\n\\n    private handleMessage(message: WebSocketMessage): void {\\n        const handler = this.messageHandlers.get(message.type);\\n        if (handler) {\\n            handler(message.data);\\n        }\\n    }\\n\\n    private startReconnect(url: string): void {\\n        if (this.reconnectInterval) {\\n            return;\\n        }\\n\\n        this.reconnectInterval = window.setInterval(() => {\\n            console.log('Attempting to reconnect VaultPilot WebSocket...');\\n            this.connect(url);\\n        }, 5000);\\n    }\\n\\n    send(message: WebSocketMessage): boolean {\\n        if (this.ws && this.ws.readyState === WebSocket.OPEN) {\\n            this.ws.send(JSON.stringify(message));\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    disconnect(): void {\\n        if (this.reconnectInterval) {\\n            clearInterval(this.reconnectInterval);\\n            this.reconnectInterval = null;\\n        }\\n\\n        if (this.ws) {\\n            this.ws.close();\\n            this.ws = null;\\n        }\\n        this.isConnected = false;\\n    }\\n\\n    isSocketConnected(): boolean {\\n        return this.isConnected;\\n    }\\n\\n    onunload(): void {\\n        this.disconnect();\\n    }\\n}\\n\\n/**\\n * Main Enhancement Manager\\n * Orchestrates all enhancement features\\n */\\nexport class VaultPilotEnhancementManager extends Component {\\n    public plugin: VaultPilotPlugin;\\n    public progressIndicator: ProgressIndicatorUI;\\n    public responseOptimizer: ResponseTimeOptimizer;\\n    public webSocketHandler: WebSocketHandler;\\n    private isInitialized = false;\\n\\n    constructor(plugin: VaultPilotPlugin) {\\n        super();\\n        this.plugin = plugin;\\n        this.progressIndicator = new ProgressIndicatorUI(plugin);\\n        this.responseOptimizer = new ResponseTimeOptimizer(plugin);\\n        this.webSocketHandler = new WebSocketHandler(plugin);\\n    }\\n\\n    async initialize(): Promise<void> {\\n        if (this.isInitialized) {\\n            return;\\n        }\\n\\n        try {\\n            // Initialize progress indicator\\n            this.addChild(this.progressIndicator);\\n            \\n            // Initialize response optimizer\\n            this.addChild(this.responseOptimizer);\\n            \\n            // Initialize WebSocket connection\\n            this.addChild(this.webSocketHandler);\\n            const wsUrl = this.plugin.settings.backendUrl.replace(/^http/, 'ws') + '/api/obsidian/ws/enhanced';\\n            this.webSocketHandler.connect(wsUrl);\\n\\n            this.isInitialized = true;\\n            console.log('VaultPilot Enhancement Manager initialized');\\n        } catch (error) {\\n            console.error('Failed to initialize Enhancement Manager:', error);\\n        }\\n    }\\n\\n    showProgress(config: ProgressConfig): void {\\n        this.progressIndicator.showProgress(config);\\n    }\\n\\n    async optimizedAPICall<T>(\\n        endpoint: string,\\n        requestFn: () => Promise<T>,\\n        options?: { ttl?: number; skipCache?: boolean }\\n    ): Promise<T> {\\n        return this.responseOptimizer.optimizedRequest(endpoint, requestFn, options);\\n    }\\n\\n    getPerformanceMetrics(): PerformanceMetrics {\\n        return this.responseOptimizer.getMetrics();\\n    }\\n\\n    getCacheHitRate(): number {\\n        return this.responseOptimizer.getCacheHitRate();\\n    }\\n\\n    clearCache(): void {\\n        this.responseOptimizer.clearCache();\\n    }\\n\\n    isWebSocketConnected(): boolean {\\n        return this.webSocketHandler.isSocketConnected();\\n    }\\n\\n    onunload(): void {\\n        this.isInitialized = false;\\n        super.onunload();\\n    }\\n}\\n\\nexport default {\\n    ProgressIndicatorUI,\\n    ResponseTimeOptimizer,\\n    WebSocketHandler,\\n    VaultPilotEnhancementManager\\n};\\n\"]}"}
