{"code":"/**\n * VaultPilot Conversation Insights Modal\n *\n * Displays detailed insights about the current development context,\n * conversation patterns, and development recommendations.\n */\nimport { Modal } from 'obsidian';\nexport class ConversationInsightsModal extends Modal {\n    constructor(app, insights) {\n        super(app);\n        this.insights = insights;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.empty();\n        // Set modal title and styling\n        this.titleEl.setText('Development Conversation Insights');\n        this.modalEl.addClass('vp-insights-modal');\n        // Create main content\n        this.createInsightsContent();\n    }\n    createInsightsContent() {\n        const { contentEl } = this;\n        // Context Relevance Section\n        const relevanceSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\n        relevanceSection.createEl('h3', { text: 'ðŸŽ¯ Context Relevance' });\n        const relevanceContainer = relevanceSection.createEl('div', { cls: 'vp-relevance-container' });\n        this.createRelevanceBar(relevanceContainer);\n        const relevanceText = relevanceContainer.createEl('p', { cls: 'vp-relevance-text' });\n        const percentage = Math.round(this.insights.contextRelevance * 100);\n        relevanceText.textContent = `Your development context is ${percentage}% relevant for AI assistance.`;\n        if (percentage >= 80) {\n            relevanceText.innerHTML += '<br><span class=\"vp-relevance-good\">ðŸŸ¢ Excellent context awareness!</span>';\n        }\n        else if (percentage >= 60) {\n            relevanceText.innerHTML += '<br><span class=\"vp-relevance-medium\">ðŸŸ¡ Good context available.</span>';\n        }\n        else {\n            relevanceText.innerHTML += '<br><span class=\"vp-relevance-low\">ðŸ”´ Consider adding more context (open files, make selections).</span>';\n        }\n        // Project Status Section\n        const statusSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\n        statusSection.createEl('h3', { text: 'ðŸ“Š Project Status' });\n        const statusCard = statusSection.createEl('div', { cls: 'vp-status-card' });\n        statusCard.createEl('div', {\n            text: this.insights.projectStatus,\n            cls: 'vp-status-text'\n        });\n        // Suggested Actions Section\n        if (this.insights.suggestedActions.length > 0) {\n            const actionsSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\n            actionsSection.createEl('h3', { text: 'âš¡ Suggested Actions' });\n            const actionsList = actionsSection.createEl('ul', { cls: 'vp-actions-list' });\n            this.insights.suggestedActions.forEach(action => {\n                const listItem = actionsList.createEl('li', { cls: 'vp-action-item' });\n                listItem.textContent = action;\n            });\n        }\n        // Recommendations Section\n        if (this.insights.recommendations.length > 0) {\n            const recommendationsSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\n            recommendationsSection.createEl('h3', { text: 'ðŸ’¡ Development Recommendations' });\n            const recommendationsList = recommendationsSection.createEl('ul', { cls: 'vp-recommendations-list' });\n            this.insights.recommendations.forEach(recommendation => {\n                const listItem = recommendationsList.createEl('li', { cls: 'vp-recommendation-item' });\n                listItem.textContent = recommendation;\n            });\n        }\n        // Tips Section\n        const tipsSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\n        tipsSection.createEl('h3', { text: 'ðŸ’­ Pro Tips' });\n        const tipsList = tipsSection.createEl('ul', { cls: 'vp-tips-list' });\n        const tips = [\n            'Select code before asking questions for more targeted assistance',\n            'Open relevant files to provide better context for architectural discussions',\n            'Use the \"Enhanced Development Chat\" for context-aware conversations',\n            'Enable DevPipe transport for faster, more intelligent responses',\n            'Regular context refresh keeps insights current with your work'\n        ];\n        tips.forEach(tip => {\n            const listItem = tipsList.createEl('li', { cls: 'vp-tip-item' });\n            listItem.textContent = tip;\n        });\n        // Action Buttons\n        this.createActionButtons();\n    }\n    createRelevanceBar(container) {\n        const barContainer = container.createEl('div', { cls: 'vp-relevance-bar-container' });\n        const barBackground = barContainer.createEl('div', { cls: 'vp-relevance-bar-bg' });\n        const barFill = barBackground.createEl('div', { cls: 'vp-relevance-bar-fill' });\n        const percentage = this.insights.contextRelevance * 100;\n        barFill.style.width = `${percentage}%`;\n        // Color coding\n        if (percentage >= 80) {\n            barFill.style.backgroundColor = '#4ade80'; // green\n        }\n        else if (percentage >= 60) {\n            barFill.style.backgroundColor = '#fbbf24'; // yellow\n        }\n        else {\n            barFill.style.backgroundColor = '#f87171'; // red\n        }\n        const percentageLabel = barContainer.createEl('div', {\n            cls: 'vp-percentage-label',\n            text: `${Math.round(percentage)}%`\n        });\n    }\n    createActionButtons() {\n        const buttonsContainer = this.contentEl.createEl('div', { cls: 'vp-insights-buttons' });\n        const enhancedChatBtn = buttonsContainer.createEl('button', {\n            text: 'ðŸ’¬ Start Enhanced Chat',\n            cls: 'mod-cta'\n        });\n        enhancedChatBtn.addEventListener('click', () => {\n            this.close();\n            // Trigger enhanced chat command\n            this.app.commands.executeCommandById('vaultpilot:dev-chat-enhanced');\n        });\n        const refreshBtn = buttonsContainer.createEl('button', {\n            text: 'ðŸ”„ Refresh Insights',\n            cls: 'mod-muted'\n        });\n        refreshBtn.addEventListener('click', () => {\n            this.close();\n            // Trigger insights refresh\n            this.app.commands.executeCommandById('vaultpilot:conversation-insights');\n        });\n        const closeBtn = buttonsContainer.createEl('button', {\n            text: 'Close',\n            cls: 'mod-muted'\n        });\n        closeBtn.addEventListener('click', () => this.close());\n    }\n    onClose() {\n        this.contentEl.empty();\n    }\n}\n//# sourceMappingURL=ConversationInsightsModal.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts"],"map":"{\"version\":3,\"file\":\"ConversationInsightsModal.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modals/ConversationInsightsModal.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * VaultPilot Conversation Insights Modal\\n * \\n * Displays detailed insights about the current development context,\\n * conversation patterns, and development recommendations.\\n */\\n\\nimport { App, Modal } from 'obsidian';\\n\\nexport interface ConversationInsights {\\n  contextRelevance: number;\\n  suggestedActions: string[];\\n  projectStatus: string;\\n  recommendations: string[];\\n}\\n\\nexport class ConversationInsightsModal extends Modal {\\n  private insights: ConversationInsights;\\n\\n  constructor(app: App, insights: ConversationInsights) {\\n    super(app);\\n    this.insights = insights;\\n  }\\n\\n  onOpen() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n\\n    // Set modal title and styling\\n    this.titleEl.setText('Development Conversation Insights');\\n    this.modalEl.addClass('vp-insights-modal');\\n\\n    // Create main content\\n    this.createInsightsContent();\\n  }\\n\\n  private createInsightsContent() {\\n    const { contentEl } = this;\\n\\n    // Context Relevance Section\\n    const relevanceSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\\n    relevanceSection.createEl('h3', { text: 'ðŸŽ¯ Context Relevance' });\\n    \\n    const relevanceContainer = relevanceSection.createEl('div', { cls: 'vp-relevance-container' });\\n    this.createRelevanceBar(relevanceContainer);\\n    \\n    const relevanceText = relevanceContainer.createEl('p', { cls: 'vp-relevance-text' });\\n    const percentage = Math.round(this.insights.contextRelevance * 100);\\n    relevanceText.textContent = `Your development context is ${percentage}% relevant for AI assistance.`;\\n    \\n    if (percentage >= 80) {\\n      relevanceText.innerHTML += '<br><span class=\\\"vp-relevance-good\\\">ðŸŸ¢ Excellent context awareness!</span>';\\n    } else if (percentage >= 60) {\\n      relevanceText.innerHTML += '<br><span class=\\\"vp-relevance-medium\\\">ðŸŸ¡ Good context available.</span>';\\n    } else {\\n      relevanceText.innerHTML += '<br><span class=\\\"vp-relevance-low\\\">ðŸ”´ Consider adding more context (open files, make selections).</span>';\\n    }\\n\\n    // Project Status Section\\n    const statusSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\\n    statusSection.createEl('h3', { text: 'ðŸ“Š Project Status' });\\n    \\n    const statusCard = statusSection.createEl('div', { cls: 'vp-status-card' });\\n    statusCard.createEl('div', { \\n      text: this.insights.projectStatus,\\n      cls: 'vp-status-text'\\n    });\\n\\n    // Suggested Actions Section\\n    if (this.insights.suggestedActions.length > 0) {\\n      const actionsSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\\n      actionsSection.createEl('h3', { text: 'âš¡ Suggested Actions' });\\n      \\n      const actionsList = actionsSection.createEl('ul', { cls: 'vp-actions-list' });\\n      this.insights.suggestedActions.forEach(action => {\\n        const listItem = actionsList.createEl('li', { cls: 'vp-action-item' });\\n        listItem.textContent = action;\\n      });\\n    }\\n\\n    // Recommendations Section\\n    if (this.insights.recommendations.length > 0) {\\n      const recommendationsSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\\n      recommendationsSection.createEl('h3', { text: 'ðŸ’¡ Development Recommendations' });\\n      \\n      const recommendationsList = recommendationsSection.createEl('ul', { cls: 'vp-recommendations-list' });\\n      this.insights.recommendations.forEach(recommendation => {\\n        const listItem = recommendationsList.createEl('li', { cls: 'vp-recommendation-item' });\\n        listItem.textContent = recommendation;\\n      });\\n    }\\n\\n    // Tips Section\\n    const tipsSection = contentEl.createEl('div', { cls: 'vp-insights-section' });\\n    tipsSection.createEl('h3', { text: 'ðŸ’­ Pro Tips' });\\n    \\n    const tipsList = tipsSection.createEl('ul', { cls: 'vp-tips-list' });\\n    const tips = [\\n      'Select code before asking questions for more targeted assistance',\\n      'Open relevant files to provide better context for architectural discussions',\\n      'Use the \\\"Enhanced Development Chat\\\" for context-aware conversations',\\n      'Enable DevPipe transport for faster, more intelligent responses',\\n      'Regular context refresh keeps insights current with your work'\\n    ];\\n    \\n    tips.forEach(tip => {\\n      const listItem = tipsList.createEl('li', { cls: 'vp-tip-item' });\\n      listItem.textContent = tip;\\n    });\\n\\n    // Action Buttons\\n    this.createActionButtons();\\n  }\\n\\n  private createRelevanceBar(container: HTMLElement) {\\n    const barContainer = container.createEl('div', { cls: 'vp-relevance-bar-container' });\\n    \\n    const barBackground = barContainer.createEl('div', { cls: 'vp-relevance-bar-bg' });\\n    const barFill = barBackground.createEl('div', { cls: 'vp-relevance-bar-fill' });\\n    \\n    const percentage = this.insights.contextRelevance * 100;\\n    barFill.style.width = `${percentage}%`;\\n    \\n    // Color coding\\n    if (percentage >= 80) {\\n      barFill.style.backgroundColor = '#4ade80'; // green\\n    } else if (percentage >= 60) {\\n      barFill.style.backgroundColor = '#fbbf24'; // yellow\\n    } else {\\n      barFill.style.backgroundColor = '#f87171'; // red\\n    }\\n    \\n    const percentageLabel = barContainer.createEl('div', { \\n      cls: 'vp-percentage-label',\\n      text: `${Math.round(percentage)}%`\\n    });\\n  }\\n\\n  private createActionButtons() {\\n    const buttonsContainer = this.contentEl.createEl('div', { cls: 'vp-insights-buttons' });\\n    \\n    const enhancedChatBtn = buttonsContainer.createEl('button', {\\n      text: 'ðŸ’¬ Start Enhanced Chat',\\n      cls: 'mod-cta'\\n    });\\n    enhancedChatBtn.addEventListener('click', () => {\\n      this.close();\\n      // Trigger enhanced chat command\\n      (this.app as any).commands.executeCommandById('vaultpilot:dev-chat-enhanced');\\n    });\\n    \\n    const refreshBtn = buttonsContainer.createEl('button', {\\n      text: 'ðŸ”„ Refresh Insights',\\n      cls: 'mod-muted'\\n    });\\n    refreshBtn.addEventListener('click', () => {\\n      this.close();\\n      // Trigger insights refresh\\n      (this.app as any).commands.executeCommandById('vaultpilot:conversation-insights');\\n    });\\n    \\n    const closeBtn = buttonsContainer.createEl('button', {\\n      text: 'Close',\\n      cls: 'mod-muted'\\n    });\\n    closeBtn.addEventListener('click', () => this.close());\\n  }\\n\\n  onClose() {\\n    this.contentEl.empty();\\n  }\\n}\"]}"}
