{"code":"/**\n * VaultPilot Workspace Manager\n *\n * Central orchestration component for the unified 3-panel workspace architecture.\n * Manages workspace state, panel coordination, and mode switching while preserving\n * all existing VaultPilot functionality.\n */\nimport { __awaiter } from \"tslib\";\nimport { Component, Events } from 'obsidian';\nimport { ContextPanel } from './panels/ContextPanel';\nimport { AIPanel } from './panels/AIPanel';\nimport { MainPanel } from './panels/MainPanel';\nimport { IntegrationTester } from './IntegrationTester';\nexport class WorkspaceManager extends Component {\n    constructor(plugin, containerEl) {\n        super();\n        this.events = new Events();\n        this.plugin = plugin;\n        this.containerEl = containerEl;\n        this.state = this.getDefaultState();\n    }\n    getDefaultState() {\n        return {\n            mode: 'chat',\n            panels: {\n                context: { collapsed: false, width: 300, visible: true },\n                ai: { collapsed: false, width: 300, visible: true }\n            },\n            preferences: {\n                showOnboarding: true,\n                featureLevel: 'beginner',\n                autoCollapsePanels: false,\n                keyboardShortcutsEnabled: true\n            },\n            context: {\n                activeSourceIds: [],\n                vaultStateVisible: true,\n                quickActionsEnabled: true\n            }\n        };\n    }\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Load persisted state\n                yield this.loadState();\n                // Create workspace structure\n                this.createWorkspaceStructure();\n                // Initialize panels\n                yield this.initializePanels();\n                // Setup event listeners\n                this.setupEventListeners();\n                // Setup keyboard shortcuts\n                this.setupKeyboardShortcuts();\n                // Setup resize observer for responsive behavior\n                this.setupResizeObserver();\n                // Apply initial state\n                yield this.applyState();\n                // Emit ready event\n                this.events.trigger('workspace-ready');\n                console.log('VaultPilot Workspace Manager loaded successfully');\n            }\n            catch (error) {\n                console.error('Failed to load Workspace Manager:', error);\n                throw error;\n            }\n        });\n    }\n    createWorkspaceStructure() {\n        // Clear container and add workspace class\n        this.containerEl.empty();\n        this.containerEl.addClass('vp-workspace');\n        // Create command bar\n        const commandBar = this.containerEl.createEl('div', {\n            cls: 'vp-command-bar',\n            attr: { 'role': 'toolbar', 'aria-label': 'VaultPilot Command Bar' }\n        });\n        this.createCommandBar(commandBar);\n        // Create main workspace container\n        const workspaceContainer = this.containerEl.createEl('div', {\n            cls: 'vp-workspace-container',\n            attr: { 'role': 'main' }\n        });\n        // Create three-panel layout\n        this.createThreePanelLayout(workspaceContainer);\n    }\n    createCommandBar(commandBar) {\n        // Mode switcher\n        const modeSwitcher = commandBar.createEl('div', {\n            cls: 'vp-mode-switcher',\n            attr: { 'role': 'tablist', 'aria-label': 'Workspace Modes' }\n        });\n        const modes = [\n            { id: 'chat', label: 'Chat', icon: 'message-circle' },\n            { id: 'workflow', label: 'Workflow', icon: 'workflow' },\n            { id: 'explorer', label: 'Explorer', icon: 'folder' },\n            { id: 'analytics', label: 'Analytics', icon: 'bar-chart' }\n        ];\n        modes.forEach((mode, index) => {\n            const modeButton = modeSwitcher.createEl('button', {\n                cls: `vp-mode-button ${this.state.mode === mode.id ? 'vp-mode-active' : ''}`,\n                text: mode.label,\n                attr: {\n                    'role': 'tab',\n                    'aria-selected': this.state.mode === mode.id ? 'true' : 'false',\n                    'aria-controls': `vp-main-panel-${mode.id}`,\n                    'data-mode': mode.id,\n                    'title': `Switch to ${mode.label} mode (Cmd+${index + 1})`\n                }\n            });\n            modeButton.addEventListener('click', () => this.switchMode(mode.id));\n        });\n        // Global search and user actions\n        const actionBar = commandBar.createEl('div', { cls: 'vp-action-bar' });\n        const searchContainer = actionBar.createEl('div', { cls: 'vp-search-container' });\n        const searchInput = searchContainer.createEl('input', {\n            cls: 'vp-global-search',\n            attr: {\n                type: 'text',\n                placeholder: 'Search VaultPilot...',\n                'aria-label': 'Global search'\n            }\n        });\n        const userActions = actionBar.createEl('div', { cls: 'vp-user-actions' });\n        // Panel toggle buttons\n        const panelToggles = userActions.createEl('div', { cls: 'vp-panel-toggles' });\n        const contextToggle = panelToggles.createEl('button', {\n            cls: 'vp-panel-toggle',\n            text: 'Context',\n            attr: {\n                'aria-label': 'Toggle context panel',\n                'aria-pressed': this.state.panels.context.collapsed ? 'false' : 'true'\n            }\n        });\n        contextToggle.addEventListener('click', () => this.togglePanel('context'));\n        const aiToggle = panelToggles.createEl('button', {\n            cls: 'vp-panel-toggle',\n            text: 'AI',\n            attr: {\n                'aria-label': 'Toggle AI panel',\n                'aria-pressed': this.state.panels.ai.collapsed ? 'false' : 'true'\n            }\n        });\n        aiToggle.addEventListener('click', () => this.togglePanel('ai'));\n    }\n    createThreePanelLayout(container) {\n        // Context Panel (Left)\n        const contextPanelEl = container.createEl('div', {\n            cls: `vp-context-panel ${this.state.panels.context.collapsed ? 'vp-panel-collapsed' : ''}`,\n            attr: { 'role': 'complementary', 'aria-label': 'Context Panel' }\n        });\n        contextPanelEl.style.width = `${this.state.panels.context.width}px`;\n        // Main Panel (Center)\n        const mainPanelEl = container.createEl('div', {\n            cls: 'vp-main-panel',\n            attr: { 'role': 'main', 'aria-label': 'Main Workspace' }\n        });\n        // AI Panel (Right)\n        const aiPanelEl = container.createEl('div', {\n            cls: `vp-ai-panel ${this.state.panels.ai.collapsed ? 'vp-panel-collapsed' : ''}`,\n            attr: { 'role': 'complementary', 'aria-label': 'AI Panel' }\n        });\n        aiPanelEl.style.width = `${this.state.panels.ai.width}px`;\n        // Add resize handles\n        this.addResizeHandles(container);\n    }\n    addResizeHandles(container) {\n        // Left resize handle (between context and main panels)\n        const leftHandle = container.createEl('div', {\n            cls: 'vp-resize-handle vp-resize-handle-left',\n            attr: { 'aria-label': 'Resize context panel' }\n        });\n        // Right resize handle (between main and AI panels)\n        const rightHandle = container.createEl('div', {\n            cls: 'vp-resize-handle vp-resize-handle-right',\n            attr: { 'aria-label': 'Resize AI panel' }\n        });\n        // Setup drag handlers\n        this.setupResizeHandlers(leftHandle, 'context');\n        this.setupResizeHandlers(rightHandle, 'ai');\n    }\n    setupResizeHandlers(handle, panel) {\n        let isDragging = false;\n        let startX = 0;\n        let startWidth = 0;\n        handle.addEventListener('mousedown', (e) => {\n            isDragging = true;\n            startX = e.clientX;\n            startWidth = this.state.panels[panel].width;\n            document.addEventListener('mousemove', onMouseMove);\n            document.addEventListener('mouseup', onMouseUp);\n            // Add dragging class for visual feedback\n            this.containerEl.addClass('vp-workspace-resizing');\n        });\n        const onMouseMove = (e) => {\n            if (!isDragging)\n                return;\n            const deltaX = panel === 'context' ? e.clientX - startX : startX - e.clientX;\n            const newWidth = Math.max(200, Math.min(500, startWidth + deltaX));\n            this.updatePanelWidth(panel, newWidth);\n        };\n        const onMouseUp = () => {\n            isDragging = false;\n            this.containerEl.removeClass('vp-workspace-resizing');\n            document.removeEventListener('mousemove', onMouseMove);\n            document.removeEventListener('mouseup', onMouseUp);\n            // Save state\n            this.saveState();\n        };\n    }\n    initializePanels() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const contextPanelEl = this.containerEl.querySelector('.vp-context-panel');\n            const mainPanelEl = this.containerEl.querySelector('.vp-main-panel');\n            const aiPanelEl = this.containerEl.querySelector('.vp-ai-panel');\n            // Initialize Context Panel\n            if (contextPanelEl) {\n                try {\n                    this.contextPanel = new ContextPanel(contextPanelEl, this.plugin, this);\n                    yield this.contextPanel.onload();\n                    if (this.plugin.settings.debugMode) {\n                        console.log('ContextPanel initialized successfully');\n                    }\n                }\n                catch (error) {\n                    console.error('Failed to initialize ContextPanel:', error);\n                    // Fallback to placeholder\n                    contextPanelEl.createEl('div', {\n                        cls: 'vp-panel-placeholder',\n                        text: 'Context Panel - Failed to Load'\n                    });\n                }\n            }\n            // Initialize Main Panel\n            if (mainPanelEl) {\n                try {\n                    this.mainPanel = new MainPanel(mainPanelEl, this.plugin, this);\n                    yield this.mainPanel.onload();\n                    if (this.plugin.settings.debugMode) {\n                        console.log('MainPanel initialized successfully');\n                    }\n                }\n                catch (error) {\n                    console.error('Failed to initialize MainPanel:', error);\n                    // Fallback to placeholder\n                    this.createMainPanelPlaceholder(mainPanelEl);\n                }\n            }\n            // Initialize AI Panel  \n            if (aiPanelEl) {\n                try {\n                    this.aiPanel = new AIPanel(aiPanelEl, this.plugin, this);\n                    yield this.aiPanel.onload();\n                    if (this.plugin.settings.debugMode) {\n                        console.log('AIPanel initialized successfully');\n                    }\n                }\n                catch (error) {\n                    console.error('Failed to initialize AIPanel:', error);\n                    // Fallback to placeholder\n                    aiPanelEl.createEl('div', {\n                        cls: 'vp-panel-placeholder',\n                        text: 'AI Panel - Failed to Load'\n                    });\n                }\n            }\n        });\n    }\n    createMainPanelPlaceholder(mainPanelEl) {\n        const modeContent = mainPanelEl.createEl('div', {\n            cls: 'vp-main-panel-content',\n            attr: { 'data-mode': this.state.mode }\n        });\n        const header = modeContent.createEl('div', { cls: 'vp-main-panel-header' });\n        header.createEl('h2', { text: `${this.state.mode.charAt(0).toUpperCase() + this.state.mode.slice(1)} Mode` });\n        const content = modeContent.createEl('div', { cls: 'vp-main-panel-body' });\n        content.createEl('p', { text: `${this.state.mode} functionality will be integrated here.` });\n        // Add mode-specific placeholders\n        switch (this.state.mode) {\n            case 'chat':\n                content.createEl('div', { cls: 'vp-chat-placeholder', text: 'Chat interface integration pending' });\n                break;\n            case 'workflow':\n                content.createEl('div', { cls: 'vp-workflow-placeholder', text: 'Workflow builder integration pending' });\n                break;\n            case 'explorer':\n                content.createEl('div', { cls: 'vp-explorer-placeholder', text: 'Vault explorer integration pending' });\n                break;\n            case 'analytics':\n                content.createEl('div', { cls: 'vp-analytics-placeholder', text: 'Analytics dashboard integration pending' });\n                break;\n        }\n    }\n    setupEventListeners() {\n        // Listen for Obsidian workspace changes\n        this.plugin.app.workspace.on('layout-change', () => {\n            this.handleLayoutChange();\n        });\n        // Listen for theme changes\n        this.plugin.app.workspace.on('css-change', () => {\n            this.handleThemeChange();\n        });\n        // Listen for vault changes that might affect context\n        this.plugin.app.vault.on('create', () => {\n            this.events.trigger('vault-changed');\n        });\n        this.plugin.app.vault.on('delete', () => {\n            this.events.trigger('vault-changed');\n        });\n        this.plugin.app.vault.on('rename', () => {\n            this.events.trigger('vault-changed');\n        });\n    }\n    setupKeyboardShortcuts() {\n        if (!this.state.preferences.keyboardShortcutsEnabled)\n            return;\n        // Mode switching shortcuts (Cmd/Ctrl + 1-4)\n        this.plugin.addCommand({\n            id: 'switch-to-chat',\n            name: 'Switch to Chat Mode',\n            hotkeys: [{ modifiers: ['Mod'], key: '1' }],\n            callback: () => this.switchMode('chat')\n        });\n        this.plugin.addCommand({\n            id: 'switch-to-workflow',\n            name: 'Switch to Workflow Mode',\n            hotkeys: [{ modifiers: ['Mod'], key: '2' }],\n            callback: () => this.switchMode('workflow')\n        });\n        this.plugin.addCommand({\n            id: 'switch-to-explorer',\n            name: 'Switch to Explorer Mode',\n            hotkeys: [{ modifiers: ['Mod'], key: '3' }],\n            callback: () => this.switchMode('explorer')\n        });\n        this.plugin.addCommand({\n            id: 'switch-to-analytics',\n            name: 'Switch to Analytics Mode',\n            hotkeys: [{ modifiers: ['Mod'], key: '4' }],\n            callback: () => this.switchMode('analytics')\n        });\n        // Panel toggle shortcuts\n        this.plugin.addCommand({\n            id: 'toggle-context-panel',\n            name: 'Toggle Context Panel',\n            hotkeys: [{ modifiers: ['Mod', 'Shift'], key: 'c' }],\n            callback: () => this.togglePanel('context')\n        });\n        this.plugin.addCommand({\n            id: 'toggle-ai-panel',\n            name: 'Toggle AI Panel',\n            hotkeys: [{ modifiers: ['Mod', 'Shift'], key: 'a' }],\n            callback: () => this.togglePanel('ai')\n        });\n    }\n    setupResizeObserver() {\n        this.resizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n                if (entry.target === this.containerEl) {\n                    this.handleWorkspaceResize();\n                }\n            }\n        });\n        this.resizeObserver.observe(this.containerEl);\n    }\n    // Public API Methods\n    switchMode(mode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.state.mode === mode)\n                return;\n            const previousMode = this.state.mode;\n            this.state.mode = mode;\n            // Update mode buttons\n            this.updateModeButtons();\n            // Update main panel to new mode\n            if (this.mainPanel) {\n                yield this.mainPanel.switchToMode(mode);\n            }\n            else {\n                // Fallback: update placeholder content\n                yield this.updateMainPanelContent();\n            }\n            // Save state\n            yield this.saveState();\n            // Emit event\n            this.events.trigger('mode-changed', mode);\n            if (this.plugin.settings.debugMode) {\n                console.log(`Switched from ${previousMode} to ${mode} mode`);\n            }\n        });\n    }\n    togglePanel(panel) {\n        const isCollapsed = this.state.panels[panel].collapsed;\n        this.state.panels[panel].collapsed = !isCollapsed;\n        // Update DOM\n        const panelEl = this.containerEl.querySelector(`.vp-${panel}-panel`);\n        if (panelEl) {\n            panelEl.toggleClass('vp-panel-collapsed', this.state.panels[panel].collapsed);\n        }\n        // Update toggle button\n        const toggleButton = this.containerEl.querySelector(`.vp-panel-toggle[aria-label*=\"${panel}\"]`);\n        if (toggleButton) {\n            toggleButton.setAttribute('aria-pressed', isCollapsed ? 'true' : 'false');\n        }\n        // Save state\n        this.saveState();\n        // Emit event\n        this.events.trigger('panel-toggled', panel, this.state.panels[panel].collapsed);\n    }\n    updatePanelWidth(panel, width) {\n        this.state.panels[panel].width = width;\n        const panelEl = this.containerEl.querySelector(`.vp-${panel}-panel`);\n        if (panelEl) {\n            panelEl.style.width = `${width}px`;\n        }\n    }\n    updateState(newState) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.state = Object.assign(Object.assign({}, this.state), newState);\n            yield this.applyState();\n            yield this.saveState();\n            this.events.trigger('state-updated', newState);\n        });\n    }\n    getState() {\n        return Object.assign({}, this.state);\n    }\n    updateContextSources(sources) {\n        // Update main panel with new context sources\n        if (this.mainPanel && typeof this.mainPanel.updateContext === 'function') {\n            this.mainPanel.updateContext(sources);\n        }\n        // Emit context update event\n        this.events.trigger('context-updated', sources);\n    }\n    getContextPanel() {\n        return this.contextPanel;\n    }\n    getMainPanel() {\n        return this.mainPanel;\n    }\n    getAIPanel() {\n        return this.aiPanel;\n    }\n    on(event, callback) {\n        this.events.on(event, callback);\n    }\n    off(event, callback) {\n        this.events.off(event, callback);\n    }\n    // Private utility methods\n    updateModeButtons() {\n        const modeButtons = this.containerEl.querySelectorAll('.vp-mode-button');\n        modeButtons.forEach((button) => {\n            const mode = button.getAttribute('data-mode');\n            const isActive = mode === this.state.mode;\n            button.toggleClass('vp-mode-active', isActive);\n            button.setAttribute('aria-selected', isActive ? 'true' : 'false');\n        });\n    }\n    updateMainPanelContent() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const mainPanelEl = this.containerEl.querySelector('.vp-main-panel');\n            if (mainPanelEl) {\n                // Clear existing content\n                mainPanelEl.empty();\n                // Create new content for current mode\n                this.createMainPanelPlaceholder(mainPanelEl);\n            }\n        });\n    }\n    applyState() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Apply panel states\n            Object.entries(this.state.panels).forEach(([panelName, panelState]) => {\n                const panelEl = this.containerEl.querySelector(`.vp-${panelName}-panel`);\n                if (panelEl) {\n                    panelEl.toggleClass('vp-panel-collapsed', panelState.collapsed);\n                    panelEl.style.width = `${panelState.width}px`;\n                }\n            });\n            // Update mode\n            this.updateModeButtons();\n            yield this.updateMainPanelContent();\n        });\n    }\n    loadState() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const savedState = yield this.plugin.loadData();\n                if (savedState === null || savedState === void 0 ? void 0 : savedState.workspaceState) {\n                    this.state = Object.assign(Object.assign({}, this.state), savedState.workspaceState);\n                }\n            }\n            catch (error) {\n                console.warn('Failed to load workspace state, using defaults:', error);\n            }\n        });\n    }\n    saveState() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const pluginData = (yield this.plugin.loadData()) || {};\n                pluginData.workspaceState = this.state;\n                yield this.plugin.saveData(pluginData);\n            }\n            catch (error) {\n                console.error('Failed to save workspace state:', error);\n            }\n        });\n    }\n    handleLayoutChange() {\n        // Respond to Obsidian layout changes\n        this.handleWorkspaceResize();\n    }\n    handleThemeChange() {\n        // Respond to theme changes by ensuring proper CSS class application\n        this.containerEl.addClass('vp-workspace');\n    }\n    handleWorkspaceResize() {\n        // Handle responsive behavior for mobile/small screens\n        const containerWidth = this.containerEl.clientWidth;\n        if (containerWidth < 768) {\n            // Mobile mode: auto-collapse panels\n            if (this.state.preferences.autoCollapsePanels) {\n                this.state.panels.context.collapsed = true;\n                this.state.panels.ai.collapsed = true;\n                this.applyState();\n            }\n        }\n    }\n    // Week 8: Integration testing methods\n    /**\n     * Initialize integration tester\n     */\n    initializeIntegrationTester() {\n        if (!this.integrationTester) {\n            this.integrationTester = new IntegrationTester(this.plugin, this);\n            this.addChild(this.integrationTester);\n        }\n    }\n    /**\n     * Run full integration test suite\n     */\n    runIntegrationTests() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.initializeIntegrationTester();\n            if (!this.integrationTester) {\n                throw new Error('Integration tester not initialized');\n            }\n            return yield this.integrationTester.runFullTestSuite();\n        });\n    }\n    /**\n     * Export integration test results\n     */\n    exportTestResults() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.integrationTester) {\n                throw new Error('No test results available. Run tests first.');\n            }\n            yield this.integrationTester.exportTestResults();\n        });\n    }\n    /**\n     * Get workspace container for testing\n     */\n    getWorkspaceContainer() {\n        return this.containerEl;\n    }\n    // Component lifecycle\n    onunload() {\n        // Clean up panel components\n        if (this.contextPanel) {\n            this.contextPanel.onunload();\n            this.contextPanel = undefined;\n        }\n        if (this.mainPanel) {\n            this.mainPanel.onunload();\n            this.mainPanel = undefined;\n        }\n        if (this.aiPanel) {\n            this.aiPanel.onunload();\n            this.aiPanel = undefined;\n        }\n        // Clean up observers\n        if (this.resizeObserver) {\n            this.resizeObserver.disconnect();\n        }\n        // Clean up event listeners\n        this.events.offref(this);\n        // Save final state\n        this.saveState().catch(console.error);\n        super.onunload();\n    }\n}\n//# sourceMappingURL=WorkspaceManager.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/workspace/panels/ContextPanel.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/workspace/panels/AIPanel.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/workspace/panels/MainPanel.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/workspace/IntegrationTester.ts"],"map":"{\"version\":3,\"file\":\"WorkspaceManager.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/workspace/WorkspaceManager.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * VaultPilot Workspace Manager\\n * \\n * Central orchestration component for the unified 3-panel workspace architecture.\\n * Manages workspace state, panel coordination, and mode switching while preserving\\n * all existing VaultPilot functionality.\\n */\\n\\nimport { Component, Plugin, WorkspaceLeaf, Events } from 'obsidian';\\nimport VaultPilotPlugin from '../main';\\nimport { ContextPanel } from './panels/ContextPanel';\\nimport { AIPanel } from './panels/AIPanel';\\nimport { MainPanel } from './panels/MainPanel';\\nimport { IntegrationTester, IntegrationTestSuite } from './IntegrationTester';\\n\\nexport type WorkspaceMode = 'chat' | 'workflow' | 'explorer' | 'analytics';\\n\\nexport interface PanelState {\\n  collapsed: boolean;\\n  width: number;\\n  visible: boolean;\\n}\\n\\nexport interface WorkspaceState {\\n  mode: WorkspaceMode;\\n  panels: {\\n    context: PanelState;\\n    ai: PanelState;\\n  };\\n  preferences: {\\n    showOnboarding: boolean;\\n    featureLevel: 'beginner' | 'intermediate' | 'advanced' | 'expert';\\n    autoCollapsePanels: boolean;\\n    keyboardShortcutsEnabled: boolean;\\n  };\\n  context: {\\n    activeSourceIds: string[];\\n    vaultStateVisible: boolean;\\n    quickActionsEnabled: boolean;\\n  };\\n}\\n\\nexport interface WorkspaceEvents {\\n  'mode-changed': (mode: WorkspaceMode) => void;\\n  'panel-toggled': (panel: 'context' | 'ai', collapsed: boolean) => void;\\n  'state-updated': (state: Partial<WorkspaceState>) => void;\\n  'workspace-ready': () => void;\\n}\\n\\nexport class WorkspaceManager extends Component {\\n  private plugin: VaultPilotPlugin;\\n  private containerEl: HTMLElement;\\n  private state: WorkspaceState;\\n  private events: Events = new Events();\\n  private resizeObserver?: ResizeObserver;\\n  \\n  // Panel components\\n  private contextPanel?: ContextPanel;\\n  private mainPanel?: MainPanel;\\n  private aiPanel?: AIPanel;\\n  \\n  // Week 8: Integration testing\\n  private integrationTester?: IntegrationTester;\\n\\n  constructor(plugin: VaultPilotPlugin, containerEl: HTMLElement) {\\n    super();\\n    this.plugin = plugin;\\n    this.containerEl = containerEl;\\n    this.state = this.getDefaultState();\\n  }\\n\\n  private getDefaultState(): WorkspaceState {\\n    return {\\n      mode: 'chat',\\n      panels: {\\n        context: { collapsed: false, width: 300, visible: true },\\n        ai: { collapsed: false, width: 300, visible: true }\\n      },\\n      preferences: {\\n        showOnboarding: true,\\n        featureLevel: 'beginner',\\n        autoCollapsePanels: false,\\n        keyboardShortcutsEnabled: true\\n      },\\n      context: {\\n        activeSourceIds: [],\\n        vaultStateVisible: true,\\n        quickActionsEnabled: true\\n      }\\n    };\\n  }\\n\\n  async onload(): Promise<void> {\\n    try {\\n      // Load persisted state\\n      await this.loadState();\\n      \\n      // Create workspace structure\\n      this.createWorkspaceStructure();\\n      \\n      // Initialize panels\\n      await this.initializePanels();\\n      \\n      // Setup event listeners\\n      this.setupEventListeners();\\n      \\n      // Setup keyboard shortcuts\\n      this.setupKeyboardShortcuts();\\n      \\n      // Setup resize observer for responsive behavior\\n      this.setupResizeObserver();\\n      \\n      // Apply initial state\\n      await this.applyState();\\n      \\n      // Emit ready event\\n      this.events.trigger('workspace-ready');\\n      \\n      console.log('VaultPilot Workspace Manager loaded successfully');\\n    } catch (error) {\\n      console.error('Failed to load Workspace Manager:', error);\\n      throw error;\\n    }\\n  }\\n\\n  private createWorkspaceStructure(): void {\\n    // Clear container and add workspace class\\n    this.containerEl.empty();\\n    this.containerEl.addClass('vp-workspace');\\n    \\n    // Create command bar\\n    const commandBar = this.containerEl.createEl('div', {\\n      cls: 'vp-command-bar',\\n      attr: { 'role': 'toolbar', 'aria-label': 'VaultPilot Command Bar' }\\n    });\\n    this.createCommandBar(commandBar);\\n    \\n    // Create main workspace container\\n    const workspaceContainer = this.containerEl.createEl('div', {\\n      cls: 'vp-workspace-container',\\n      attr: { 'role': 'main' }\\n    });\\n    \\n    // Create three-panel layout\\n    this.createThreePanelLayout(workspaceContainer);\\n  }\\n\\n  private createCommandBar(commandBar: HTMLElement): void {\\n    // Mode switcher\\n    const modeSwitcher = commandBar.createEl('div', {\\n      cls: 'vp-mode-switcher',\\n      attr: { 'role': 'tablist', 'aria-label': 'Workspace Modes' }\\n    });\\n    \\n    const modes: Array<{ id: WorkspaceMode; label: string; icon: string }> = [\\n      { id: 'chat', label: 'Chat', icon: 'message-circle' },\\n      { id: 'workflow', label: 'Workflow', icon: 'workflow' },\\n      { id: 'explorer', label: 'Explorer', icon: 'folder' },\\n      { id: 'analytics', label: 'Analytics', icon: 'bar-chart' }\\n    ];\\n    \\n    modes.forEach((mode, index) => {\\n      const modeButton = modeSwitcher.createEl('button', {\\n        cls: `vp-mode-button ${this.state.mode === mode.id ? 'vp-mode-active' : ''}`,\\n        text: mode.label,\\n        attr: {\\n          'role': 'tab',\\n          'aria-selected': this.state.mode === mode.id ? 'true' : 'false',\\n          'aria-controls': `vp-main-panel-${mode.id}`,\\n          'data-mode': mode.id,\\n          'title': `Switch to ${mode.label} mode (Cmd+${index + 1})`\\n        }\\n      });\\n      \\n      modeButton.addEventListener('click', () => this.switchMode(mode.id));\\n    });\\n    \\n    // Global search and user actions\\n    const actionBar = commandBar.createEl('div', { cls: 'vp-action-bar' });\\n    \\n    const searchContainer = actionBar.createEl('div', { cls: 'vp-search-container' });\\n    const searchInput = searchContainer.createEl('input', {\\n      cls: 'vp-global-search',\\n      attr: {\\n        type: 'text',\\n        placeholder: 'Search VaultPilot...',\\n        'aria-label': 'Global search'\\n      }\\n    });\\n    \\n    const userActions = actionBar.createEl('div', { cls: 'vp-user-actions' });\\n    \\n    // Panel toggle buttons\\n    const panelToggles = userActions.createEl('div', { cls: 'vp-panel-toggles' });\\n    \\n    const contextToggle = panelToggles.createEl('button', {\\n      cls: 'vp-panel-toggle',\\n      text: 'Context',\\n      attr: {\\n        'aria-label': 'Toggle context panel',\\n        'aria-pressed': this.state.panels.context.collapsed ? 'false' : 'true'\\n      }\\n    });\\n    contextToggle.addEventListener('click', () => this.togglePanel('context'));\\n    \\n    const aiToggle = panelToggles.createEl('button', {\\n      cls: 'vp-panel-toggle',\\n      text: 'AI',\\n      attr: {\\n        'aria-label': 'Toggle AI panel',\\n        'aria-pressed': this.state.panels.ai.collapsed ? 'false' : 'true'\\n      }\\n    });\\n    aiToggle.addEventListener('click', () => this.togglePanel('ai'));\\n  }\\n\\n  private createThreePanelLayout(container: HTMLElement): void {\\n    // Context Panel (Left)\\n    const contextPanelEl = container.createEl('div', {\\n      cls: `vp-context-panel ${this.state.panels.context.collapsed ? 'vp-panel-collapsed' : ''}`,\\n      attr: { 'role': 'complementary', 'aria-label': 'Context Panel' }\\n    });\\n    contextPanelEl.style.width = `${this.state.panels.context.width}px`;\\n    \\n    // Main Panel (Center)\\n    const mainPanelEl = container.createEl('div', {\\n      cls: 'vp-main-panel',\\n      attr: { 'role': 'main', 'aria-label': 'Main Workspace' }\\n    });\\n    \\n    // AI Panel (Right)\\n    const aiPanelEl = container.createEl('div', {\\n      cls: `vp-ai-panel ${this.state.panels.ai.collapsed ? 'vp-panel-collapsed' : ''}`,\\n      attr: { 'role': 'complementary', 'aria-label': 'AI Panel' }\\n    });\\n    aiPanelEl.style.width = `${this.state.panels.ai.width}px`;\\n    \\n    // Add resize handles\\n    this.addResizeHandles(container);\\n  }\\n\\n  private addResizeHandles(container: HTMLElement): void {\\n    // Left resize handle (between context and main panels)\\n    const leftHandle = container.createEl('div', {\\n      cls: 'vp-resize-handle vp-resize-handle-left',\\n      attr: { 'aria-label': 'Resize context panel' }\\n    });\\n    \\n    // Right resize handle (between main and AI panels)\\n    const rightHandle = container.createEl('div', {\\n      cls: 'vp-resize-handle vp-resize-handle-right',\\n      attr: { 'aria-label': 'Resize AI panel' }\\n    });\\n    \\n    // Setup drag handlers\\n    this.setupResizeHandlers(leftHandle, 'context');\\n    this.setupResizeHandlers(rightHandle, 'ai');\\n  }\\n\\n  private setupResizeHandlers(handle: HTMLElement, panel: 'context' | 'ai'): void {\\n    let isDragging = false;\\n    let startX = 0;\\n    let startWidth = 0;\\n    \\n    handle.addEventListener('mousedown', (e) => {\\n      isDragging = true;\\n      startX = e.clientX;\\n      startWidth = this.state.panels[panel].width;\\n      \\n      document.addEventListener('mousemove', onMouseMove);\\n      document.addEventListener('mouseup', onMouseUp);\\n      \\n      // Add dragging class for visual feedback\\n      this.containerEl.addClass('vp-workspace-resizing');\\n    });\\n    \\n    const onMouseMove = (e: MouseEvent) => {\\n      if (!isDragging) return;\\n      \\n      const deltaX = panel === 'context' ? e.clientX - startX : startX - e.clientX;\\n      const newWidth = Math.max(200, Math.min(500, startWidth + deltaX));\\n      \\n      this.updatePanelWidth(panel, newWidth);\\n    };\\n    \\n    const onMouseUp = () => {\\n      isDragging = false;\\n      this.containerEl.removeClass('vp-workspace-resizing');\\n      \\n      document.removeEventListener('mousemove', onMouseMove);\\n      document.removeEventListener('mouseup', onMouseUp);\\n      \\n      // Save state\\n      this.saveState();\\n    };\\n  }\\n\\n  private async initializePanels(): Promise<void> {\\n    const contextPanelEl = this.containerEl.querySelector('.vp-context-panel') as HTMLElement;\\n    const mainPanelEl = this.containerEl.querySelector('.vp-main-panel') as HTMLElement;\\n    const aiPanelEl = this.containerEl.querySelector('.vp-ai-panel') as HTMLElement;\\n    \\n    // Initialize Context Panel\\n    if (contextPanelEl) {\\n      try {\\n        this.contextPanel = new ContextPanel(contextPanelEl, this.plugin, this);\\n        await this.contextPanel.onload();\\n        \\n        if (this.plugin.settings.debugMode) {\\n          console.log('ContextPanel initialized successfully');\\n        }\\n      } catch (error) {\\n        console.error('Failed to initialize ContextPanel:', error);\\n        // Fallback to placeholder\\n        contextPanelEl.createEl('div', { \\n          cls: 'vp-panel-placeholder',\\n          text: 'Context Panel - Failed to Load'\\n        });\\n      }\\n    }\\n    \\n    // Initialize Main Panel\\n    if (mainPanelEl) {\\n      try {\\n        this.mainPanel = new MainPanel(mainPanelEl, this.plugin, this);\\n        await this.mainPanel.onload();\\n        \\n        if (this.plugin.settings.debugMode) {\\n          console.log('MainPanel initialized successfully');\\n        }\\n      } catch (error) {\\n        console.error('Failed to initialize MainPanel:', error);\\n        // Fallback to placeholder\\n        this.createMainPanelPlaceholder(mainPanelEl);\\n      }\\n    }\\n    \\n    // Initialize AI Panel  \\n    if (aiPanelEl) {\\n      try {\\n        this.aiPanel = new AIPanel(aiPanelEl, this.plugin, this);\\n        await this.aiPanel.onload();\\n        \\n        if (this.plugin.settings.debugMode) {\\n          console.log('AIPanel initialized successfully');\\n        }\\n      } catch (error) {\\n        console.error('Failed to initialize AIPanel:', error);\\n        // Fallback to placeholder\\n        aiPanelEl.createEl('div', { \\n          cls: 'vp-panel-placeholder',\\n          text: 'AI Panel - Failed to Load'\\n        });\\n      }\\n    }\\n  }\\n\\n  private createMainPanelPlaceholder(mainPanelEl: HTMLElement): void {\\n    const modeContent = mainPanelEl.createEl('div', {\\n      cls: 'vp-main-panel-content',\\n      attr: { 'data-mode': this.state.mode }\\n    });\\n    \\n    const header = modeContent.createEl('div', { cls: 'vp-main-panel-header' });\\n    header.createEl('h2', { text: `${this.state.mode.charAt(0).toUpperCase() + this.state.mode.slice(1)} Mode` });\\n    \\n    const content = modeContent.createEl('div', { cls: 'vp-main-panel-body' });\\n    content.createEl('p', { text: `${this.state.mode} functionality will be integrated here.` });\\n    \\n    // Add mode-specific placeholders\\n    switch (this.state.mode) {\\n      case 'chat':\\n        content.createEl('div', { cls: 'vp-chat-placeholder', text: 'Chat interface integration pending' });\\n        break;\\n      case 'workflow':\\n        content.createEl('div', { cls: 'vp-workflow-placeholder', text: 'Workflow builder integration pending' });\\n        break;\\n      case 'explorer':\\n        content.createEl('div', { cls: 'vp-explorer-placeholder', text: 'Vault explorer integration pending' });\\n        break;\\n      case 'analytics':\\n        content.createEl('div', { cls: 'vp-analytics-placeholder', text: 'Analytics dashboard integration pending' });\\n        break;\\n    }\\n  }\\n\\n  private setupEventListeners(): void {\\n    // Listen for Obsidian workspace changes\\n    this.plugin.app.workspace.on('layout-change', () => {\\n      this.handleLayoutChange();\\n    });\\n    \\n    // Listen for theme changes\\n    this.plugin.app.workspace.on('css-change', () => {\\n      this.handleThemeChange();\\n    });\\n    \\n    // Listen for vault changes that might affect context\\n    this.plugin.app.vault.on('create', () => {\\n      this.events.trigger('vault-changed');\\n    });\\n    \\n    this.plugin.app.vault.on('delete', () => {\\n      this.events.trigger('vault-changed');\\n    });\\n    \\n    this.plugin.app.vault.on('rename', () => {\\n      this.events.trigger('vault-changed');\\n    });\\n  }\\n\\n  private setupKeyboardShortcuts(): void {\\n    if (!this.state.preferences.keyboardShortcutsEnabled) return;\\n    \\n    // Mode switching shortcuts (Cmd/Ctrl + 1-4)\\n    this.plugin.addCommand({\\n      id: 'switch-to-chat',\\n      name: 'Switch to Chat Mode',\\n      hotkeys: [{ modifiers: ['Mod'], key: '1' }],\\n      callback: () => this.switchMode('chat')\\n    });\\n    \\n    this.plugin.addCommand({\\n      id: 'switch-to-workflow',\\n      name: 'Switch to Workflow Mode',\\n      hotkeys: [{ modifiers: ['Mod'], key: '2' }],\\n      callback: () => this.switchMode('workflow')\\n    });\\n    \\n    this.plugin.addCommand({\\n      id: 'switch-to-explorer',\\n      name: 'Switch to Explorer Mode',\\n      hotkeys: [{ modifiers: ['Mod'], key: '3' }],\\n      callback: () => this.switchMode('explorer')\\n    });\\n    \\n    this.plugin.addCommand({\\n      id: 'switch-to-analytics',\\n      name: 'Switch to Analytics Mode',\\n      hotkeys: [{ modifiers: ['Mod'], key: '4' }],\\n      callback: () => this.switchMode('analytics')\\n    });\\n    \\n    // Panel toggle shortcuts\\n    this.plugin.addCommand({\\n      id: 'toggle-context-panel',\\n      name: 'Toggle Context Panel',\\n      hotkeys: [{ modifiers: ['Mod', 'Shift'], key: 'c' }],\\n      callback: () => this.togglePanel('context')\\n    });\\n    \\n    this.plugin.addCommand({\\n      id: 'toggle-ai-panel',\\n      name: 'Toggle AI Panel',\\n      hotkeys: [{ modifiers: ['Mod', 'Shift'], key: 'a' }],\\n      callback: () => this.togglePanel('ai')\\n    });\\n  }\\n\\n  private setupResizeObserver(): void {\\n    this.resizeObserver = new ResizeObserver((entries) => {\\n      for (const entry of entries) {\\n        if (entry.target === this.containerEl) {\\n          this.handleWorkspaceResize();\\n        }\\n      }\\n    });\\n    \\n    this.resizeObserver.observe(this.containerEl);\\n  }\\n\\n  // Public API Methods\\n\\n  public async switchMode(mode: WorkspaceMode): Promise<void> {\\n    if (this.state.mode === mode) return;\\n    \\n    const previousMode = this.state.mode;\\n    this.state.mode = mode;\\n    \\n    // Update mode buttons\\n    this.updateModeButtons();\\n    \\n    // Update main panel to new mode\\n    if (this.mainPanel) {\\n      await this.mainPanel.switchToMode(mode);\\n    } else {\\n      // Fallback: update placeholder content\\n      await this.updateMainPanelContent();\\n    }\\n    \\n    // Save state\\n    await this.saveState();\\n    \\n    // Emit event\\n    this.events.trigger('mode-changed', mode);\\n    \\n    if (this.plugin.settings.debugMode) {\\n      console.log(`Switched from ${previousMode} to ${mode} mode`);\\n    }\\n  }\\n\\n  public togglePanel(panel: 'context' | 'ai'): void {\\n    const isCollapsed = this.state.panels[panel].collapsed;\\n    this.state.panels[panel].collapsed = !isCollapsed;\\n    \\n    // Update DOM\\n    const panelEl = this.containerEl.querySelector(`.vp-${panel}-panel`) as HTMLElement;\\n    if (panelEl) {\\n      panelEl.toggleClass('vp-panel-collapsed', this.state.panels[panel].collapsed);\\n    }\\n    \\n    // Update toggle button\\n    const toggleButton = this.containerEl.querySelector(\\n      `.vp-panel-toggle[aria-label*=\\\"${panel}\\\"]`\\n    ) as HTMLButtonElement;\\n    if (toggleButton) {\\n      toggleButton.setAttribute('aria-pressed', isCollapsed ? 'true' : 'false');\\n    }\\n    \\n    // Save state\\n    this.saveState();\\n    \\n    // Emit event\\n    this.events.trigger('panel-toggled', panel, this.state.panels[panel].collapsed);\\n  }\\n\\n  public updatePanelWidth(panel: 'context' | 'ai', width: number): void {\\n    this.state.panels[panel].width = width;\\n    \\n    const panelEl = this.containerEl.querySelector(`.vp-${panel}-panel`) as HTMLElement;\\n    if (panelEl) {\\n      panelEl.style.width = `${width}px`;\\n    }\\n  }\\n\\n  public async updateState(newState: Partial<WorkspaceState>): Promise<void> {\\n    this.state = { ...this.state, ...newState };\\n    await this.applyState();\\n    await this.saveState();\\n    this.events.trigger('state-updated', newState);\\n  }\\n\\n  public getState(): Readonly<WorkspaceState> {\\n    return { ...this.state };\\n  }\\n\\n  public updateContextSources(sources: any[]): void {\\n    // Update main panel with new context sources\\n    if (this.mainPanel && typeof this.mainPanel.updateContext === 'function') {\\n      this.mainPanel.updateContext(sources);\\n    }\\n    \\n    // Emit context update event\\n    this.events.trigger('context-updated', sources);\\n  }\\n\\n  public getContextPanel(): ContextPanel | undefined {\\n    return this.contextPanel;\\n  }\\n\\n  public getMainPanel(): MainPanel | undefined {\\n    return this.mainPanel;\\n  }\\n\\n  public getAIPanel(): AIPanel | undefined {\\n    return this.aiPanel;\\n  }\\n\\n  public on<T extends keyof WorkspaceEvents>(event: T, callback: WorkspaceEvents[T]): void {\\n    this.events.on(event, callback as any);\\n  }\\n\\n  public off<T extends keyof WorkspaceEvents>(event: T, callback: WorkspaceEvents[T]): void {\\n    this.events.off(event, callback as any);\\n  }\\n\\n  // Private utility methods\\n\\n  private updateModeButtons(): void {\\n    const modeButtons = this.containerEl.querySelectorAll('.vp-mode-button');\\n    modeButtons.forEach((button) => {\\n      const mode = button.getAttribute('data-mode');\\n      const isActive = mode === this.state.mode;\\n      \\n      button.toggleClass('vp-mode-active', isActive);\\n      button.setAttribute('aria-selected', isActive ? 'true' : 'false');\\n    });\\n  }\\n\\n  private async updateMainPanelContent(): Promise<void> {\\n    const mainPanelEl = this.containerEl.querySelector('.vp-main-panel') as HTMLElement;\\n    if (mainPanelEl) {\\n      // Clear existing content\\n      mainPanelEl.empty();\\n      \\n      // Create new content for current mode\\n      this.createMainPanelPlaceholder(mainPanelEl);\\n    }\\n  }\\n\\n  private async applyState(): Promise<void> {\\n    // Apply panel states\\n    Object.entries(this.state.panels).forEach(([panelName, panelState]) => {\\n      const panelEl = this.containerEl.querySelector(`.vp-${panelName}-panel`) as HTMLElement;\\n      if (panelEl) {\\n        panelEl.toggleClass('vp-panel-collapsed', panelState.collapsed);\\n        panelEl.style.width = `${panelState.width}px`;\\n      }\\n    });\\n    \\n    // Update mode\\n    this.updateModeButtons();\\n    await this.updateMainPanelContent();\\n  }\\n\\n  private async loadState(): Promise<void> {\\n    try {\\n      const savedState = await this.plugin.loadData();\\n      if (savedState?.workspaceState) {\\n        this.state = { ...this.state, ...savedState.workspaceState };\\n      }\\n    } catch (error) {\\n      console.warn('Failed to load workspace state, using defaults:', error);\\n    }\\n  }\\n\\n  private async saveState(): Promise<void> {\\n    try {\\n      const pluginData = await this.plugin.loadData() || {};\\n      pluginData.workspaceState = this.state;\\n      await this.plugin.saveData(pluginData);\\n    } catch (error) {\\n      console.error('Failed to save workspace state:', error);\\n    }\\n  }\\n\\n  private handleLayoutChange(): void {\\n    // Respond to Obsidian layout changes\\n    this.handleWorkspaceResize();\\n  }\\n\\n  private handleThemeChange(): void {\\n    // Respond to theme changes by ensuring proper CSS class application\\n    this.containerEl.addClass('vp-workspace');\\n  }\\n\\n  private handleWorkspaceResize(): void {\\n    // Handle responsive behavior for mobile/small screens\\n    const containerWidth = this.containerEl.clientWidth;\\n    \\n    if (containerWidth < 768) {\\n      // Mobile mode: auto-collapse panels\\n      if (this.state.preferences.autoCollapsePanels) {\\n        this.state.panels.context.collapsed = true;\\n        this.state.panels.ai.collapsed = true;\\n        this.applyState();\\n      }\\n    }\\n  }\\n\\n  // Week 8: Integration testing methods\\n\\n  /**\\n   * Initialize integration tester\\n   */\\n  private initializeIntegrationTester(): void {\\n    if (!this.integrationTester) {\\n      this.integrationTester = new IntegrationTester(this.plugin, this);\\n      this.addChild(this.integrationTester);\\n    }\\n  }\\n\\n  /**\\n   * Run full integration test suite\\n   */\\n  async runIntegrationTests(): Promise<IntegrationTestSuite> {\\n    this.initializeIntegrationTester();\\n    \\n    if (!this.integrationTester) {\\n      throw new Error('Integration tester not initialized');\\n    }\\n    \\n    return await this.integrationTester.runFullTestSuite();\\n  }\\n\\n  /**\\n   * Export integration test results\\n   */\\n  async exportTestResults(): Promise<void> {\\n    if (!this.integrationTester) {\\n      throw new Error('No test results available. Run tests first.');\\n    }\\n    \\n    await this.integrationTester.exportTestResults();\\n  }\\n\\n  /**\\n   * Get workspace container for testing\\n   */\\n  public getWorkspaceContainer(): HTMLElement {\\n    return this.containerEl;\\n  }\\n\\n\\n  // Component lifecycle\\n  onunload(): void {\\n    // Clean up panel components\\n    if (this.contextPanel) {\\n      this.contextPanel.onunload();\\n      this.contextPanel = undefined;\\n    }\\n    \\n    if (this.mainPanel) {\\n      this.mainPanel.onunload();\\n      this.mainPanel = undefined;\\n    }\\n    \\n    if (this.aiPanel) {\\n      this.aiPanel.onunload();\\n      this.aiPanel = undefined;\\n    }\\n    \\n    // Clean up observers\\n    if (this.resizeObserver) {\\n      this.resizeObserver.disconnect();\\n    }\\n    \\n    // Clean up event listeners\\n    this.events.offref(this);\\n    \\n    // Save final state\\n    this.saveState().catch(console.error);\\n    \\n    super.onunload();\\n  }\\n}\"]}"}
