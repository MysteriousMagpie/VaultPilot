{"code":"export class EnvironmentDetector {\n    static detect() {\n        const info = {\n            platform: 'unknown',\n            hasFileSystem: false,\n            hasWebSocket: false,\n            hasHTTP: false,\n            capabilities: []\n        };\n        // Detect platform\n        if (typeof window !== 'undefined' && window.app && window.app.workspace) {\n            info.platform = 'obsidian';\n        }\n        else if (typeof window !== 'undefined') {\n            info.platform = 'browser';\n        }\n        else if (typeof globalThis.process !== 'undefined' && globalThis.process.versions && globalThis.process.versions.node) {\n            info.platform = 'node';\n        }\n        // Check capabilities\n        info.hasHTTP = typeof fetch !== 'undefined';\n        info.hasWebSocket = typeof WebSocket !== 'undefined';\n        info.hasFileSystem = typeof globalThis.require !== 'undefined' && info.platform === 'node';\n        // Add capabilities list\n        if (info.hasHTTP)\n            info.capabilities.push('http');\n        if (info.hasWebSocket)\n            info.capabilities.push('websocket');\n        if (info.hasFileSystem)\n            info.capabilities.push('filesystem');\n        return info;\n    }\n    static isObsidian() {\n        return this.detect().platform === 'obsidian';\n    }\n    static canUseFileSystem() {\n        return this.detect().hasFileSystem;\n    }\n    static canUseWebSocket() {\n        return this.detect().hasWebSocket;\n    }\n    static getOptimalTransport() {\n        const env = this.detect();\n        if (env.hasWebSocket)\n            return 'websocket';\n        if (env.hasHTTP)\n            return 'http';\n        if (env.hasFileSystem)\n            return 'filesystem';\n        throw new Error('No suitable transport available');\n    }\n}\n//# sourceMappingURL=EnvironmentDetector.js.map","references":[],"map":"{\"version\":3,\"file\":\"EnvironmentDetector.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/utils/EnvironmentDetector.ts\"],\"names\":[],\"mappings\":\"AAcA,MAAM,OAAO,mBAAmB;IAC9B,MAAM,CAAC,MAAM;QACX,MAAM,IAAI,GAAoB;YAC5B,QAAQ,EAAE,SAAS;YACnB,aAAa,EAAE,KAAK;YACpB,YAAY,EAAE,KAAK;YACnB,OAAO,EAAE,KAAK;YACd,YAAY,EAAE,EAAE;SACjB,CAAC;QAEF,kBAAkB;QAClB,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC,GAAG,IAAI,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC;YACxE,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;QAC7B,CAAC;aAAM,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE,CAAC;YACzC,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;QAC5B,CAAC;aAAM,IAAI,OAAQ,UAAkB,CAAC,OAAO,KAAK,WAAW,IAAK,UAAkB,CAAC,OAAO,CAAC,QAAQ,IAAK,UAAkB,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnJ,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;QACzB,CAAC;QAED,qBAAqB;QACrB,IAAI,CAAC,OAAO,GAAG,OAAO,KAAK,KAAK,WAAW,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,OAAO,SAAS,KAAK,WAAW,CAAC;QACrD,IAAI,CAAC,aAAa,GAAG,OAAQ,UAAkB,CAAC,OAAO,KAAK,WAAW,IAAI,IAAI,CAAC,QAAQ,KAAK,MAAM,CAAC;QAEpG,wBAAwB;QACxB,IAAI,IAAI,CAAC,OAAO;YAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,IAAI,CAAC,YAAY;YAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC3D,IAAI,IAAI,CAAC,aAAa;YAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE7D,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,UAAU;QACf,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,QAAQ,KAAK,UAAU,CAAC;IAC/C,CAAC;IAED,MAAM,CAAC,gBAAgB;QACrB,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,aAAa,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,eAAe;QACpB,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC,YAAY,CAAC;IACpC,CAAC;IAED,MAAM,CAAC,mBAAmB;QACxB,MAAM,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;QAE1B,IAAI,GAAG,CAAC,YAAY;YAAE,OAAO,WAAW,CAAC;QACzC,IAAI,GAAG,CAAC,OAAO;YAAE,OAAO,MAAM,CAAC;QAC/B,IAAI,GAAG,CAAC,aAAa;YAAE,OAAO,YAAY,CAAC;QAE3C,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;IACrD,CAAC;CACF\",\"sourcesContent\":[\"export interface EnvironmentInfo {\\n  platform: 'node' | 'browser' | 'obsidian' | 'unknown';\\n  hasFileSystem: boolean;\\n  hasWebSocket: boolean;\\n  hasHTTP: boolean;\\n  capabilities: string[];\\n}\\n\\ndeclare global {\\n  interface Window {\\n    app?: any;\\n  }\\n}\\n\\nexport class EnvironmentDetector {\\n  static detect(): EnvironmentInfo {\\n    const info: EnvironmentInfo = {\\n      platform: 'unknown',\\n      hasFileSystem: false,\\n      hasWebSocket: false,\\n      hasHTTP: false,\\n      capabilities: []\\n    };\\n\\n    // Detect platform\\n    if (typeof window !== 'undefined' && window.app && window.app.workspace) {\\n      info.platform = 'obsidian';\\n    } else if (typeof window !== 'undefined') {\\n      info.platform = 'browser';\\n    } else if (typeof (globalThis as any).process !== 'undefined' && (globalThis as any).process.versions && (globalThis as any).process.versions.node) {\\n      info.platform = 'node';\\n    }\\n\\n    // Check capabilities\\n    info.hasHTTP = typeof fetch !== 'undefined';\\n    info.hasWebSocket = typeof WebSocket !== 'undefined';\\n    info.hasFileSystem = typeof (globalThis as any).require !== 'undefined' && info.platform === 'node';\\n\\n    // Add capabilities list\\n    if (info.hasHTTP) info.capabilities.push('http');\\n    if (info.hasWebSocket) info.capabilities.push('websocket');\\n    if (info.hasFileSystem) info.capabilities.push('filesystem');\\n\\n    return info;\\n  }\\n\\n  static isObsidian(): boolean {\\n    return this.detect().platform === 'obsidian';\\n  }\\n\\n  static canUseFileSystem(): boolean {\\n    return this.detect().hasFileSystem;\\n  }\\n\\n  static canUseWebSocket(): boolean {\\n    return this.detect().hasWebSocket;\\n  }\\n\\n  static getOptimalTransport(): 'http' | 'websocket' | 'filesystem' {\\n    const env = this.detect();\\n    \\n    if (env.hasWebSocket) return 'websocket';\\n    if (env.hasHTTP) return 'http';\\n    if (env.hasFileSystem) return 'filesystem';\\n    \\n    throw new Error('No suitable transport available');\\n  }\\n}\\n\"]}"}
