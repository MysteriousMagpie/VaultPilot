{"code":"/**\n * VaultPilot Button Component\n *\n * Accessible, themeable button component that integrates with the design system\n * and provides consistent interaction patterns across the workspace.\n */\nimport { Component, setIcon } from 'obsidian';\nexport class VPButton extends Component {\n    constructor(containerEl, props) {\n        super();\n        this.props = Object.assign(Object.assign({}, this.getDefaultProps()), props);\n        this.element = this.createElement(containerEl);\n        this.setupEventListeners();\n        this.applyStyles();\n    }\n    getDefaultProps() {\n        return {\n            variant: 'primary',\n            size: 'md',\n            disabled: false,\n            loading: false,\n            iconPosition: 'left',\n            fullWidth: false\n        };\n    }\n    createElement(containerEl) {\n        const button = containerEl.createEl('button', {\n            cls: this.getButtonClasses(),\n            attr: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({ type: 'button' }, (this.props.ariaLabel && { 'aria-label': this.props.ariaLabel })), (this.props.ariaDescribedBy && { 'aria-describedby': this.props.ariaDescribedBy })), (this.props.disabled || this.props.loading ? { 'disabled': 'true' } : {})), (this.props.variant && { 'data-variant': this.props.variant })), (this.props.size && { 'data-size': this.props.size })), { 'data-loading': this.props.loading ? 'true' : 'false' })\n        });\n        this.createButtonContent(button);\n        return button;\n    }\n    createButtonContent(button) {\n        // Create loading indicator (hidden by default)\n        this.loadingElement = button.createEl('span', {\n            cls: 'vp-button-loading',\n            attr: { 'aria-hidden': 'true' }\n        });\n        // Create content container\n        const contentContainer = button.createEl('span', {\n            cls: 'vp-button-content'\n        });\n        // Add icon (left side)\n        if (this.props.icon && this.props.iconPosition === 'left') {\n            this.iconElement = contentContainer.createEl('span', {\n                cls: 'vp-button-icon vp-button-icon-left',\n                attr: { 'aria-hidden': 'true' }\n            });\n            setIcon(this.iconElement, this.props.icon);\n        }\n        // Add text content\n        if (this.props.children) {\n            this.textElement = contentContainer.createEl('span', {\n                cls: 'vp-button-text',\n                text: this.props.children\n            });\n        }\n        // Add icon (right side)\n        if (this.props.icon && this.props.iconPosition === 'right') {\n            this.iconElement = contentContainer.createEl('span', {\n                cls: 'vp-button-icon vp-button-icon-right',\n                attr: { 'aria-hidden': 'true' }\n            });\n            setIcon(this.iconElement, this.props.icon);\n        }\n    }\n    getButtonClasses() {\n        const classes = [\n            'vp-button',\n            `vp-button-${this.props.variant}`,\n            `vp-button-${this.props.size}`\n        ];\n        if (this.props.disabled)\n            classes.push('vp-button-disabled');\n        if (this.props.loading)\n            classes.push('vp-button-loading');\n        if (this.props.fullWidth)\n            classes.push('vp-button-full-width');\n        if (this.props.icon && !this.props.children)\n            classes.push('vp-button-icon-only');\n        if (this.props.className)\n            classes.push(this.props.className);\n        return classes.join(' ');\n    }\n    setupEventListeners() {\n        // Click handler\n        this.element.addEventListener('click', (event) => {\n            var _a, _b;\n            if (this.props.disabled || this.props.loading) {\n                event.preventDefault();\n                return;\n            }\n            // Add click animation\n            this.element.addClass('vp-button-clicked');\n            setTimeout(() => this.element.removeClass('vp-button-clicked'), 150);\n            (_b = (_a = this.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n        });\n        // Keyboard handler\n        this.element.addEventListener('keydown', (event) => {\n            var _a, _b;\n            if (this.props.disabled || this.props.loading) {\n                event.preventDefault();\n                return;\n            }\n            // Handle Enter and Space key presses\n            if (event.key === 'Enter' || event.key === ' ') {\n                event.preventDefault();\n                this.element.click();\n            }\n            (_b = (_a = this.props).onKeyDown) === null || _b === void 0 ? void 0 : _b.call(_a, event);\n        });\n        // Focus handlers for accessibility\n        this.element.addEventListener('focus', () => {\n            this.element.addClass('vp-button-focused');\n        });\n        this.element.addEventListener('blur', () => {\n            this.element.removeClass('vp-button-focused');\n        });\n        // Mouse interaction handlers\n        this.element.addEventListener('mouseenter', () => {\n            if (!this.props.disabled && !this.props.loading) {\n                this.element.addClass('vp-button-hovered');\n            }\n        });\n        this.element.addEventListener('mouseleave', () => {\n            this.element.removeClass('vp-button-hovered');\n        });\n        this.element.addEventListener('mousedown', () => {\n            if (!this.props.disabled && !this.props.loading) {\n                this.element.addClass('vp-button-pressed');\n            }\n        });\n        this.element.addEventListener('mouseup', () => {\n            this.element.removeClass('vp-button-pressed');\n        });\n    }\n    applyStyles() {\n        // Styles are primarily handled through CSS classes\n        // This method can be used for dynamic style applications\n        if (this.props.fullWidth) {\n            this.element.style.width = '100%';\n        }\n    }\n    // Public API methods\n    updateProps(newProps) {\n        const oldProps = Object.assign({}, this.props);\n        this.props = Object.assign(Object.assign({}, this.props), newProps);\n        // Update classes\n        this.element.className = this.getButtonClasses();\n        // Update attributes\n        if (newProps.disabled !== undefined) {\n            this.element.toggleAttribute('disabled', this.props.disabled);\n        }\n        if (newProps.loading !== undefined) {\n            this.element.setAttribute('data-loading', this.props.loading ? 'true' : 'false');\n            this.element.toggleAttribute('disabled', this.props.disabled || this.props.loading);\n        }\n        if (newProps.ariaLabel !== undefined) {\n            if (this.props.ariaLabel) {\n                this.element.setAttribute('aria-label', this.props.ariaLabel);\n            }\n            else {\n                this.element.removeAttribute('aria-label');\n            }\n        }\n        if (newProps.ariaDescribedBy !== undefined) {\n            if (this.props.ariaDescribedBy) {\n                this.element.setAttribute('aria-describedby', this.props.ariaDescribedBy);\n            }\n            else {\n                this.element.removeAttribute('aria-describedby');\n            }\n        }\n        // Update content if changed\n        if (newProps.children !== oldProps.children && this.textElement) {\n            this.textElement.textContent = this.props.children || '';\n        }\n        // Update icon if changed\n        if (newProps.icon !== oldProps.icon) {\n            if (this.iconElement) {\n                this.iconElement.empty();\n                if (this.props.icon) {\n                    setIcon(this.iconElement, this.props.icon);\n                }\n            }\n            else if (this.props.icon) {\n                // Create icon element if it didn't exist before\n                this.recreateContent();\n            }\n        }\n        // Apply styles\n        this.applyStyles();\n    }\n    recreateContent() {\n        // Clear existing content\n        this.element.empty();\n        // Recreate content with new props\n        this.createButtonContent(this.element);\n    }\n    setLoading(loading) {\n        this.updateProps({ loading });\n    }\n    setDisabled(disabled) {\n        this.updateProps({ disabled });\n    }\n    setText(text) {\n        this.updateProps({ children: text });\n    }\n    setIcon(icon) {\n        this.updateProps({ icon });\n    }\n    focus() {\n        this.element.focus();\n    }\n    blur() {\n        this.element.blur();\n    }\n    click() {\n        this.element.click();\n    }\n    getElement() {\n        return this.element;\n    }\n    getProps() {\n        return Object.assign({}, this.props);\n    }\n    // Component lifecycle\n    onunload() {\n        // Remove event listeners (handled automatically by DOM removal)\n        // Clean up any timers or intervals if needed\n        super.onunload();\n    }\n}\n// Utility function for creating buttons quickly\nexport function createButton(containerEl, props) {\n    return new VPButton(containerEl, props);\n}\n// Predefined button configurations\nexport const ButtonPresets = {\n    primary: (text, onClick) => ({\n        variant: 'primary',\n        children: text,\n        onClick\n    }),\n    secondary: (text, onClick) => ({\n        variant: 'secondary',\n        children: text,\n        onClick\n    }),\n    danger: (text, onClick) => ({\n        variant: 'danger',\n        children: text,\n        onClick\n    }),\n    iconOnly: (icon, ariaLabel, onClick) => ({\n        variant: 'secondary',\n        size: 'md',\n        icon,\n        ariaLabel,\n        onClick\n    }),\n    loading: (text) => ({\n        variant: 'primary',\n        children: text,\n        loading: true,\n        disabled: true\n    })\n};\n//# sourceMappingURL=Button.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts"],"map":"{\"version\":3,\"file\":\"Button.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../../src/design-system/components/core/Button.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * VaultPilot Button Component\\n * \\n * Accessible, themeable button component that integrates with the design system\\n * and provides consistent interaction patterns across the workspace.\\n */\\n\\nimport { Component, setIcon } from 'obsidian';\\n\\nexport interface ButtonProps {\\n  variant?: 'primary' | 'secondary' | 'tertiary' | 'danger';\\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl';\\n  disabled?: boolean;\\n  loading?: boolean;\\n  icon?: string;\\n  iconPosition?: 'left' | 'right';\\n  onClick?: (event: MouseEvent) => void;\\n  onKeyDown?: (event: KeyboardEvent) => void;\\n  ariaLabel?: string;\\n  ariaDescribedBy?: string;\\n  className?: string;\\n  children?: string;\\n  fullWidth?: boolean;\\n}\\n\\nexport class VPButton extends Component {\\n  private props: ButtonProps;\\n  private element: HTMLButtonElement;\\n  private iconElement?: HTMLElement;\\n  private textElement?: HTMLElement;\\n  private loadingElement?: HTMLElement;\\n\\n  constructor(containerEl: HTMLElement, props: ButtonProps) {\\n    super();\\n    this.props = { ...this.getDefaultProps(), ...props };\\n    this.element = this.createElement(containerEl);\\n    this.setupEventListeners();\\n    this.applyStyles();\\n  }\\n\\n  private getDefaultProps(): Partial<ButtonProps> {\\n    return {\\n      variant: 'primary',\\n      size: 'md',\\n      disabled: false,\\n      loading: false,\\n      iconPosition: 'left',\\n      fullWidth: false\\n    };\\n  }\\n\\n  private createElement(containerEl: HTMLElement): HTMLButtonElement {\\n    const button = containerEl.createEl('button', {\\n      cls: this.getButtonClasses(),\\n      attr: {\\n        type: 'button',\\n        ...(this.props.ariaLabel && { 'aria-label': this.props.ariaLabel }),\\n        ...(this.props.ariaDescribedBy && { 'aria-describedby': this.props.ariaDescribedBy }),\\n        ...(this.props.disabled || this.props.loading ? { 'disabled': 'true' } : {}),\\n        ...(this.props.variant && { 'data-variant': this.props.variant }),\\n        ...(this.props.size && { 'data-size': this.props.size }),\\n        'data-loading': this.props.loading ? 'true' : 'false'\\n      }\\n    });\\n\\n    this.createButtonContent(button);\\n    return button;\\n  }\\n\\n  private createButtonContent(button: HTMLButtonElement): void {\\n    // Create loading indicator (hidden by default)\\n    this.loadingElement = button.createEl('span', {\\n      cls: 'vp-button-loading',\\n      attr: { 'aria-hidden': 'true' }\\n    });\\n\\n    // Create content container\\n    const contentContainer = button.createEl('span', {\\n      cls: 'vp-button-content'\\n    });\\n\\n    // Add icon (left side)\\n    if (this.props.icon && this.props.iconPosition === 'left') {\\n      this.iconElement = contentContainer.createEl('span', {\\n        cls: 'vp-button-icon vp-button-icon-left',\\n        attr: { 'aria-hidden': 'true' }\\n      });\\n      setIcon(this.iconElement, this.props.icon);\\n    }\\n\\n    // Add text content\\n    if (this.props.children) {\\n      this.textElement = contentContainer.createEl('span', {\\n        cls: 'vp-button-text',\\n        text: this.props.children\\n      });\\n    }\\n\\n    // Add icon (right side)\\n    if (this.props.icon && this.props.iconPosition === 'right') {\\n      this.iconElement = contentContainer.createEl('span', {\\n        cls: 'vp-button-icon vp-button-icon-right',\\n        attr: { 'aria-hidden': 'true' }\\n      });\\n      setIcon(this.iconElement, this.props.icon);\\n    }\\n  }\\n\\n  private getButtonClasses(): string {\\n    const classes = [\\n      'vp-button',\\n      `vp-button-${this.props.variant}`,\\n      `vp-button-${this.props.size}`\\n    ];\\n\\n    if (this.props.disabled) classes.push('vp-button-disabled');\\n    if (this.props.loading) classes.push('vp-button-loading');\\n    if (this.props.fullWidth) classes.push('vp-button-full-width');\\n    if (this.props.icon && !this.props.children) classes.push('vp-button-icon-only');\\n    if (this.props.className) classes.push(this.props.className);\\n\\n    return classes.join(' ');\\n  }\\n\\n  private setupEventListeners(): void {\\n    // Click handler\\n    this.element.addEventListener('click', (event: MouseEvent) => {\\n      if (this.props.disabled || this.props.loading) {\\n        event.preventDefault();\\n        return;\\n      }\\n      \\n      // Add click animation\\n      this.element.addClass('vp-button-clicked');\\n      setTimeout(() => this.element.removeClass('vp-button-clicked'), 150);\\n      \\n      this.props.onClick?.(event);\\n    });\\n\\n    // Keyboard handler\\n    this.element.addEventListener('keydown', (event: KeyboardEvent) => {\\n      if (this.props.disabled || this.props.loading) {\\n        event.preventDefault();\\n        return;\\n      }\\n\\n      // Handle Enter and Space key presses\\n      if (event.key === 'Enter' || event.key === ' ') {\\n        event.preventDefault();\\n        this.element.click();\\n      }\\n\\n      this.props.onKeyDown?.(event);\\n    });\\n\\n    // Focus handlers for accessibility\\n    this.element.addEventListener('focus', () => {\\n      this.element.addClass('vp-button-focused');\\n    });\\n\\n    this.element.addEventListener('blur', () => {\\n      this.element.removeClass('vp-button-focused');\\n    });\\n\\n    // Mouse interaction handlers\\n    this.element.addEventListener('mouseenter', () => {\\n      if (!this.props.disabled && !this.props.loading) {\\n        this.element.addClass('vp-button-hovered');\\n      }\\n    });\\n\\n    this.element.addEventListener('mouseleave', () => {\\n      this.element.removeClass('vp-button-hovered');\\n    });\\n\\n    this.element.addEventListener('mousedown', () => {\\n      if (!this.props.disabled && !this.props.loading) {\\n        this.element.addClass('vp-button-pressed');\\n      }\\n    });\\n\\n    this.element.addEventListener('mouseup', () => {\\n      this.element.removeClass('vp-button-pressed');\\n    });\\n  }\\n\\n  private applyStyles(): void {\\n    // Styles are primarily handled through CSS classes\\n    // This method can be used for dynamic style applications\\n    \\n    if (this.props.fullWidth) {\\n      this.element.style.width = '100%';\\n    }\\n  }\\n\\n  // Public API methods\\n  public updateProps(newProps: Partial<ButtonProps>): void {\\n    const oldProps = { ...this.props };\\n    this.props = { ...this.props, ...newProps };\\n\\n    // Update classes\\n    this.element.className = this.getButtonClasses();\\n\\n    // Update attributes\\n    if (newProps.disabled !== undefined) {\\n      this.element.toggleAttribute('disabled', this.props.disabled);\\n    }\\n\\n    if (newProps.loading !== undefined) {\\n      this.element.setAttribute('data-loading', this.props.loading ? 'true' : 'false');\\n      this.element.toggleAttribute('disabled', this.props.disabled || this.props.loading);\\n    }\\n\\n    if (newProps.ariaLabel !== undefined) {\\n      if (this.props.ariaLabel) {\\n        this.element.setAttribute('aria-label', this.props.ariaLabel);\\n      } else {\\n        this.element.removeAttribute('aria-label');\\n      }\\n    }\\n\\n    if (newProps.ariaDescribedBy !== undefined) {\\n      if (this.props.ariaDescribedBy) {\\n        this.element.setAttribute('aria-describedby', this.props.ariaDescribedBy);\\n      } else {\\n        this.element.removeAttribute('aria-describedby');\\n      }\\n    }\\n\\n    // Update content if changed\\n    if (newProps.children !== oldProps.children && this.textElement) {\\n      this.textElement.textContent = this.props.children || '';\\n    }\\n\\n    // Update icon if changed\\n    if (newProps.icon !== oldProps.icon) {\\n      if (this.iconElement) {\\n        this.iconElement.empty();\\n        if (this.props.icon) {\\n          setIcon(this.iconElement, this.props.icon);\\n        }\\n      } else if (this.props.icon) {\\n        // Create icon element if it didn't exist before\\n        this.recreateContent();\\n      }\\n    }\\n\\n    // Apply styles\\n    this.applyStyles();\\n  }\\n\\n  private recreateContent(): void {\\n    // Clear existing content\\n    this.element.empty();\\n    \\n    // Recreate content with new props\\n    this.createButtonContent(this.element);\\n  }\\n\\n  public setLoading(loading: boolean): void {\\n    this.updateProps({ loading });\\n  }\\n\\n  public setDisabled(disabled: boolean): void {\\n    this.updateProps({ disabled });\\n  }\\n\\n  public setText(text: string): void {\\n    this.updateProps({ children: text });\\n  }\\n\\n  public setIcon(icon: string): void {\\n    this.updateProps({ icon });\\n  }\\n\\n  public focus(): void {\\n    this.element.focus();\\n  }\\n\\n  public blur(): void {\\n    this.element.blur();\\n  }\\n\\n  public click(): void {\\n    this.element.click();\\n  }\\n\\n  public getElement(): HTMLButtonElement {\\n    return this.element;\\n  }\\n\\n  public getProps(): Readonly<ButtonProps> {\\n    return { ...this.props };\\n  }\\n\\n  // Component lifecycle\\n  onunload(): void {\\n    // Remove event listeners (handled automatically by DOM removal)\\n    // Clean up any timers or intervals if needed\\n    super.onunload();\\n  }\\n}\\n\\n// Utility function for creating buttons quickly\\nexport function createButton(\\n  containerEl: HTMLElement,\\n  props: ButtonProps\\n): VPButton {\\n  return new VPButton(containerEl, props);\\n}\\n\\n// Predefined button configurations\\nexport const ButtonPresets = {\\n  primary: (text: string, onClick: () => void): ButtonProps => ({\\n    variant: 'primary',\\n    children: text,\\n    onClick\\n  }),\\n\\n  secondary: (text: string, onClick: () => void): ButtonProps => ({\\n    variant: 'secondary',\\n    children: text,\\n    onClick\\n  }),\\n\\n  danger: (text: string, onClick: () => void): ButtonProps => ({\\n    variant: 'danger',\\n    children: text,\\n    onClick\\n  }),\\n\\n  iconOnly: (icon: string, ariaLabel: string, onClick: () => void): ButtonProps => ({\\n    variant: 'secondary',\\n    size: 'md',\\n    icon,\\n    ariaLabel,\\n    onClick\\n  }),\\n\\n  loading: (text: string): ButtonProps => ({\\n    variant: 'primary',\\n    children: text,\\n    loading: true,\\n    disabled: true\\n  })\\n} as const;\"]}"}
