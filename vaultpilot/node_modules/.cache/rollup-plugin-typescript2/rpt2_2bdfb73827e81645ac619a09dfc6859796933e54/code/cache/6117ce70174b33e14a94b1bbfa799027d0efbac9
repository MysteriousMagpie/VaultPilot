{"code":"/**\n * VaultPilot Enhanced Development Chat Modal\n *\n * Provides an enhanced chat interface with full development context awareness,\n * dev-pipe transport, and intelligent conversation features.\n */\nimport { __awaiter } from \"tslib\";\nimport { Modal, Setting } from 'obsidian';\nexport class ConversationDevModal extends Modal {\n    constructor(app, plugin, conversationDevService) {\n        super(app);\n        this.messages = [];\n        this.plugin = plugin;\n        this.conversationDevService = conversationDevService;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.empty();\n        // Set modal title and styling\n        this.titleEl.setText('Enhanced Development Chat');\n        this.modalEl.addClass('vp-conversation-dev-modal');\n        // Create header with status and options\n        this.createHeader();\n        // Create messages area\n        this.createMessagesArea();\n        // Create input area\n        this.createInputArea();\n        // Initialize with welcome message\n        this.addSystemMessage('Welcome to Enhanced Development Chat! I have full context awareness of your project, ' +\n            'including active files, project structure, and development environment. ' +\n            'Ask me anything about your code, architecture, or development workflow.');\n        // Show current context summary\n        this.showContextSummary();\n    }\n    createHeader() {\n        const headerEl = this.contentEl.createEl('div', { cls: 'vp-dev-chat-header' });\n        // Status indicator\n        this.statusContainer = headerEl.createEl('div', { cls: 'vp-dev-chat-status' });\n        this.updateStatus();\n        // Options\n        const optionsEl = headerEl.createEl('div', { cls: 'vp-dev-chat-options' });\n        new Setting(optionsEl)\n            .setName('Conversation Type')\n            .setDesc('Set the type of development conversation')\n            .addDropdown(dropdown => dropdown\n            .addOption('general', 'General Discussion')\n            .addOption('code_review', 'Code Review')\n            .addOption('debugging', 'Debugging Session')\n            .addOption('architecture', 'Architecture Planning')\n            .addOption('documentation', 'Documentation Help')\n            .setValue('general')\n            .onChange(value => {\n            this.updateConversationType(value);\n        }));\n        // Context refresh button\n        const refreshBtn = optionsEl.createEl('button', {\n            text: 'üîÑ Refresh Context',\n            cls: 'mod-cta'\n        });\n        refreshBtn.addEventListener('click', () => this.refreshContext());\n        // Insights button\n        const insightsBtn = optionsEl.createEl('button', {\n            text: 'üí° Show Insights',\n            cls: 'mod-cta'\n        });\n        insightsBtn.addEventListener('click', () => this.showInsights());\n    }\n    createMessagesArea() {\n        this.messagesContainer = this.contentEl.createEl('div', {\n            cls: 'vp-dev-chat-messages'\n        });\n    }\n    createInputArea() {\n        this.inputContainer = this.contentEl.createEl('div', { cls: 'vp-dev-chat-input' });\n        const inputWrapper = this.inputContainer.createEl('div', { cls: 'vp-input-wrapper' });\n        const textarea = inputWrapper.createEl('textarea', {\n            placeholder: 'Ask me about your code, architecture, or development workflow...',\n            cls: 'vp-chat-input'\n        });\n        const sendBtn = inputWrapper.createEl('button', {\n            text: 'Send',\n            cls: 'mod-cta vp-send-btn'\n        });\n        // Event handlers\n        textarea.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                this.sendMessage(textarea.value);\n                textarea.value = '';\n            }\n        });\n        sendBtn.addEventListener('click', () => {\n            this.sendMessage(textarea.value);\n            textarea.value = '';\n        });\n        // Add quick action buttons\n        this.createQuickActions();\n    }\n    createQuickActions() {\n        const actionsEl = this.inputContainer.createEl('div', { cls: 'vp-quick-actions' });\n        actionsEl.createEl('span', { text: 'Quick Actions:', cls: 'vp-quick-label' });\n        const actions = [\n            { text: 'üîç Review Active File', action: 'review-active-file' },\n            { text: 'üèóÔ∏è Analyze Architecture', action: 'analyze-architecture' },\n            { text: 'üêõ Debug Current Code', action: 'debug-code' },\n            { text: 'üìö Generate Docs', action: 'generate-docs' },\n            { text: 'üß™ Suggest Tests', action: 'suggest-tests' }\n        ];\n        actions.forEach(({ text, action }) => {\n            const btn = actionsEl.createEl('button', {\n                text,\n                cls: 'vp-quick-action-btn'\n            });\n            btn.addEventListener('click', () => this.executeQuickAction(action));\n        });\n    }\n    updateStatus() {\n        if (!this.statusContainer)\n            return;\n        const status = this.conversationDevService.getStatus();\n        const isReady = status.initialized && status.contextServiceReady;\n        this.statusContainer.empty();\n        const statusIcon = this.statusContainer.createEl('span', {\n            cls: `vp-status-icon ${isReady ? 'ready' : 'not-ready'}`\n        });\n        statusIcon.textContent = isReady ? 'üü¢' : 'üü°';\n        const statusText = this.statusContainer.createEl('span', { cls: 'vp-status-text' });\n        statusText.textContent = isReady ? 'Enhanced Dev Chat Ready' : 'Initializing...';\n        if (status.devPipeReady) {\n            const devPipeIcon = this.statusContainer.createEl('span', {\n                cls: 'vp-devpipe-icon',\n                text: 'üöÄ'\n            });\n            devPipeIcon.title = 'DevPipe Transport Active';\n        }\n    }\n    showContextSummary() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const insights = yield this.conversationDevService.getConversationInsights();\n                let contextInfo = `üìã **Current Context:**\\n`;\n                contextInfo += `‚Ä¢ Relevance Score: ${Math.round(insights.contextRelevance * 100)}%\\n`;\n                contextInfo += `‚Ä¢ Project Status: ${insights.projectStatus}\\n`;\n                if (insights.suggestedActions.length > 0) {\n                    contextInfo += `‚Ä¢ Suggested Actions: ${insights.suggestedActions.slice(0, 3).join(', ')}`;\n                }\n                this.addSystemMessage(contextInfo);\n            }\n            catch (error) {\n                console.error('Failed to show context summary:', error);\n            }\n        });\n    }\n    sendMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!message.trim())\n                return;\n            // Add user message to UI\n            this.addMessage('user', message);\n            // Show thinking indicator\n            const thinkingEl = this.addMessage('assistant', 'ü§î Thinking...');\n            try {\n                // Send via conversation dev service with enhanced context\n                const response = yield this.conversationDevService.chat(message, {\n                    conversation_id: this.currentConversationId,\n                    conversation_type: this.getSelectedConversationType()\n                });\n                // Remove thinking indicator\n                thinkingEl.remove();\n                if (response.success && response.data) {\n                    this.addMessage('assistant', response.data.response);\n                    this.currentConversationId = response.data.conversation_id;\n                }\n                else {\n                    this.addMessage('assistant', `‚ùå Error: ${response.error || 'Unknown error'}`);\n                }\n            }\n            catch (error) {\n                thinkingEl.remove();\n                this.addMessage('assistant', `‚ùå Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n            // Update status after conversation\n            this.updateStatus();\n        });\n    }\n    executeQuickAction(action) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const actionMessages = {\n                'review-active-file': 'Please review my currently active file and provide feedback on code quality, potential improvements, and best practices.',\n                'analyze-architecture': 'Analyze the overall architecture of my project. What patterns do you see? What improvements would you suggest?',\n                'debug-code': 'Help me debug any issues in my current code. Look for potential bugs, edge cases, or logic errors.',\n                'generate-docs': 'Generate comprehensive documentation for my current file or project. Include usage examples and API documentation.',\n                'suggest-tests': 'Suggest test cases for my current code. What edge cases should I test? What testing patterns would work best?'\n            };\n            const message = actionMessages[action];\n            if (message) {\n                yield this.sendMessage(message);\n            }\n        });\n    }\n    addMessage(type, content) {\n        const messageEl = this.messagesContainer.createEl('div', {\n            cls: `vp-message vp-message-${type}`\n        });\n        const avatarEl = messageEl.createEl('div', { cls: 'vp-message-avatar' });\n        avatarEl.textContent = type === 'user' ? 'üë§' : type === 'assistant' ? 'ü§ñ' : '‚ÑπÔ∏è';\n        const contentEl = messageEl.createEl('div', { cls: 'vp-message-content' });\n        // Handle markdown-like formatting\n        const formattedContent = this.formatMessageContent(content);\n        contentEl.innerHTML = formattedContent;\n        const timestampEl = messageEl.createEl('div', { cls: 'vp-message-timestamp' });\n        timestampEl.textContent = new Date().toLocaleTimeString();\n        // Scroll to bottom\n        this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;\n        // Store message\n        this.messages.push({ type, content, timestamp: new Date() });\n        return messageEl;\n    }\n    addSystemMessage(content) {\n        return this.addMessage('system', content);\n    }\n    formatMessageContent(content) {\n        // Basic markdown-like formatting\n        return content\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n            .replace(/`(.*?)`/g, '<code>$1</code>')\n            .replace(/\\n/g, '<br>');\n    }\n    refreshContext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.conversationDevService.clearContextCache();\n            this.addSystemMessage('üîÑ Context refreshed! I now have the latest information about your project.');\n            yield this.showContextSummary();\n        });\n    }\n    showInsights() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const insights = yield this.conversationDevService.getConversationInsights();\n                let insightsText = 'üí° **Development Insights:**\\n\\n';\n                insightsText += `**Context Relevance:** ${Math.round(insights.contextRelevance * 100)}%\\n`;\n                insightsText += `**Project Status:** ${insights.projectStatus}\\n\\n`;\n                if (insights.recommendations.length > 0) {\n                    insightsText += '**Recommendations:**\\n';\n                    insights.recommendations.forEach(rec => {\n                        insightsText += `‚Ä¢ ${rec}\\n`;\n                    });\n                    insightsText += '\\n';\n                }\n                if (insights.suggestedActions.length > 0) {\n                    insightsText += '**Suggested Actions:**\\n';\n                    insights.suggestedActions.forEach(action => {\n                        insightsText += `‚Ä¢ ${action}\\n`;\n                    });\n                }\n                this.addSystemMessage(insightsText);\n            }\n            catch (error) {\n                this.addSystemMessage('‚ùå Failed to generate insights. Please try again.');\n            }\n        });\n    }\n    updateConversationType(type) {\n        this.addSystemMessage(`üîÑ Conversation type changed to: ${type.replace('_', ' ')}`);\n    }\n    getSelectedConversationType() {\n        const dropdown = this.contentEl.querySelector('select');\n        const value = (dropdown === null || dropdown === void 0 ? void 0 : dropdown.value) || 'general';\n        // Ensure the value is one of the valid types\n        if (['general', 'code_review', 'debugging', 'architecture', 'documentation'].includes(value)) {\n            return value;\n        }\n        return 'general';\n    }\n    onClose() {\n        // Clean up\n        this.contentEl.empty();\n    }\n}\n//# sourceMappingURL=ConversationDevModal.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/services/ConversationDevService.ts"],"map":"{\"version\":3,\"file\":\"ConversationDevModal.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/modals/ConversationDevModal.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * VaultPilot Enhanced Development Chat Modal\\n * \\n * Provides an enhanced chat interface with full development context awareness,\\n * dev-pipe transport, and intelligent conversation features.\\n */\\n\\nimport { App, Modal, Setting, Notice } from 'obsidian';\\nimport type VaultPilotPlugin from '../main';\\nimport { ConversationDevService } from '../services/ConversationDevService';\\n\\nexport class ConversationDevModal extends Modal {\\n  private plugin: VaultPilotPlugin;\\n  private conversationDevService: ConversationDevService;\\n  private messagesContainer!: HTMLElement;\\n  private inputContainer!: HTMLElement;\\n  private statusContainer!: HTMLElement;\\n  private messages: Array<{ type: 'user' | 'assistant' | 'system'; content: string; timestamp: Date }> = [];\\n  private currentConversationId?: string;\\n\\n  constructor(app: App, plugin: VaultPilotPlugin, conversationDevService: ConversationDevService) {\\n    super(app);\\n    this.plugin = plugin;\\n    this.conversationDevService = conversationDevService;\\n  }\\n\\n  onOpen() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n\\n    // Set modal title and styling\\n    this.titleEl.setText('Enhanced Development Chat');\\n    this.modalEl.addClass('vp-conversation-dev-modal');\\n\\n    // Create header with status and options\\n    this.createHeader();\\n\\n    // Create messages area\\n    this.createMessagesArea();\\n\\n    // Create input area\\n    this.createInputArea();\\n\\n    // Initialize with welcome message\\n    this.addSystemMessage(\\n      'Welcome to Enhanced Development Chat! I have full context awareness of your project, ' +\\n      'including active files, project structure, and development environment. ' +\\n      'Ask me anything about your code, architecture, or development workflow.'\\n    );\\n\\n    // Show current context summary\\n    this.showContextSummary();\\n  }\\n\\n  private createHeader() {\\n    const headerEl = this.contentEl.createEl('div', { cls: 'vp-dev-chat-header' });\\n\\n    // Status indicator\\n    this.statusContainer = headerEl.createEl('div', { cls: 'vp-dev-chat-status' });\\n    this.updateStatus();\\n\\n    // Options\\n    const optionsEl = headerEl.createEl('div', { cls: 'vp-dev-chat-options' });\\n\\n    new Setting(optionsEl)\\n      .setName('Conversation Type')\\n      .setDesc('Set the type of development conversation')\\n      .addDropdown(dropdown => \\n        dropdown\\n          .addOption('general', 'General Discussion')\\n          .addOption('code_review', 'Code Review')\\n          .addOption('debugging', 'Debugging Session')\\n          .addOption('architecture', 'Architecture Planning')\\n          .addOption('documentation', 'Documentation Help')\\n          .setValue('general')\\n          .onChange(value => {\\n            this.updateConversationType(value as any);\\n          })\\n      );\\n\\n    // Context refresh button\\n    const refreshBtn = optionsEl.createEl('button', {\\n      text: 'üîÑ Refresh Context',\\n      cls: 'mod-cta'\\n    });\\n    refreshBtn.addEventListener('click', () => this.refreshContext());\\n\\n    // Insights button\\n    const insightsBtn = optionsEl.createEl('button', {\\n      text: 'üí° Show Insights',\\n      cls: 'mod-cta'\\n    });\\n    insightsBtn.addEventListener('click', () => this.showInsights());\\n  }\\n\\n  private createMessagesArea() {\\n    this.messagesContainer = this.contentEl.createEl('div', { \\n      cls: 'vp-dev-chat-messages'\\n    });\\n  }\\n\\n  private createInputArea() {\\n    this.inputContainer = this.contentEl.createEl('div', { cls: 'vp-dev-chat-input' });\\n\\n    const inputWrapper = this.inputContainer.createEl('div', { cls: 'vp-input-wrapper' });\\n    \\n    const textarea = inputWrapper.createEl('textarea', {\\n      placeholder: 'Ask me about your code, architecture, or development workflow...',\\n      cls: 'vp-chat-input'\\n    });\\n\\n    const sendBtn = inputWrapper.createEl('button', {\\n      text: 'Send',\\n      cls: 'mod-cta vp-send-btn'\\n    });\\n\\n    // Event handlers\\n    textarea.addEventListener('keydown', (e) => {\\n      if (e.key === 'Enter' && !e.shiftKey) {\\n        e.preventDefault();\\n        this.sendMessage(textarea.value);\\n        textarea.value = '';\\n      }\\n    });\\n\\n    sendBtn.addEventListener('click', () => {\\n      this.sendMessage(textarea.value);\\n      textarea.value = '';\\n    });\\n\\n    // Add quick action buttons\\n    this.createQuickActions();\\n  }\\n\\n  private createQuickActions() {\\n    const actionsEl = this.inputContainer.createEl('div', { cls: 'vp-quick-actions' });\\n    actionsEl.createEl('span', { text: 'Quick Actions:', cls: 'vp-quick-label' });\\n\\n    const actions = [\\n      { text: 'üîç Review Active File', action: 'review-active-file' },\\n      { text: 'üèóÔ∏è Analyze Architecture', action: 'analyze-architecture' },\\n      { text: 'üêõ Debug Current Code', action: 'debug-code' },\\n      { text: 'üìö Generate Docs', action: 'generate-docs' },\\n      { text: 'üß™ Suggest Tests', action: 'suggest-tests' }\\n    ];\\n\\n    actions.forEach(({ text, action }) => {\\n      const btn = actionsEl.createEl('button', {\\n        text,\\n        cls: 'vp-quick-action-btn'\\n      });\\n      btn.addEventListener('click', () => this.executeQuickAction(action));\\n    });\\n  }\\n\\n  private updateStatus() {\\n    if (!this.statusContainer) return;\\n\\n    const status = this.conversationDevService.getStatus();\\n    const isReady = status.initialized && status.contextServiceReady;\\n\\n    this.statusContainer.empty();\\n    \\n    const statusIcon = this.statusContainer.createEl('span', {\\n      cls: `vp-status-icon ${isReady ? 'ready' : 'not-ready'}`\\n    });\\n    statusIcon.textContent = isReady ? 'üü¢' : 'üü°';\\n\\n    const statusText = this.statusContainer.createEl('span', { cls: 'vp-status-text' });\\n    statusText.textContent = isReady ? 'Enhanced Dev Chat Ready' : 'Initializing...';\\n\\n    if (status.devPipeReady) {\\n      const devPipeIcon = this.statusContainer.createEl('span', {\\n        cls: 'vp-devpipe-icon',\\n        text: 'üöÄ'\\n      });\\n      devPipeIcon.title = 'DevPipe Transport Active';\\n    }\\n  }\\n\\n  private async showContextSummary() {\\n    try {\\n      const insights = await this.conversationDevService.getConversationInsights();\\n      \\n      let contextInfo = `üìã **Current Context:**\\\\n`;\\n      contextInfo += `‚Ä¢ Relevance Score: ${Math.round(insights.contextRelevance * 100)}%\\\\n`;\\n      contextInfo += `‚Ä¢ Project Status: ${insights.projectStatus}\\\\n`;\\n      \\n      if (insights.suggestedActions.length > 0) {\\n        contextInfo += `‚Ä¢ Suggested Actions: ${insights.suggestedActions.slice(0, 3).join(', ')}`;\\n      }\\n\\n      this.addSystemMessage(contextInfo);\\n    } catch (error) {\\n      console.error('Failed to show context summary:', error);\\n    }\\n  }\\n\\n  private async sendMessage(message: string) {\\n    if (!message.trim()) return;\\n\\n    // Add user message to UI\\n    this.addMessage('user', message);\\n\\n    // Show thinking indicator\\n    const thinkingEl = this.addMessage('assistant', 'ü§î Thinking...');\\n\\n    try {\\n      // Send via conversation dev service with enhanced context\\n      const response = await this.conversationDevService.chat(message, {\\n        conversation_id: this.currentConversationId,\\n        conversation_type: this.getSelectedConversationType()\\n      });\\n\\n      // Remove thinking indicator\\n      thinkingEl.remove();\\n\\n      if (response.success && response.data) {\\n        this.addMessage('assistant', response.data.response);\\n        this.currentConversationId = response.data.conversation_id;\\n      } else {\\n        this.addMessage('assistant', `‚ùå Error: ${response.error || 'Unknown error'}`);\\n      }\\n\\n    } catch (error) {\\n      thinkingEl.remove();\\n      this.addMessage('assistant', `‚ùå Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n\\n    // Update status after conversation\\n    this.updateStatus();\\n  }\\n\\n  private async executeQuickAction(action: string) {\\n    const actionMessages: Record<string, string> = {\\n      'review-active-file': 'Please review my currently active file and provide feedback on code quality, potential improvements, and best practices.',\\n      'analyze-architecture': 'Analyze the overall architecture of my project. What patterns do you see? What improvements would you suggest?',\\n      'debug-code': 'Help me debug any issues in my current code. Look for potential bugs, edge cases, or logic errors.',\\n      'generate-docs': 'Generate comprehensive documentation for my current file or project. Include usage examples and API documentation.',\\n      'suggest-tests': 'Suggest test cases for my current code. What edge cases should I test? What testing patterns would work best?'\\n    };\\n\\n    const message = actionMessages[action];\\n    if (message) {\\n      await this.sendMessage(message);\\n    }\\n  }\\n\\n  private addMessage(type: 'user' | 'assistant' | 'system', content: string): HTMLElement {\\n    const messageEl = this.messagesContainer.createEl('div', {\\n      cls: `vp-message vp-message-${type}`\\n    });\\n\\n    const avatarEl = messageEl.createEl('div', { cls: 'vp-message-avatar' });\\n    avatarEl.textContent = type === 'user' ? 'üë§' : type === 'assistant' ? 'ü§ñ' : '‚ÑπÔ∏è';\\n\\n    const contentEl = messageEl.createEl('div', { cls: 'vp-message-content' });\\n    \\n    // Handle markdown-like formatting\\n    const formattedContent = this.formatMessageContent(content);\\n    contentEl.innerHTML = formattedContent;\\n\\n    const timestampEl = messageEl.createEl('div', { cls: 'vp-message-timestamp' });\\n    timestampEl.textContent = new Date().toLocaleTimeString();\\n\\n    // Scroll to bottom\\n    this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;\\n\\n    // Store message\\n    this.messages.push({ type, content, timestamp: new Date() });\\n\\n    return messageEl;\\n  }\\n\\n  private addSystemMessage(content: string): HTMLElement {\\n    return this.addMessage('system', content);\\n  }\\n\\n  private formatMessageContent(content: string): string {\\n    // Basic markdown-like formatting\\n    return content\\n      .replace(/\\\\*\\\\*(.*?)\\\\*\\\\*/g, '<strong>$1</strong>')\\n      .replace(/\\\\*(.*?)\\\\*/g, '<em>$1</em>')\\n      .replace(/`(.*?)`/g, '<code>$1</code>')\\n      .replace(/\\\\n/g, '<br>');\\n  }\\n\\n  private async refreshContext() {\\n    this.conversationDevService.clearContextCache();\\n    this.addSystemMessage('üîÑ Context refreshed! I now have the latest information about your project.');\\n    await this.showContextSummary();\\n  }\\n\\n  private async showInsights() {\\n    try {\\n      const insights = await this.conversationDevService.getConversationInsights();\\n      \\n      let insightsText = 'üí° **Development Insights:**\\\\n\\\\n';\\n      insightsText += `**Context Relevance:** ${Math.round(insights.contextRelevance * 100)}%\\\\n`;\\n      insightsText += `**Project Status:** ${insights.projectStatus}\\\\n\\\\n`;\\n      \\n      if (insights.recommendations.length > 0) {\\n        insightsText += '**Recommendations:**\\\\n';\\n        insights.recommendations.forEach(rec => {\\n          insightsText += `‚Ä¢ ${rec}\\\\n`;\\n        });\\n        insightsText += '\\\\n';\\n      }\\n      \\n      if (insights.suggestedActions.length > 0) {\\n        insightsText += '**Suggested Actions:**\\\\n';\\n        insights.suggestedActions.forEach(action => {\\n          insightsText += `‚Ä¢ ${action}\\\\n`;\\n        });\\n      }\\n\\n      this.addSystemMessage(insightsText);\\n    } catch (error) {\\n      this.addSystemMessage('‚ùå Failed to generate insights. Please try again.');\\n    }\\n  }\\n\\n  private updateConversationType(type: string) {\\n    this.addSystemMessage(`üîÑ Conversation type changed to: ${type.replace('_', ' ')}`);\\n  }\\n\\n  private getSelectedConversationType(): 'general' | 'code_review' | 'debugging' | 'architecture' | 'documentation' {\\n    const dropdown = this.contentEl.querySelector('select') as HTMLSelectElement;\\n    const value = dropdown?.value || 'general';\\n    \\n    // Ensure the value is one of the valid types\\n    if (['general', 'code_review', 'debugging', 'architecture', 'documentation'].includes(value)) {\\n      return value as 'general' | 'code_review' | 'debugging' | 'architecture' | 'documentation';\\n    }\\n    \\n    return 'general';\\n  }\\n\\n  onClose() {\\n    // Clean up\\n    this.contentEl.empty();\\n  }\\n}\"]}"}
