{"code":"/**\n * VaultPilot Context Panel\n *\n * Manages vault state, context sources, and quick actions within the unified workspace.\n * Provides transparent view into what information the AI is using for responses.\n */\nimport { __awaiter } from \"tslib\";\nimport { Component, Notice, setIcon } from 'obsidian';\nimport { createButton } from '../../design-system/components/core/Button';\nexport class ContextPanel extends Component {\n    constructor(containerEl, plugin, workspace) {\n        super();\n        // State\n        this.contextSources = new Map();\n        this.quickActions = [];\n        this.containerEl = containerEl;\n        this.plugin = plugin;\n        this.workspace = workspace;\n        this.vaultState = this.getInitialVaultState();\n        this.setupQuickActions();\n    }\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Setup container\n                this.containerEl.empty();\n                this.containerEl.addClass('vp-context-panel');\n                this.containerEl.setAttribute('role', 'complementary');\n                this.containerEl.setAttribute('aria-label', 'Context and Vault Management');\n                // Create panel structure\n                this.createPanelHeader();\n                this.createVaultStateSection();\n                this.createContextSourcesSection();\n                this.createQuickActionsSection();\n                // Initialize data\n                yield this.refreshVaultState();\n                yield this.loadContextSources();\n                // Setup event listeners\n                this.setupEventListeners();\n                // Initial render\n                this.render();\n                if (this.plugin.settings.debugMode) {\n                    console.log('ContextPanel loaded successfully');\n                }\n            }\n            catch (error) {\n                console.error('Failed to load ContextPanel:', error);\n                throw error;\n            }\n        });\n    }\n    createPanelHeader() {\n        this.headerEl = this.containerEl.createEl('div', {\n            cls: 'vp-context-panel-header',\n            attr: { 'role': 'banner' }\n        });\n        const titleContainer = this.headerEl.createEl('div', { cls: 'vp-panel-title-container' });\n        const titleEl = titleContainer.createEl('h3', {\n            cls: 'vp-panel-title',\n            text: 'Context & Vault'\n        });\n        const actionsContainer = this.headerEl.createEl('div', { cls: 'vp-panel-actions' });\n        // Add context button\n        this.addContextButton = createButton(actionsContainer, {\n            variant: 'secondary',\n            size: 'xs',\n            icon: 'plus',\n            ariaLabel: 'Add context source',\n            onClick: () => this.showAddContextMenu()\n        });\n        // Refresh button\n        createButton(actionsContainer, {\n            variant: 'tertiary',\n            size: 'xs',\n            icon: 'refresh-cw',\n            ariaLabel: 'Refresh vault state',\n            onClick: () => this.refreshVaultState()\n        });\n    }\n    createVaultStateSection() {\n        const section = this.containerEl.createEl('div', {\n            cls: 'vp-context-section vp-vault-state-section'\n        });\n        const sectionHeader = section.createEl('div', { cls: 'vp-section-header' });\n        sectionHeader.createEl('h4', { text: 'Vault State', cls: 'vp-section-title' });\n        this.vaultStateEl = section.createEl('div', {\n            cls: 'vp-vault-state',\n            attr: { 'role': 'region', 'aria-label': 'Vault Status' }\n        });\n    }\n    createContextSourcesSection() {\n        const section = this.containerEl.createEl('div', {\n            cls: 'vp-context-section vp-context-sources-section'\n        });\n        const sectionHeader = section.createEl('div', { cls: 'vp-section-header' });\n        const titleContainer = sectionHeader.createEl('div', { cls: 'vp-section-title-container' });\n        titleContainer.createEl('h4', { text: 'Active Context', cls: 'vp-section-title' });\n        const badge = titleContainer.createEl('span', {\n            cls: 'vp-context-count-badge',\n            text: '0'\n        });\n        this.contextSourcesEl = section.createEl('div', {\n            cls: 'vp-context-sources',\n            attr: { 'role': 'list', 'aria-label': 'Context Sources' }\n        });\n    }\n    createQuickActionsSection() {\n        const section = this.containerEl.createEl('div', {\n            cls: 'vp-context-section vp-quick-actions-section'\n        });\n        const sectionHeader = section.createEl('div', { cls: 'vp-section-header' });\n        sectionHeader.createEl('h4', { text: 'Quick Actions', cls: 'vp-section-title' });\n        this.quickActionsEl = section.createEl('div', {\n            cls: 'vp-quick-actions',\n            attr: { 'role': 'toolbar', 'aria-label': 'Quick Actions' }\n        });\n    }\n    getInitialVaultState() {\n        const files = this.plugin.app.vault.getMarkdownFiles();\n        return {\n            totalFiles: files.length,\n            totalSize: 0, // Will be calculated later\n            health: 'good',\n            lastSynced: new Date(),\n            activeSources: 0,\n            recentActivity: []\n        };\n    }\n    setupQuickActions() {\n        this.quickActions = [\n            {\n                id: 'add-current-file',\n                label: 'Add Current File',\n                icon: 'file-plus',\n                description: 'Add the currently active file to context',\n                callback: () => this.addCurrentFileToContext(),\n                enabled: true,\n                shortcut: 'Cmd+Shift+A'\n            },\n            {\n                id: 'add-selection',\n                label: 'Add Selection',\n                icon: 'text-select',\n                description: 'Add selected text to context',\n                callback: () => this.addSelectionToContext(),\n                enabled: false, // Will be enabled when text is selected\n                shortcut: 'Cmd+Shift+S'\n            },\n            {\n                id: 'clear-context',\n                label: 'Clear All',\n                icon: 'trash-2',\n                description: 'Remove all context sources',\n                callback: () => this.clearAllContext(),\n                enabled: true\n            },\n            {\n                id: 'export-context',\n                label: 'Export Context',\n                icon: 'download',\n                description: 'Export current context as markdown',\n                callback: () => this.exportContext(),\n                enabled: true\n            }\n        ];\n    }\n    setupEventListeners() {\n        // Listen for file changes\n        this.plugin.app.vault.on('create', this.handleVaultChange.bind(this));\n        this.plugin.app.vault.on('delete', this.handleVaultChange.bind(this));\n        this.plugin.app.vault.on('rename', this.handleVaultChange.bind(this));\n        this.plugin.app.vault.on('modify', this.handleVaultChange.bind(this));\n        // Listen for active leaf changes\n        this.plugin.app.workspace.on('active-leaf-change', this.handleActiveFileChange.bind(this));\n        // Listen for selection changes\n        this.registerDomEvent(document, 'selectionchange', this.handleSelectionChange.bind(this));\n        // Listen for workspace events\n        this.workspace.on('mode-changed', this.handleModeChange.bind(this));\n    }\n    refreshVaultState() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const files = this.plugin.app.vault.getMarkdownFiles();\n                let totalSize = 0;\n                // Calculate total vault size (sample first 100 files for performance)\n                const filesToSample = files.slice(0, 100);\n                for (const file of filesToSample) {\n                    totalSize += file.stat.size;\n                }\n                // Estimate total size if we sampled\n                if (files.length > 100) {\n                    totalSize = (totalSize / 100) * files.length;\n                }\n                this.vaultState = {\n                    totalFiles: files.length,\n                    totalSize,\n                    health: this.calculateVaultHealth(files),\n                    lastSynced: new Date(),\n                    activeSources: this.contextSources.size,\n                    recentActivity: this.getRecentActivity()\n                };\n                this.renderVaultState();\n            }\n            catch (error) {\n                console.error('Failed to refresh vault state:', error);\n                this.vaultState.health = 'error';\n                this.renderVaultState();\n            }\n        });\n    }\n    calculateVaultHealth(files) {\n        if (files.length === 0)\n            return 'warning';\n        if (files.length > 10000)\n            return 'warning'; // Large vault warning\n        return 'good';\n    }\n    getRecentActivity() {\n        // Get recent file modifications\n        const files = this.plugin.app.vault.getMarkdownFiles();\n        const recentFiles = files\n            .sort((a, b) => b.stat.mtime - a.stat.mtime)\n            .slice(0, 5)\n            .map((file) => `Modified ${file.basename}`);\n        return recentFiles;\n    }\n    loadContextSources() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Load context sources from workspace state or create defaults\n            const activeFile = this.plugin.app.workspace.getActiveFile();\n            if (activeFile) {\n                yield this.addFileToContext(activeFile);\n            }\n        });\n    }\n    render() {\n        this.renderVaultState();\n        this.renderContextSources();\n        this.renderQuickActions();\n    }\n    renderVaultState() {\n        if (!this.vaultStateEl)\n            return;\n        this.vaultStateEl.empty();\n        // Health indicator\n        const healthContainer = this.vaultStateEl.createEl('div', { cls: 'vp-vault-health' });\n        const healthIndicator = healthContainer.createEl('div', {\n            cls: `vp-health-indicator vp-health-${this.vaultState.health}`,\n            attr: { 'aria-label': `Vault health: ${this.vaultState.health}` }\n        });\n        const healthIcon = this.vaultState.health === 'good' ? 'check-circle' :\n            this.vaultState.health === 'warning' ? 'alert-triangle' : 'x-circle';\n        setIcon(healthIndicator, healthIcon);\n        healthContainer.createEl('span', {\n            text: `Vault ${this.vaultState.health}`,\n            cls: 'vp-health-text'\n        });\n        // Stats\n        const statsContainer = this.vaultStateEl.createEl('div', { cls: 'vp-vault-stats' });\n        const filesStat = statsContainer.createEl('div', { cls: 'vp-stat' });\n        filesStat.createEl('span', { text: this.vaultState.totalFiles.toString(), cls: 'vp-stat-value' });\n        filesStat.createEl('span', { text: 'files', cls: 'vp-stat-label' });\n        const sizeStat = statsContainer.createEl('div', { cls: 'vp-stat' });\n        sizeStat.createEl('span', {\n            text: this.formatBytes(this.vaultState.totalSize),\n            cls: 'vp-stat-value'\n        });\n        sizeStat.createEl('span', { text: 'size', cls: 'vp-stat-label' });\n        const contextStat = statsContainer.createEl('div', { cls: 'vp-stat' });\n        contextStat.createEl('span', {\n            text: this.vaultState.activeSources.toString(),\n            cls: 'vp-stat-value'\n        });\n        contextStat.createEl('span', { text: 'active', cls: 'vp-stat-label' });\n        // Last synced\n        const syncInfo = this.vaultStateEl.createEl('div', { cls: 'vp-sync-info' });\n        syncInfo.createEl('span', {\n            text: `Updated ${this.formatRelativeTime(this.vaultState.lastSynced)}`,\n            cls: 'vp-sync-text'\n        });\n    }\n    renderContextSources() {\n        if (!this.contextSourcesEl)\n            return;\n        this.contextSourcesEl.empty();\n        // Update badge count\n        const badge = this.containerEl.querySelector('.vp-context-count-badge');\n        if (badge) {\n            badge.textContent = this.contextSources.size.toString();\n        }\n        if (this.contextSources.size === 0) {\n            const emptyState = this.contextSourcesEl.createEl('div', { cls: 'vp-empty-state' });\n            emptyState.createEl('p', {\n                text: 'No context sources active',\n                cls: 'vp-empty-text'\n            });\n            createButton(emptyState, {\n                variant: 'secondary',\n                size: 'sm',\n                children: 'Add Current File',\n                onClick: () => this.addCurrentFileToContext()\n            });\n            return;\n        }\n        // Render context sources\n        Array.from(this.contextSources.values()).forEach(source => {\n            this.renderContextSource(source);\n        });\n    }\n    renderContextSource(source) {\n        if (!this.contextSourcesEl)\n            return;\n        const sourceEl = this.contextSourcesEl.createEl('div', {\n            cls: `vp-context-source ${source.active ? 'vp-source-active' : 'vp-source-inactive'}`,\n            attr: { 'role': 'listitem', 'data-source-id': source.id }\n        });\n        // Source header\n        const headerEl = sourceEl.createEl('div', { cls: 'vp-source-header' });\n        const iconEl = headerEl.createEl('div', { cls: 'vp-source-icon' });\n        const sourceIcon = source.type === 'file' ? 'file-text' :\n            source.type === 'selection' ? 'text-select' :\n                source.type === 'vault' ? 'folder' : 'external-link';\n        setIcon(iconEl, sourceIcon);\n        const infoEl = headerEl.createEl('div', { cls: 'vp-source-info' });\n        infoEl.createEl('div', { text: source.name, cls: 'vp-source-name' });\n        infoEl.createEl('div', {\n            text: `${source.type} • ${this.formatRelativeTime(source.lastUsed)}`,\n            cls: 'vp-source-meta'\n        });\n        // Toggle button\n        const toggleEl = headerEl.createEl('button', {\n            cls: `vp-source-toggle ${source.active ? 'vp-toggle-active' : ''}`,\n            attr: {\n                'aria-label': `${source.active ? 'Disable' : 'Enable'} ${source.name}`,\n                'aria-pressed': source.active ? 'true' : 'false'\n            }\n        });\n        toggleEl.addEventListener('click', () => this.toggleContextSource(source.id));\n        // Confidence indicator\n        if (source.confidence > 0) {\n            const confidenceEl = sourceEl.createEl('div', { cls: 'vp-source-confidence' });\n            const confidenceLevel = source.confidence > 0.8 ? 'high' :\n                source.confidence > 0.5 ? 'moderate' : 'low';\n            confidenceEl.createEl('div', {\n                cls: `vp-confidence-bar vp-confidence-${confidenceLevel}`,\n                attr: { 'aria-label': `Confidence: ${Math.round(source.confidence * 100)}%` }\n            }).style.width = `${source.confidence * 100}%`;\n        }\n        // Preview (if available)\n        if (source.preview) {\n            const previewEl = sourceEl.createEl('div', { cls: 'vp-source-preview' });\n            previewEl.createEl('p', { text: source.preview });\n        }\n        // Remove button\n        const removeBtn = sourceEl.createEl('button', {\n            cls: 'vp-source-remove',\n            attr: { 'aria-label': `Remove ${source.name} from context` }\n        });\n        setIcon(removeBtn, 'x');\n        removeBtn.addEventListener('click', () => this.removeContextSource(source.id));\n    }\n    renderQuickActions() {\n        if (!this.quickActionsEl)\n            return;\n        this.quickActionsEl.empty();\n        this.quickActions.forEach(action => {\n            const actionButton = createButton(this.quickActionsEl, {\n                variant: 'tertiary',\n                size: 'sm',\n                icon: action.icon,\n                children: action.label,\n                disabled: !action.enabled,\n                ariaLabel: action.description,\n                onClick: action.callback\n            });\n            if (action.shortcut) {\n                actionButton.getElement().title = `${action.description} (${action.shortcut})`;\n            }\n        });\n    }\n    // Event Handlers\n    handleVaultChange() {\n        // Debounce vault state refresh\n        clearTimeout(this.vaultRefreshTimeout);\n        this.vaultRefreshTimeout = setTimeout(() => {\n            this.refreshVaultState();\n        }, 1000);\n    }\n    handleActiveFileChange() {\n        this.updateQuickActionStates();\n    }\n    handleSelectionChange() {\n        var _a, _b;\n        const hasSelection = ((_b = (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.toString().trim().length) !== null && _b !== void 0 ? _b : 0) > 0;\n        const selectionAction = this.quickActions.find(a => a.id === 'add-selection');\n        if (selectionAction) {\n            selectionAction.enabled = hasSelection;\n            this.renderQuickActions();\n        }\n    }\n    handleModeChange(mode) {\n        // Update context panel based on mode\n        if (this.plugin.settings.debugMode) {\n            console.log(`Context panel responding to mode change: ${mode}`);\n        }\n    }\n    // Context Management Methods\n    addCurrentFileToContext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const activeFile = this.plugin.app.workspace.getActiveFile();\n            if (!activeFile) {\n                new Notice('No active file to add to context');\n                return;\n            }\n            yield this.addFileToContext(activeFile);\n        });\n    }\n    addFileToContext(file) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const existingSource = this.contextSources.get(file.path);\n            if (existingSource) {\n                existingSource.lastUsed = new Date();\n                existingSource.active = true;\n                this.render();\n                return;\n            }\n            try {\n                const content = yield this.plugin.app.vault.read(file);\n                const source = {\n                    id: file.path,\n                    type: 'file',\n                    name: file.basename,\n                    active: true,\n                    confidence: 1.0,\n                    lastUsed: new Date(),\n                    size: file.stat.size,\n                    preview: content.substring(0, 100) + (content.length > 100 ? '...' : ''),\n                    metadata: {\n                        path: file.path,\n                        extension: file.extension,\n                        created: new Date(file.stat.ctime),\n                        modified: new Date(file.stat.mtime)\n                    }\n                };\n                this.contextSources.set(source.id, source);\n                this.vaultState.activeSources = this.contextSources.size;\n                this.render();\n                new Notice(`Added ${file.basename} to context`);\n            }\n            catch (error) {\n                console.error('Failed to add file to context:', error);\n                new Notice('Failed to add file to context');\n            }\n        });\n    }\n    addSelectionToContext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            const selection = (_a = window.getSelection()) === null || _a === void 0 ? void 0 : _a.toString().trim();\n            if (!selection) {\n                new Notice('No text selected');\n                return;\n            }\n            const selectionId = `selection-${Date.now()}`;\n            const source = {\n                id: selectionId,\n                type: 'selection',\n                name: `Selection (${selection.substring(0, 20)}...)`,\n                active: true,\n                confidence: 0.9,\n                lastUsed: new Date(),\n                size: selection.length,\n                preview: selection.substring(0, 200) + (selection.length > 200 ? '...' : ''),\n                metadata: {\n                    fullText: selection,\n                    sourceFile: (_b = this.plugin.app.workspace.getActiveFile()) === null || _b === void 0 ? void 0 : _b.path\n                }\n            };\n            this.contextSources.set(source.id, source);\n            this.vaultState.activeSources = this.contextSources.size;\n            this.render();\n            new Notice('Added selection to context');\n        });\n    }\n    toggleContextSource(sourceId) {\n        const source = this.contextSources.get(sourceId);\n        if (!source)\n            return;\n        source.active = !source.active;\n        source.lastUsed = new Date();\n        this.render();\n        new Notice(`${source.active ? 'Enabled' : 'Disabled'} ${source.name}`);\n    }\n    removeContextSource(sourceId) {\n        const source = this.contextSources.get(sourceId);\n        if (!source)\n            return;\n        this.contextSources.delete(sourceId);\n        this.vaultState.activeSources = this.contextSources.size;\n        this.render();\n        new Notice(`Removed ${source.name} from context`);\n    }\n    clearAllContext() {\n        const count = this.contextSources.size;\n        this.contextSources.clear();\n        this.vaultState.activeSources = 0;\n        this.render();\n        new Notice(`Cleared ${count} context sources`);\n    }\n    exportContext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.contextSources.size === 0) {\n                new Notice('No context to export');\n                return;\n            }\n            try {\n                let exportContent = '# VaultPilot Context Export\\n\\n';\n                exportContent += `Generated: ${new Date().toISOString()}\\n\\n`;\n                for (const source of this.contextSources.values()) {\n                    if (!source.active)\n                        continue;\n                    exportContent += `## ${source.name}\\n\\n`;\n                    exportContent += `- **Type**: ${source.type}\\n`;\n                    exportContent += `- **Confidence**: ${Math.round(source.confidence * 100)}%\\n`;\n                    exportContent += `- **Last Used**: ${source.lastUsed.toISOString()}\\n\\n`;\n                    if (source.preview) {\n                        exportContent += `### Preview\\n\\n\\`\\`\\`\\n${source.preview}\\n\\`\\`\\`\\n\\n`;\n                    }\n                }\n                const filename = `VaultPilot Context Export ${new Date().toISOString().split('T')[0]}.md`;\n                yield this.plugin.app.vault.create(filename, exportContent);\n                new Notice(`Context exported to ${filename}`);\n            }\n            catch (error) {\n                console.error('Failed to export context:', error);\n                new Notice('Failed to export context');\n            }\n        });\n    }\n    showAddContextMenu() {\n        // TODO: Implement context menu for adding different types of context\n        new Notice('Add context menu - Coming soon!');\n    }\n    updateQuickActionStates() {\n        const activeFile = this.plugin.app.workspace.getActiveFile();\n        const addFileAction = this.quickActions.find(a => a.id === 'add-current-file');\n        if (addFileAction) {\n            addFileAction.enabled = !!activeFile;\n        }\n        const hasContext = this.contextSources.size > 0;\n        const clearAction = this.quickActions.find(a => a.id === 'clear-context');\n        const exportAction = this.quickActions.find(a => a.id === 'export-context');\n        if (clearAction)\n            clearAction.enabled = hasContext;\n        if (exportAction)\n            exportAction.enabled = hasContext;\n        this.renderQuickActions();\n    }\n    // Public API\n    getActiveContextSources() {\n        return Array.from(this.contextSources.values()).filter(source => source.active);\n    }\n    getVaultState() {\n        return Object.assign({}, this.vaultState);\n    }\n    getContextSource(id) {\n        return this.contextSources.get(id);\n    }\n    // Utility Methods\n    formatBytes(bytes) {\n        if (bytes === 0)\n            return '0 B';\n        const k = 1024;\n        const sizes = ['B', 'KB', 'MB', 'GB'];\n        const i = Math.floor(Math.log(bytes) / Math.log(k));\n        return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n    }\n    formatRelativeTime(date) {\n        const now = new Date();\n        const diffMs = now.getTime() - date.getTime();\n        const diffMins = Math.floor(diffMs / 60000);\n        const diffHours = Math.floor(diffMs / 3600000);\n        const diffDays = Math.floor(diffMs / 86400000);\n        if (diffMins < 1)\n            return 'just now';\n        if (diffMins < 60)\n            return `${diffMins}m ago`;\n        if (diffHours < 24)\n            return `${diffHours}h ago`;\n        if (diffDays < 7)\n            return `${diffDays}d ago`;\n        return date.toLocaleDateString();\n    }\n    // Component lifecycle\n    onunload() {\n        // Clear timeouts\n        clearTimeout(this.vaultRefreshTimeout);\n        // Remove event listeners (handled automatically by Obsidian)\n        super.onunload();\n    }\n}\n//# sourceMappingURL=ContextPanel.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/workspace/WorkspaceManager.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/design-system/components/core/Button.ts"],"map":"{\"version\":3,\"file\":\"ContextPanel.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/workspace/panels/ContextPanel.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * VaultPilot Context Panel\\n * \\n * Manages vault state, context sources, and quick actions within the unified workspace.\\n * Provides transparent view into what information the AI is using for responses.\\n */\\n\\nimport { Component, TFile, Notice, setIcon } from 'obsidian';\\nimport VaultPilotPlugin from '../../main';\\nimport { WorkspaceManager } from '../WorkspaceManager';\\nimport { VPButton, createButton } from '../../design-system/components/core/Button';\\n\\nexport interface ContextSource {\\n  id: string;\\n  type: 'file' | 'selection' | 'vault' | 'external';\\n  name: string;\\n  active: boolean;\\n  confidence: number; // 0-1\\n  lastUsed: Date;\\n  size?: number;\\n  preview?: string;\\n  metadata?: Record<string, any>;\\n}\\n\\nexport interface VaultState {\\n  totalFiles: number;\\n  totalSize: number;\\n  health: 'good' | 'warning' | 'error';\\n  lastSynced: Date;\\n  activeSources: number;\\n  recentActivity: string[];\\n}\\n\\nexport interface QuickAction {\\n  id: string;\\n  label: string;\\n  icon: string;\\n  description: string;\\n  callback: () => void;\\n  enabled: boolean;\\n  shortcut?: string;\\n}\\n\\nexport class ContextPanel extends Component {\\n  private plugin: VaultPilotPlugin;\\n  private workspace: WorkspaceManager;\\n  private containerEl: HTMLElement;\\n  \\n  // State\\n  private contextSources: Map<string, ContextSource> = new Map();\\n  private vaultState: VaultState;\\n  private quickActions: QuickAction[] = [];\\n  \\n  // UI Elements\\n  private headerEl?: HTMLElement;\\n  private vaultStateEl?: HTMLElement;\\n  private contextSourcesEl?: HTMLElement;\\n  private quickActionsEl?: HTMLElement;\\n  private addContextButton?: VPButton;\\n\\n  constructor(containerEl: HTMLElement, plugin: VaultPilotPlugin, workspace: WorkspaceManager) {\\n    super();\\n    this.containerEl = containerEl;\\n    this.plugin = plugin;\\n    this.workspace = workspace;\\n    this.vaultState = this.getInitialVaultState();\\n    this.setupQuickActions();\\n  }\\n\\n  async onload(): Promise<void> {\\n    try {\\n      // Setup container\\n      this.containerEl.empty();\\n      this.containerEl.addClass('vp-context-panel');\\n      this.containerEl.setAttribute('role', 'complementary');\\n      this.containerEl.setAttribute('aria-label', 'Context and Vault Management');\\n\\n      // Create panel structure\\n      this.createPanelHeader();\\n      this.createVaultStateSection();\\n      this.createContextSourcesSection();\\n      this.createQuickActionsSection();\\n\\n      // Initialize data\\n      await this.refreshVaultState();\\n      await this.loadContextSources();\\n\\n      // Setup event listeners\\n      this.setupEventListeners();\\n\\n      // Initial render\\n      this.render();\\n\\n      if (this.plugin.settings.debugMode) {\\n        console.log('ContextPanel loaded successfully');\\n      }\\n    } catch (error) {\\n      console.error('Failed to load ContextPanel:', error);\\n      throw error;\\n    }\\n  }\\n\\n  private createPanelHeader(): void {\\n    this.headerEl = this.containerEl.createEl('div', {\\n      cls: 'vp-context-panel-header',\\n      attr: { 'role': 'banner' }\\n    });\\n\\n    const titleContainer = this.headerEl.createEl('div', { cls: 'vp-panel-title-container' });\\n    \\n    const titleEl = titleContainer.createEl('h3', {\\n      cls: 'vp-panel-title',\\n      text: 'Context & Vault'\\n    });\\n\\n    const actionsContainer = this.headerEl.createEl('div', { cls: 'vp-panel-actions' });\\n    \\n    // Add context button\\n    this.addContextButton = createButton(actionsContainer, {\\n      variant: 'secondary',\\n      size: 'xs',\\n      icon: 'plus',\\n      ariaLabel: 'Add context source',\\n      onClick: () => this.showAddContextMenu()\\n    });\\n\\n    // Refresh button\\n    createButton(actionsContainer, {\\n      variant: 'tertiary',\\n      size: 'xs',\\n      icon: 'refresh-cw',\\n      ariaLabel: 'Refresh vault state',\\n      onClick: () => this.refreshVaultState()\\n    });\\n  }\\n\\n  private createVaultStateSection(): void {\\n    const section = this.containerEl.createEl('div', {\\n      cls: 'vp-context-section vp-vault-state-section'\\n    });\\n\\n    const sectionHeader = section.createEl('div', { cls: 'vp-section-header' });\\n    sectionHeader.createEl('h4', { text: 'Vault State', cls: 'vp-section-title' });\\n    \\n    this.vaultStateEl = section.createEl('div', {\\n      cls: 'vp-vault-state',\\n      attr: { 'role': 'region', 'aria-label': 'Vault Status' }\\n    });\\n  }\\n\\n  private createContextSourcesSection(): void {\\n    const section = this.containerEl.createEl('div', {\\n      cls: 'vp-context-section vp-context-sources-section'\\n    });\\n\\n    const sectionHeader = section.createEl('div', { cls: 'vp-section-header' });\\n    const titleContainer = sectionHeader.createEl('div', { cls: 'vp-section-title-container' });\\n    titleContainer.createEl('h4', { text: 'Active Context', cls: 'vp-section-title' });\\n    \\n    const badge = titleContainer.createEl('span', {\\n      cls: 'vp-context-count-badge',\\n      text: '0'\\n    });\\n\\n    this.contextSourcesEl = section.createEl('div', {\\n      cls: 'vp-context-sources',\\n      attr: { 'role': 'list', 'aria-label': 'Context Sources' }\\n    });\\n  }\\n\\n  private createQuickActionsSection(): void {\\n    const section = this.containerEl.createEl('div', {\\n      cls: 'vp-context-section vp-quick-actions-section'\\n    });\\n\\n    const sectionHeader = section.createEl('div', { cls: 'vp-section-header' });\\n    sectionHeader.createEl('h4', { text: 'Quick Actions', cls: 'vp-section-title' });\\n    \\n    this.quickActionsEl = section.createEl('div', {\\n      cls: 'vp-quick-actions',\\n      attr: { 'role': 'toolbar', 'aria-label': 'Quick Actions' }\\n    });\\n  }\\n\\n  private getInitialVaultState(): VaultState {\\n    const files = this.plugin.app.vault.getMarkdownFiles();\\n    return {\\n      totalFiles: files.length,\\n      totalSize: 0, // Will be calculated later\\n      health: 'good',\\n      lastSynced: new Date(),\\n      activeSources: 0,\\n      recentActivity: []\\n    };\\n  }\\n\\n  private setupQuickActions(): void {\\n    this.quickActions = [\\n      {\\n        id: 'add-current-file',\\n        label: 'Add Current File',\\n        icon: 'file-plus',\\n        description: 'Add the currently active file to context',\\n        callback: () => this.addCurrentFileToContext(),\\n        enabled: true,\\n        shortcut: 'Cmd+Shift+A'\\n      },\\n      {\\n        id: 'add-selection',\\n        label: 'Add Selection',\\n        icon: 'text-select',\\n        description: 'Add selected text to context',\\n        callback: () => this.addSelectionToContext(),\\n        enabled: false, // Will be enabled when text is selected\\n        shortcut: 'Cmd+Shift+S'\\n      },\\n      {\\n        id: 'clear-context',\\n        label: 'Clear All',\\n        icon: 'trash-2',\\n        description: 'Remove all context sources',\\n        callback: () => this.clearAllContext(),\\n        enabled: true\\n      },\\n      {\\n        id: 'export-context',\\n        label: 'Export Context',\\n        icon: 'download',\\n        description: 'Export current context as markdown',\\n        callback: () => this.exportContext(),\\n        enabled: true\\n      }\\n    ];\\n  }\\n\\n  private setupEventListeners(): void {\\n    // Listen for file changes\\n    this.plugin.app.vault.on('create', this.handleVaultChange.bind(this));\\n    this.plugin.app.vault.on('delete', this.handleVaultChange.bind(this));\\n    this.plugin.app.vault.on('rename', this.handleVaultChange.bind(this));\\n    this.plugin.app.vault.on('modify', this.handleVaultChange.bind(this));\\n\\n    // Listen for active leaf changes\\n    this.plugin.app.workspace.on('active-leaf-change', this.handleActiveFileChange.bind(this));\\n\\n    // Listen for selection changes\\n    this.registerDomEvent(document, 'selectionchange', this.handleSelectionChange.bind(this));\\n\\n    // Listen for workspace events\\n    this.workspace.on('mode-changed', this.handleModeChange.bind(this));\\n  }\\n\\n  private async refreshVaultState(): Promise<void> {\\n    try {\\n      const files = this.plugin.app.vault.getMarkdownFiles();\\n      let totalSize = 0;\\n\\n      // Calculate total vault size (sample first 100 files for performance)\\n      const filesToSample = files.slice(0, 100);\\n      for (const file of filesToSample) {\\n        totalSize += file.stat.size;\\n      }\\n\\n      // Estimate total size if we sampled\\n      if (files.length > 100) {\\n        totalSize = (totalSize / 100) * files.length;\\n      }\\n\\n      this.vaultState = {\\n        totalFiles: files.length,\\n        totalSize,\\n        health: this.calculateVaultHealth(files),\\n        lastSynced: new Date(),\\n        activeSources: this.contextSources.size,\\n        recentActivity: this.getRecentActivity()\\n      };\\n\\n      this.renderVaultState();\\n    } catch (error) {\\n      console.error('Failed to refresh vault state:', error);\\n      this.vaultState.health = 'error';\\n      this.renderVaultState();\\n    }\\n  }\\n\\n  private calculateVaultHealth(files: TFile[]): 'good' | 'warning' | 'error' {\\n    if (files.length === 0) return 'warning';\\n    if (files.length > 10000) return 'warning'; // Large vault warning\\n    return 'good';\\n  }\\n\\n  private getRecentActivity(): string[] {\\n    // Get recent file modifications\\n    const files = this.plugin.app.vault.getMarkdownFiles();\\n    const recentFiles = files\\n      .sort((a: TFile, b: TFile) => b.stat.mtime - a.stat.mtime)\\n      .slice(0, 5)\\n      .map((file: TFile) => `Modified ${file.basename}`);\\n    \\n    return recentFiles;\\n  }\\n\\n  private async loadContextSources(): Promise<void> {\\n    // Load context sources from workspace state or create defaults\\n    const activeFile = this.plugin.app.workspace.getActiveFile();\\n    if (activeFile) {\\n      await this.addFileToContext(activeFile);\\n    }\\n  }\\n\\n  private render(): void {\\n    this.renderVaultState();\\n    this.renderContextSources();\\n    this.renderQuickActions();\\n  }\\n\\n  private renderVaultState(): void {\\n    if (!this.vaultStateEl) return;\\n\\n    this.vaultStateEl.empty();\\n\\n    // Health indicator\\n    const healthContainer = this.vaultStateEl.createEl('div', { cls: 'vp-vault-health' });\\n    const healthIndicator = healthContainer.createEl('div', {\\n      cls: `vp-health-indicator vp-health-${this.vaultState.health}`,\\n      attr: { 'aria-label': `Vault health: ${this.vaultState.health}` }\\n    });\\n    \\n    const healthIcon = this.vaultState.health === 'good' ? 'check-circle' : \\n                       this.vaultState.health === 'warning' ? 'alert-triangle' : 'x-circle';\\n    setIcon(healthIndicator, healthIcon);\\n\\n    healthContainer.createEl('span', { \\n      text: `Vault ${this.vaultState.health}`,\\n      cls: 'vp-health-text'\\n    });\\n\\n    // Stats\\n    const statsContainer = this.vaultStateEl.createEl('div', { cls: 'vp-vault-stats' });\\n    \\n    const filesStat = statsContainer.createEl('div', { cls: 'vp-stat' });\\n    filesStat.createEl('span', { text: this.vaultState.totalFiles.toString(), cls: 'vp-stat-value' });\\n    filesStat.createEl('span', { text: 'files', cls: 'vp-stat-label' });\\n\\n    const sizeStat = statsContainer.createEl('div', { cls: 'vp-stat' });\\n    sizeStat.createEl('span', { \\n      text: this.formatBytes(this.vaultState.totalSize), \\n      cls: 'vp-stat-value' \\n    });\\n    sizeStat.createEl('span', { text: 'size', cls: 'vp-stat-label' });\\n\\n    const contextStat = statsContainer.createEl('div', { cls: 'vp-stat' });\\n    contextStat.createEl('span', { \\n      text: this.vaultState.activeSources.toString(), \\n      cls: 'vp-stat-value' \\n    });\\n    contextStat.createEl('span', { text: 'active', cls: 'vp-stat-label' });\\n\\n    // Last synced\\n    const syncInfo = this.vaultStateEl.createEl('div', { cls: 'vp-sync-info' });\\n    syncInfo.createEl('span', { \\n      text: `Updated ${this.formatRelativeTime(this.vaultState.lastSynced)}`,\\n      cls: 'vp-sync-text'\\n    });\\n  }\\n\\n  private renderContextSources(): void {\\n    if (!this.contextSourcesEl) return;\\n\\n    this.contextSourcesEl.empty();\\n\\n    // Update badge count\\n    const badge = this.containerEl.querySelector('.vp-context-count-badge');\\n    if (badge) {\\n      badge.textContent = this.contextSources.size.toString();\\n    }\\n\\n    if (this.contextSources.size === 0) {\\n      const emptyState = this.contextSourcesEl.createEl('div', { cls: 'vp-empty-state' });\\n      emptyState.createEl('p', { \\n        text: 'No context sources active',\\n        cls: 'vp-empty-text'\\n      });\\n      \\n      createButton(emptyState, {\\n        variant: 'secondary',\\n        size: 'sm',\\n        children: 'Add Current File',\\n        onClick: () => this.addCurrentFileToContext()\\n      });\\n      return;\\n    }\\n\\n    // Render context sources\\n    Array.from(this.contextSources.values()).forEach(source => {\\n      this.renderContextSource(source);\\n    });\\n  }\\n\\n  private renderContextSource(source: ContextSource): void {\\n    if (!this.contextSourcesEl) return;\\n\\n    const sourceEl = this.contextSourcesEl.createEl('div', {\\n      cls: `vp-context-source ${source.active ? 'vp-source-active' : 'vp-source-inactive'}`,\\n      attr: { 'role': 'listitem', 'data-source-id': source.id }\\n    });\\n\\n    // Source header\\n    const headerEl = sourceEl.createEl('div', { cls: 'vp-source-header' });\\n    \\n    const iconEl = headerEl.createEl('div', { cls: 'vp-source-icon' });\\n    const sourceIcon = source.type === 'file' ? 'file-text' : \\n                       source.type === 'selection' ? 'text-select' :\\n                       source.type === 'vault' ? 'folder' : 'external-link';\\n    setIcon(iconEl, sourceIcon);\\n\\n    const infoEl = headerEl.createEl('div', { cls: 'vp-source-info' });\\n    infoEl.createEl('div', { text: source.name, cls: 'vp-source-name' });\\n    infoEl.createEl('div', { \\n      text: `${source.type} • ${this.formatRelativeTime(source.lastUsed)}`,\\n      cls: 'vp-source-meta'\\n    });\\n\\n    // Toggle button\\n    const toggleEl = headerEl.createEl('button', {\\n      cls: `vp-source-toggle ${source.active ? 'vp-toggle-active' : ''}`,\\n      attr: { \\n        'aria-label': `${source.active ? 'Disable' : 'Enable'} ${source.name}`,\\n        'aria-pressed': source.active ? 'true' : 'false'\\n      }\\n    });\\n    \\n    toggleEl.addEventListener('click', () => this.toggleContextSource(source.id));\\n\\n    // Confidence indicator\\n    if (source.confidence > 0) {\\n      const confidenceEl = sourceEl.createEl('div', { cls: 'vp-source-confidence' });\\n      const confidenceLevel = source.confidence > 0.8 ? 'high' : \\n                              source.confidence > 0.5 ? 'moderate' : 'low';\\n      \\n      confidenceEl.createEl('div', {\\n        cls: `vp-confidence-bar vp-confidence-${confidenceLevel}`,\\n        attr: { 'aria-label': `Confidence: ${Math.round(source.confidence * 100)}%` }\\n      }).style.width = `${source.confidence * 100}%`;\\n    }\\n\\n    // Preview (if available)\\n    if (source.preview) {\\n      const previewEl = sourceEl.createEl('div', { cls: 'vp-source-preview' });\\n      previewEl.createEl('p', { text: source.preview });\\n    }\\n\\n    // Remove button\\n    const removeBtn = sourceEl.createEl('button', {\\n      cls: 'vp-source-remove',\\n      attr: { 'aria-label': `Remove ${source.name} from context` }\\n    });\\n    setIcon(removeBtn, 'x');\\n    removeBtn.addEventListener('click', () => this.removeContextSource(source.id));\\n  }\\n\\n  private renderQuickActions(): void {\\n    if (!this.quickActionsEl) return;\\n\\n    this.quickActionsEl.empty();\\n\\n    this.quickActions.forEach(action => {\\n      const actionButton = createButton(this.quickActionsEl!, {\\n        variant: 'tertiary',\\n        size: 'sm',\\n        icon: action.icon,\\n        children: action.label,\\n        disabled: !action.enabled,\\n        ariaLabel: action.description,\\n        onClick: action.callback\\n      });\\n\\n      if (action.shortcut) {\\n        actionButton.getElement().title = `${action.description} (${action.shortcut})`;\\n      }\\n    });\\n  }\\n\\n  // Event Handlers\\n\\n  private handleVaultChange(): void {\\n    // Debounce vault state refresh\\n    clearTimeout((this as any).vaultRefreshTimeout);\\n    (this as any).vaultRefreshTimeout = setTimeout(() => {\\n      this.refreshVaultState();\\n    }, 1000);\\n  }\\n\\n  private handleActiveFileChange(): void {\\n    this.updateQuickActionStates();\\n  }\\n\\n  private handleSelectionChange(): void {\\n    const hasSelection = (window.getSelection()?.toString().trim().length ?? 0) > 0;\\n    const selectionAction = this.quickActions.find(a => a.id === 'add-selection');\\n    if (selectionAction) {\\n      selectionAction.enabled = hasSelection;\\n      this.renderQuickActions();\\n    }\\n  }\\n\\n  private handleModeChange(mode: string): void {\\n    // Update context panel based on mode\\n    if (this.plugin.settings.debugMode) {\\n      console.log(`Context panel responding to mode change: ${mode}`);\\n    }\\n  }\\n\\n  // Context Management Methods\\n\\n  public async addCurrentFileToContext(): Promise<void> {\\n    const activeFile = this.plugin.app.workspace.getActiveFile();\\n    if (!activeFile) {\\n      new Notice('No active file to add to context');\\n      return;\\n    }\\n\\n    await this.addFileToContext(activeFile);\\n  }\\n\\n  public async addFileToContext(file: TFile): Promise<void> {\\n    const existingSource = this.contextSources.get(file.path);\\n    if (existingSource) {\\n      existingSource.lastUsed = new Date();\\n      existingSource.active = true;\\n      this.render();\\n      return;\\n    }\\n\\n    try {\\n      const content = await this.plugin.app.vault.read(file);\\n      const source: ContextSource = {\\n        id: file.path,\\n        type: 'file',\\n        name: file.basename,\\n        active: true,\\n        confidence: 1.0,\\n        lastUsed: new Date(),\\n        size: file.stat.size,\\n        preview: content.substring(0, 100) + (content.length > 100 ? '...' : ''),\\n        metadata: {\\n          path: file.path,\\n          extension: file.extension,\\n          created: new Date(file.stat.ctime),\\n          modified: new Date(file.stat.mtime)\\n        }\\n      };\\n\\n      this.contextSources.set(source.id, source);\\n      this.vaultState.activeSources = this.contextSources.size;\\n      this.render();\\n\\n      new Notice(`Added ${file.basename} to context`);\\n    } catch (error) {\\n      console.error('Failed to add file to context:', error);\\n      new Notice('Failed to add file to context');\\n    }\\n  }\\n\\n  public async addSelectionToContext(): Promise<void> {\\n    const selection = window.getSelection()?.toString().trim();\\n    if (!selection) {\\n      new Notice('No text selected');\\n      return;\\n    }\\n\\n    const selectionId = `selection-${Date.now()}`;\\n    const source: ContextSource = {\\n      id: selectionId,\\n      type: 'selection',\\n      name: `Selection (${selection.substring(0, 20)}...)`,\\n      active: true,\\n      confidence: 0.9,\\n      lastUsed: new Date(),\\n      size: selection.length,\\n      preview: selection.substring(0, 200) + (selection.length > 200 ? '...' : ''),\\n      metadata: {\\n        fullText: selection,\\n        sourceFile: this.plugin.app.workspace.getActiveFile()?.path\\n      }\\n    };\\n\\n    this.contextSources.set(source.id, source);\\n    this.vaultState.activeSources = this.contextSources.size;\\n    this.render();\\n\\n    new Notice('Added selection to context');\\n  }\\n\\n  public toggleContextSource(sourceId: string): void {\\n    const source = this.contextSources.get(sourceId);\\n    if (!source) return;\\n\\n    source.active = !source.active;\\n    source.lastUsed = new Date();\\n    this.render();\\n\\n    new Notice(`${source.active ? 'Enabled' : 'Disabled'} ${source.name}`);\\n  }\\n\\n  public removeContextSource(sourceId: string): void {\\n    const source = this.contextSources.get(sourceId);\\n    if (!source) return;\\n\\n    this.contextSources.delete(sourceId);\\n    this.vaultState.activeSources = this.contextSources.size;\\n    this.render();\\n\\n    new Notice(`Removed ${source.name} from context`);\\n  }\\n\\n  public clearAllContext(): void {\\n    const count = this.contextSources.size;\\n    this.contextSources.clear();\\n    this.vaultState.activeSources = 0;\\n    this.render();\\n\\n    new Notice(`Cleared ${count} context sources`);\\n  }\\n\\n  public async exportContext(): Promise<void> {\\n    if (this.contextSources.size === 0) {\\n      new Notice('No context to export');\\n      return;\\n    }\\n\\n    try {\\n      let exportContent = '# VaultPilot Context Export\\\\n\\\\n';\\n      exportContent += `Generated: ${new Date().toISOString()}\\\\n\\\\n`;\\n\\n      for (const source of this.contextSources.values()) {\\n        if (!source.active) continue;\\n\\n        exportContent += `## ${source.name}\\\\n\\\\n`;\\n        exportContent += `- **Type**: ${source.type}\\\\n`;\\n        exportContent += `- **Confidence**: ${Math.round(source.confidence * 100)}%\\\\n`;\\n        exportContent += `- **Last Used**: ${source.lastUsed.toISOString()}\\\\n\\\\n`;\\n\\n        if (source.preview) {\\n          exportContent += `### Preview\\\\n\\\\n\\\\`\\\\`\\\\`\\\\n${source.preview}\\\\n\\\\`\\\\`\\\\`\\\\n\\\\n`;\\n        }\\n      }\\n\\n      const filename = `VaultPilot Context Export ${new Date().toISOString().split('T')[0]}.md`;\\n      await this.plugin.app.vault.create(filename, exportContent);\\n      new Notice(`Context exported to ${filename}`);\\n    } catch (error) {\\n      console.error('Failed to export context:', error);\\n      new Notice('Failed to export context');\\n    }\\n  }\\n\\n  private showAddContextMenu(): void {\\n    // TODO: Implement context menu for adding different types of context\\n    new Notice('Add context menu - Coming soon!');\\n  }\\n\\n  private updateQuickActionStates(): void {\\n    const activeFile = this.plugin.app.workspace.getActiveFile();\\n    const addFileAction = this.quickActions.find(a => a.id === 'add-current-file');\\n    if (addFileAction) {\\n      addFileAction.enabled = !!activeFile;\\n    }\\n\\n    const hasContext = this.contextSources.size > 0;\\n    const clearAction = this.quickActions.find(a => a.id === 'clear-context');\\n    const exportAction = this.quickActions.find(a => a.id === 'export-context');\\n    \\n    if (clearAction) clearAction.enabled = hasContext;\\n    if (exportAction) exportAction.enabled = hasContext;\\n\\n    this.renderQuickActions();\\n  }\\n\\n  // Public API\\n\\n  public getActiveContextSources(): ContextSource[] {\\n    return Array.from(this.contextSources.values()).filter(source => source.active);\\n  }\\n\\n  public getVaultState(): Readonly<VaultState> {\\n    return { ...this.vaultState };\\n  }\\n\\n  public getContextSource(id: string): ContextSource | undefined {\\n    return this.contextSources.get(id);\\n  }\\n\\n  // Utility Methods\\n\\n  private formatBytes(bytes: number): string {\\n    if (bytes === 0) return '0 B';\\n    const k = 1024;\\n    const sizes = ['B', 'KB', 'MB', 'GB'];\\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\\n  }\\n\\n  private formatRelativeTime(date: Date): string {\\n    const now = new Date();\\n    const diffMs = now.getTime() - date.getTime();\\n    const diffMins = Math.floor(diffMs / 60000);\\n    const diffHours = Math.floor(diffMs / 3600000);\\n    const diffDays = Math.floor(diffMs / 86400000);\\n\\n    if (diffMins < 1) return 'just now';\\n    if (diffMins < 60) return `${diffMins}m ago`;\\n    if (diffHours < 24) return `${diffHours}h ago`;\\n    if (diffDays < 7) return `${diffDays}d ago`;\\n    return date.toLocaleDateString();\\n  }\\n\\n  // Component lifecycle\\n  onunload(): void {\\n    // Clear timeouts\\n    clearTimeout((this as any).vaultRefreshTimeout);\\n    \\n    // Remove event listeners (handled automatically by Obsidian)\\n    super.onunload();\\n  }\\n}\"]}"}
