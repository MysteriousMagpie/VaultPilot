{"code":"/**\n * VaultPilot Conversation Development Service\n *\n * Provides enhanced conversation capabilities for development contexts using the dev-pipe framework.\n * This service enables intelligent, context-aware AI conversations with comprehensive project understanding.\n */\nimport { __awaiter } from \"tslib\";\nimport { DevelopmentContextService } from './DevelopmentContextService';\nimport { DevPipeClient } from '../devpipe/DevPipeClient';\nexport class ConversationDevService {\n    constructor(plugin, config = {}) {\n        this.isInitialized = false;\n        this.plugin = plugin;\n        this.contextService = new DevelopmentContextService(plugin.app, plugin);\n        this.config = Object.assign({ enableContextEnrichment: true, enableIntelligentModelSelection: true, enableDevPipeTransport: true, contextDepth: 'standard', debugMode: plugin.settings.debugMode || false }, config);\n        this.metrics = {\n            totalConversations: 0,\n            contextEnhancedConversations: 0,\n            devPipeUsage: 0,\n            averageResponseTime: 0,\n            modelSelectionHits: 0,\n            errorCount: 0\n        };\n    }\n    /**\n     * Initialize the conversation dev service\n     */\n    initialize() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            try {\n                // Initialize DevPipe if enabled and model selection is available\n                if (this.config.enableDevPipeTransport && ((_a = this.plugin.settings.modelSelection) === null || _a === void 0 ? void 0 : _a.enabled)) {\n                    yield this.initializeDevPipe();\n                }\n                this.isInitialized = true;\n                if (this.config.debugMode) {\n                    console.log('ConversationDevService initialized successfully');\n                }\n            }\n            catch (error) {\n                console.error('Failed to initialize ConversationDevService:', error);\n                // Don't throw - allow graceful degradation\n            }\n        });\n    }\n    /**\n     * Initialize DevPipe client for enhanced communication\n     */\n    initializeDevPipe() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.plugin.settings.modelSelection)\n                return;\n            const modelConfig = {\n                server_url: this.plugin.settings.backendUrl,\n                devpipe_path: this.plugin.settings.modelSelection.devpipePath,\n                monitoring_interval: this.plugin.settings.modelSelection.monitoringInterval,\n                fallback_enabled: this.plugin.settings.modelSelection.fallbackEnabled,\n                cache_duration: this.plugin.settings.modelSelection.cacheDuration,\n                retry_attempts: this.plugin.settings.modelSelection.retryAttempts,\n                timeout: this.plugin.settings.modelSelection.timeout,\n                debug_mode: this.config.debugMode\n            };\n            this.devPipeClient = new DevPipeClient(modelConfig);\n            try {\n                yield this.devPipeClient.initialize();\n                // Set up event listeners\n                this.devPipeClient.on('connected', () => {\n                    if (this.config.debugMode) {\n                        console.log('DevPipe connected for conversation dev service');\n                    }\n                });\n                this.devPipeClient.on('error', (error) => {\n                    console.error('DevPipe error:', error);\n                    this.metrics.errorCount++;\n                });\n            }\n            catch (error) {\n                console.warn('DevPipe initialization failed, falling back to standard transport:', error);\n                this.devPipeClient = undefined;\n            }\n        });\n    }\n    /**\n     * Enhanced chat function with development context\n     */\n    chat(message_1) {\n        return __awaiter(this, arguments, void 0, function* (message, options = {}) {\n            var _a, _b;\n            const startTime = Date.now();\n            this.metrics.totalConversations++;\n            try {\n                // Build enriched chat request\n                const enrichedRequest = yield this.buildEnrichedRequest(message, options);\n                // Choose transport method\n                let response;\n                if (((_a = this.devPipeClient) === null || _a === void 0 ? void 0 : _a.isReady()) && this.config.enableDevPipeTransport) {\n                    response = yield this.sendViaDevPipe(enrichedRequest);\n                    this.metrics.devPipeUsage++;\n                }\n                else {\n                    response = yield this.sendViaStandardTransport(enrichedRequest);\n                }\n                // Update metrics\n                const responseTime = Date.now() - startTime;\n                this.updateResponseTimeMetrics(responseTime);\n                if (this.config.debugMode) {\n                    console.log(`Conversation completed in ${responseTime}ms via ${((_b = this.devPipeClient) === null || _b === void 0 ? void 0 : _b.isReady()) ? 'DevPipe' : 'Standard'} transport`);\n                }\n                return response;\n            }\n            catch (error) {\n                this.metrics.errorCount++;\n                console.error('ConversationDevService chat error:', error);\n                return {\n                    success: false,\n                    error: error instanceof Error ? error.message : 'Unknown conversation error'\n                };\n            }\n        });\n    }\n    /**\n     * Build enriched chat request with development context\n     */\n    buildEnrichedRequest(message, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const baseRequest = {\n                message,\n                conversation_id: options.conversation_id,\n                agent_id: options.agent_id,\n                mode: options.mode || 'ask'\n            };\n            // Add development context if enabled\n            if (this.config.enableContextEnrichment) {\n                try {\n                    const developmentContext = yield this.gatherDevelopmentContext();\n                    const contextSummary = yield this.contextService.getContextSummary();\n                    const enrichedRequest = Object.assign(Object.assign({}, baseRequest), { development_context: developmentContext, context_summary: contextSummary, conversation_type: options.conversation_type || this.detectConversationType(message), project_context: {\n                            type: developmentContext.project.type,\n                            structure: developmentContext.project.structure,\n                            dependencies: developmentContext.project.dependencies\n                        } });\n                    this.metrics.contextEnhancedConversations++;\n                    return enrichedRequest;\n                }\n                catch (contextError) {\n                    console.warn('Failed to gather development context, using base request:', contextError);\n                    return baseRequest;\n                }\n            }\n            return baseRequest;\n        });\n    }\n    /**\n     * Gather development context based on configured depth\n     */\n    gatherDevelopmentContext() {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (this.config.contextDepth) {\n                case 'minimal':\n                    return {\n                        workspace: yield this.contextService.getWorkspaceContext(),\n                        activeFile: yield this.contextService.getActiveFileContext(),\n                        selection: null,\n                        project: yield this.contextService.getProjectContext(),\n                        git: null,\n                        timestamp: Date.now()\n                    };\n                case 'comprehensive':\n                    return yield this.contextService.getFullContext();\n                case 'standard':\n                default:\n                    return {\n                        workspace: yield this.contextService.getWorkspaceContext(),\n                        activeFile: yield this.contextService.getActiveFileContext(),\n                        selection: yield this.contextService.getSelectionContext(),\n                        project: yield this.contextService.getProjectContext(),\n                        git: yield this.contextService.getGitContext(),\n                        timestamp: Date.now()\n                    };\n            }\n        });\n    }\n    /**\n     * Detect conversation type based on message content\n     */\n    detectConversationType(message) {\n        const lowerMessage = message.toLowerCase();\n        if (lowerMessage.includes('review') || lowerMessage.includes('feedback') || lowerMessage.includes('improve')) {\n            return 'code_review';\n        }\n        if (lowerMessage.includes('bug') || lowerMessage.includes('error') || lowerMessage.includes('debug') || lowerMessage.includes('fix')) {\n            return 'debugging';\n        }\n        if (lowerMessage.includes('architecture') || lowerMessage.includes('design') || lowerMessage.includes('structure') || lowerMessage.includes('pattern')) {\n            return 'architecture';\n        }\n        if (lowerMessage.includes('document') || lowerMessage.includes('explain') || lowerMessage.includes('comment') || lowerMessage.includes('readme')) {\n            return 'documentation';\n        }\n        return 'general';\n    }\n    /**\n     * Send request via DevPipe transport\n     */\n    sendViaDevPipe(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.devPipeClient) {\n                throw new Error('DevPipe client not available');\n            }\n            try {\n                const response = yield this.devPipeClient.sendMessage('chat_enhanced', request, 30000);\n                return {\n                    success: true,\n                    data: response\n                };\n            }\n            catch (error) {\n                console.error('DevPipe transport error:', error);\n                // Fallback to standard transport\n                if (this.config.debugMode) {\n                    console.log('Falling back to standard transport due to DevPipe error');\n                }\n                return yield this.sendViaStandardTransport(request);\n            }\n        });\n    }\n    /**\n     * Send request via standard HTTP transport\n     */\n    sendViaStandardTransport(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Convert enriched request back to standard format for compatibility\n            const standardRequest = {\n                message: request.message,\n                conversation_id: request.conversation_id,\n                agent_id: request.agent_id,\n                mode: request.mode,\n                vault_context: request.context_summary // Include summary as vault context\n            };\n            return yield this.plugin.apiClient.chat(standardRequest);\n        });\n    }\n    /**\n     * Get conversation insights and recommendations\n     */\n    getConversationInsights() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const context = yield this.contextService.getFullContext();\n                // Calculate context relevance score\n                const contextRelevance = this.calculateContextRelevance(context);\n                // Generate suggestions based on project state\n                const suggestedActions = this.generateSuggestedActions(context);\n                // Assess project status\n                const projectStatus = this.assessProjectStatus(context);\n                // Generate recommendations\n                const recommendations = this.generateRecommendations(context);\n                return {\n                    contextRelevance,\n                    suggestedActions,\n                    projectStatus,\n                    recommendations\n                };\n            }\n            catch (error) {\n                console.error('Failed to generate conversation insights:', error);\n                return {\n                    contextRelevance: 0,\n                    suggestedActions: [],\n                    projectStatus: 'unknown',\n                    recommendations: ['Consider checking your project structure']\n                };\n            }\n        });\n    }\n    /**\n     * Calculate context relevance score (0-1)\n     */\n    calculateContextRelevance(context) {\n        var _a;\n        let score = 0;\n        let factors = 0;\n        // Active file contributes to relevance\n        if (context.activeFile) {\n            score += 0.3;\n            factors++;\n        }\n        // Current selection adds relevance\n        if (context.selection) {\n            score += 0.2;\n            factors++;\n        }\n        // Project type recognition\n        if (context.project.type !== 'unknown') {\n            score += 0.3;\n            factors++;\n        }\n        // Git repository adds context\n        if ((_a = context.git) === null || _a === void 0 ? void 0 : _a.isRepository) {\n            score += 0.2;\n            factors++;\n        }\n        return factors > 0 ? score : 0;\n    }\n    /**\n     * Generate suggested actions based on context\n     */\n    generateSuggestedActions(context) {\n        const actions = [];\n        if (context.activeFile) {\n            actions.push(`Review ${context.activeFile.name}`);\n            if (context.activeFile.symbols.length > 0) {\n                actions.push('Explore code symbols');\n            }\n            if (context.activeFile.dependencies.length > 0) {\n                actions.push('Analyze dependencies');\n            }\n        }\n        if (context.selection) {\n            actions.push('Discuss selected code');\n            actions.push('Get suggestions for improvement');\n        }\n        if (context.project.buildSystem) {\n            actions.push(`Run ${context.project.buildSystem.type} build`);\n        }\n        if (context.project.testFramework) {\n            actions.push(`Execute ${context.project.testFramework.type} tests`);\n        }\n        return actions;\n    }\n    /**\n     * Assess project status\n     */\n    assessProjectStatus(context) {\n        if (context.project.type === 'unknown') {\n            return 'Project type not recognized';\n        }\n        if (context.project.structure.estimatedSize === 'large') {\n            return 'Large, complex project';\n        }\n        if (context.project.structure.estimatedSize === 'small') {\n            return 'Small, focused project';\n        }\n        return 'Medium-sized project';\n    }\n    /**\n     * Generate recommendations\n     */\n    generateRecommendations(context) {\n        const recommendations = [];\n        // Documentation recommendations\n        if (context.project.documentation.length === 0) {\n            recommendations.push('Consider adding documentation (README, etc.)');\n        }\n        // Testing recommendations\n        if (!context.project.testFramework) {\n            recommendations.push('Consider setting up a testing framework');\n        }\n        // Build system recommendations\n        if (!context.project.buildSystem) {\n            recommendations.push('Consider setting up a build system');\n        }\n        // Code organization recommendations\n        if (context.project.structure.sourceDirectories.length === 0) {\n            recommendations.push('Consider organizing code into source directories');\n        }\n        return recommendations;\n    }\n    /**\n     * Update response time metrics\n     */\n    updateResponseTimeMetrics(responseTime) {\n        const currentAverage = this.metrics.averageResponseTime;\n        const totalConversations = this.metrics.totalConversations;\n        this.metrics.averageResponseTime = (currentAverage * (totalConversations - 1) + responseTime) / totalConversations;\n    }\n    /**\n     * Get service metrics\n     */\n    getMetrics() {\n        return Object.assign({}, this.metrics);\n    }\n    /**\n     * Get service status\n     */\n    getStatus() {\n        var _a;\n        return {\n            initialized: this.isInitialized,\n            devPipeReady: ((_a = this.devPipeClient) === null || _a === void 0 ? void 0 : _a.isReady()) || false,\n            contextServiceReady: true,\n            config: Object.assign({}, this.config)\n        };\n    }\n    /**\n     * Update configuration\n     */\n    updateConfig(newConfig) {\n        this.config = Object.assign(Object.assign({}, this.config), newConfig);\n        if (this.config.debugMode) {\n            console.log('ConversationDevService config updated:', this.config);\n        }\n    }\n    /**\n     * Clear context cache\n     */\n    clearContextCache() {\n        this.contextService.clearCache();\n    }\n    /**\n     * Shutdown the service\n     */\n    shutdown() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.devPipeClient) {\n                yield this.devPipeClient.disconnect();\n            }\n            this.contextService.clearCache();\n            this.isInitialized = false;\n        });\n    }\n}\n//# sourceMappingURL=ConversationDevService.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/services/DevelopmentContextService.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/devpipe/DevPipeClient.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types/ModelSelection.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types.ts"],"map":"{\"version\":3,\"file\":\"ConversationDevService.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/services/ConversationDevService.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;GAKG;;AAIH,OAAO,EAAE,yBAAyB,EAAsB,MAAM,6BAA6B,CAAC;AAC5F,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AAgCzD,MAAM,OAAO,sBAAsB;IAQjC,YAAY,MAAwB,EAAE,SAAyC,EAAE;QAFzE,kBAAa,GAAG,KAAK,CAAC;QAG5B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,cAAc,GAAG,IAAI,yBAAyB,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;QAExE,IAAI,CAAC,MAAM,mBACT,uBAAuB,EAAE,IAAI,EAC7B,+BAA+B,EAAE,IAAI,EACrC,sBAAsB,EAAE,IAAI,EAC5B,YAAY,EAAE,UAAU,EACxB,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC,SAAS,IAAI,KAAK,IAC1C,MAAM,CACV,CAAC;QAEF,IAAI,CAAC,OAAO,GAAG;YACb,kBAAkB,EAAE,CAAC;YACrB,4BAA4B,EAAE,CAAC;YAC/B,YAAY,EAAE,CAAC;YACf,mBAAmB,EAAE,CAAC;YACtB,kBAAkB,EAAE,CAAC;YACrB,UAAU,EAAE,CAAC;SACd,CAAC;IACJ,CAAC;IAED;;OAEG;IACG,UAAU;;;YACd,IAAI,CAAC;gBACH,iEAAiE;gBACjE,IAAI,IAAI,CAAC,MAAM,CAAC,sBAAsB,KAAI,MAAA,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,0CAAE,OAAO,CAAA,EAAE,CAAC;oBACvF,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAC;gBACjC,CAAC;gBAED,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAE1B,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;oBAC1B,OAAO,CAAC,GAAG,CAAC,iDAAiD,CAAC,CAAC;gBACjE,CAAC;YACH,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,8CAA8C,EAAE,KAAK,CAAC,CAAC;gBACrE,2CAA2C;YAC7C,CAAC;QACH,CAAC;KAAA;IAED;;OAEG;IACW,iBAAiB;;YAC7B,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc;gBAAE,OAAO;YAEjD,MAAM,WAAW,GAAyB;gBACxC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU;gBAC3C,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,WAAW;gBAC7D,mBAAmB,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,kBAAkB;gBAC3E,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,eAAe;gBACrE,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa;gBACjE,cAAc,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,aAAa;gBACjE,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO;gBACpD,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,SAAS;aAClC,CAAC;YAEF,IAAI,CAAC,aAAa,GAAG,IAAI,aAAa,CAAC,WAAW,CAAC,CAAC;YAEpD,IAAI,CAAC;gBACH,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;gBAEtC,yBAAyB;gBACzB,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE;oBACtC,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;wBAC1B,OAAO,CAAC,GAAG,CAAC,gDAAgD,CAAC,CAAC;oBAChE,CAAC;gBACH,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;oBACvC,OAAO,CAAC,KAAK,CAAC,gBAAgB,EAAE,KAAK,CAAC,CAAC;oBACvC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBAC5B,CAAC,CAAC,CAAC;YAEL,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,IAAI,CAAC,oEAAoE,EAAE,KAAK,CAAC,CAAC;gBAC1F,IAAI,CAAC,aAAa,GAAG,SAAS,CAAC;YACjC,CAAC;QACH,CAAC;KAAA;IAED;;OAEG;IACG,IAAI;6DAAC,OAAe,EAAE,UAKxB,EAAE;;YACJ,MAAM,SAAS,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC7B,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE,CAAC;YAElC,IAAI,CAAC;gBACH,8BAA8B;gBAC9B,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAE1E,0BAA0B;gBAC1B,IAAI,QAAmC,CAAC;gBAExC,IAAI,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,OAAO,EAAE,KAAI,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;oBACxE,QAAQ,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;oBACtD,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;gBAC9B,CAAC;qBAAM,CAAC;oBACN,QAAQ,GAAG,MAAM,IAAI,CAAC,wBAAwB,CAAC,eAAe,CAAC,CAAC;gBAClE,CAAC;gBAED,iBAAiB;gBACjB,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;gBAC5C,IAAI,CAAC,yBAAyB,CAAC,YAAY,CAAC,CAAC;gBAE7C,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;oBAC1B,OAAO,CAAC,GAAG,CAAC,6BAA6B,YAAY,UAAU,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,OAAO,EAAE,EAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,UAAU,YAAY,CAAC,CAAC;gBACrI,CAAC;gBAED,OAAO,QAAQ,CAAC;YAElB,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;gBAC1B,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,KAAK,CAAC,CAAC;gBAE3D,OAAO;oBACL,OAAO,EAAE,KAAK;oBACd,KAAK,EAAE,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,4BAA4B;iBAC7E,CAAC;YACJ,CAAC;QACH,CAAC;KAAA;IAED;;OAEG;IACW,oBAAoB,CAChC,OAAe,EACf,OAAY;;YAEZ,MAAM,WAAW,GAAgB;gBAC/B,OAAO;gBACP,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI,IAAI,KAAK;aAC5B,CAAC;YAEF,qCAAqC;YACrC,IAAI,IAAI,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC;gBACxC,IAAI,CAAC;oBACH,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,wBAAwB,EAAE,CAAC;oBACjE,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC;oBAErE,MAAM,eAAe,mCAChB,WAAW,KACd,mBAAmB,EAAE,kBAAkB,EACvC,eAAe,EAAE,cAAc,EAC/B,iBAAiB,EAAE,OAAO,CAAC,iBAAiB,IAAI,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,EACpF,eAAe,EAAE;4BACf,IAAI,EAAE,kBAAkB,CAAC,OAAO,CAAC,IAAI;4BACrC,SAAS,EAAE,kBAAkB,CAAC,OAAO,CAAC,SAAS;4BAC/C,YAAY,EAAE,kBAAkB,CAAC,OAAO,CAAC,YAAY;yBACtD,GACF,CAAC;oBAEF,IAAI,CAAC,OAAO,CAAC,4BAA4B,EAAE,CAAC;oBAC5C,OAAO,eAAe,CAAC;gBAEzB,CAAC;gBAAC,OAAO,YAAY,EAAE,CAAC;oBACtB,OAAO,CAAC,IAAI,CAAC,2DAA2D,EAAE,YAAY,CAAC,CAAC;oBACxF,OAAO,WAAkC,CAAC;gBAC5C,CAAC;YACH,CAAC;YAED,OAAO,WAAkC,CAAC;QAC5C,CAAC;KAAA;IAED;;OAEG;IACW,wBAAwB;;YACpC,QAAQ,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;gBACjC,KAAK,SAAS;oBACZ,OAAO;wBACL,SAAS,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE;wBAC1D,UAAU,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE;wBAC5D,SAAS,EAAE,IAAI;wBACf,OAAO,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;wBACtD,GAAG,EAAE,IAAI;wBACT,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;qBACtB,CAAC;gBAEJ,KAAK,eAAe;oBAClB,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;gBAEpD,KAAK,UAAU,CAAC;gBAChB;oBACE,OAAO;wBACL,SAAS,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE;wBAC1D,UAAU,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,oBAAoB,EAAE;wBAC5D,SAAS,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,mBAAmB,EAAE;wBAC1D,OAAO,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,iBAAiB,EAAE;wBACtD,GAAG,EAAE,MAAM,IAAI,CAAC,cAAc,CAAC,aAAa,EAAE;wBAC9C,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;qBACtB,CAAC;YACN,CAAC;QACH,CAAC;KAAA;IAED;;OAEG;IACK,sBAAsB,CAAC,OAAe;QAC5C,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QAE3C,IAAI,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;YAC7G,OAAO,aAAa,CAAC;QACvB,CAAC;QAED,IAAI,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YACrI,OAAO,WAAW,CAAC;QACrB,CAAC;QAED,IAAI,YAAY,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;YACvJ,OAAO,cAAc,CAAC;QACxB,CAAC;QAED,IAAI,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,YAAY,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC;YACjJ,OAAO,eAAe,CAAC;QACzB,CAAC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED;;OAEG;IACW,cAAc,CAAC,OAA4B;;YACvD,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;gBACxB,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;YAClD,CAAC;YAED,IAAI,CAAC;gBACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,WAAW,CACnD,eAAqC,EACrC,OAAO,EACP,KAAK,CACN,CAAC;gBAEF,OAAO;oBACL,OAAO,EAAE,IAAI;oBACb,IAAI,EAAE,QAAQ;iBACf,CAAC;YAEJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,0BAA0B,EAAE,KAAK,CAAC,CAAC;gBAEjD,iCAAiC;gBACjC,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;oBAC1B,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;gBACzE,CAAC;gBAED,OAAO,MAAM,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;YACtD,CAAC;QACH,CAAC;KAAA;IAED;;OAEG;IACW,wBAAwB,CAAC,OAA4B;;YACjE,qEAAqE;YACrE,MAAM,eAAe,GAAgB;gBACnC,OAAO,EAAE,OAAO,CAAC,OAAO;gBACxB,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,QAAQ,EAAE,OAAO,CAAC,QAAQ;gBAC1B,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,aAAa,EAAE,OAAO,CAAC,eAAe,CAAC,mCAAmC;aAC3E,CAAC;YAEF,OAAO,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;QAC3D,CAAC;KAAA;IAED;;OAEG;IACG,uBAAuB;;YAM3B,IAAI,CAAC;gBACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;gBAE3D,oCAAoC;gBACpC,MAAM,gBAAgB,GAAG,IAAI,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC;gBAEjE,8CAA8C;gBAC9C,MAAM,gBAAgB,GAAG,IAAI,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;gBAEhE,wBAAwB;gBACxB,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,CAAC;gBAExD,2BAA2B;gBAC3B,MAAM,eAAe,GAAG,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;gBAE9D,OAAO;oBACL,gBAAgB;oBAChB,gBAAgB;oBAChB,aAAa;oBACb,eAAe;iBAChB,CAAC;YAEJ,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,OAAO,CAAC,KAAK,CAAC,2CAA2C,EAAE,KAAK,CAAC,CAAC;gBAClE,OAAO;oBACL,gBAAgB,EAAE,CAAC;oBACnB,gBAAgB,EAAE,EAAE;oBACpB,aAAa,EAAE,SAAS;oBACxB,eAAe,EAAE,CAAC,0CAA0C,CAAC;iBAC9D,CAAC;YACJ,CAAC;QACH,CAAC;KAAA;IAED;;OAEG;IACK,yBAAyB,CAAC,OAA2B;;QAC3D,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,IAAI,OAAO,GAAG,CAAC,CAAC;QAEhB,uCAAuC;QACvC,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,KAAK,IAAI,GAAG,CAAC;YACb,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,mCAAmC;QACnC,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;YACtB,KAAK,IAAI,GAAG,CAAC;YACb,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,2BAA2B;QAC3B,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YACvC,KAAK,IAAI,GAAG,CAAC;YACb,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,8BAA8B;QAC9B,IAAI,MAAA,OAAO,CAAC,GAAG,0CAAE,YAAY,EAAE,CAAC;YAC9B,KAAK,IAAI,GAAG,CAAC;YACb,OAAO,EAAE,CAAC;QACZ,CAAC;QAED,OAAO,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACjC,CAAC;IAED;;OAEG;IACK,wBAAwB,CAAC,OAA2B;QAC1D,MAAM,OAAO,GAAa,EAAE,CAAC;QAE7B,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,OAAO,CAAC,IAAI,CAAC,UAAU,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAC;YAElD,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC1C,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACvC,CAAC;YAED,IAAI,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC/C,OAAO,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACvC,CAAC;QACH,CAAC;QAED,IAAI,OAAO,CAAC,SAAS,EAAE,CAAC;YACtB,OAAO,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACtC,OAAO,CAAC,IAAI,CAAC,iCAAiC,CAAC,CAAC;QAClD,CAAC;QAED,IAAI,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;YAChC,OAAO,CAAC,IAAI,CAAC,OAAO,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,QAAQ,CAAC,CAAC;QAChE,CAAC;QAED,IAAI,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;YAClC,OAAO,CAAC,IAAI,CAAC,WAAW,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,QAAQ,CAAC,CAAC;QACtE,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IAED;;OAEG;IACK,mBAAmB,CAAC,OAA2B;QACrD,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE,CAAC;YACvC,OAAO,6BAA6B,CAAC;QACvC,CAAC;QAED,IAAI,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,KAAK,OAAO,EAAE,CAAC;YACxD,OAAO,wBAAwB,CAAC;QAClC,CAAC;QAED,IAAI,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,KAAK,OAAO,EAAE,CAAC;YACxD,OAAO,wBAAwB,CAAC;QAClC,CAAC;QAED,OAAO,sBAAsB,CAAC;IAChC,CAAC;IAED;;OAEG;IACK,uBAAuB,CAAC,OAA2B;QACzD,MAAM,eAAe,GAAa,EAAE,CAAC;QAErC,gCAAgC;QAChC,IAAI,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC/C,eAAe,CAAC,IAAI,CAAC,8CAA8C,CAAC,CAAC;QACvE,CAAC;QAED,0BAA0B;QAC1B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC;YACnC,eAAe,CAAC,IAAI,CAAC,yCAAyC,CAAC,CAAC;QAClE,CAAC;QAED,+BAA+B;QAC/B,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;YACjC,eAAe,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;QAC7D,CAAC;QAED,oCAAoC;QACpC,IAAI,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;YAC7D,eAAe,CAAC,IAAI,CAAC,kDAAkD,CAAC,CAAC;QAC3E,CAAC;QAED,OAAO,eAAe,CAAC;IACzB,CAAC;IAED;;OAEG;IACK,yBAAyB,CAAC,YAAoB;QACpD,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC;QACxD,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC;QAE3D,IAAI,CAAC,OAAO,CAAC,mBAAmB,GAAG,CAAC,cAAc,GAAG,CAAC,kBAAkB,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC,GAAG,kBAAkB,CAAC;IACrH,CAAC;IAED;;OAEG;IACH,UAAU;QACR,yBAAY,IAAI,CAAC,OAAO,EAAG;IAC7B,CAAC;IAED;;OAEG;IACH,SAAS;;QAMP,OAAO;YACL,WAAW,EAAE,IAAI,CAAC,aAAa;YAC/B,YAAY,EAAE,CAAA,MAAA,IAAI,CAAC,aAAa,0CAAE,OAAO,EAAE,KAAI,KAAK;YACpD,mBAAmB,EAAE,IAAI;YACzB,MAAM,oBAAO,IAAI,CAAC,MAAM,CAAE;SAC3B,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,SAAyC;QACpD,IAAI,CAAC,MAAM,mCAAQ,IAAI,CAAC,MAAM,GAAK,SAAS,CAAE,CAAC;QAE/C,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;YAC1B,OAAO,CAAC,GAAG,CAAC,wCAAwC,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;IAED;;OAEG;IACH,iBAAiB;QACf,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;IACnC,CAAC;IAED;;OAEG;IACG,QAAQ;;YACZ,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC;gBACvB,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAC;YACxC,CAAC;YAED,IAAI,CAAC,cAAc,CAAC,UAAU,EAAE,CAAC;YACjC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC7B,CAAC;KAAA;CACF\",\"sourcesContent\":[\"/**\\n * VaultPilot Conversation Development Service\\n * \\n * Provides enhanced conversation capabilities for development contexts using the dev-pipe framework.\\n * This service enables intelligent, context-aware AI conversations with comprehensive project understanding.\\n */\\n\\nimport { Notice } from 'obsidian';\\nimport type VaultPilotPlugin from '../main';\\nimport { DevelopmentContextService, DevelopmentContext } from './DevelopmentContextService';\\nimport { DevPipeClient } from '../devpipe/DevPipeClient';\\nimport { DevPipeMessageType, ModelSelectionConfig } from '../types/ModelSelection';\\nimport { ChatRequest, ChatResponse, APIResponse } from '../types';\\n\\nexport interface ConversationDevConfig {\\n  enableContextEnrichment: boolean;\\n  enableIntelligentModelSelection: boolean;\\n  enableDevPipeTransport: boolean;\\n  contextDepth: 'minimal' | 'standard' | 'comprehensive';\\n  debugMode: boolean;\\n}\\n\\nexport interface EnrichedChatRequest extends ChatRequest {\\n  development_context?: DevelopmentContext;\\n  context_summary?: string;\\n  conversation_type?: 'general' | 'code_review' | 'debugging' | 'architecture' | 'documentation';\\n  project_context?: {\\n    type: string;\\n    structure: any;\\n    dependencies: any[];\\n  };\\n}\\n\\nexport interface ConversationMetrics {\\n  totalConversations: number;\\n  contextEnhancedConversations: number;\\n  devPipeUsage: number;\\n  averageResponseTime: number;\\n  modelSelectionHits: number;\\n  errorCount: number;\\n}\\n\\nexport class ConversationDevService {\\n  private plugin: VaultPilotPlugin;\\n  private contextService: DevelopmentContextService;\\n  private devPipeClient?: DevPipeClient;\\n  private config: ConversationDevConfig;\\n  private metrics: ConversationMetrics;\\n  private isInitialized = false;\\n\\n  constructor(plugin: VaultPilotPlugin, config: Partial<ConversationDevConfig> = {}) {\\n    this.plugin = plugin;\\n    this.contextService = new DevelopmentContextService(plugin.app, plugin);\\n    \\n    this.config = {\\n      enableContextEnrichment: true,\\n      enableIntelligentModelSelection: true,\\n      enableDevPipeTransport: true,\\n      contextDepth: 'standard',\\n      debugMode: plugin.settings.debugMode || false,\\n      ...config\\n    };\\n\\n    this.metrics = {\\n      totalConversations: 0,\\n      contextEnhancedConversations: 0,\\n      devPipeUsage: 0,\\n      averageResponseTime: 0,\\n      modelSelectionHits: 0,\\n      errorCount: 0\\n    };\\n  }\\n\\n  /**\\n   * Initialize the conversation dev service\\n   */\\n  async initialize(): Promise<void> {\\n    try {\\n      // Initialize DevPipe if enabled and model selection is available\\n      if (this.config.enableDevPipeTransport && this.plugin.settings.modelSelection?.enabled) {\\n        await this.initializeDevPipe();\\n      }\\n\\n      this.isInitialized = true;\\n      \\n      if (this.config.debugMode) {\\n        console.log('ConversationDevService initialized successfully');\\n      }\\n    } catch (error) {\\n      console.error('Failed to initialize ConversationDevService:', error);\\n      // Don't throw - allow graceful degradation\\n    }\\n  }\\n\\n  /**\\n   * Initialize DevPipe client for enhanced communication\\n   */\\n  private async initializeDevPipe(): Promise<void> {\\n    if (!this.plugin.settings.modelSelection) return;\\n\\n    const modelConfig: ModelSelectionConfig = {\\n      server_url: this.plugin.settings.backendUrl,\\n      devpipe_path: this.plugin.settings.modelSelection.devpipePath,\\n      monitoring_interval: this.plugin.settings.modelSelection.monitoringInterval,\\n      fallback_enabled: this.plugin.settings.modelSelection.fallbackEnabled,\\n      cache_duration: this.plugin.settings.modelSelection.cacheDuration,\\n      retry_attempts: this.plugin.settings.modelSelection.retryAttempts,\\n      timeout: this.plugin.settings.modelSelection.timeout,\\n      debug_mode: this.config.debugMode\\n    };\\n\\n    this.devPipeClient = new DevPipeClient(modelConfig);\\n    \\n    try {\\n      await this.devPipeClient.initialize();\\n      \\n      // Set up event listeners\\n      this.devPipeClient.on('connected', () => {\\n        if (this.config.debugMode) {\\n          console.log('DevPipe connected for conversation dev service');\\n        }\\n      });\\n\\n      this.devPipeClient.on('error', (error) => {\\n        console.error('DevPipe error:', error);\\n        this.metrics.errorCount++;\\n      });\\n\\n    } catch (error) {\\n      console.warn('DevPipe initialization failed, falling back to standard transport:', error);\\n      this.devPipeClient = undefined;\\n    }\\n  }\\n\\n  /**\\n   * Enhanced chat function with development context\\n   */\\n  async chat(message: string, options: {\\n    conversation_id?: string;\\n    agent_id?: string;\\n    mode?: 'ask' | 'agent';\\n    conversation_type?: 'general' | 'code_review' | 'debugging' | 'architecture' | 'documentation';\\n  } = {}): Promise<APIResponse<ChatResponse>> {\\n    const startTime = Date.now();\\n    this.metrics.totalConversations++;\\n\\n    try {\\n      // Build enriched chat request\\n      const enrichedRequest = await this.buildEnrichedRequest(message, options);\\n\\n      // Choose transport method\\n      let response: APIResponse<ChatResponse>;\\n      \\n      if (this.devPipeClient?.isReady() && this.config.enableDevPipeTransport) {\\n        response = await this.sendViaDevPipe(enrichedRequest);\\n        this.metrics.devPipeUsage++;\\n      } else {\\n        response = await this.sendViaStandardTransport(enrichedRequest);\\n      }\\n\\n      // Update metrics\\n      const responseTime = Date.now() - startTime;\\n      this.updateResponseTimeMetrics(responseTime);\\n\\n      if (this.config.debugMode) {\\n        console.log(`Conversation completed in ${responseTime}ms via ${this.devPipeClient?.isReady() ? 'DevPipe' : 'Standard'} transport`);\\n      }\\n\\n      return response;\\n\\n    } catch (error) {\\n      this.metrics.errorCount++;\\n      console.error('ConversationDevService chat error:', error);\\n      \\n      return {\\n        success: false,\\n        error: error instanceof Error ? error.message : 'Unknown conversation error'\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Build enriched chat request with development context\\n   */\\n  private async buildEnrichedRequest(\\n    message: string, \\n    options: any\\n  ): Promise<EnrichedChatRequest> {\\n    const baseRequest: ChatRequest = {\\n      message,\\n      conversation_id: options.conversation_id,\\n      agent_id: options.agent_id,\\n      mode: options.mode || 'ask'\\n    };\\n\\n    // Add development context if enabled\\n    if (this.config.enableContextEnrichment) {\\n      try {\\n        const developmentContext = await this.gatherDevelopmentContext();\\n        const contextSummary = await this.contextService.getContextSummary();\\n        \\n        const enrichedRequest: EnrichedChatRequest = {\\n          ...baseRequest,\\n          development_context: developmentContext,\\n          context_summary: contextSummary,\\n          conversation_type: options.conversation_type || this.detectConversationType(message),\\n          project_context: {\\n            type: developmentContext.project.type,\\n            structure: developmentContext.project.structure,\\n            dependencies: developmentContext.project.dependencies\\n          }\\n        };\\n\\n        this.metrics.contextEnhancedConversations++;\\n        return enrichedRequest;\\n\\n      } catch (contextError) {\\n        console.warn('Failed to gather development context, using base request:', contextError);\\n        return baseRequest as EnrichedChatRequest;\\n      }\\n    }\\n\\n    return baseRequest as EnrichedChatRequest;\\n  }\\n\\n  /**\\n   * Gather development context based on configured depth\\n   */\\n  private async gatherDevelopmentContext(): Promise<DevelopmentContext> {\\n    switch (this.config.contextDepth) {\\n      case 'minimal':\\n        return {\\n          workspace: await this.contextService.getWorkspaceContext(),\\n          activeFile: await this.contextService.getActiveFileContext(),\\n          selection: null,\\n          project: await this.contextService.getProjectContext(),\\n          git: null,\\n          timestamp: Date.now()\\n        };\\n      \\n      case 'comprehensive':\\n        return await this.contextService.getFullContext();\\n      \\n      case 'standard':\\n      default:\\n        return {\\n          workspace: await this.contextService.getWorkspaceContext(),\\n          activeFile: await this.contextService.getActiveFileContext(),\\n          selection: await this.contextService.getSelectionContext(),\\n          project: await this.contextService.getProjectContext(),\\n          git: await this.contextService.getGitContext(),\\n          timestamp: Date.now()\\n        };\\n    }\\n  }\\n\\n  /**\\n   * Detect conversation type based on message content\\n   */\\n  private detectConversationType(message: string): 'general' | 'code_review' | 'debugging' | 'architecture' | 'documentation' {\\n    const lowerMessage = message.toLowerCase();\\n    \\n    if (lowerMessage.includes('review') || lowerMessage.includes('feedback') || lowerMessage.includes('improve')) {\\n      return 'code_review';\\n    }\\n    \\n    if (lowerMessage.includes('bug') || lowerMessage.includes('error') || lowerMessage.includes('debug') || lowerMessage.includes('fix')) {\\n      return 'debugging';\\n    }\\n    \\n    if (lowerMessage.includes('architecture') || lowerMessage.includes('design') || lowerMessage.includes('structure') || lowerMessage.includes('pattern')) {\\n      return 'architecture';\\n    }\\n    \\n    if (lowerMessage.includes('document') || lowerMessage.includes('explain') || lowerMessage.includes('comment') || lowerMessage.includes('readme')) {\\n      return 'documentation';\\n    }\\n    \\n    return 'general';\\n  }\\n\\n  /**\\n   * Send request via DevPipe transport\\n   */\\n  private async sendViaDevPipe(request: EnrichedChatRequest): Promise<APIResponse<ChatResponse>> {\\n    if (!this.devPipeClient) {\\n      throw new Error('DevPipe client not available');\\n    }\\n\\n    try {\\n      const response = await this.devPipeClient.sendMessage<ChatResponse>(\\n        'chat_enhanced' as DevPipeMessageType,\\n        request,\\n        30000\\n      );\\n\\n      return {\\n        success: true,\\n        data: response\\n      };\\n\\n    } catch (error) {\\n      console.error('DevPipe transport error:', error);\\n      \\n      // Fallback to standard transport\\n      if (this.config.debugMode) {\\n        console.log('Falling back to standard transport due to DevPipe error');\\n      }\\n      \\n      return await this.sendViaStandardTransport(request);\\n    }\\n  }\\n\\n  /**\\n   * Send request via standard HTTP transport\\n   */\\n  private async sendViaStandardTransport(request: EnrichedChatRequest): Promise<APIResponse<ChatResponse>> {\\n    // Convert enriched request back to standard format for compatibility\\n    const standardRequest: ChatRequest = {\\n      message: request.message,\\n      conversation_id: request.conversation_id,\\n      agent_id: request.agent_id,\\n      mode: request.mode,\\n      vault_context: request.context_summary // Include summary as vault context\\n    };\\n\\n    return await this.plugin.apiClient.chat(standardRequest);\\n  }\\n\\n  /**\\n   * Get conversation insights and recommendations\\n   */\\n  async getConversationInsights(): Promise<{\\n    contextRelevance: number;\\n    suggestedActions: string[];\\n    projectStatus: string;\\n    recommendations: string[];\\n  }> {\\n    try {\\n      const context = await this.contextService.getFullContext();\\n      \\n      // Calculate context relevance score\\n      const contextRelevance = this.calculateContextRelevance(context);\\n      \\n      // Generate suggestions based on project state\\n      const suggestedActions = this.generateSuggestedActions(context);\\n      \\n      // Assess project status\\n      const projectStatus = this.assessProjectStatus(context);\\n      \\n      // Generate recommendations\\n      const recommendations = this.generateRecommendations(context);\\n\\n      return {\\n        contextRelevance,\\n        suggestedActions,\\n        projectStatus,\\n        recommendations\\n      };\\n\\n    } catch (error) {\\n      console.error('Failed to generate conversation insights:', error);\\n      return {\\n        contextRelevance: 0,\\n        suggestedActions: [],\\n        projectStatus: 'unknown',\\n        recommendations: ['Consider checking your project structure']\\n      };\\n    }\\n  }\\n\\n  /**\\n   * Calculate context relevance score (0-1)\\n   */\\n  private calculateContextRelevance(context: DevelopmentContext): number {\\n    let score = 0;\\n    let factors = 0;\\n\\n    // Active file contributes to relevance\\n    if (context.activeFile) {\\n      score += 0.3;\\n      factors++;\\n    }\\n\\n    // Current selection adds relevance\\n    if (context.selection) {\\n      score += 0.2;\\n      factors++;\\n    }\\n\\n    // Project type recognition\\n    if (context.project.type !== 'unknown') {\\n      score += 0.3;\\n      factors++;\\n    }\\n\\n    // Git repository adds context\\n    if (context.git?.isRepository) {\\n      score += 0.2;\\n      factors++;\\n    }\\n\\n    return factors > 0 ? score : 0;\\n  }\\n\\n  /**\\n   * Generate suggested actions based on context\\n   */\\n  private generateSuggestedActions(context: DevelopmentContext): string[] {\\n    const actions: string[] = [];\\n\\n    if (context.activeFile) {\\n      actions.push(`Review ${context.activeFile.name}`);\\n      \\n      if (context.activeFile.symbols.length > 0) {\\n        actions.push('Explore code symbols');\\n      }\\n      \\n      if (context.activeFile.dependencies.length > 0) {\\n        actions.push('Analyze dependencies');\\n      }\\n    }\\n\\n    if (context.selection) {\\n      actions.push('Discuss selected code');\\n      actions.push('Get suggestions for improvement');\\n    }\\n\\n    if (context.project.buildSystem) {\\n      actions.push(`Run ${context.project.buildSystem.type} build`);\\n    }\\n\\n    if (context.project.testFramework) {\\n      actions.push(`Execute ${context.project.testFramework.type} tests`);\\n    }\\n\\n    return actions;\\n  }\\n\\n  /**\\n   * Assess project status\\n   */\\n  private assessProjectStatus(context: DevelopmentContext): string {\\n    if (context.project.type === 'unknown') {\\n      return 'Project type not recognized';\\n    }\\n\\n    if (context.project.structure.estimatedSize === 'large') {\\n      return 'Large, complex project';\\n    }\\n\\n    if (context.project.structure.estimatedSize === 'small') {\\n      return 'Small, focused project';\\n    }\\n\\n    return 'Medium-sized project';\\n  }\\n\\n  /**\\n   * Generate recommendations\\n   */\\n  private generateRecommendations(context: DevelopmentContext): string[] {\\n    const recommendations: string[] = [];\\n\\n    // Documentation recommendations\\n    if (context.project.documentation.length === 0) {\\n      recommendations.push('Consider adding documentation (README, etc.)');\\n    }\\n\\n    // Testing recommendations\\n    if (!context.project.testFramework) {\\n      recommendations.push('Consider setting up a testing framework');\\n    }\\n\\n    // Build system recommendations\\n    if (!context.project.buildSystem) {\\n      recommendations.push('Consider setting up a build system');\\n    }\\n\\n    // Code organization recommendations\\n    if (context.project.structure.sourceDirectories.length === 0) {\\n      recommendations.push('Consider organizing code into source directories');\\n    }\\n\\n    return recommendations;\\n  }\\n\\n  /**\\n   * Update response time metrics\\n   */\\n  private updateResponseTimeMetrics(responseTime: number): void {\\n    const currentAverage = this.metrics.averageResponseTime;\\n    const totalConversations = this.metrics.totalConversations;\\n    \\n    this.metrics.averageResponseTime = (currentAverage * (totalConversations - 1) + responseTime) / totalConversations;\\n  }\\n\\n  /**\\n   * Get service metrics\\n   */\\n  getMetrics(): ConversationMetrics {\\n    return { ...this.metrics };\\n  }\\n\\n  /**\\n   * Get service status\\n   */\\n  getStatus(): {\\n    initialized: boolean;\\n    devPipeReady: boolean;\\n    contextServiceReady: boolean;\\n    config: ConversationDevConfig;\\n  } {\\n    return {\\n      initialized: this.isInitialized,\\n      devPipeReady: this.devPipeClient?.isReady() || false,\\n      contextServiceReady: true,\\n      config: { ...this.config }\\n    };\\n  }\\n\\n  /**\\n   * Update configuration\\n   */\\n  updateConfig(newConfig: Partial<ConversationDevConfig>): void {\\n    this.config = { ...this.config, ...newConfig };\\n    \\n    if (this.config.debugMode) {\\n      console.log('ConversationDevService config updated:', this.config);\\n    }\\n  }\\n\\n  /**\\n   * Clear context cache\\n   */\\n  clearContextCache(): void {\\n    this.contextService.clearCache();\\n  }\\n\\n  /**\\n   * Shutdown the service\\n   */\\n  async shutdown(): Promise<void> {\\n    if (this.devPipeClient) {\\n      await this.devPipeClient.disconnect();\\n    }\\n    \\n    this.contextService.clearCache();\\n    this.isInitialized = false;\\n  }\\n}\"]}"}
