{"code":"/**\n * VaultPilot Main Panel\n *\n * Central content area that renders mode-specific interfaces (Chat, Workflow, Explorer, Analytics)\n * while maintaining context awareness and cross-panel communication.\n */\nimport { __awaiter } from \"tslib\";\nimport { Component, Notice } from 'obsidian';\nimport { createButton } from '../../design-system/components/core/Button';\nexport class MainPanel extends Component {\n    constructor(containerEl, plugin, workspace) {\n        super();\n        // State\n        this.currentMode = 'chat';\n        this.contextSources = [];\n        this.modeComponents = new Map();\n        // Week 8: Performance optimization and error handling\n        this.modeSwitchCache = new Map();\n        this.lastSwitchTime = 0;\n        this.performanceMetrics = new Map();\n        this.errorRecoveryAttempts = 0;\n        this.maxErrorRecoveryAttempts = 3;\n        this.containerEl = containerEl;\n        this.plugin = plugin;\n        this.workspace = workspace;\n        // Initialize mode components\n        this.initializeModeComponents();\n    }\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Setup container\n                this.containerEl.empty();\n                this.containerEl.addClass('vp-main-panel');\n                this.containerEl.setAttribute('role', 'main');\n                this.containerEl.setAttribute('aria-label', 'Main Workspace');\n                // Create panel structure\n                this.createPanelHeader();\n                this.createContentArea();\n                // Setup event listeners\n                this.setupEventListeners();\n                // Load initial mode\n                yield this.switchToMode(this.currentMode);\n                if (this.plugin.settings.debugMode) {\n                    console.log('MainPanel loaded successfully');\n                }\n            }\n            catch (error) {\n                console.error('Failed to load MainPanel:', error);\n                throw error;\n            }\n        });\n    }\n    createPanelHeader() {\n        this.headerEl = this.containerEl.createEl('div', {\n            cls: 'vp-main-panel-header',\n            attr: { 'role': 'banner' }\n        });\n        // Mode indicator\n        const modeInfo = this.headerEl.createEl('div', { cls: 'vp-mode-info' });\n        const modeIcon = modeInfo.createEl('div', { cls: 'vp-mode-icon' });\n        const modeTitle = modeInfo.createEl('div', { cls: 'vp-mode-details' });\n        const titleEl = modeTitle.createEl('h2', {\n            cls: 'vp-mode-title',\n            text: this.getModeDisplayName(this.currentMode)\n        });\n        const descEl = modeTitle.createEl('p', {\n            cls: 'vp-mode-description',\n            text: this.getModeDescription(this.currentMode)\n        });\n        // Mode actions\n        this.actionsEl = this.headerEl.createEl('div', {\n            cls: 'vp-mode-actions',\n            attr: { 'role': 'toolbar', 'aria-label': 'Mode Actions' }\n        });\n    }\n    createContentArea() {\n        this.contentEl = this.containerEl.createEl('div', {\n            cls: 'vp-main-panel-content',\n            attr: {\n                'role': 'region',\n                'aria-label': `${this.getModeDisplayName(this.currentMode)} Content`,\n                'data-mode': this.currentMode\n            }\n        });\n    }\n    initializeModeComponents() {\n        // Initialize Chat Mode Component\n        this.modeComponents.set('chat', new ChatModeComponent());\n        // Initialize Workflow Mode Component  \n        this.modeComponents.set('workflow', new WorkflowModeComponent());\n        // Initialize Explorer Mode Component\n        this.modeComponents.set('explorer', new ExplorerModeComponent());\n        // Initialize Analytics Mode Component\n        this.modeComponents.set('analytics', new AnalyticsModeComponent());\n    }\n    setupEventListeners() {\n        // Listen for workspace mode changes\n        this.workspace.on('mode-changed', (mode) => {\n            this.switchToMode(mode);\n        });\n        // Listen for context changes\n        // Note: 'context-updated' event needs to be added to WorkspaceEvents interface\n        this.workspace.on('context-updated', (sources) => {\n            this.updateContext(sources);\n        });\n        // Listen for file changes\n        this.plugin.app.workspace.on('active-leaf-change', () => {\n            this.handleActiveFileChange();\n        });\n    }\n    // Public API Methods\n    switchToMode(mode) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.currentMode === mode)\n                return;\n            // Week 8: Performance optimization - debounce rapid mode switches\n            const now = performance.now();\n            if (now - this.lastSwitchTime < 100) { // 100ms debounce\n                clearTimeout(this.switchDebounceTimeout);\n                this.switchDebounceTimeout = window.setTimeout(() => {\n                    this.switchToMode(mode);\n                }, 100);\n                return;\n            }\n            this.lastSwitchTime = now;\n            const switchStartTime = performance.now();\n            try {\n                // Week 8: Error recovery mechanism\n                this.errorRecoveryAttempts = 0;\n                yield this._performModeSwitch(mode, switchStartTime);\n            }\n            catch (error) {\n                yield this._handleModeSwitchError(mode, error, switchStartTime);\n            }\n        });\n    }\n    _performModeSwitch(mode, startTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Store previous mode for rollback\n            const previousMode = this.currentMode;\n            try {\n                // Week 8: Performance optimization - check for cached mode content\n                let useCache = false;\n                let cachedContent;\n                if (this.modeSwitchCache.has(mode)) {\n                    cachedContent = this.modeSwitchCache.get(mode);\n                    // Use cache if content was created less than 5 minutes ago\n                    if (cachedContent && cachedContent.dataset.cacheTime) {\n                        const cacheAge = Date.now() - parseInt(cachedContent.dataset.cacheTime);\n                        useCache = cacheAge < 5 * 60 * 1000; // 5 minutes\n                    }\n                }\n                // Cleanup current mode\n                if (this.currentModeComponent) {\n                    this.currentModeComponent.cleanup();\n                }\n                // Update state\n                this.currentMode = mode;\n                // Update header\n                this.updateHeader();\n                // Clear content area and prepare for new content\n                if (this.contentEl) {\n                    this.contentEl.empty();\n                    this.contentEl.setAttribute('data-mode', mode);\n                    this.contentEl.setAttribute('aria-label', `${this.getModeDisplayName(mode)} Content`);\n                }\n                // Load mode component with caching\n                this.currentModeComponent = this.modeComponents.get(mode);\n                if (this.currentModeComponent && this.contentEl) {\n                    if (useCache && cachedContent) {\n                        // Use cached content for faster rendering\n                        this.contentEl.appendChild(cachedContent.cloneNode(true));\n                        // Update context for cached content\n                        this.currentModeComponent.updateContext(this.contextSources);\n                        if (this.plugin.settings.debugMode) {\n                            console.log(`Used cached content for ${mode} mode`);\n                        }\n                    }\n                    else {\n                        // Render fresh content\n                        const context = {\n                            plugin: this.plugin,\n                            workspace: this.workspace,\n                            contextSources: this.contextSources,\n                            activeFile: this.plugin.app.workspace.getActiveFile() || undefined,\n                            userPreferences: this.plugin.settings\n                        };\n                        yield this.currentModeComponent.render(this.contentEl, context);\n                        // Cache the rendered content for future use\n                        const contentClone = this.contentEl.cloneNode(true);\n                        contentClone.dataset.cacheTime = Date.now().toString();\n                        this.modeSwitchCache.set(mode, contentClone);\n                        // Limit cache size to prevent memory leaks\n                        if (this.modeSwitchCache.size > 4) {\n                            const oldestMode = this.modeSwitchCache.keys().next().value;\n                            if (oldestMode)\n                                this.modeSwitchCache.delete(oldestMode);\n                        }\n                    }\n                    this.updateModeActions();\n                }\n                // Week 8: Optimized transition animation\n                this.containerEl.addClass('vp-mode-transitioning');\n                // Use requestAnimationFrame for smoother animation\n                requestAnimationFrame(() => {\n                    setTimeout(() => {\n                        this.containerEl.removeClass('vp-mode-transitioning');\n                    }, 200); // Reduced from 300ms to 200ms\n                });\n                // Week 8: Performance metrics tracking\n                const switchDuration = performance.now() - startTime;\n                this.performanceMetrics.set(`switch_${previousMode}_to_${mode}`, switchDuration);\n                // Warning if switch takes too long\n                if (switchDuration > 150) {\n                    console.warn(`Mode switch from ${previousMode} to ${mode} took ${switchDuration.toFixed(2)}ms (target: <150ms)`);\n                }\n                if (this.plugin.settings.debugMode) {\n                    console.log(`MainPanel switched from ${previousMode} to ${mode} in ${switchDuration.toFixed(2)}ms`);\n                }\n            }\n            catch (error) {\n                // Rollback to previous mode on error\n                this.currentMode = previousMode;\n                this.updateHeader();\n                throw error;\n            }\n        });\n    }\n    _handleModeSwitchError(mode, error, startTime) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.errorRecoveryAttempts++;\n            console.error(`Failed to switch to ${mode} mode (attempt ${this.errorRecoveryAttempts}):`, error);\n            if (this.errorRecoveryAttempts <= this.maxErrorRecoveryAttempts) {\n                // Try to recover by clearing cache and retrying\n                this.modeSwitchCache.delete(mode);\n                // Brief delay before retry\n                yield new Promise(resolve => setTimeout(resolve, 500));\n                try {\n                    yield this._performModeSwitch(mode, startTime);\n                    new Notice(`Successfully recovered and switched to ${mode} mode`);\n                    return;\n                }\n                catch (retryError) {\n                    console.error(`Recovery attempt ${this.errorRecoveryAttempts} failed:`, retryError);\n                }\n            }\n            // Final fallback - try to revert to a safe mode\n            if (this.errorRecoveryAttempts > this.maxErrorRecoveryAttempts) {\n                new Notice(`Failed to switch to ${mode} mode after ${this.maxErrorRecoveryAttempts} attempts. Reverting to chat mode.`, 0);\n                try {\n                    // Force switch to chat mode as fallback\n                    this.currentMode = 'chat';\n                    this.updateHeader();\n                    if (this.contentEl) {\n                        this.contentEl.empty();\n                        this.contentEl.createEl('div', {\n                            cls: 'vp-error-fallback',\n                            text: `Failed to load ${mode} mode. Please try again or contact support.`\n                        });\n                    }\n                }\n                catch (fallbackError) {\n                    console.error('Critical error: Failed to load fallback mode:', fallbackError);\n                    new Notice('Critical error: Unable to load any mode. Please restart VaultPilot.', 0);\n                }\n            }\n            else {\n                new Notice(`Failed to switch to ${mode} mode. Retrying...`);\n            }\n        });\n    }\n    updateContext(sources) {\n        this.contextSources = [...sources];\n        // Update current mode component\n        if (this.currentModeComponent) {\n            this.currentModeComponent.updateContext(sources);\n        }\n        // Update header context indicator\n        this.updateContextIndicator();\n    }\n    getCurrentMode() {\n        return this.currentMode;\n    }\n    getModeComponent(mode) {\n        return this.modeComponents.get(mode);\n    }\n    // Private helper methods\n    updateHeader() {\n        if (!this.headerEl)\n            return;\n        const titleEl = this.headerEl.querySelector('.vp-mode-title');\n        const descEl = this.headerEl.querySelector('.vp-mode-description');\n        if (titleEl)\n            titleEl.textContent = this.getModeDisplayName(this.currentMode);\n        if (descEl)\n            descEl.textContent = this.getModeDescription(this.currentMode);\n        // Update mode icon\n        const iconEl = this.headerEl.querySelector('.vp-mode-icon');\n        if (iconEl) {\n            iconEl.empty();\n            iconEl.addClass(`vp-mode-icon-${this.currentMode}`);\n        }\n    }\n    updateModeActions() {\n        if (!this.actionsEl || !this.currentModeComponent)\n            return;\n        this.actionsEl.empty();\n        const actions = this.currentModeComponent.getActions();\n        actions.forEach(action => {\n            createButton(this.actionsEl, {\n                variant: 'tertiary',\n                size: 'sm',\n                icon: action.icon,\n                children: action.label,\n                disabled: !action.enabled,\n                ariaLabel: action.label + (action.shortcut ? ` (${action.shortcut})` : ''),\n                onClick: action.callback\n            });\n        });\n    }\n    updateContextIndicator() {\n        var _a;\n        // Add context indicator to header showing active sources\n        const existingIndicator = (_a = this.headerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-context-indicator');\n        if (existingIndicator)\n            existingIndicator.remove();\n        if (!this.headerEl || this.contextSources.length === 0)\n            return;\n        const indicator = this.headerEl.createEl('div', {\n            cls: 'vp-context-indicator',\n            attr: { 'aria-label': `${this.contextSources.length} context sources active` }\n        });\n        indicator.createEl('span', {\n            cls: 'vp-context-count',\n            text: this.contextSources.length.toString()\n        });\n        indicator.createEl('span', {\n            cls: 'vp-context-label',\n            text: this.contextSources.length === 1 ? 'source' : 'sources'\n        });\n    }\n    handleActiveFileChange() {\n        const activeFile = this.plugin.app.workspace.getActiveFile();\n        // Update mode component with new active file\n        if (this.currentModeComponent) {\n            const context = {\n                plugin: this.plugin,\n                workspace: this.workspace,\n                contextSources: this.contextSources,\n                activeFile: activeFile || undefined,\n                userPreferences: this.plugin.settings\n            };\n            // Note: This would need to be added to the ModeComponent interface\n            // this.currentModeComponent.updateActiveFile?.(activeFile);\n        }\n    }\n    getModeDisplayName(mode) {\n        const names = {\n            chat: 'AI Chat',\n            workflow: 'Workflow Builder',\n            explorer: 'Vault Explorer',\n            analytics: 'Analytics Dashboard'\n        };\n        return names[mode];\n    }\n    getModeDescription(mode) {\n        const descriptions = {\n            chat: 'Intelligent conversations with context awareness',\n            workflow: 'Automated task planning and execution',\n            explorer: 'Smart vault navigation with AI insights',\n            analytics: 'Performance metrics and usage analytics'\n        };\n        return descriptions[mode];\n    }\n    // Week 8: Performance monitoring and optimization methods\n    /**\n     * Get performance metrics for mode switching\n     */\n    getPerformanceMetrics() {\n        return new Map(this.performanceMetrics);\n    }\n    /**\n     * Clear performance metrics cache\n     */\n    clearPerformanceMetrics() {\n        this.performanceMetrics.clear();\n    }\n    /**\n     * Get average mode switch time\n     */\n    getAverageModeSwitchTime() {\n        const switchMetrics = Array.from(this.performanceMetrics.entries())\n            .filter(([key]) => key.startsWith('switch_'))\n            .map(([, duration]) => duration);\n        if (switchMetrics.length === 0)\n            return 0;\n        return switchMetrics.reduce((sum, duration) => sum + duration, 0) / switchMetrics.length;\n    }\n    /**\n     * Clear mode switch cache\n     */\n    clearModeSwitchCache() {\n        this.modeSwitchCache.clear();\n        if (this.plugin.settings.debugMode) {\n            console.log('Mode switch cache cleared');\n        }\n    }\n    /**\n     * Get cache status\n     */\n    getCacheStatus() {\n        return {\n            size: this.modeSwitchCache.size,\n            modes: Array.from(this.modeSwitchCache.keys())\n        };\n    }\n    /**\n     * Force refresh current mode (bypass cache)\n     */\n    forceRefreshCurrentMode() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const currentMode = this.currentMode;\n            // Clear cache for current mode\n            this.modeSwitchCache.delete(currentMode);\n            // Force re-render\n            if (this.currentModeComponent && this.contentEl) {\n                this.contentEl.empty();\n                const context = {\n                    plugin: this.plugin,\n                    workspace: this.workspace,\n                    contextSources: this.contextSources,\n                    activeFile: this.plugin.app.workspace.getActiveFile() || undefined,\n                    userPreferences: this.plugin.settings\n                };\n                yield this.currentModeComponent.render(this.contentEl, context);\n                this.updateModeActions();\n                new Notice(`${this.getModeDisplayName(currentMode)} mode refreshed`);\n            }\n        });\n    }\n    /**\n     * Week 8: Integration testing support\n     */\n    runIntegrationTest() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const modes = ['chat', 'workflow', 'explorer', 'analytics'];\n                const testResults = [];\n                for (const mode of modes) {\n                    const startTime = performance.now();\n                    yield this.switchToMode(mode);\n                    const endTime = performance.now();\n                    const switchTime = endTime - startTime;\n                    const passed = switchTime < 200; // 200ms threshold for integration test\n                    testResults.push(passed);\n                    if (!passed) {\n                        console.warn(`Integration test failed: ${mode} mode switch took ${switchTime.toFixed(2)}ms`);\n                    }\n                }\n                const allPassed = testResults.every(result => result);\n                if (allPassed) {\n                    new Notice('✅ MainPanel integration test passed');\n                }\n                else {\n                    new Notice('❌ MainPanel integration test failed - check console for details');\n                }\n                return allPassed;\n            }\n            catch (error) {\n                console.error('Integration test error:', error);\n                new Notice('❌ MainPanel integration test error');\n                return false;\n            }\n        });\n    }\n    // Component lifecycle\n    onunload() {\n        // Week 8: Cleanup performance optimization resources\n        clearTimeout(this.switchDebounceTimeout);\n        this.modeSwitchCache.clear();\n        this.performanceMetrics.clear();\n        // Cleanup current mode component\n        if (this.currentModeComponent) {\n            this.currentModeComponent.cleanup();\n        }\n        // Cleanup all mode components\n        this.modeComponents.forEach(component => {\n            component.cleanup();\n        });\n        this.modeComponents.clear();\n        super.onunload();\n    }\n}\n// Mode Component Implementations\nclass ChatModeComponent {\n    render(container, context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.containerEl = container;\n            this.plugin = context.plugin;\n            // Create chat interface\n            this.chatContainer = container.createEl('div', { cls: 'vp-chat-interface' });\n            // Chat header\n            const chatHeader = this.chatContainer.createEl('div', { cls: 'vp-chat-header' });\n            chatHeader.createEl('h3', { text: 'AI Assistant' });\n            const contextInfo = chatHeader.createEl('div', { cls: 'vp-chat-context-info' });\n            contextInfo.createEl('span', {\n                text: `Using ${context.contextSources.length} context sources`,\n                cls: 'vp-context-summary'\n            });\n            // Chat messages area\n            const messagesArea = this.chatContainer.createEl('div', {\n                cls: 'vp-chat-messages',\n                attr: { 'role': 'log', 'aria-label': 'Chat Messages' }\n            });\n            // Chat input area\n            const inputArea = this.chatContainer.createEl('div', { cls: 'vp-chat-input-area' });\n            const inputContainer = inputArea.createEl('div', { cls: 'vp-chat-input-container' });\n            const chatInput = inputContainer.createEl('textarea', {\n                cls: 'vp-chat-input',\n                attr: {\n                    placeholder: 'Ask anything about your vault...',\n                    'aria-label': 'Chat message input'\n                }\n            });\n            const sendButton = createButton(inputContainer, {\n                variant: 'primary',\n                size: 'sm',\n                icon: 'send',\n                ariaLabel: 'Send message',\n                onClick: () => this.sendMessage(chatInput.value)\n            });\n            // Auto-resize textarea\n            chatInput.addEventListener('input', () => {\n                chatInput.style.height = 'auto';\n                chatInput.style.height = chatInput.scrollHeight + 'px';\n            });\n            // Send on Enter (Shift+Enter for new line)\n            chatInput.addEventListener('keydown', (e) => {\n                if (e.key === 'Enter' && !e.shiftKey) {\n                    e.preventDefault();\n                    this.sendMessage(chatInput.value);\n                }\n            });\n        });\n    }\n    updateContext(sources) {\n        var _a;\n        // Update context info in chat header\n        const contextInfo = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-context-summary');\n        if (contextInfo) {\n            contextInfo.textContent = `Using ${sources.length} context sources`;\n        }\n    }\n    getActions() {\n        return [\n            {\n                id: 'clear-chat',\n                label: 'Clear Chat',\n                icon: 'trash-2',\n                callback: () => this.clearChat(),\n                enabled: true\n            },\n            {\n                id: 'export-chat',\n                label: 'Export Chat',\n                icon: 'download',\n                callback: () => this.exportChat(),\n                enabled: true\n            }\n        ];\n    }\n    sendMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            if (!message.trim() || !this.plugin)\n                return;\n            const messagesArea = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-chat-messages');\n            const chatInput = (_b = this.containerEl) === null || _b === void 0 ? void 0 : _b.querySelector('.vp-chat-input');\n            if (!messagesArea || !chatInput)\n                return;\n            // Clear input\n            chatInput.value = '';\n            chatInput.style.height = 'auto';\n            // Add user message\n            this.addMessage(messagesArea, 'user', message);\n            // Add thinking indicator\n            const thinkingEl = this.addMessage(messagesArea, 'assistant', 'Thinking...');\n            thinkingEl.addClass('vp-message-thinking');\n            try {\n                // Send to API\n                const response = yield this.plugin.apiClient.chat({\n                    message,\n                    vault_context: this.getVaultContext()\n                });\n                // Remove thinking indicator\n                thinkingEl.remove();\n                if (response.success && response.data) {\n                    this.addMessage(messagesArea, 'assistant', response.data.response);\n                }\n                else {\n                    this.addMessage(messagesArea, 'error', `Error: ${response.error}`);\n                }\n            }\n            catch (error) {\n                thinkingEl.remove();\n                this.addMessage(messagesArea, 'error', `Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n            // Scroll to bottom\n            messagesArea.scrollTop = messagesArea.scrollHeight;\n        });\n    }\n    addMessage(container, type, content) {\n        const messageEl = container.createEl('div', {\n            cls: `vp-chat-message vp-message-${type}`,\n            attr: { 'role': 'article' }\n        });\n        const avatar = messageEl.createEl('div', { cls: 'vp-message-avatar' });\n        avatar.createEl('span', { text: type === 'user' ? 'U' : type === 'assistant' ? 'AI' : '!' });\n        const messageContent = messageEl.createEl('div', { cls: 'vp-message-content' });\n        messageContent.createEl('div', {\n            cls: 'vp-message-text',\n            text: content\n        });\n        const timestamp = messageEl.createEl('div', {\n            cls: 'vp-message-timestamp',\n            text: new Date().toLocaleTimeString()\n        });\n        return messageEl;\n    }\n    getVaultContext() {\n        var _a;\n        // Get context from active sources\n        // This would integrate with the ContextPanel\n        const activeFile = (_a = this.plugin) === null || _a === void 0 ? void 0 : _a.app.workspace.getActiveFile();\n        return activeFile ? activeFile.path : '';\n    }\n    clearChat() {\n        var _a;\n        const messagesArea = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-chat-messages');\n        if (messagesArea) {\n            messagesArea.empty();\n        }\n    }\n    exportChat() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const messagesArea = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-chat-messages');\n            if (!messagesArea || !this.plugin)\n                return;\n            const messages = Array.from(messagesArea.querySelectorAll('.vp-chat-message'));\n            if (messages.length === 0) {\n                new Notice('No chat messages to export');\n                return;\n            }\n            let exportContent = '# VaultPilot Chat Export\\n\\n';\n            exportContent += `Generated: ${new Date().toISOString()}\\n\\n`;\n            messages.forEach((msg, index) => {\n                var _a, _b;\n                const type = msg.classList.contains('vp-message-user') ? 'User' : 'Assistant';\n                const content = ((_a = msg.querySelector('.vp-message-text')) === null || _a === void 0 ? void 0 : _a.textContent) || '';\n                const timestamp = ((_b = msg.querySelector('.vp-message-timestamp')) === null || _b === void 0 ? void 0 : _b.textContent) || '';\n                exportContent += `## ${type} (${timestamp})\\n\\n${content}\\n\\n`;\n            });\n            try {\n                const filename = `VaultPilot Chat Export ${new Date().toISOString().split('T')[0]}.md`;\n                yield this.plugin.app.vault.create(filename, exportContent);\n                new Notice(`Chat exported to ${filename}`);\n            }\n            catch (error) {\n                new Notice('Failed to export chat');\n            }\n        });\n    }\n    cleanup() {\n        // Cleanup chat-specific resources\n        this.containerEl = undefined;\n        this.chatContainer = undefined;\n        this.plugin = undefined;\n    }\n}\nclass WorkflowModeComponent {\n    render(container, context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.containerEl = container;\n            this.plugin = context.plugin;\n            this.workspace = context.workspace;\n            // Create workflow interface\n            const workflowContainer = container.createEl('div', { cls: 'vp-workflow-interface' });\n            // Workflow header\n            const workflowHeader = workflowContainer.createEl('div', { cls: 'vp-workflow-header' });\n            workflowHeader.createEl('h3', { text: 'Workflow Builder' });\n            const contextInfo = workflowHeader.createEl('div', { cls: 'vp-workflow-context-info' });\n            contextInfo.createEl('span', {\n                text: `Planning with ${context.contextSources.length} context sources`,\n                cls: 'vp-context-summary'\n            });\n            // Workflow creation area\n            const creationArea = workflowContainer.createEl('div', { cls: 'vp-workflow-creation' });\n            const goalContainer = creationArea.createEl('div', { cls: 'vp-goal-container' });\n            goalContainer.createEl('label', {\n                text: 'Workflow Goal:',\n                attr: { 'for': 'workflow-goal-input' }\n            });\n            const goalInput = goalContainer.createEl('textarea', {\n                cls: 'vp-goal-input',\n                attr: {\n                    id: 'workflow-goal-input',\n                    placeholder: 'Describe what you want to accomplish...',\n                    'aria-label': 'Workflow goal description'\n                }\n            });\n            const optionsContainer = creationArea.createEl('div', { cls: 'vp-workflow-options' });\n            const timeframeSelect = optionsContainer.createEl('select', {\n                cls: 'vp-timeframe-select',\n                attr: { 'aria-label': 'Workflow timeframe' }\n            });\n            ['1 hour', '1 day', '1 week', '1 month'].forEach(timeframe => {\n                timeframeSelect.createEl('option', { value: timeframe, text: timeframe });\n            });\n            const exportButton = createButton(optionsContainer, {\n                variant: 'primary',\n                size: 'md',\n                children: 'Generate Workflow',\n                icon: 'zap',\n                onClick: () => this.generateWorkflow(goalInput.value, timeframeSelect.value)\n            });\n            // Workflow display area\n            const workflowDisplay = workflowContainer.createEl('div', {\n                cls: 'vp-workflow-display',\n                attr: { 'role': 'region', 'aria-label': 'Generated Workflow' }\n            });\n            // Auto-resize textarea\n            goalInput.addEventListener('input', () => {\n                goalInput.style.height = 'auto';\n                goalInput.style.height = goalInput.scrollHeight + 'px';\n            });\n        });\n    }\n    updateContext(sources) {\n        var _a;\n        const contextInfo = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-context-summary');\n        if (contextInfo) {\n            contextInfo.textContent = `Planning with ${sources.length} context sources`;\n        }\n    }\n    getActions() {\n        return [\n            {\n                id: 'export-workflow',\n                label: 'Export Workflow',\n                icon: 'download',\n                callback: () => this.exportWorkflow(),\n                enabled: !!this.currentWorkflow\n            },\n            {\n                id: 'save-workflow',\n                label: 'Save Workflow',\n                icon: 'save',\n                callback: () => this.saveWorkflow(),\n                enabled: !!this.currentWorkflow\n            }\n        ];\n    }\n    generateWorkflow(goal, timeframe) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (!goal.trim() || !this.plugin)\n                return;\n            const workflowDisplay = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-workflow-display');\n            if (!workflowDisplay)\n                return;\n            // Clear previous workflow\n            workflowDisplay.empty();\n            // Add loading indicator\n            const loadingEl = workflowDisplay.createEl('div', { cls: 'vp-workflow-loading' });\n            loadingEl.createEl('div', { cls: 'vp-loading-spinner' });\n            loadingEl.createEl('p', { text: 'Generating workflow...' });\n            try {\n                // Get context for planning\n                const context = this.getWorkflowContext();\n                // Call workflow planning API\n                const response = yield this.plugin.apiClient.planTasks({\n                    goal,\n                    context,\n                    timeframe\n                });\n                // Remove loading indicator\n                loadingEl.remove();\n                if (response.success && response.data) {\n                    this.currentWorkflow = response.data;\n                    this.renderWorkflow(response.data);\n                }\n                else {\n                    this.showError(`Failed to generate workflow: ${response.error}`);\n                }\n            }\n            catch (error) {\n                loadingEl.remove();\n                this.showError(`Error generating workflow: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    renderWorkflow(workflowData) {\n        var _a, _b, _c, _d, _e;\n        const workflowDisplay = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-workflow-display');\n        if (!workflowDisplay)\n            return;\n        // Workflow title\n        const titleSection = workflowDisplay.createEl('div', { cls: 'vp-workflow-title-section' });\n        titleSection.createEl('h4', {\n            text: ((_b = workflowData.plan) === null || _b === void 0 ? void 0 : _b.title) || 'Generated Workflow',\n            cls: 'vp-workflow-title'\n        });\n        if ((_c = workflowData.plan) === null || _c === void 0 ? void 0 : _c.description) {\n            titleSection.createEl('p', {\n                text: workflowData.plan.description,\n                cls: 'vp-workflow-description'\n            });\n        }\n        // Workflow metadata\n        const metaSection = workflowDisplay.createEl('div', { cls: 'vp-workflow-meta' });\n        if ((_d = workflowData.plan) === null || _d === void 0 ? void 0 : _d.estimated_duration) {\n            const durationEl = metaSection.createEl('div', { cls: 'vp-meta-item' });\n            durationEl.createEl('span', { text: 'Duration:', cls: 'vp-meta-label' });\n            durationEl.createEl('span', { text: workflowData.plan.estimated_duration, cls: 'vp-meta-value' });\n        }\n        // Tasks section\n        if (((_e = workflowData.plan) === null || _e === void 0 ? void 0 : _e.tasks) && workflowData.plan.tasks.length > 0) {\n            const tasksSection = workflowDisplay.createEl('div', { cls: 'vp-workflow-tasks' });\n            tasksSection.createEl('h5', { text: 'Tasks', cls: 'vp-section-title' });\n            const tasksList = tasksSection.createEl('div', { cls: 'vp-tasks-list' });\n            workflowData.plan.tasks.forEach((task, index) => {\n                this.renderTask(tasksList, task, index);\n            });\n        }\n        // Milestones section\n        if (workflowData.milestones && workflowData.milestones.length > 0) {\n            const milestonesSection = workflowDisplay.createEl('div', { cls: 'vp-workflow-milestones' });\n            milestonesSection.createEl('h5', { text: 'Milestones', cls: 'vp-section-title' });\n            const milestonesList = milestonesSection.createEl('div', { cls: 'vp-milestones-list' });\n            workflowData.milestones.forEach((milestone) => {\n                this.renderMilestone(milestonesList, milestone);\n            });\n        }\n    }\n    renderTask(container, task, index) {\n        const taskEl = container.createEl('div', {\n            cls: `vp-task-item vp-priority-${task.priority || 'medium'}`,\n            attr: { 'role': 'listitem' }\n        });\n        const taskHeader = taskEl.createEl('div', { cls: 'vp-task-header' });\n        const checkbox = taskHeader.createEl('input', {\n            type: 'checkbox',\n            cls: 'vp-task-checkbox',\n            attr: {\n                id: `task-${index}`,\n                'aria-describedby': `task-desc-${index}`,\n                checked: task.status === 'completed'\n            }\n        });\n        const taskInfo = taskHeader.createEl('div', { cls: 'vp-task-info' });\n        const taskTitle = taskInfo.createEl('label', {\n            text: task.title || `Task ${index + 1}`,\n            cls: 'vp-task-title',\n            attr: { 'for': `task-${index}` }\n        });\n        const priorityBadge = taskHeader.createEl('span', {\n            text: task.priority || 'medium',\n            cls: `vp-priority-badge vp-priority-${task.priority || 'medium'}`\n        });\n        if (task.description) {\n            const taskDesc = taskEl.createEl('p', {\n                text: task.description,\n                cls: 'vp-task-description',\n                attr: { id: `task-desc-${index}` }\n            });\n        }\n        if (task.estimated_time) {\n            const timeEl = taskEl.createEl('div', { cls: 'vp-task-time' });\n            timeEl.createEl('span', { text: 'Estimated time:', cls: 'vp-time-label' });\n            timeEl.createEl('span', { text: task.estimated_time, cls: 'vp-time-value' });\n        }\n        // Task completion handler\n        checkbox.addEventListener('change', () => {\n            task.status = checkbox.checked ? 'completed' : 'pending';\n            taskEl.toggleClass('vp-task-completed', checkbox.checked);\n        });\n    }\n    renderMilestone(container, milestone) {\n        const milestoneEl = container.createEl('div', { cls: 'vp-milestone-item' });\n        const milestoneHeader = milestoneEl.createEl('div', { cls: 'vp-milestone-header' });\n        milestoneHeader.createEl('h6', {\n            text: milestone.title,\n            cls: 'vp-milestone-title'\n        });\n        if (milestone.target_date) {\n            milestoneHeader.createEl('span', {\n                text: milestone.target_date,\n                cls: 'vp-milestone-date'\n            });\n        }\n        if (milestone.description) {\n            milestoneEl.createEl('p', {\n                text: milestone.description,\n                cls: 'vp-milestone-description'\n            });\n        }\n    }\n    getWorkflowContext() {\n        var _a;\n        // Integrate with context panel sources\n        const activeFile = (_a = this.plugin) === null || _a === void 0 ? void 0 : _a.app.workspace.getActiveFile();\n        let context = '';\n        if (activeFile) {\n            context += `Current file: ${activeFile.path}\\n`;\n        }\n        // Add more context from ContextPanel if available\n        return context;\n    }\n    showError(message) {\n        var _a;\n        const workflowDisplay = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-workflow-display');\n        if (!workflowDisplay)\n            return;\n        const errorEl = workflowDisplay.createEl('div', { cls: 'vp-workflow-error' });\n        errorEl.createEl('div', { cls: 'vp-error-icon' });\n        errorEl.createEl('p', { text: message, cls: 'vp-error-message' });\n    }\n    exportWorkflow() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b, _c, _d;\n            if (!this.currentWorkflow || !this.plugin)\n                return;\n            try {\n                let content = `# ${((_a = this.currentWorkflow.plan) === null || _a === void 0 ? void 0 : _a.title) || 'Workflow'}\\n\\n`;\n                if ((_b = this.currentWorkflow.plan) === null || _b === void 0 ? void 0 : _b.description) {\n                    content += `${this.currentWorkflow.plan.description}\\n\\n`;\n                }\n                if ((_c = this.currentWorkflow.plan) === null || _c === void 0 ? void 0 : _c.estimated_duration) {\n                    content += `**Duration:** ${this.currentWorkflow.plan.estimated_duration}\\n\\n`;\n                }\n                if ((_d = this.currentWorkflow.plan) === null || _d === void 0 ? void 0 : _d.tasks) {\n                    content += `## Tasks\\n\\n`;\n                    this.currentWorkflow.plan.tasks.forEach((task, index) => {\n                        const checkbox = task.status === 'completed' ? '[x]' : '[ ]';\n                        content += `${checkbox} **${task.title}** (${task.priority} priority)\\n`;\n                        if (task.description) {\n                            content += `   ${task.description}\\n`;\n                        }\n                        if (task.estimated_time) {\n                            content += `   *Estimated time: ${task.estimated_time}*\\n`;\n                        }\n                        content += '\\n';\n                    });\n                }\n                if (this.currentWorkflow.milestones) {\n                    content += `## Milestones\\n\\n`;\n                    this.currentWorkflow.milestones.forEach((milestone) => {\n                        content += `- **${milestone.title}**`;\n                        if (milestone.target_date) {\n                            content += ` (${milestone.target_date})`;\n                        }\n                        content += '\\n';\n                        if (milestone.description) {\n                            content += `  ${milestone.description}\\n`;\n                        }\n                        content += '\\n';\n                    });\n                }\n                const filename = `VaultPilot Workflow - ${new Date().toISOString().split('T')[0]}.md`;\n                yield this.plugin.app.vault.create(filename, content);\n                new Notice(`Workflow exported to ${filename}`);\n            }\n            catch (error) {\n                new Notice('Failed to export workflow');\n            }\n        });\n    }\n    saveWorkflow() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Placeholder for saving workflow to plugin data\n            new Notice('Workflow saved');\n        });\n    }\n    cleanup() {\n        this.containerEl = undefined;\n        this.plugin = undefined;\n        this.workspace = undefined;\n        this.currentWorkflow = undefined;\n    }\n}\nclass ExplorerModeComponent {\n    constructor() {\n        this.currentFiles = [];\n        this.searchQuery = '';\n    }\n    render(container, context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.containerEl = container;\n            this.plugin = context.plugin;\n            this.workspace = context.workspace;\n            // Create explorer interface\n            const explorerContainer = container.createEl('div', { cls: 'vp-explorer-interface' });\n            // Explorer header\n            const explorerHeader = explorerContainer.createEl('div', { cls: 'vp-explorer-header' });\n            explorerHeader.createEl('h3', { text: 'Vault Explorer' });\n            const contextInfo = explorerHeader.createEl('div', { cls: 'vp-explorer-context-info' });\n            contextInfo.createEl('span', {\n                text: `Exploring with ${context.contextSources.length} context sources`,\n                cls: 'vp-context-summary'\n            });\n            // Search area\n            const searchArea = explorerContainer.createEl('div', { cls: 'vp-explorer-search' });\n            const searchContainer = searchArea.createEl('div', { cls: 'vp-search-container' });\n            const searchInput = searchContainer.createEl('input', {\n                type: 'text',\n                cls: 'vp-search-input',\n                attr: {\n                    placeholder: 'Search files...',\n                    'aria-label': 'Search vault files'\n                }\n            });\n            const searchButton = createButton(searchContainer, {\n                variant: 'secondary',\n                size: 'sm',\n                icon: 'search',\n                ariaLabel: 'Search files',\n                onClick: () => this.performSearch(searchInput.value)\n            });\n            // Filter options\n            const filterArea = searchArea.createEl('div', { cls: 'vp-filter-area' });\n            const sortSelect = filterArea.createEl('select', {\n                cls: 'vp-sort-select',\n                attr: { 'aria-label': 'Sort files by' }\n            });\n            [\n                { value: 'name', text: 'Name' },\n                { value: 'modified', text: 'Last Modified' },\n                { value: 'created', text: 'Created' },\n                { value: 'size', text: 'Size' }\n            ].forEach(option => {\n                sortSelect.createEl('option', { value: option.value, text: option.text });\n            });\n            const typeFilter = filterArea.createEl('select', {\n                cls: 'vp-type-filter',\n                attr: { 'aria-label': 'Filter by file type' }\n            });\n            typeFilter.createEl('option', { value: 'all', text: 'All Files' });\n            typeFilter.createEl('option', { value: 'md', text: 'Markdown' });\n            typeFilter.createEl('option', { value: 'canvas', text: 'Canvas' });\n            typeFilter.createEl('option', { value: 'image', text: 'Images' });\n            // Files display area\n            const filesDisplay = explorerContainer.createEl('div', {\n                cls: 'vp-files-display',\n                attr: { 'role': 'region', 'aria-label': 'File Browser' }\n            });\n            // Setup event listeners\n            searchInput.addEventListener('input', (e) => {\n                this.searchQuery = e.target.value;\n                this.debounceSearch();\n            });\n            sortSelect.addEventListener('change', () => {\n                this.refreshFileList(sortSelect.value);\n            });\n            typeFilter.addEventListener('change', () => {\n                this.refreshFileList(sortSelect.value, typeFilter.value);\n            });\n            // Load initial file list\n            yield this.refreshFileList();\n        });\n    }\n    updateContext(sources) {\n        var _a;\n        const contextInfo = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-context-summary');\n        if (contextInfo) {\n            contextInfo.textContent = `Exploring with ${sources.length} context sources`;\n        }\n    }\n    getActions() {\n        return [\n            {\n                id: 'refresh-files',\n                label: 'Refresh',\n                icon: 'refresh-cw',\n                callback: () => this.refreshFileList(),\n                enabled: true\n            },\n            {\n                id: 'create-file',\n                label: 'New File',\n                icon: 'file-plus',\n                callback: () => this.createNewFile(),\n                enabled: true\n            },\n            {\n                id: 'analyze-vault',\n                label: 'Analyze Vault',\n                icon: 'zap',\n                callback: () => this.analyzeVault(),\n                enabled: true\n            }\n        ];\n    }\n    debounceSearch() {\n        clearTimeout(this.debounceTimeout);\n        this.debounceTimeout = window.setTimeout(() => {\n            this.performSearch(this.searchQuery);\n        }, 300);\n    }\n    performSearch(query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            if (!query.trim()) {\n                yield this.refreshFileList();\n                return;\n            }\n            const allFiles = ((_a = this.plugin) === null || _a === void 0 ? void 0 : _a.app.vault.getMarkdownFiles()) || [];\n            const filteredFiles = allFiles.filter((file) => file.name.toLowerCase().includes(query.toLowerCase()) ||\n                file.path.toLowerCase().includes(query.toLowerCase()));\n            this.currentFiles = filteredFiles;\n            this.renderFileList();\n        });\n    }\n    refreshFileList() {\n        return __awaiter(this, arguments, void 0, function* (sortBy = 'name', filterType = 'all') {\n            if (!this.plugin)\n                return;\n            let files = this.plugin.app.vault.getMarkdownFiles();\n            // Apply type filter\n            if (filterType !== 'all') {\n                files = files.filter((file) => {\n                    switch (filterType) {\n                        case 'md': return file.extension === 'md';\n                        case 'canvas': return file.extension === 'canvas';\n                        case 'image': return ['png', 'jpg', 'jpeg', 'gif', 'svg'].includes(file.extension);\n                        default: return true;\n                    }\n                });\n            }\n            // Apply sorting\n            files.sort((a, b) => {\n                switch (sortBy) {\n                    case 'modified':\n                        return b.stat.mtime - a.stat.mtime;\n                    case 'created':\n                        return b.stat.ctime - a.stat.ctime;\n                    case 'size':\n                        return b.stat.size - a.stat.size;\n                    case 'name':\n                    default:\n                        return a.name.localeCompare(b.name);\n                }\n            });\n            this.currentFiles = files;\n            this.renderFileList();\n        });\n    }\n    renderFileList() {\n        var _a;\n        const filesDisplay = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-files-display');\n        if (!filesDisplay)\n            return;\n        filesDisplay.empty();\n        if (this.currentFiles.length === 0) {\n            const emptyState = filesDisplay.createEl('div', { cls: 'vp-empty-state' });\n            emptyState.createEl('p', { text: 'No files found' });\n            return;\n        }\n        // File count header\n        const countHeader = filesDisplay.createEl('div', { cls: 'vp-file-count-header' });\n        countHeader.createEl('span', {\n            text: `${this.currentFiles.length} files`,\n            cls: 'vp-file-count'\n        });\n        // Files list\n        const filesList = filesDisplay.createEl('div', {\n            cls: 'vp-files-list',\n            attr: { 'role': 'list' }\n        });\n        this.currentFiles.forEach(file => {\n            this.renderFileItem(filesList, file);\n        });\n    }\n    renderFileItem(container, file) {\n        const fileEl = container.createEl('div', {\n            cls: 'vp-file-item',\n            attr: { 'role': 'listitem' }\n        });\n        const fileHeader = fileEl.createEl('div', { cls: 'vp-file-header' });\n        // File icon\n        const fileIcon = fileHeader.createEl('div', { cls: 'vp-file-icon' });\n        fileIcon.createEl('span', { text: this.getFileIcon(file) });\n        // File info\n        const fileInfo = fileHeader.createEl('div', { cls: 'vp-file-info' });\n        const fileName = fileInfo.createEl('div', {\n            text: file.basename,\n            cls: 'vp-file-name'\n        });\n        const fileMeta = fileInfo.createEl('div', { cls: 'vp-file-meta' });\n        fileMeta.createEl('span', {\n            text: file.path,\n            cls: 'vp-file-path'\n        });\n        fileMeta.createEl('span', {\n            text: this.formatFileSize(file.stat.size),\n            cls: 'vp-file-size'\n        });\n        fileMeta.createEl('span', {\n            text: this.formatDate(new Date(file.stat.mtime)),\n            cls: 'vp-file-date'\n        });\n        // File actions\n        const fileActions = fileHeader.createEl('div', { cls: 'vp-file-actions' });\n        const openButton = createButton(fileActions, {\n            variant: 'tertiary',\n            size: 'xs',\n            icon: 'external-link',\n            ariaLabel: `Open ${file.basename}`,\n            onClick: () => this.openFile(file)\n        });\n        const addToContextButton = createButton(fileActions, {\n            variant: 'tertiary',\n            size: 'xs',\n            icon: 'plus',\n            ariaLabel: `Add ${file.basename} to context`,\n            onClick: () => this.addToContext(file)\n        });\n        // File preview (if possible)\n        if (file.extension === 'md') {\n            this.addFilePreview(fileEl, file);\n        }\n        // Make file clickable\n        fileEl.addEventListener('click', (e) => {\n            if (e.target.closest('.vp-file-actions'))\n                return;\n            this.openFile(file);\n        });\n        fileEl.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' || e.key === ' ') {\n                e.preventDefault();\n                this.openFile(file);\n            }\n        });\n        fileEl.setAttribute('tabindex', '0');\n    }\n    addFilePreview(fileEl, file) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.plugin)\n                return;\n            try {\n                const content = yield this.plugin.app.vault.read(file);\n                const preview = content.substring(0, 200);\n                if (preview.trim()) {\n                    const previewEl = fileEl.createEl('div', { cls: 'vp-file-preview' });\n                    previewEl.createEl('p', {\n                        text: preview + (content.length > 200 ? '...' : ''),\n                        cls: 'vp-preview-text'\n                    });\n                }\n            }\n            catch (error) {\n                // Silently fail for preview\n            }\n        });\n    }\n    getFileIcon(file) {\n        const iconMap = {\n            'md': '📝',\n            'canvas': '🎨',\n            'png': '🖼️',\n            'jpg': '🖼️',\n            'jpeg': '🖼️',\n            'gif': '🖼️',\n            'svg': '🖼️',\n            'pdf': '📄',\n            'txt': '📄',\n            'json': '⚙️',\n            'js': '💻',\n            'ts': '💻',\n            'css': '🎨',\n            'html': '🌐'\n        };\n        return iconMap[file.extension] || '📄';\n    }\n    formatFileSize(bytes) {\n        if (bytes < 1024)\n            return bytes + ' B';\n        if (bytes < 1024 * 1024)\n            return Math.round(bytes / 1024) + ' KB';\n        return Math.round(bytes / (1024 * 1024)) + ' MB';\n    }\n    formatDate(date) {\n        const now = new Date();\n        const diffMs = now.getTime() - date.getTime();\n        const diffDays = Math.floor(diffMs / (24 * 60 * 60 * 1000));\n        if (diffDays === 0)\n            return 'Today';\n        if (diffDays === 1)\n            return 'Yesterday';\n        if (diffDays < 7)\n            return `${diffDays} days ago`;\n        return date.toLocaleDateString();\n    }\n    openFile(file) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.plugin)\n                return;\n            const leaf = this.plugin.app.workspace.getLeaf();\n            yield leaf.openFile(file);\n        });\n    }\n    addToContext(file) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.workspace)\n                return;\n            const contextPanel = this.workspace.getContextPanel();\n            if (contextPanel && typeof contextPanel.addFileToContext === 'function') {\n                yield contextPanel.addFileToContext(file);\n            }\n        });\n    }\n    createNewFile() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.plugin)\n                return;\n            const fileName = prompt('Enter file name:');\n            if (!fileName)\n                return;\n            try {\n                const fullName = fileName.endsWith('.md') ? fileName : fileName + '.md';\n                const newFile = yield this.plugin.app.vault.create(fullName, '');\n                yield this.openFile(newFile);\n                yield this.refreshFileList();\n            }\n            catch (error) {\n                new Notice('Failed to create file');\n            }\n        });\n    }\n    analyzeVault() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.plugin)\n                return;\n            const notice = new Notice('Analyzing vault...', 0);\n            try {\n                const files = this.plugin.app.vault.getMarkdownFiles();\n                let content = '';\n                // Sample files for analysis\n                const sampleFiles = files.slice(0, 10);\n                for (const file of sampleFiles) {\n                    const fileContent = yield this.plugin.app.vault.read(file);\n                    content += `=== ${file.name} ===\\n${fileContent}\\n\\n`;\n                }\n                const response = yield this.plugin.apiClient.analyzeVaultContext({\n                    content,\n                    analysis_type: 'insights'\n                });\n                notice.hide();\n                if (response.success && response.data) {\n                    this.showAnalysisResults(response.data);\n                }\n                else {\n                    new Notice(`Analysis failed: ${response.error}`);\n                }\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`Analysis error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    showAnalysisResults(analysisData) {\n        var _a;\n        const filesDisplay = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-files-display');\n        if (!filesDisplay)\n            return;\n        // Create analysis overlay\n        const overlay = this.containerEl.createEl('div', { cls: 'vp-analysis-overlay' });\n        const modal = overlay.createEl('div', { cls: 'vp-analysis-modal' });\n        const header = modal.createEl('div', { cls: 'vp-analysis-header' });\n        header.createEl('h4', { text: 'Vault Analysis Results' });\n        const closeButton = createButton(header, {\n            variant: 'tertiary',\n            size: 'xs',\n            icon: 'x',\n            ariaLabel: 'Close analysis',\n            onClick: () => overlay.remove()\n        });\n        const content = modal.createEl('div', { cls: 'vp-analysis-content' });\n        if (analysisData.analysis) {\n            content.createEl('h5', { text: 'Analysis' });\n            content.createEl('p', { text: analysisData.analysis });\n        }\n        if (analysisData.insights && analysisData.insights.length > 0) {\n            content.createEl('h5', { text: 'Key Insights' });\n            const insightsList = content.createEl('ul');\n            analysisData.insights.forEach((insight) => {\n                insightsList.createEl('li', { text: insight });\n            });\n        }\n        if (analysisData.recommendations && analysisData.recommendations.length > 0) {\n            content.createEl('h5', { text: 'Recommendations' });\n            const recsList = content.createEl('ul');\n            analysisData.recommendations.forEach((rec) => {\n                recsList.createEl('li', { text: rec });\n            });\n        }\n    }\n    cleanup() {\n        clearTimeout(this.debounceTimeout);\n        this.containerEl = undefined;\n        this.plugin = undefined;\n        this.workspace = undefined;\n        this.currentFiles = [];\n    }\n}\nclass AnalyticsModeComponent {\n    render(container, context) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.containerEl = container;\n            this.plugin = context.plugin;\n            this.workspace = context.workspace;\n            // Create analytics interface\n            const analyticsContainer = container.createEl('div', { cls: 'vp-analytics-interface' });\n            // Analytics header\n            const analyticsHeader = analyticsContainer.createEl('div', { cls: 'vp-analytics-header' });\n            analyticsHeader.createEl('h3', { text: 'Analytics Dashboard' });\n            const contextInfo = analyticsHeader.createEl('div', { cls: 'vp-analytics-context-info' });\n            contextInfo.createEl('span', {\n                text: `Monitoring ${context.contextSources.length} context sources`,\n                cls: 'vp-context-summary'\n            });\n            // Last updated indicator\n            const lastUpdated = analyticsHeader.createEl('div', { cls: 'vp-last-updated' });\n            lastUpdated.createEl('span', {\n                text: `Last updated: ${new Date().toLocaleTimeString()}`,\n                cls: 'vp-update-time'\n            });\n            // Create dashboard sections\n            yield this.createOverviewSection(analyticsContainer);\n            yield this.createVaultMetricsSection(analyticsContainer);\n            yield this.createUsageMetricsSection(analyticsContainer);\n            yield this.createPerformanceSection(analyticsContainer);\n            yield this.createAIInsightsSection(analyticsContainer);\n            // Setup auto-refresh\n            this.setupAutoRefresh();\n        });\n    }\n    updateContext(sources) {\n        var _a;\n        const contextInfo = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-context-summary');\n        if (contextInfo) {\n            contextInfo.textContent = `Monitoring ${sources.length} context sources`;\n        }\n    }\n    getActions() {\n        return [\n            {\n                id: 'refresh-analytics',\n                label: 'Refresh Data',\n                icon: 'refresh-cw',\n                callback: () => this.refreshAllData(),\n                enabled: true\n            },\n            {\n                id: 'export-report',\n                label: 'Export Report',\n                icon: 'download',\n                callback: () => this.exportAnalyticsReport(),\n                enabled: true\n            },\n            {\n                id: 'configure-metrics',\n                label: 'Configure',\n                icon: 'settings',\n                callback: () => this.openMetricsConfig(),\n                enabled: true\n            }\n        ];\n    }\n    createOverviewSection(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const overviewSection = container.createEl('div', { cls: 'vp-analytics-section vp-overview-section' });\n            overviewSection.createEl('h4', { text: 'Overview', cls: 'vp-section-title' });\n            const overviewGrid = overviewSection.createEl('div', { cls: 'vp-overview-grid' });\n            // Vault health indicator\n            const healthCard = overviewGrid.createEl('div', { cls: 'vp-metric-card vp-health-card' });\n            healthCard.createEl('div', { cls: 'vp-metric-icon vp-health-icon' });\n            healthCard.createEl('div', { text: 'Vault Health', cls: 'vp-metric-label' });\n            const healthValue = healthCard.createEl('div', { cls: 'vp-metric-value vp-health-value' });\n            healthValue.createEl('span', { text: 'Excellent', cls: 'vp-health-status' });\n            healthValue.createEl('span', { text: '96%', cls: 'vp-health-score' });\n            // Activity indicator\n            const activityCard = overviewGrid.createEl('div', { cls: 'vp-metric-card vp-activity-card' });\n            activityCard.createEl('div', { cls: 'vp-metric-icon vp-activity-icon' });\n            activityCard.createEl('div', { text: 'Today\\'s Activity', cls: 'vp-metric-label' });\n            const activityValue = activityCard.createEl('div', { cls: 'vp-metric-value' });\n            activityValue.createEl('span', { text: '47', cls: 'vp-activity-count' });\n            activityValue.createEl('span', { text: 'interactions', cls: 'vp-activity-label' });\n            // AI usage indicator\n            const aiCard = overviewGrid.createEl('div', { cls: 'vp-metric-card vp-ai-card' });\n            aiCard.createEl('div', { cls: 'vp-metric-icon vp-ai-icon' });\n            aiCard.createEl('div', { text: 'AI Requests', cls: 'vp-metric-label' });\n            const aiValue = aiCard.createEl('div', { cls: 'vp-metric-value' });\n            aiValue.createEl('span', { text: '23', cls: 'vp-ai-count' });\n            aiValue.createEl('span', { text: 'today', cls: 'vp-ai-label' });\n            // Performance indicator\n            const perfCard = overviewGrid.createEl('div', { cls: 'vp-metric-card vp-performance-card' });\n            perfCard.createEl('div', { cls: 'vp-metric-icon vp-performance-icon' });\n            perfCard.createEl('div', { text: 'Performance', cls: 'vp-metric-label' });\n            const perfValue = perfCard.createEl('div', { cls: 'vp-metric-value' });\n            perfValue.createEl('span', { text: '142ms', cls: 'vp-performance-time' });\n            perfValue.createEl('span', { text: 'avg response', cls: 'vp-performance-label' });\n        });\n    }\n    createVaultMetricsSection(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const vaultSection = container.createEl('div', { cls: 'vp-analytics-section vp-vault-section' });\n            vaultSection.createEl('h4', { text: 'Vault Metrics', cls: 'vp-section-title' });\n            const vaultGrid = vaultSection.createEl('div', { cls: 'vp-vault-grid' });\n            // Collect vault statistics\n            const stats = yield this.collectVaultStats();\n            // Files count\n            const filesCard = vaultGrid.createEl('div', { cls: 'vp-stat-card' });\n            filesCard.createEl('div', { text: stats.totalFiles.toString(), cls: 'vp-stat-value' });\n            filesCard.createEl('div', { text: 'Total Files', cls: 'vp-stat-label' });\n            // Word count\n            const wordsCard = vaultGrid.createEl('div', { cls: 'vp-stat-card' });\n            wordsCard.createEl('div', { text: this.formatNumber(stats.totalWords), cls: 'vp-stat-value' });\n            wordsCard.createEl('div', { text: 'Total Words', cls: 'vp-stat-label' });\n            // Storage size\n            const sizeCard = vaultGrid.createEl('div', { cls: 'vp-stat-card' });\n            sizeCard.createEl('div', { text: this.formatBytes(stats.totalSize), cls: 'vp-stat-value' });\n            sizeCard.createEl('div', { text: 'Vault Size', cls: 'vp-stat-label' });\n            // Recent activity\n            const activityCard = vaultGrid.createEl('div', { cls: 'vp-stat-card' });\n            activityCard.createEl('div', { text: stats.recentFiles.toString(), cls: 'vp-stat-value' });\n            activityCard.createEl('div', { text: 'Modified Today', cls: 'vp-stat-label' });\n            // File type breakdown\n            const typesSection = vaultSection.createEl('div', { cls: 'vp-file-types-section' });\n            typesSection.createEl('h5', { text: 'File Types', cls: 'vp-subsection-title' });\n            const typesGrid = typesSection.createEl('div', { cls: 'vp-types-grid' });\n            Object.entries(stats.fileTypes).forEach(([type, count]) => {\n                const typeCard = typesGrid.createEl('div', { cls: 'vp-type-card' });\n                typeCard.createEl('span', { text: type.toUpperCase(), cls: 'vp-type-extension' });\n                typeCard.createEl('span', { text: String(count), cls: 'vp-type-count' });\n            });\n        });\n    }\n    createUsageMetricsSection(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const usageSection = container.createEl('div', { cls: 'vp-analytics-section vp-usage-section' });\n            usageSection.createEl('h4', { text: 'Usage Patterns', cls: 'vp-section-title' });\n            // Most active files\n            const activeFilesCard = usageSection.createEl('div', { cls: 'vp-usage-card' });\n            activeFilesCard.createEl('h5', { text: 'Most Active Files', cls: 'vp-card-title' });\n            const activeFilesList = activeFilesCard.createEl('div', { cls: 'vp-active-files-list' });\n            // Mock data for most active files\n            const mockActiveFiles = [\n                { name: 'Daily Notes.md', interactions: 15, lastAccessed: '2 hours ago' },\n                { name: 'Project Planning.md', interactions: 12, lastAccessed: '4 hours ago' },\n                { name: 'Research Notes.md', interactions: 8, lastAccessed: '1 day ago' },\n                { name: 'Meeting Notes.md', interactions: 6, lastAccessed: '3 hours ago' }\n            ];\n            mockActiveFiles.forEach(file => {\n                const fileItem = activeFilesList.createEl('div', { cls: 'vp-active-file-item' });\n                const fileInfo = fileItem.createEl('div', { cls: 'vp-file-info' });\n                fileInfo.createEl('div', { text: file.name, cls: 'vp-file-name' });\n                fileInfo.createEl('div', { text: file.lastAccessed, cls: 'vp-file-time' });\n                const interactionBadge = fileItem.createEl('div', {\n                    text: file.interactions.toString(),\n                    cls: 'vp-interaction-badge'\n                });\n            });\n            // Usage timeline\n            const timelineCard = usageSection.createEl('div', { cls: 'vp-usage-card vp-timeline-card' });\n            timelineCard.createEl('h5', { text: 'Activity Timeline', cls: 'vp-card-title' });\n            const timeline = timelineCard.createEl('div', { cls: 'vp-activity-timeline' });\n            // Mock timeline data for last 7 days\n            const mockTimelineData = [\n                { day: 'Mon', activity: 85 },\n                { day: 'Tue', activity: 92 },\n                { day: 'Wed', activity: 78 },\n                { day: 'Thu', activity: 95 },\n                { day: 'Fri', activity: 88 },\n                { day: 'Sat', activity: 45 },\n                { day: 'Sun', activity: 62 }\n            ];\n            mockTimelineData.forEach(data => {\n                const dayItem = timeline.createEl('div', { cls: 'vp-timeline-day' });\n                dayItem.createEl('div', { text: data.day, cls: 'vp-timeline-label' });\n                const activityBar = dayItem.createEl('div', { cls: 'vp-timeline-bar-container' });\n                const bar = activityBar.createEl('div', { cls: 'vp-timeline-bar' });\n                bar.style.height = `${data.activity}%`;\n                bar.setAttribute('title', `${data.activity}% activity`);\n                dayItem.createEl('div', { text: data.activity.toString(), cls: 'vp-timeline-value' });\n            });\n        });\n    }\n    createPerformanceSection(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const perfSection = container.createEl('div', { cls: 'vp-analytics-section vp-performance-section' });\n            perfSection.createEl('h4', { text: 'Performance Metrics', cls: 'vp-section-title' });\n            const perfGrid = perfSection.createEl('div', { cls: 'vp-performance-grid' });\n            // Response time metrics\n            const responseCard = perfGrid.createEl('div', { cls: 'vp-perf-card' });\n            responseCard.createEl('h5', { text: 'Response Times', cls: 'vp-perf-title' });\n            const responseMetrics = responseCard.createEl('div', { cls: 'vp-response-metrics' });\n            const avgResponse = responseMetrics.createEl('div', { cls: 'vp-response-metric' });\n            avgResponse.createEl('span', { text: '142ms', cls: 'vp-response-value' });\n            avgResponse.createEl('span', { text: 'Average', cls: 'vp-response-label' });\n            const p95Response = responseMetrics.createEl('div', { cls: 'vp-response-metric' });\n            p95Response.createEl('span', { text: '287ms', cls: 'vp-response-value' });\n            p95Response.createEl('span', { text: '95th percentile', cls: 'vp-response-label' });\n            // System health\n            const healthCard = perfGrid.createEl('div', { cls: 'vp-perf-card' });\n            healthCard.createEl('h5', { text: 'System Health', cls: 'vp-perf-title' });\n            const healthMetrics = healthCard.createEl('div', { cls: 'vp-health-metrics' });\n            const memoryMetric = healthMetrics.createEl('div', { cls: 'vp-health-metric' });\n            memoryMetric.createEl('span', { text: 'Memory Usage', cls: 'vp-health-label' });\n            const memoryBar = memoryMetric.createEl('div', { cls: 'vp-health-bar' });\n            memoryBar.createEl('div', {\n                cls: 'vp-health-fill',\n                attr: { style: 'width: 67%' }\n            });\n            memoryMetric.createEl('span', { text: '67%', cls: 'vp-health-value' });\n            const cpuMetric = healthMetrics.createEl('div', { cls: 'vp-health-metric' });\n            cpuMetric.createEl('span', { text: 'CPU Usage', cls: 'vp-health-label' });\n            const cpuBar = cpuMetric.createEl('div', { cls: 'vp-health-bar' });\n            cpuBar.createEl('div', {\n                cls: 'vp-health-fill',\n                attr: { style: 'width: 23%' }\n            });\n            cpuMetric.createEl('span', { text: '23%', cls: 'vp-health-value' });\n            // Error rates\n            const errorCard = perfGrid.createEl('div', { cls: 'vp-perf-card' });\n            errorCard.createEl('h5', { text: 'Error Rates', cls: 'vp-perf-title' });\n            const errorMetrics = errorCard.createEl('div', { cls: 'vp-error-metrics' });\n            const errorRate = errorMetrics.createEl('div', { cls: 'vp-error-metric' });\n            errorRate.createEl('span', { text: '0.3%', cls: 'vp-error-rate' });\n            errorRate.createEl('span', { text: 'Error Rate', cls: 'vp-error-label' });\n            const uptime = errorMetrics.createEl('div', { cls: 'vp-error-metric' });\n            uptime.createEl('span', { text: '99.7%', cls: 'vp-uptime-value' });\n            uptime.createEl('span', { text: 'Uptime', cls: 'vp-error-label' });\n        });\n    }\n    createAIInsightsSection(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const insightsSection = container.createEl('div', { cls: 'vp-analytics-section vp-insights-section' });\n            insightsSection.createEl('h4', { text: 'AI Insights', cls: 'vp-section-title' });\n            // AI usage metrics\n            const aiUsageCard = insightsSection.createEl('div', { cls: 'vp-insights-card' });\n            aiUsageCard.createEl('h5', { text: 'AI Usage Today', cls: 'vp-card-title' });\n            const aiMetrics = aiUsageCard.createEl('div', { cls: 'vp-ai-metrics' });\n            const chatMetric = aiMetrics.createEl('div', { cls: 'vp-ai-metric' });\n            chatMetric.createEl('span', { text: '23', cls: 'vp-ai-count' });\n            chatMetric.createEl('span', { text: 'Chat Messages', cls: 'vp-ai-label' });\n            const workflowMetric = aiMetrics.createEl('div', { cls: 'vp-ai-metric' });\n            workflowMetric.createEl('span', { text: '5', cls: 'vp-ai-count' });\n            workflowMetric.createEl('span', { text: 'Workflows Created', cls: 'vp-ai-label' });\n            const analysisMetric = aiMetrics.createEl('div', { cls: 'vp-ai-metric' });\n            analysisMetric.createEl('span', { text: '8', cls: 'vp-ai-count' });\n            analysisMetric.createEl('span', { text: 'Vault Analyses', cls: 'vp-ai-label' });\n            // Model performance\n            const modelCard = insightsSection.createEl('div', { cls: 'vp-insights-card' });\n            modelCard.createEl('h5', { text: 'Model Performance', cls: 'vp-card-title' });\n            const modelMetrics = modelCard.createEl('div', { cls: 'vp-model-metrics' });\n            const modelStatus = modelMetrics.createEl('div', { cls: 'vp-model-status' });\n            modelStatus.createEl('div', { cls: 'vp-model-indicator vp-model-healthy' });\n            modelStatus.createEl('span', { text: 'GPT-4 Turbo', cls: 'vp-model-name' });\n            modelStatus.createEl('span', { text: 'Healthy', cls: 'vp-model-health' });\n            const confMetric = modelMetrics.createEl('div', { cls: 'vp-confidence-metric' });\n            confMetric.createEl('span', { text: 'Avg Confidence', cls: 'vp-confidence-label' });\n            confMetric.createEl('span', { text: '94.2%', cls: 'vp-confidence-value' });\n            // Recommendations\n            const recsCard = insightsSection.createEl('div', { cls: 'vp-insights-card' });\n            recsCard.createEl('h5', { text: 'Recommendations', cls: 'vp-card-title' });\n            const recsList = recsCard.createEl('div', { cls: 'vp-recommendations-list' });\n            const mockRecommendations = [\n                { text: 'Consider organizing your daily notes into weekly folders', priority: 'medium' },\n                { text: 'Add more tags to improve searchability', priority: 'low' },\n                { text: 'Review and archive old project files', priority: 'high' }\n            ];\n            mockRecommendations.forEach(rec => {\n                const recItem = recsList.createEl('div', { cls: `vp-recommendation-item vp-priority-${rec.priority}` });\n                recItem.createEl('div', { cls: `vp-priority-indicator vp-priority-${rec.priority}` });\n                recItem.createEl('span', { text: rec.text, cls: 'vp-recommendation-text' });\n            });\n        });\n    }\n    collectVaultStats() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.plugin)\n                return { totalFiles: 0, totalWords: 0, totalSize: 0, recentFiles: 0, fileTypes: {} };\n            const files = this.plugin.app.vault.getMarkdownFiles();\n            const now = new Date();\n            const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n            let totalWords = 0;\n            let totalSize = 0;\n            let recentFiles = 0;\n            const fileTypes = {};\n            for (const file of files) {\n                // Count file types\n                const ext = file.extension || 'unknown';\n                fileTypes[ext] = (fileTypes[ext] || 0) + 1;\n                // Add to total size\n                totalSize += file.stat.size;\n                // Check if modified today\n                if (new Date(file.stat.mtime) >= today) {\n                    recentFiles++;\n                }\n                // Count words in markdown files (sample for performance)\n                if (file.extension === 'md' && totalWords < 100000) {\n                    try {\n                        const content = yield this.plugin.app.vault.read(file);\n                        const words = content.split(/\\s+/).filter((word) => word.length > 0);\n                        totalWords += words.length;\n                    }\n                    catch (error) {\n                        // Skip files that can't be read\n                    }\n                }\n            }\n            this.vaultStats = {\n                totalFiles: files.length,\n                totalWords,\n                totalSize,\n                recentFiles,\n                fileTypes\n            };\n            return this.vaultStats;\n        });\n    }\n    formatNumber(num) {\n        if (num < 1000)\n            return num.toString();\n        if (num < 1000000)\n            return Math.round(num / 100) / 10 + 'K';\n        return Math.round(num / 100000) / 10 + 'M';\n    }\n    formatBytes(bytes) {\n        if (bytes < 1024)\n            return bytes + ' B';\n        if (bytes < 1024 * 1024)\n            return Math.round(bytes / 1024) + ' KB';\n        if (bytes < 1024 * 1024 * 1024)\n            return Math.round(bytes / (1024 * 1024)) + ' MB';\n        return Math.round(bytes / (1024 * 1024 * 1024)) + ' GB';\n    }\n    setupAutoRefresh() {\n        // Refresh data every 30 seconds\n        this.refreshInterval = window.setInterval(() => {\n            this.updateLastRefreshed();\n        }, 30000);\n    }\n    updateLastRefreshed() {\n        var _a;\n        const lastUpdated = (_a = this.containerEl) === null || _a === void 0 ? void 0 : _a.querySelector('.vp-update-time');\n        if (lastUpdated) {\n            lastUpdated.textContent = `Last updated: ${new Date().toLocaleTimeString()}`;\n        }\n    }\n    refreshAllData() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.containerEl || !this.plugin)\n                return;\n            const notice = new Notice('Refreshing analytics data...', 2000);\n            try {\n                // Re-render the entire interface with fresh data\n                this.containerEl.empty();\n                yield this.render(this.containerEl, {\n                    plugin: this.plugin,\n                    workspace: this.workspace,\n                    contextSources: [],\n                    userPreferences: this.plugin.settings\n                });\n                notice.hide();\n                new Notice('Analytics data refreshed');\n            }\n            catch (error) {\n                notice.hide();\n                new Notice('Failed to refresh analytics data');\n            }\n        });\n    }\n    exportAnalyticsReport() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.plugin || !this.vaultStats)\n                return;\n            try {\n                const stats = this.vaultStats;\n                const timestamp = new Date().toISOString();\n                let report = `# VaultPilot Analytics Report\\n\\n`;\n                report += `Generated: ${timestamp}\\n\\n`;\n                report += `## Vault Overview\\n\\n`;\n                report += `- **Total Files**: ${stats.totalFiles}\\n`;\n                report += `- **Total Words**: ${this.formatNumber(stats.totalWords)}\\n`;\n                report += `- **Vault Size**: ${this.formatBytes(stats.totalSize)}\\n`;\n                report += `- **Files Modified Today**: ${stats.recentFiles}\\n\\n`;\n                report += `## File Types\\n\\n`;\n                Object.entries(stats.fileTypes).forEach(([type, count]) => {\n                    report += `- **${type.toUpperCase()}**: ${count} files\\n`;\n                });\n                report += `\\n## Performance\\n\\n`;\n                report += `- **Average Response Time**: 142ms\\n`;\n                report += `- **Error Rate**: 0.3%\\n`;\n                report += `- **System Health**: 96% (Excellent)\\n\\n`;\n                report += `## AI Usage Today\\n\\n`;\n                report += `- **Chat Messages**: 23\\n`;\n                report += `- **Workflows Created**: 5\\n`;\n                report += `- **Vault Analyses**: 8\\n`;\n                report += `- **Model Confidence**: 94.2%\\n\\n`;\n                report += `---\\n\\n*Generated by VaultPilot Analytics Dashboard*`;\n                const filename = `VaultPilot Analytics Report ${new Date().toISOString().split('T')[0]}.md`;\n                yield this.plugin.app.vault.create(filename, report);\n                new Notice(`Analytics report exported to ${filename}`);\n            }\n            catch (error) {\n                new Notice('Failed to export analytics report');\n            }\n        });\n    }\n    openMetricsConfig() {\n        new Notice('Metrics configuration - Coming soon');\n    }\n    cleanup() {\n        if (this.refreshInterval) {\n            clearInterval(this.refreshInterval);\n            this.refreshInterval = undefined;\n        }\n        this.containerEl = undefined;\n        this.plugin = undefined;\n        this.workspace = undefined;\n        this.vaultStats = undefined;\n    }\n}\n//# sourceMappingURL=MainPanel.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/workspace/WorkspaceManager.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/workspace/panels/ContextPanel.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/design-system/components/core/Button.ts"],"map":"{\"version\":3,\"file\":\"MainPanel.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/workspace/panels/MainPanel.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * VaultPilot Main Panel\\n * \\n * Central content area that renders mode-specific interfaces (Chat, Workflow, Explorer, Analytics)\\n * while maintaining context awareness and cross-panel communication.\\n */\\n\\nimport { Component, MarkdownView, TFile, Notice } from 'obsidian';\\nimport VaultPilotPlugin from '../../main';\\nimport { WorkspaceManager, WorkspaceMode } from '../WorkspaceManager';\\nimport { ContextSource } from './ContextPanel';\\nimport { VPButton, createButton } from '../../design-system/components/core/Button';\\n\\nexport interface ModeConfig {\\n  id: WorkspaceMode;\\n  name: string;\\n  description: string;\\n  icon: string;\\n  component: ModeComponent;\\n}\\n\\nexport interface ModeComponent {\\n  render(container: HTMLElement, context: ModeContext): Promise<void>;\\n  updateContext(sources: ContextSource[]): void;\\n  cleanup(): void;\\n  getActions(): ModeAction[];\\n}\\n\\nexport interface ModeContext {\\n  plugin: VaultPilotPlugin;\\n  workspace: WorkspaceManager;\\n  contextSources: ContextSource[];\\n  activeFile?: TFile;\\n  userPreferences: any;\\n}\\n\\nexport interface ModeAction {\\n  id: string;\\n  label: string;\\n  icon: string;\\n  callback: () => void;\\n  shortcut?: string;\\n  enabled: boolean;\\n}\\n\\nexport class MainPanel extends Component {\\n  private plugin: VaultPilotPlugin;\\n  private workspace: WorkspaceManager;\\n  private containerEl: HTMLElement;\\n  \\n  // State\\n  private currentMode: WorkspaceMode = 'chat';\\n  private contextSources: ContextSource[] = [];\\n  private modeComponents: Map<WorkspaceMode, ModeComponent> = new Map();\\n  \\n  // UI Elements\\n  private headerEl?: HTMLElement;\\n  private contentEl?: HTMLElement;\\n  private actionsEl?: HTMLElement;\\n  private currentModeComponent?: ModeComponent;\\n  \\n  // Week 8: Performance optimization and error handling\\n  private modeSwitchCache: Map<WorkspaceMode, HTMLElement> = new Map();\\n  private lastSwitchTime: number = 0;\\n  private switchDebounceTimeout?: number;\\n  private performanceMetrics: Map<string, number> = new Map();\\n  private errorRecoveryAttempts: number = 0;\\n  private maxErrorRecoveryAttempts: number = 3;\\n\\n  constructor(containerEl: HTMLElement, plugin: VaultPilotPlugin, workspace: WorkspaceManager) {\\n    super();\\n    this.containerEl = containerEl;\\n    this.plugin = plugin;\\n    this.workspace = workspace;\\n    \\n    // Initialize mode components\\n    this.initializeModeComponents();\\n  }\\n\\n  async onload(): Promise<void> {\\n    try {\\n      // Setup container\\n      this.containerEl.empty();\\n      this.containerEl.addClass('vp-main-panel');\\n      this.containerEl.setAttribute('role', 'main');\\n      this.containerEl.setAttribute('aria-label', 'Main Workspace');\\n\\n      // Create panel structure\\n      this.createPanelHeader();\\n      this.createContentArea();\\n\\n      // Setup event listeners\\n      this.setupEventListeners();\\n\\n      // Load initial mode\\n      await this.switchToMode(this.currentMode);\\n\\n      if (this.plugin.settings.debugMode) {\\n        console.log('MainPanel loaded successfully');\\n      }\\n    } catch (error) {\\n      console.error('Failed to load MainPanel:', error);\\n      throw error;\\n    }\\n  }\\n\\n  private createPanelHeader(): void {\\n    this.headerEl = this.containerEl.createEl('div', {\\n      cls: 'vp-main-panel-header',\\n      attr: { 'role': 'banner' }\\n    });\\n\\n    // Mode indicator\\n    const modeInfo = this.headerEl.createEl('div', { cls: 'vp-mode-info' });\\n    \\n    const modeIcon = modeInfo.createEl('div', { cls: 'vp-mode-icon' });\\n    const modeTitle = modeInfo.createEl('div', { cls: 'vp-mode-details' });\\n    \\n    const titleEl = modeTitle.createEl('h2', { \\n      cls: 'vp-mode-title',\\n      text: this.getModeDisplayName(this.currentMode)\\n    });\\n    \\n    const descEl = modeTitle.createEl('p', { \\n      cls: 'vp-mode-description',\\n      text: this.getModeDescription(this.currentMode)\\n    });\\n\\n    // Mode actions\\n    this.actionsEl = this.headerEl.createEl('div', { \\n      cls: 'vp-mode-actions',\\n      attr: { 'role': 'toolbar', 'aria-label': 'Mode Actions' }\\n    });\\n  }\\n\\n  private createContentArea(): void {\\n    this.contentEl = this.containerEl.createEl('div', {\\n      cls: 'vp-main-panel-content',\\n      attr: { \\n        'role': 'region',\\n        'aria-label': `${this.getModeDisplayName(this.currentMode)} Content`,\\n        'data-mode': this.currentMode\\n      }\\n    });\\n  }\\n\\n  private initializeModeComponents(): void {\\n    // Initialize Chat Mode Component\\n    this.modeComponents.set('chat', new ChatModeComponent());\\n    \\n    // Initialize Workflow Mode Component  \\n    this.modeComponents.set('workflow', new WorkflowModeComponent());\\n    \\n    // Initialize Explorer Mode Component\\n    this.modeComponents.set('explorer', new ExplorerModeComponent());\\n    \\n    // Initialize Analytics Mode Component\\n    this.modeComponents.set('analytics', new AnalyticsModeComponent());\\n  }\\n\\n  private setupEventListeners(): void {\\n    // Listen for workspace mode changes\\n    this.workspace.on('mode-changed', (mode: WorkspaceMode) => {\\n      this.switchToMode(mode);\\n    });\\n\\n    // Listen for context changes\\n    // Note: 'context-updated' event needs to be added to WorkspaceEvents interface\\n    (this.workspace as any).on('context-updated', (sources: ContextSource[]) => {\\n      this.updateContext(sources);\\n    });\\n\\n    // Listen for file changes\\n    this.plugin.app.workspace.on('active-leaf-change', () => {\\n      this.handleActiveFileChange();\\n    });\\n  }\\n\\n  // Public API Methods\\n\\n  public async switchToMode(mode: WorkspaceMode): Promise<void> {\\n    if (this.currentMode === mode) return;\\n\\n    // Week 8: Performance optimization - debounce rapid mode switches\\n    const now = performance.now();\\n    if (now - this.lastSwitchTime < 100) { // 100ms debounce\\n      clearTimeout(this.switchDebounceTimeout);\\n      this.switchDebounceTimeout = window.setTimeout(() => {\\n        this.switchToMode(mode);\\n      }, 100);\\n      return;\\n    }\\n    \\n    this.lastSwitchTime = now;\\n    const switchStartTime = performance.now();\\n\\n    try {\\n      // Week 8: Error recovery mechanism\\n      this.errorRecoveryAttempts = 0;\\n      \\n      await this._performModeSwitch(mode, switchStartTime);\\n      \\n    } catch (error) {\\n      await this._handleModeSwitchError(mode, error, switchStartTime);\\n    }\\n  }\\n\\n  private async _performModeSwitch(mode: WorkspaceMode, startTime: number): Promise<void> {\\n    // Store previous mode for rollback\\n    const previousMode = this.currentMode;\\n    \\n    try {\\n      // Week 8: Performance optimization - check for cached mode content\\n      let useCache = false;\\n      let cachedContent: HTMLElement | undefined;\\n      \\n      if (this.modeSwitchCache.has(mode)) {\\n        cachedContent = this.modeSwitchCache.get(mode);\\n        // Use cache if content was created less than 5 minutes ago\\n        if (cachedContent && cachedContent.dataset.cacheTime) {\\n          const cacheAge = Date.now() - parseInt(cachedContent.dataset.cacheTime);\\n          useCache = cacheAge < 5 * 60 * 1000; // 5 minutes\\n        }\\n      }\\n\\n      // Cleanup current mode\\n      if (this.currentModeComponent) {\\n        this.currentModeComponent.cleanup();\\n      }\\n\\n      // Update state\\n      this.currentMode = mode;\\n\\n      // Update header\\n      this.updateHeader();\\n\\n      // Clear content area and prepare for new content\\n      if (this.contentEl) {\\n        this.contentEl.empty();\\n        this.contentEl.setAttribute('data-mode', mode);\\n        this.contentEl.setAttribute('aria-label', `${this.getModeDisplayName(mode)} Content`);\\n      }\\n\\n      // Load mode component with caching\\n      this.currentModeComponent = this.modeComponents.get(mode);\\n      if (this.currentModeComponent && this.contentEl) {\\n        if (useCache && cachedContent) {\\n          // Use cached content for faster rendering\\n          this.contentEl.appendChild(cachedContent.cloneNode(true) as HTMLElement);\\n          \\n          // Update context for cached content\\n          this.currentModeComponent.updateContext(this.contextSources);\\n          \\n          if (this.plugin.settings.debugMode) {\\n            console.log(`Used cached content for ${mode} mode`);\\n          }\\n        } else {\\n          // Render fresh content\\n          const context: ModeContext = {\\n            plugin: this.plugin,\\n            workspace: this.workspace,\\n            contextSources: this.contextSources,\\n            activeFile: this.plugin.app.workspace.getActiveFile() || undefined,\\n            userPreferences: this.plugin.settings\\n          };\\n\\n          await this.currentModeComponent.render(this.contentEl, context);\\n          \\n          // Cache the rendered content for future use\\n          const contentClone = this.contentEl.cloneNode(true) as HTMLElement;\\n          contentClone.dataset.cacheTime = Date.now().toString();\\n          this.modeSwitchCache.set(mode, contentClone);\\n          \\n          // Limit cache size to prevent memory leaks\\n          if (this.modeSwitchCache.size > 4) {\\n            const oldestMode = this.modeSwitchCache.keys().next().value;\\n            if (oldestMode) this.modeSwitchCache.delete(oldestMode);\\n          }\\n        }\\n        \\n        this.updateModeActions();\\n      }\\n\\n      // Week 8: Optimized transition animation\\n      this.containerEl.addClass('vp-mode-transitioning');\\n      \\n      // Use requestAnimationFrame for smoother animation\\n      requestAnimationFrame(() => {\\n        setTimeout(() => {\\n          this.containerEl.removeClass('vp-mode-transitioning');\\n        }, 200); // Reduced from 300ms to 200ms\\n      });\\n\\n      // Week 8: Performance metrics tracking\\n      const switchDuration = performance.now() - startTime;\\n      this.performanceMetrics.set(`switch_${previousMode}_to_${mode}`, switchDuration);\\n      \\n      // Warning if switch takes too long\\n      if (switchDuration > 150) {\\n        console.warn(`Mode switch from ${previousMode} to ${mode} took ${switchDuration.toFixed(2)}ms (target: <150ms)`);\\n      }\\n\\n      if (this.plugin.settings.debugMode) {\\n        console.log(`MainPanel switched from ${previousMode} to ${mode} in ${switchDuration.toFixed(2)}ms`);\\n      }\\n      \\n    } catch (error) {\\n      // Rollback to previous mode on error\\n      this.currentMode = previousMode;\\n      this.updateHeader();\\n      throw error;\\n    }\\n  }\\n\\n  private async _handleModeSwitchError(mode: WorkspaceMode, error: any, startTime: number): Promise<void> {\\n    this.errorRecoveryAttempts++;\\n    \\n    console.error(`Failed to switch to ${mode} mode (attempt ${this.errorRecoveryAttempts}):`, error);\\n    \\n    if (this.errorRecoveryAttempts <= this.maxErrorRecoveryAttempts) {\\n      // Try to recover by clearing cache and retrying\\n      this.modeSwitchCache.delete(mode);\\n      \\n      // Brief delay before retry\\n      await new Promise(resolve => setTimeout(resolve, 500));\\n      \\n      try {\\n        await this._performModeSwitch(mode, startTime);\\n        new Notice(`Successfully recovered and switched to ${mode} mode`);\\n        return;\\n      } catch (retryError) {\\n        console.error(`Recovery attempt ${this.errorRecoveryAttempts} failed:`, retryError);\\n      }\\n    }\\n    \\n    // Final fallback - try to revert to a safe mode\\n    if (this.errorRecoveryAttempts > this.maxErrorRecoveryAttempts) {\\n      new Notice(`Failed to switch to ${mode} mode after ${this.maxErrorRecoveryAttempts} attempts. Reverting to chat mode.`, 0);\\n      \\n      try {\\n        // Force switch to chat mode as fallback\\n        this.currentMode = 'chat';\\n        this.updateHeader();\\n        \\n        if (this.contentEl) {\\n          this.contentEl.empty();\\n          this.contentEl.createEl('div', {\\n            cls: 'vp-error-fallback',\\n            text: `Failed to load ${mode} mode. Please try again or contact support.`\\n          });\\n        }\\n        \\n      } catch (fallbackError) {\\n        console.error('Critical error: Failed to load fallback mode:', fallbackError);\\n        new Notice('Critical error: Unable to load any mode. Please restart VaultPilot.', 0);\\n      }\\n    } else {\\n      new Notice(`Failed to switch to ${mode} mode. Retrying...`);\\n    }\\n  }\\n\\n  public updateContext(sources: ContextSource[]): void {\\n    this.contextSources = [...sources];\\n    \\n    // Update current mode component\\n    if (this.currentModeComponent) {\\n      this.currentModeComponent.updateContext(sources);\\n    }\\n\\n    // Update header context indicator\\n    this.updateContextIndicator();\\n  }\\n\\n  public getCurrentMode(): WorkspaceMode {\\n    return this.currentMode;\\n  }\\n\\n  public getModeComponent(mode: WorkspaceMode): ModeComponent | undefined {\\n    return this.modeComponents.get(mode);\\n  }\\n\\n  // Private helper methods\\n\\n  private updateHeader(): void {\\n    if (!this.headerEl) return;\\n\\n    const titleEl = this.headerEl.querySelector('.vp-mode-title') as HTMLElement;\\n    const descEl = this.headerEl.querySelector('.vp-mode-description') as HTMLElement;\\n    \\n    if (titleEl) titleEl.textContent = this.getModeDisplayName(this.currentMode);\\n    if (descEl) descEl.textContent = this.getModeDescription(this.currentMode);\\n    \\n    // Update mode icon\\n    const iconEl = this.headerEl.querySelector('.vp-mode-icon') as HTMLElement;\\n    if (iconEl) {\\n      iconEl.empty();\\n      iconEl.addClass(`vp-mode-icon-${this.currentMode}`);\\n    }\\n  }\\n\\n  private updateModeActions(): void {\\n    if (!this.actionsEl || !this.currentModeComponent) return;\\n\\n    this.actionsEl.empty();\\n\\n    const actions = this.currentModeComponent.getActions();\\n    actions.forEach(action => {\\n      createButton(this.actionsEl!, {\\n        variant: 'tertiary',\\n        size: 'sm',\\n        icon: action.icon,\\n        children: action.label,\\n        disabled: !action.enabled,\\n        ariaLabel: action.label + (action.shortcut ? ` (${action.shortcut})` : ''),\\n        onClick: action.callback\\n      });\\n    });\\n  }\\n\\n  private updateContextIndicator(): void {\\n    // Add context indicator to header showing active sources\\n    const existingIndicator = this.headerEl?.querySelector('.vp-context-indicator');\\n    if (existingIndicator) existingIndicator.remove();\\n\\n    if (!this.headerEl || this.contextSources.length === 0) return;\\n\\n    const indicator = this.headerEl.createEl('div', { \\n      cls: 'vp-context-indicator',\\n      attr: { 'aria-label': `${this.contextSources.length} context sources active` }\\n    });\\n\\n    indicator.createEl('span', { \\n      cls: 'vp-context-count',\\n      text: this.contextSources.length.toString()\\n    });\\n    \\n    indicator.createEl('span', { \\n      cls: 'vp-context-label',\\n      text: this.contextSources.length === 1 ? 'source' : 'sources'\\n    });\\n  }\\n\\n  private handleActiveFileChange(): void {\\n    const activeFile = this.plugin.app.workspace.getActiveFile();\\n    \\n    // Update mode component with new active file\\n    if (this.currentModeComponent) {\\n      const context: ModeContext = {\\n        plugin: this.plugin,\\n        workspace: this.workspace,\\n        contextSources: this.contextSources,\\n        activeFile: activeFile || undefined,\\n        userPreferences: this.plugin.settings\\n      };\\n      \\n      // Note: This would need to be added to the ModeComponent interface\\n      // this.currentModeComponent.updateActiveFile?.(activeFile);\\n    }\\n  }\\n\\n  private getModeDisplayName(mode: WorkspaceMode): string {\\n    const names = {\\n      chat: 'AI Chat',\\n      workflow: 'Workflow Builder', \\n      explorer: 'Vault Explorer',\\n      analytics: 'Analytics Dashboard'\\n    };\\n    return names[mode];\\n  }\\n\\n  private getModeDescription(mode: WorkspaceMode): string {\\n    const descriptions = {\\n      chat: 'Intelligent conversations with context awareness',\\n      workflow: 'Automated task planning and execution',\\n      explorer: 'Smart vault navigation with AI insights', \\n      analytics: 'Performance metrics and usage analytics'\\n    };\\n    return descriptions[mode];\\n  }\\n\\n  // Week 8: Performance monitoring and optimization methods\\n\\n  /**\\n   * Get performance metrics for mode switching\\n   */\\n  public getPerformanceMetrics(): Map<string, number> {\\n    return new Map(this.performanceMetrics);\\n  }\\n\\n  /**\\n   * Clear performance metrics cache\\n   */\\n  public clearPerformanceMetrics(): void {\\n    this.performanceMetrics.clear();\\n  }\\n\\n  /**\\n   * Get average mode switch time\\n   */\\n  public getAverageModeSwitchTime(): number {\\n    const switchMetrics = Array.from(this.performanceMetrics.entries())\\n      .filter(([key]) => key.startsWith('switch_'))\\n      .map(([, duration]) => duration);\\n    \\n    if (switchMetrics.length === 0) return 0;\\n    \\n    return switchMetrics.reduce((sum, duration) => sum + duration, 0) / switchMetrics.length;\\n  }\\n\\n  /**\\n   * Clear mode switch cache\\n   */\\n  public clearModeSwitchCache(): void {\\n    this.modeSwitchCache.clear();\\n    if (this.plugin.settings.debugMode) {\\n      console.log('Mode switch cache cleared');\\n    }\\n  }\\n\\n  /**\\n   * Get cache status\\n   */\\n  public getCacheStatus(): { size: number; modes: WorkspaceMode[] } {\\n    return {\\n      size: this.modeSwitchCache.size,\\n      modes: Array.from(this.modeSwitchCache.keys())\\n    };\\n  }\\n\\n  /**\\n   * Force refresh current mode (bypass cache)\\n   */\\n  public async forceRefreshCurrentMode(): Promise<void> {\\n    const currentMode = this.currentMode;\\n    \\n    // Clear cache for current mode\\n    this.modeSwitchCache.delete(currentMode);\\n    \\n    // Force re-render\\n    if (this.currentModeComponent && this.contentEl) {\\n      this.contentEl.empty();\\n      \\n      const context: ModeContext = {\\n        plugin: this.plugin,\\n        workspace: this.workspace,\\n        contextSources: this.contextSources,\\n        activeFile: this.plugin.app.workspace.getActiveFile() || undefined,\\n        userPreferences: this.plugin.settings\\n      };\\n\\n      await this.currentModeComponent.render(this.contentEl, context);\\n      this.updateModeActions();\\n      \\n      new Notice(`${this.getModeDisplayName(currentMode)} mode refreshed`);\\n    }\\n  }\\n\\n  /**\\n   * Week 8: Integration testing support\\n   */\\n  public async runIntegrationTest(): Promise<boolean> {\\n    try {\\n      const modes: WorkspaceMode[] = ['chat', 'workflow', 'explorer', 'analytics'];\\n      const testResults: boolean[] = [];\\n      \\n      for (const mode of modes) {\\n        const startTime = performance.now();\\n        await this.switchToMode(mode);\\n        const endTime = performance.now();\\n        \\n        const switchTime = endTime - startTime;\\n        const passed = switchTime < 200; // 200ms threshold for integration test\\n        testResults.push(passed);\\n        \\n        if (!passed) {\\n          console.warn(`Integration test failed: ${mode} mode switch took ${switchTime.toFixed(2)}ms`);\\n        }\\n      }\\n      \\n      const allPassed = testResults.every(result => result);\\n      \\n      if (allPassed) {\\n        new Notice('✅ MainPanel integration test passed');\\n      } else {\\n        new Notice('❌ MainPanel integration test failed - check console for details');\\n      }\\n      \\n      return allPassed;\\n      \\n    } catch (error) {\\n      console.error('Integration test error:', error);\\n      new Notice('❌ MainPanel integration test error');\\n      return false;\\n    }\\n  }\\n\\n  // Component lifecycle\\n  onunload(): void {\\n    // Week 8: Cleanup performance optimization resources\\n    clearTimeout(this.switchDebounceTimeout);\\n    this.modeSwitchCache.clear();\\n    this.performanceMetrics.clear();\\n    \\n    // Cleanup current mode component\\n    if (this.currentModeComponent) {\\n      this.currentModeComponent.cleanup();\\n    }\\n\\n    // Cleanup all mode components\\n    this.modeComponents.forEach(component => {\\n      component.cleanup();\\n    });\\n    this.modeComponents.clear();\\n\\n    super.onunload();\\n  }\\n}\\n\\n// Mode Component Implementations\\n\\nclass ChatModeComponent implements ModeComponent {\\n  private containerEl?: HTMLElement;\\n  private chatContainer?: HTMLElement;\\n  private plugin?: VaultPilotPlugin;\\n\\n  async render(container: HTMLElement, context: ModeContext): Promise<void> {\\n    this.containerEl = container;\\n    this.plugin = context.plugin;\\n\\n    // Create chat interface\\n    this.chatContainer = container.createEl('div', { cls: 'vp-chat-interface' });\\n    \\n    // Chat header\\n    const chatHeader = this.chatContainer.createEl('div', { cls: 'vp-chat-header' });\\n    chatHeader.createEl('h3', { text: 'AI Assistant' });\\n    \\n    const contextInfo = chatHeader.createEl('div', { cls: 'vp-chat-context-info' });\\n    contextInfo.createEl('span', { \\n      text: `Using ${context.contextSources.length} context sources`,\\n      cls: 'vp-context-summary'\\n    });\\n\\n    // Chat messages area\\n    const messagesArea = this.chatContainer.createEl('div', { \\n      cls: 'vp-chat-messages',\\n      attr: { 'role': 'log', 'aria-label': 'Chat Messages' }\\n    });\\n\\n    // Chat input area\\n    const inputArea = this.chatContainer.createEl('div', { cls: 'vp-chat-input-area' });\\n    \\n    const inputContainer = inputArea.createEl('div', { cls: 'vp-chat-input-container' });\\n    const chatInput = inputContainer.createEl('textarea', {\\n      cls: 'vp-chat-input',\\n      attr: { \\n        placeholder: 'Ask anything about your vault...',\\n        'aria-label': 'Chat message input'\\n      }\\n    });\\n\\n    const sendButton = createButton(inputContainer, {\\n      variant: 'primary',\\n      size: 'sm',\\n      icon: 'send',\\n      ariaLabel: 'Send message',\\n      onClick: () => this.sendMessage(chatInput.value)\\n    });\\n\\n    // Auto-resize textarea\\n    chatInput.addEventListener('input', () => {\\n      chatInput.style.height = 'auto';\\n      chatInput.style.height = chatInput.scrollHeight + 'px';\\n    });\\n\\n    // Send on Enter (Shift+Enter for new line)\\n    chatInput.addEventListener('keydown', (e) => {\\n      if (e.key === 'Enter' && !e.shiftKey) {\\n        e.preventDefault();\\n        this.sendMessage(chatInput.value);\\n      }\\n    });\\n  }\\n\\n  updateContext(sources: ContextSource[]): void {\\n    // Update context info in chat header\\n    const contextInfo = this.containerEl?.querySelector('.vp-context-summary');\\n    if (contextInfo) {\\n      contextInfo.textContent = `Using ${sources.length} context sources`;\\n    }\\n  }\\n\\n  getActions(): ModeAction[] {\\n    return [\\n      {\\n        id: 'clear-chat',\\n        label: 'Clear Chat',\\n        icon: 'trash-2',\\n        callback: () => this.clearChat(),\\n        enabled: true\\n      },\\n      {\\n        id: 'export-chat',\\n        label: 'Export Chat',\\n        icon: 'download',\\n        callback: () => this.exportChat(),\\n        enabled: true\\n      }\\n    ];\\n  }\\n\\n  private async sendMessage(message: string): Promise<void> {\\n    if (!message.trim() || !this.plugin) return;\\n\\n    const messagesArea = this.containerEl?.querySelector('.vp-chat-messages');\\n    const chatInput = this.containerEl?.querySelector('.vp-chat-input') as HTMLTextAreaElement;\\n    \\n    if (!messagesArea || !chatInput) return;\\n\\n    // Clear input\\n    chatInput.value = '';\\n    chatInput.style.height = 'auto';\\n\\n    // Add user message\\n    this.addMessage(messagesArea as HTMLElement, 'user', message);\\n\\n    // Add thinking indicator\\n    const thinkingEl = this.addMessage(messagesArea as HTMLElement, 'assistant', 'Thinking...');\\n    thinkingEl.addClass('vp-message-thinking');\\n\\n    try {\\n      // Send to API\\n      const response = await this.plugin.apiClient.chat({\\n        message,\\n        vault_context: this.getVaultContext()\\n      });\\n\\n      // Remove thinking indicator\\n      thinkingEl.remove();\\n\\n      if (response.success && response.data) {\\n        this.addMessage(messagesArea as HTMLElement, 'assistant', response.data.response);\\n      } else {\\n        this.addMessage(messagesArea as HTMLElement, 'error', `Error: ${response.error}`);\\n      }\\n    } catch (error) {\\n      thinkingEl.remove();\\n      this.addMessage(messagesArea as HTMLElement, 'error', `Error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n\\n    // Scroll to bottom\\n    messagesArea.scrollTop = messagesArea.scrollHeight;\\n  }\\n\\n  private addMessage(container: HTMLElement, type: 'user' | 'assistant' | 'error', content: string): HTMLElement {\\n    const messageEl = container.createEl('div', { \\n      cls: `vp-chat-message vp-message-${type}`,\\n      attr: { 'role': 'article' }\\n    });\\n\\n    const avatar = messageEl.createEl('div', { cls: 'vp-message-avatar' });\\n    avatar.createEl('span', { text: type === 'user' ? 'U' : type === 'assistant' ? 'AI' : '!' });\\n\\n    const messageContent = messageEl.createEl('div', { cls: 'vp-message-content' });\\n    messageContent.createEl('div', { \\n      cls: 'vp-message-text',\\n      text: content\\n    });\\n\\n    const timestamp = messageEl.createEl('div', { \\n      cls: 'vp-message-timestamp',\\n      text: new Date().toLocaleTimeString()\\n    });\\n\\n    return messageEl;\\n  }\\n\\n  private getVaultContext(): string {\\n    // Get context from active sources\\n    // This would integrate with the ContextPanel\\n    const activeFile = this.plugin?.app.workspace.getActiveFile();\\n    return activeFile ? activeFile.path : '';\\n  }\\n\\n  private clearChat(): void {\\n    const messagesArea = this.containerEl?.querySelector('.vp-chat-messages');\\n    if (messagesArea) {\\n      messagesArea.empty();\\n    }\\n  }\\n\\n  private async exportChat(): Promise<void> {\\n    const messagesArea = this.containerEl?.querySelector('.vp-chat-messages');\\n    if (!messagesArea || !this.plugin) return;\\n\\n    const messages = Array.from(messagesArea.querySelectorAll('.vp-chat-message'));\\n    if (messages.length === 0) {\\n      new Notice('No chat messages to export');\\n      return;\\n    }\\n\\n    let exportContent = '# VaultPilot Chat Export\\\\n\\\\n';\\n    exportContent += `Generated: ${new Date().toISOString()}\\\\n\\\\n`;\\n\\n    messages.forEach((msg, index) => {\\n      const type = msg.classList.contains('vp-message-user') ? 'User' : 'Assistant';\\n      const content = msg.querySelector('.vp-message-text')?.textContent || '';\\n      const timestamp = msg.querySelector('.vp-message-timestamp')?.textContent || '';\\n      \\n      exportContent += `## ${type} (${timestamp})\\\\n\\\\n${content}\\\\n\\\\n`;\\n    });\\n\\n    try {\\n      const filename = `VaultPilot Chat Export ${new Date().toISOString().split('T')[0]}.md`;\\n      await this.plugin.app.vault.create(filename, exportContent);\\n      new Notice(`Chat exported to ${filename}`);\\n    } catch (error) {\\n      new Notice('Failed to export chat');\\n    }\\n  }\\n\\n  cleanup(): void {\\n    // Cleanup chat-specific resources\\n    this.containerEl = undefined;\\n    this.chatContainer = undefined;\\n    this.plugin = undefined;\\n  }\\n}\\n\\nclass WorkflowModeComponent implements ModeComponent {\\n  private containerEl?: HTMLElement;\\n  private plugin?: VaultPilotPlugin;\\n  private workspace?: WorkspaceManager;\\n  private currentWorkflow?: any;\\n\\n  async render(container: HTMLElement, context: ModeContext): Promise<void> {\\n    this.containerEl = container;\\n    this.plugin = context.plugin;\\n    this.workspace = context.workspace;\\n\\n    // Create workflow interface\\n    const workflowContainer = container.createEl('div', { cls: 'vp-workflow-interface' });\\n    \\n    // Workflow header\\n    const workflowHeader = workflowContainer.createEl('div', { cls: 'vp-workflow-header' });\\n    workflowHeader.createEl('h3', { text: 'Workflow Builder' });\\n    \\n    const contextInfo = workflowHeader.createEl('div', { cls: 'vp-workflow-context-info' });\\n    contextInfo.createEl('span', { \\n      text: `Planning with ${context.contextSources.length} context sources`,\\n      cls: 'vp-context-summary'\\n    });\\n\\n    // Workflow creation area\\n    const creationArea = workflowContainer.createEl('div', { cls: 'vp-workflow-creation' });\\n    \\n    const goalContainer = creationArea.createEl('div', { cls: 'vp-goal-container' });\\n    goalContainer.createEl('label', { \\n      text: 'Workflow Goal:',\\n      attr: { 'for': 'workflow-goal-input' }\\n    });\\n    \\n    const goalInput = goalContainer.createEl('textarea', {\\n      cls: 'vp-goal-input',\\n      attr: { \\n        id: 'workflow-goal-input',\\n        placeholder: 'Describe what you want to accomplish...',\\n        'aria-label': 'Workflow goal description'\\n      }\\n    });\\n\\n    const optionsContainer = creationArea.createEl('div', { cls: 'vp-workflow-options' });\\n    \\n    const timeframeSelect = optionsContainer.createEl('select', {\\n      cls: 'vp-timeframe-select',\\n      attr: { 'aria-label': 'Workflow timeframe' }\\n    });\\n    \\n    ['1 hour', '1 day', '1 week', '1 month'].forEach(timeframe => {\\n      timeframeSelect.createEl('option', { value: timeframe, text: timeframe });\\n    });\\n\\n    const exportButton = createButton(optionsContainer, {\\n      variant: 'primary',\\n      size: 'md',\\n      children: 'Generate Workflow',\\n      icon: 'zap',\\n      onClick: () => this.generateWorkflow(goalInput.value, timeframeSelect.value)\\n    });\\n\\n    // Workflow display area\\n    const workflowDisplay = workflowContainer.createEl('div', { \\n      cls: 'vp-workflow-display',\\n      attr: { 'role': 'region', 'aria-label': 'Generated Workflow' }\\n    });\\n\\n    // Auto-resize textarea\\n    goalInput.addEventListener('input', () => {\\n      goalInput.style.height = 'auto';\\n      goalInput.style.height = goalInput.scrollHeight + 'px';\\n    });\\n  }\\n\\n  updateContext(sources: ContextSource[]): void {\\n    const contextInfo = this.containerEl?.querySelector('.vp-context-summary');\\n    if (contextInfo) {\\n      contextInfo.textContent = `Planning with ${sources.length} context sources`;\\n    }\\n  }\\n\\n  getActions(): ModeAction[] {\\n    return [\\n      {\\n        id: 'export-workflow',\\n        label: 'Export Workflow',\\n        icon: 'download',\\n        callback: () => this.exportWorkflow(),\\n        enabled: !!this.currentWorkflow\\n      },\\n      {\\n        id: 'save-workflow',\\n        label: 'Save Workflow',\\n        icon: 'save',\\n        callback: () => this.saveWorkflow(),\\n        enabled: !!this.currentWorkflow\\n      }\\n    ];\\n  }\\n\\n  private async generateWorkflow(goal: string, timeframe: string): Promise<void> {\\n    if (!goal.trim() || !this.plugin) return;\\n\\n    const workflowDisplay = this.containerEl?.querySelector('.vp-workflow-display');\\n    if (!workflowDisplay) return;\\n\\n    // Clear previous workflow\\n    workflowDisplay.empty();\\n\\n    // Add loading indicator\\n    const loadingEl = workflowDisplay.createEl('div', { cls: 'vp-workflow-loading' });\\n    loadingEl.createEl('div', { cls: 'vp-loading-spinner' });\\n    loadingEl.createEl('p', { text: 'Generating workflow...' });\\n\\n    try {\\n      // Get context for planning\\n      const context = this.getWorkflowContext();\\n      \\n      // Call workflow planning API\\n      const response = await this.plugin.apiClient.planTasks({\\n        goal,\\n        context,\\n        timeframe\\n      });\\n\\n      // Remove loading indicator\\n      loadingEl.remove();\\n\\n      if (response.success && response.data) {\\n        this.currentWorkflow = response.data;\\n        this.renderWorkflow(response.data);\\n      } else {\\n        this.showError(`Failed to generate workflow: ${response.error}`);\\n      }\\n    } catch (error) {\\n      loadingEl.remove();\\n      this.showError(`Error generating workflow: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  private renderWorkflow(workflowData: any): void {\\n    const workflowDisplay = this.containerEl?.querySelector('.vp-workflow-display');\\n    if (!workflowDisplay) return;\\n\\n    // Workflow title\\n    const titleSection = workflowDisplay.createEl('div', { cls: 'vp-workflow-title-section' });\\n    titleSection.createEl('h4', { \\n      text: workflowData.plan?.title || 'Generated Workflow',\\n      cls: 'vp-workflow-title'\\n    });\\n\\n    if (workflowData.plan?.description) {\\n      titleSection.createEl('p', { \\n        text: workflowData.plan.description,\\n        cls: 'vp-workflow-description'\\n      });\\n    }\\n\\n    // Workflow metadata\\n    const metaSection = workflowDisplay.createEl('div', { cls: 'vp-workflow-meta' });\\n    \\n    if (workflowData.plan?.estimated_duration) {\\n      const durationEl = metaSection.createEl('div', { cls: 'vp-meta-item' });\\n      durationEl.createEl('span', { text: 'Duration:', cls: 'vp-meta-label' });\\n      durationEl.createEl('span', { text: workflowData.plan.estimated_duration, cls: 'vp-meta-value' });\\n    }\\n\\n    // Tasks section\\n    if (workflowData.plan?.tasks && workflowData.plan.tasks.length > 0) {\\n      const tasksSection = workflowDisplay.createEl('div', { cls: 'vp-workflow-tasks' });\\n      tasksSection.createEl('h5', { text: 'Tasks', cls: 'vp-section-title' });\\n\\n      const tasksList = tasksSection.createEl('div', { cls: 'vp-tasks-list' });\\n\\n      workflowData.plan.tasks.forEach((task: any, index: number) => {\\n        this.renderTask(tasksList, task, index);\\n      });\\n    }\\n\\n    // Milestones section\\n    if (workflowData.milestones && workflowData.milestones.length > 0) {\\n      const milestonesSection = workflowDisplay.createEl('div', { cls: 'vp-workflow-milestones' });\\n      milestonesSection.createEl('h5', { text: 'Milestones', cls: 'vp-section-title' });\\n\\n      const milestonesList = milestonesSection.createEl('div', { cls: 'vp-milestones-list' });\\n\\n      workflowData.milestones.forEach((milestone: any) => {\\n        this.renderMilestone(milestonesList, milestone);\\n      });\\n    }\\n  }\\n\\n  private renderTask(container: HTMLElement, task: any, index: number): void {\\n    const taskEl = container.createEl('div', { \\n      cls: `vp-task-item vp-priority-${task.priority || 'medium'}`,\\n      attr: { 'role': 'listitem' }\\n    });\\n\\n    const taskHeader = taskEl.createEl('div', { cls: 'vp-task-header' });\\n    \\n    const checkbox = taskHeader.createEl('input', {\\n      type: 'checkbox',\\n      cls: 'vp-task-checkbox',\\n      attr: { \\n        id: `task-${index}`,\\n        'aria-describedby': `task-desc-${index}`,\\n        checked: task.status === 'completed'\\n      }\\n    });\\n\\n    const taskInfo = taskHeader.createEl('div', { cls: 'vp-task-info' });\\n    \\n    const taskTitle = taskInfo.createEl('label', {\\n      text: task.title || `Task ${index + 1}`,\\n      cls: 'vp-task-title',\\n      attr: { 'for': `task-${index}` }\\n    });\\n\\n    const priorityBadge = taskHeader.createEl('span', {\\n      text: task.priority || 'medium',\\n      cls: `vp-priority-badge vp-priority-${task.priority || 'medium'}`\\n    });\\n\\n    if (task.description) {\\n      const taskDesc = taskEl.createEl('p', {\\n        text: task.description,\\n        cls: 'vp-task-description',\\n        attr: { id: `task-desc-${index}` }\\n      });\\n    }\\n\\n    if (task.estimated_time) {\\n      const timeEl = taskEl.createEl('div', { cls: 'vp-task-time' });\\n      timeEl.createEl('span', { text: 'Estimated time:', cls: 'vp-time-label' });\\n      timeEl.createEl('span', { text: task.estimated_time, cls: 'vp-time-value' });\\n    }\\n\\n    // Task completion handler\\n    checkbox.addEventListener('change', () => {\\n      task.status = checkbox.checked ? 'completed' : 'pending';\\n      taskEl.toggleClass('vp-task-completed', checkbox.checked);\\n    });\\n  }\\n\\n  private renderMilestone(container: HTMLElement, milestone: any): void {\\n    const milestoneEl = container.createEl('div', { cls: 'vp-milestone-item' });\\n    \\n    const milestoneHeader = milestoneEl.createEl('div', { cls: 'vp-milestone-header' });\\n    milestoneHeader.createEl('h6', { \\n      text: milestone.title,\\n      cls: 'vp-milestone-title'\\n    });\\n\\n    if (milestone.target_date) {\\n      milestoneHeader.createEl('span', {\\n        text: milestone.target_date,\\n        cls: 'vp-milestone-date'\\n      });\\n    }\\n\\n    if (milestone.description) {\\n      milestoneEl.createEl('p', {\\n        text: milestone.description,\\n        cls: 'vp-milestone-description'\\n      });\\n    }\\n  }\\n\\n  private getWorkflowContext(): string {\\n    // Integrate with context panel sources\\n    const activeFile = this.plugin?.app.workspace.getActiveFile();\\n    let context = '';\\n    \\n    if (activeFile) {\\n      context += `Current file: ${activeFile.path}\\\\n`;\\n    }\\n    \\n    // Add more context from ContextPanel if available\\n    return context;\\n  }\\n\\n  private showError(message: string): void {\\n    const workflowDisplay = this.containerEl?.querySelector('.vp-workflow-display');\\n    if (!workflowDisplay) return;\\n\\n    const errorEl = workflowDisplay.createEl('div', { cls: 'vp-workflow-error' });\\n    errorEl.createEl('div', { cls: 'vp-error-icon' });\\n    errorEl.createEl('p', { text: message, cls: 'vp-error-message' });\\n  }\\n\\n  private async exportWorkflow(): Promise<void> {\\n    if (!this.currentWorkflow || !this.plugin) return;\\n\\n    try {\\n      let content = `# ${this.currentWorkflow.plan?.title || 'Workflow'}\\\\n\\\\n`;\\n      \\n      if (this.currentWorkflow.plan?.description) {\\n        content += `${this.currentWorkflow.plan.description}\\\\n\\\\n`;\\n      }\\n\\n      if (this.currentWorkflow.plan?.estimated_duration) {\\n        content += `**Duration:** ${this.currentWorkflow.plan.estimated_duration}\\\\n\\\\n`;\\n      }\\n\\n      if (this.currentWorkflow.plan?.tasks) {\\n        content += `## Tasks\\\\n\\\\n`;\\n        this.currentWorkflow.plan.tasks.forEach((task: any, index: number) => {\\n          const checkbox = task.status === 'completed' ? '[x]' : '[ ]';\\n          content += `${checkbox} **${task.title}** (${task.priority} priority)\\\\n`;\\n          if (task.description) {\\n            content += `   ${task.description}\\\\n`;\\n          }\\n          if (task.estimated_time) {\\n            content += `   *Estimated time: ${task.estimated_time}*\\\\n`;\\n          }\\n          content += '\\\\n';\\n        });\\n      }\\n\\n      if (this.currentWorkflow.milestones) {\\n        content += `## Milestones\\\\n\\\\n`;\\n        this.currentWorkflow.milestones.forEach((milestone: any) => {\\n          content += `- **${milestone.title}**`;\\n          if (milestone.target_date) {\\n            content += ` (${milestone.target_date})`;\\n          }\\n          content += '\\\\n';\\n          if (milestone.description) {\\n            content += `  ${milestone.description}\\\\n`;\\n          }\\n          content += '\\\\n';\\n        });\\n      }\\n\\n      const filename = `VaultPilot Workflow - ${new Date().toISOString().split('T')[0]}.md`;\\n      await this.plugin.app.vault.create(filename, content);\\n      new Notice(`Workflow exported to ${filename}`);\\n    } catch (error) {\\n      new Notice('Failed to export workflow');\\n    }\\n  }\\n\\n  private async saveWorkflow(): Promise<void> {\\n    // Placeholder for saving workflow to plugin data\\n    new Notice('Workflow saved');\\n  }\\n\\n  cleanup(): void {\\n    this.containerEl = undefined;\\n    this.plugin = undefined;\\n    this.workspace = undefined;\\n    this.currentWorkflow = undefined;\\n  }\\n}\\n\\nclass ExplorerModeComponent implements ModeComponent {\\n  private containerEl?: HTMLElement;\\n  private plugin?: VaultPilotPlugin;\\n  private workspace?: WorkspaceManager;\\n  private currentFiles: TFile[] = [];\\n  private searchQuery = '';\\n\\n  async render(container: HTMLElement, context: ModeContext): Promise<void> {\\n    this.containerEl = container;\\n    this.plugin = context.plugin;\\n    this.workspace = context.workspace;\\n\\n    // Create explorer interface\\n    const explorerContainer = container.createEl('div', { cls: 'vp-explorer-interface' });\\n    \\n    // Explorer header\\n    const explorerHeader = explorerContainer.createEl('div', { cls: 'vp-explorer-header' });\\n    explorerHeader.createEl('h3', { text: 'Vault Explorer' });\\n    \\n    const contextInfo = explorerHeader.createEl('div', { cls: 'vp-explorer-context-info' });\\n    contextInfo.createEl('span', { \\n      text: `Exploring with ${context.contextSources.length} context sources`,\\n      cls: 'vp-context-summary'\\n    });\\n\\n    // Search area\\n    const searchArea = explorerContainer.createEl('div', { cls: 'vp-explorer-search' });\\n    \\n    const searchContainer = searchArea.createEl('div', { cls: 'vp-search-container' });\\n    const searchInput = searchContainer.createEl('input', {\\n      type: 'text',\\n      cls: 'vp-search-input',\\n      attr: { \\n        placeholder: 'Search files...',\\n        'aria-label': 'Search vault files'\\n      }\\n    });\\n\\n    const searchButton = createButton(searchContainer, {\\n      variant: 'secondary',\\n      size: 'sm',\\n      icon: 'search',\\n      ariaLabel: 'Search files',\\n      onClick: () => this.performSearch(searchInput.value)\\n    });\\n\\n    // Filter options\\n    const filterArea = searchArea.createEl('div', { cls: 'vp-filter-area' });\\n    \\n    const sortSelect = filterArea.createEl('select', {\\n      cls: 'vp-sort-select',\\n      attr: { 'aria-label': 'Sort files by' }\\n    });\\n    \\n    [\\n      { value: 'name', text: 'Name' },\\n      { value: 'modified', text: 'Last Modified' },\\n      { value: 'created', text: 'Created' },\\n      { value: 'size', text: 'Size' }\\n    ].forEach(option => {\\n      sortSelect.createEl('option', { value: option.value, text: option.text });\\n    });\\n\\n    const typeFilter = filterArea.createEl('select', {\\n      cls: 'vp-type-filter',\\n      attr: { 'aria-label': 'Filter by file type' }\\n    });\\n    \\n    typeFilter.createEl('option', { value: 'all', text: 'All Files' });\\n    typeFilter.createEl('option', { value: 'md', text: 'Markdown' });\\n    typeFilter.createEl('option', { value: 'canvas', text: 'Canvas' });\\n    typeFilter.createEl('option', { value: 'image', text: 'Images' });\\n\\n    // Files display area\\n    const filesDisplay = explorerContainer.createEl('div', { \\n      cls: 'vp-files-display',\\n      attr: { 'role': 'region', 'aria-label': 'File Browser' }\\n    });\\n\\n    // Setup event listeners\\n    searchInput.addEventListener('input', (e) => {\\n      this.searchQuery = (e.target as HTMLInputElement).value;\\n      this.debounceSearch();\\n    });\\n\\n    sortSelect.addEventListener('change', () => {\\n      this.refreshFileList(sortSelect.value);\\n    });\\n\\n    typeFilter.addEventListener('change', () => {\\n      this.refreshFileList(sortSelect.value, typeFilter.value);\\n    });\\n\\n    // Load initial file list\\n    await this.refreshFileList();\\n  }\\n\\n  updateContext(sources: ContextSource[]): void {\\n    const contextInfo = this.containerEl?.querySelector('.vp-context-summary');\\n    if (contextInfo) {\\n      contextInfo.textContent = `Exploring with ${sources.length} context sources`;\\n    }\\n  }\\n\\n  getActions(): ModeAction[] {\\n    return [\\n      {\\n        id: 'refresh-files',\\n        label: 'Refresh',\\n        icon: 'refresh-cw',\\n        callback: () => this.refreshFileList(),\\n        enabled: true\\n      },\\n      {\\n        id: 'create-file',\\n        label: 'New File',\\n        icon: 'file-plus',\\n        callback: () => this.createNewFile(),\\n        enabled: true\\n      },\\n      {\\n        id: 'analyze-vault',\\n        label: 'Analyze Vault',\\n        icon: 'zap',\\n        callback: () => this.analyzeVault(),\\n        enabled: true\\n      }\\n    ];\\n  }\\n\\n  private debounceTimeout?: number;\\n  private debounceSearch(): void {\\n    clearTimeout(this.debounceTimeout);\\n    this.debounceTimeout = window.setTimeout(() => {\\n      this.performSearch(this.searchQuery);\\n    }, 300);\\n  }\\n\\n  private async performSearch(query: string): Promise<void> {\\n    if (!query.trim()) {\\n      await this.refreshFileList();\\n      return;\\n    }\\n\\n    const allFiles = this.plugin?.app.vault.getMarkdownFiles() || [];\\n    const filteredFiles = allFiles.filter((file: TFile) => \\n      file.name.toLowerCase().includes(query.toLowerCase()) ||\\n      file.path.toLowerCase().includes(query.toLowerCase())\\n    );\\n\\n    this.currentFiles = filteredFiles;\\n    this.renderFileList();\\n  }\\n\\n  private async refreshFileList(sortBy: string = 'name', filterType: string = 'all'): Promise<void> {\\n    if (!this.plugin) return;\\n\\n    let files = this.plugin.app.vault.getMarkdownFiles();\\n\\n    // Apply type filter\\n    if (filterType !== 'all') {\\n      files = files.filter((file: TFile) => {\\n        switch (filterType) {\\n          case 'md': return file.extension === 'md';\\n          case 'canvas': return file.extension === 'canvas';\\n          case 'image': return ['png', 'jpg', 'jpeg', 'gif', 'svg'].includes(file.extension);\\n          default: return true;\\n        }\\n      });\\n    }\\n\\n    // Apply sorting\\n    files.sort((a: TFile, b: TFile) => {\\n      switch (sortBy) {\\n        case 'modified':\\n          return b.stat.mtime - a.stat.mtime;\\n        case 'created':\\n          return b.stat.ctime - a.stat.ctime;\\n        case 'size':\\n          return b.stat.size - a.stat.size;\\n        case 'name':\\n        default:\\n          return a.name.localeCompare(b.name);\\n      }\\n    });\\n\\n    this.currentFiles = files;\\n    this.renderFileList();\\n  }\\n\\n  private renderFileList(): void {\\n    const filesDisplay = this.containerEl?.querySelector('.vp-files-display');\\n    if (!filesDisplay) return;\\n\\n    filesDisplay.empty();\\n\\n    if (this.currentFiles.length === 0) {\\n      const emptyState = filesDisplay.createEl('div', { cls: 'vp-empty-state' });\\n      emptyState.createEl('p', { text: 'No files found' });\\n      return;\\n    }\\n\\n    // File count header\\n    const countHeader = filesDisplay.createEl('div', { cls: 'vp-file-count-header' });\\n    countHeader.createEl('span', { \\n      text: `${this.currentFiles.length} files`,\\n      cls: 'vp-file-count'\\n    });\\n\\n    // Files list\\n    const filesList = filesDisplay.createEl('div', { \\n      cls: 'vp-files-list',\\n      attr: { 'role': 'list' }\\n    });\\n\\n    this.currentFiles.forEach(file => {\\n      this.renderFileItem(filesList, file);\\n    });\\n  }\\n\\n  private renderFileItem(container: HTMLElement, file: TFile): void {\\n    const fileEl = container.createEl('div', { \\n      cls: 'vp-file-item',\\n      attr: { 'role': 'listitem' }\\n    });\\n\\n    const fileHeader = fileEl.createEl('div', { cls: 'vp-file-header' });\\n    \\n    // File icon\\n    const fileIcon = fileHeader.createEl('div', { cls: 'vp-file-icon' });\\n    fileIcon.createEl('span', { text: this.getFileIcon(file) });\\n\\n    // File info\\n    const fileInfo = fileHeader.createEl('div', { cls: 'vp-file-info' });\\n    \\n    const fileName = fileInfo.createEl('div', { \\n      text: file.basename,\\n      cls: 'vp-file-name'\\n    });\\n\\n    const fileMeta = fileInfo.createEl('div', { cls: 'vp-file-meta' });\\n    fileMeta.createEl('span', { \\n      text: file.path,\\n      cls: 'vp-file-path'\\n    });\\n    fileMeta.createEl('span', { \\n      text: this.formatFileSize(file.stat.size),\\n      cls: 'vp-file-size'\\n    });\\n    fileMeta.createEl('span', { \\n      text: this.formatDate(new Date(file.stat.mtime)),\\n      cls: 'vp-file-date'\\n    });\\n\\n    // File actions\\n    const fileActions = fileHeader.createEl('div', { cls: 'vp-file-actions' });\\n    \\n    const openButton = createButton(fileActions, {\\n      variant: 'tertiary',\\n      size: 'xs',\\n      icon: 'external-link',\\n      ariaLabel: `Open ${file.basename}`,\\n      onClick: () => this.openFile(file)\\n    });\\n\\n    const addToContextButton = createButton(fileActions, {\\n      variant: 'tertiary',\\n      size: 'xs',\\n      icon: 'plus',\\n      ariaLabel: `Add ${file.basename} to context`,\\n      onClick: () => this.addToContext(file)\\n    });\\n\\n    // File preview (if possible)\\n    if (file.extension === 'md') {\\n      this.addFilePreview(fileEl, file);\\n    }\\n\\n    // Make file clickable\\n    fileEl.addEventListener('click', (e) => {\\n      if ((e.target as HTMLElement).closest('.vp-file-actions')) return;\\n      this.openFile(file);\\n    });\\n\\n    fileEl.addEventListener('keydown', (e) => {\\n      if (e.key === 'Enter' || e.key === ' ') {\\n        e.preventDefault();\\n        this.openFile(file);\\n      }\\n    });\\n\\n    fileEl.setAttribute('tabindex', '0');\\n  }\\n\\n  private async addFilePreview(fileEl: HTMLElement, file: TFile): Promise<void> {\\n    if (!this.plugin) return;\\n\\n    try {\\n      const content = await this.plugin.app.vault.read(file);\\n      const preview = content.substring(0, 200);\\n      \\n      if (preview.trim()) {\\n        const previewEl = fileEl.createEl('div', { cls: 'vp-file-preview' });\\n        previewEl.createEl('p', { \\n          text: preview + (content.length > 200 ? '...' : ''),\\n          cls: 'vp-preview-text'\\n        });\\n      }\\n    } catch (error) {\\n      // Silently fail for preview\\n    }\\n  }\\n\\n  private getFileIcon(file: TFile): string {\\n    const iconMap: Record<string, string> = {\\n      'md': '📝',\\n      'canvas': '🎨',\\n      'png': '🖼️',\\n      'jpg': '🖼️',\\n      'jpeg': '🖼️',\\n      'gif': '🖼️',\\n      'svg': '🖼️',\\n      'pdf': '📄',\\n      'txt': '📄',\\n      'json': '⚙️',\\n      'js': '💻',\\n      'ts': '💻',\\n      'css': '🎨',\\n      'html': '🌐'\\n    };\\n    return iconMap[file.extension] || '📄';\\n  }\\n\\n  private formatFileSize(bytes: number): string {\\n    if (bytes < 1024) return bytes + ' B';\\n    if (bytes < 1024 * 1024) return Math.round(bytes / 1024) + ' KB';\\n    return Math.round(bytes / (1024 * 1024)) + ' MB';\\n  }\\n\\n  private formatDate(date: Date): string {\\n    const now = new Date();\\n    const diffMs = now.getTime() - date.getTime();\\n    const diffDays = Math.floor(diffMs / (24 * 60 * 60 * 1000));\\n    \\n    if (diffDays === 0) return 'Today';\\n    if (diffDays === 1) return 'Yesterday';\\n    if (diffDays < 7) return `${diffDays} days ago`;\\n    return date.toLocaleDateString();\\n  }\\n\\n  private async openFile(file: TFile): Promise<void> {\\n    if (!this.plugin) return;\\n    \\n    const leaf = this.plugin.app.workspace.getLeaf();\\n    await leaf.openFile(file);\\n  }\\n\\n  private async addToContext(file: TFile): Promise<void> {\\n    if (!this.workspace) return;\\n\\n    const contextPanel = this.workspace.getContextPanel();\\n    if (contextPanel && typeof contextPanel.addFileToContext === 'function') {\\n      await contextPanel.addFileToContext(file);\\n    }\\n  }\\n\\n  private async createNewFile(): Promise<void> {\\n    if (!this.plugin) return;\\n\\n    const fileName = prompt('Enter file name:');\\n    if (!fileName) return;\\n\\n    try {\\n      const fullName = fileName.endsWith('.md') ? fileName : fileName + '.md';\\n      const newFile = await this.plugin.app.vault.create(fullName, '');\\n      await this.openFile(newFile);\\n      await this.refreshFileList();\\n    } catch (error) {\\n      new Notice('Failed to create file');\\n    }\\n  }\\n\\n  private async analyzeVault(): Promise<void> {\\n    if (!this.plugin) return;\\n\\n    const notice = new Notice('Analyzing vault...', 0);\\n    \\n    try {\\n      const files = this.plugin.app.vault.getMarkdownFiles();\\n      let content = '';\\n      \\n      // Sample files for analysis\\n      const sampleFiles = files.slice(0, 10);\\n      for (const file of sampleFiles) {\\n        const fileContent = await this.plugin.app.vault.read(file);\\n        content += `=== ${file.name} ===\\\\n${fileContent}\\\\n\\\\n`;\\n      }\\n\\n      const response = await this.plugin.apiClient.analyzeVaultContext({\\n        content,\\n        analysis_type: 'insights'\\n      });\\n\\n      notice.hide();\\n\\n      if (response.success && response.data) {\\n        this.showAnalysisResults(response.data);\\n      } else {\\n        new Notice(`Analysis failed: ${response.error}`);\\n      }\\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`Analysis error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  private showAnalysisResults(analysisData: any): void {\\n    const filesDisplay = this.containerEl?.querySelector('.vp-files-display');\\n    if (!filesDisplay) return;\\n\\n    // Create analysis overlay\\n    const overlay = this.containerEl!.createEl('div', { cls: 'vp-analysis-overlay' });\\n    \\n    const modal = overlay.createEl('div', { cls: 'vp-analysis-modal' });\\n    \\n    const header = modal.createEl('div', { cls: 'vp-analysis-header' });\\n    header.createEl('h4', { text: 'Vault Analysis Results' });\\n    \\n    const closeButton = createButton(header, {\\n      variant: 'tertiary',\\n      size: 'xs',\\n      icon: 'x',\\n      ariaLabel: 'Close analysis',\\n      onClick: () => overlay.remove()\\n    });\\n\\n    const content = modal.createEl('div', { cls: 'vp-analysis-content' });\\n    \\n    if (analysisData.analysis) {\\n      content.createEl('h5', { text: 'Analysis' });\\n      content.createEl('p', { text: analysisData.analysis });\\n    }\\n\\n    if (analysisData.insights && analysisData.insights.length > 0) {\\n      content.createEl('h5', { text: 'Key Insights' });\\n      const insightsList = content.createEl('ul');\\n      analysisData.insights.forEach((insight: string) => {\\n        insightsList.createEl('li', { text: insight });\\n      });\\n    }\\n\\n    if (analysisData.recommendations && analysisData.recommendations.length > 0) {\\n      content.createEl('h5', { text: 'Recommendations' });\\n      const recsList = content.createEl('ul');\\n      analysisData.recommendations.forEach((rec: string) => {\\n        recsList.createEl('li', { text: rec });\\n      });\\n    }\\n  }\\n\\n  cleanup(): void {\\n    clearTimeout(this.debounceTimeout);\\n    this.containerEl = undefined;\\n    this.plugin = undefined;\\n    this.workspace = undefined;\\n    this.currentFiles = [];\\n  }\\n}\\n\\nclass AnalyticsModeComponent implements ModeComponent {\\n  private containerEl?: HTMLElement;\\n  private plugin?: VaultPilotPlugin;\\n  private workspace?: WorkspaceManager;\\n  private refreshInterval?: number;\\n  private vaultStats?: any;\\n\\n  async render(container: HTMLElement, context: ModeContext): Promise<void> {\\n    this.containerEl = container;\\n    this.plugin = context.plugin;\\n    this.workspace = context.workspace;\\n\\n    // Create analytics interface\\n    const analyticsContainer = container.createEl('div', { cls: 'vp-analytics-interface' });\\n    \\n    // Analytics header\\n    const analyticsHeader = analyticsContainer.createEl('div', { cls: 'vp-analytics-header' });\\n    analyticsHeader.createEl('h3', { text: 'Analytics Dashboard' });\\n    \\n    const contextInfo = analyticsHeader.createEl('div', { cls: 'vp-analytics-context-info' });\\n    contextInfo.createEl('span', { \\n      text: `Monitoring ${context.contextSources.length} context sources`,\\n      cls: 'vp-context-summary'\\n    });\\n\\n    // Last updated indicator\\n    const lastUpdated = analyticsHeader.createEl('div', { cls: 'vp-last-updated' });\\n    lastUpdated.createEl('span', { \\n      text: `Last updated: ${new Date().toLocaleTimeString()}`,\\n      cls: 'vp-update-time'\\n    });\\n\\n    // Create dashboard sections\\n    await this.createOverviewSection(analyticsContainer);\\n    await this.createVaultMetricsSection(analyticsContainer);\\n    await this.createUsageMetricsSection(analyticsContainer);\\n    await this.createPerformanceSection(analyticsContainer);\\n    await this.createAIInsightsSection(analyticsContainer);\\n\\n    // Setup auto-refresh\\n    this.setupAutoRefresh();\\n  }\\n\\n  updateContext(sources: ContextSource[]): void {\\n    const contextInfo = this.containerEl?.querySelector('.vp-context-summary');\\n    if (contextInfo) {\\n      contextInfo.textContent = `Monitoring ${sources.length} context sources`;\\n    }\\n  }\\n\\n  getActions(): ModeAction[] {\\n    return [\\n      {\\n        id: 'refresh-analytics',\\n        label: 'Refresh Data',\\n        icon: 'refresh-cw',\\n        callback: () => this.refreshAllData(),\\n        enabled: true\\n      },\\n      {\\n        id: 'export-report',\\n        label: 'Export Report',\\n        icon: 'download',\\n        callback: () => this.exportAnalyticsReport(),\\n        enabled: true\\n      },\\n      {\\n        id: 'configure-metrics',\\n        label: 'Configure',\\n        icon: 'settings',\\n        callback: () => this.openMetricsConfig(),\\n        enabled: true\\n      }\\n    ];\\n  }\\n\\n  private async createOverviewSection(container: HTMLElement): Promise<void> {\\n    const overviewSection = container.createEl('div', { cls: 'vp-analytics-section vp-overview-section' });\\n    overviewSection.createEl('h4', { text: 'Overview', cls: 'vp-section-title' });\\n\\n    const overviewGrid = overviewSection.createEl('div', { cls: 'vp-overview-grid' });\\n\\n    // Vault health indicator\\n    const healthCard = overviewGrid.createEl('div', { cls: 'vp-metric-card vp-health-card' });\\n    healthCard.createEl('div', { cls: 'vp-metric-icon vp-health-icon' });\\n    healthCard.createEl('div', { text: 'Vault Health', cls: 'vp-metric-label' });\\n    const healthValue = healthCard.createEl('div', { cls: 'vp-metric-value vp-health-value' });\\n    healthValue.createEl('span', { text: 'Excellent', cls: 'vp-health-status' });\\n    healthValue.createEl('span', { text: '96%', cls: 'vp-health-score' });\\n\\n    // Activity indicator\\n    const activityCard = overviewGrid.createEl('div', { cls: 'vp-metric-card vp-activity-card' });\\n    activityCard.createEl('div', { cls: 'vp-metric-icon vp-activity-icon' });\\n    activityCard.createEl('div', { text: 'Today\\\\'s Activity', cls: 'vp-metric-label' });\\n    const activityValue = activityCard.createEl('div', { cls: 'vp-metric-value' });\\n    activityValue.createEl('span', { text: '47', cls: 'vp-activity-count' });\\n    activityValue.createEl('span', { text: 'interactions', cls: 'vp-activity-label' });\\n\\n    // AI usage indicator\\n    const aiCard = overviewGrid.createEl('div', { cls: 'vp-metric-card vp-ai-card' });\\n    aiCard.createEl('div', { cls: 'vp-metric-icon vp-ai-icon' });\\n    aiCard.createEl('div', { text: 'AI Requests', cls: 'vp-metric-label' });\\n    const aiValue = aiCard.createEl('div', { cls: 'vp-metric-value' });\\n    aiValue.createEl('span', { text: '23', cls: 'vp-ai-count' });\\n    aiValue.createEl('span', { text: 'today', cls: 'vp-ai-label' });\\n\\n    // Performance indicator\\n    const perfCard = overviewGrid.createEl('div', { cls: 'vp-metric-card vp-performance-card' });\\n    perfCard.createEl('div', { cls: 'vp-metric-icon vp-performance-icon' });\\n    perfCard.createEl('div', { text: 'Performance', cls: 'vp-metric-label' });\\n    const perfValue = perfCard.createEl('div', { cls: 'vp-metric-value' });\\n    perfValue.createEl('span', { text: '142ms', cls: 'vp-performance-time' });\\n    perfValue.createEl('span', { text: 'avg response', cls: 'vp-performance-label' });\\n  }\\n\\n  private async createVaultMetricsSection(container: HTMLElement): Promise<void> {\\n    const vaultSection = container.createEl('div', { cls: 'vp-analytics-section vp-vault-section' });\\n    vaultSection.createEl('h4', { text: 'Vault Metrics', cls: 'vp-section-title' });\\n\\n    const vaultGrid = vaultSection.createEl('div', { cls: 'vp-vault-grid' });\\n\\n    // Collect vault statistics\\n    const stats = await this.collectVaultStats();\\n\\n    // Files count\\n    const filesCard = vaultGrid.createEl('div', { cls: 'vp-stat-card' });\\n    filesCard.createEl('div', { text: stats.totalFiles.toString(), cls: 'vp-stat-value' });\\n    filesCard.createEl('div', { text: 'Total Files', cls: 'vp-stat-label' });\\n\\n    // Word count\\n    const wordsCard = vaultGrid.createEl('div', { cls: 'vp-stat-card' });\\n    wordsCard.createEl('div', { text: this.formatNumber(stats.totalWords), cls: 'vp-stat-value' });\\n    wordsCard.createEl('div', { text: 'Total Words', cls: 'vp-stat-label' });\\n\\n    // Storage size\\n    const sizeCard = vaultGrid.createEl('div', { cls: 'vp-stat-card' });\\n    sizeCard.createEl('div', { text: this.formatBytes(stats.totalSize), cls: 'vp-stat-value' });\\n    sizeCard.createEl('div', { text: 'Vault Size', cls: 'vp-stat-label' });\\n\\n    // Recent activity\\n    const activityCard = vaultGrid.createEl('div', { cls: 'vp-stat-card' });\\n    activityCard.createEl('div', { text: stats.recentFiles.toString(), cls: 'vp-stat-value' });\\n    activityCard.createEl('div', { text: 'Modified Today', cls: 'vp-stat-label' });\\n\\n    // File type breakdown\\n    const typesSection = vaultSection.createEl('div', { cls: 'vp-file-types-section' });\\n    typesSection.createEl('h5', { text: 'File Types', cls: 'vp-subsection-title' });\\n    \\n    const typesGrid = typesSection.createEl('div', { cls: 'vp-types-grid' });\\n    Object.entries(stats.fileTypes).forEach(([type, count]) => {\\n      const typeCard = typesGrid.createEl('div', { cls: 'vp-type-card' });\\n      typeCard.createEl('span', { text: type.toUpperCase(), cls: 'vp-type-extension' });\\n      typeCard.createEl('span', { text: String(count), cls: 'vp-type-count' });\\n    });\\n  }\\n\\n  private async createUsageMetricsSection(container: HTMLElement): Promise<void> {\\n    const usageSection = container.createEl('div', { cls: 'vp-analytics-section vp-usage-section' });\\n    usageSection.createEl('h4', { text: 'Usage Patterns', cls: 'vp-section-title' });\\n\\n    // Most active files\\n    const activeFilesCard = usageSection.createEl('div', { cls: 'vp-usage-card' });\\n    activeFilesCard.createEl('h5', { text: 'Most Active Files', cls: 'vp-card-title' });\\n    \\n    const activeFilesList = activeFilesCard.createEl('div', { cls: 'vp-active-files-list' });\\n    \\n    // Mock data for most active files\\n    const mockActiveFiles = [\\n      { name: 'Daily Notes.md', interactions: 15, lastAccessed: '2 hours ago' },\\n      { name: 'Project Planning.md', interactions: 12, lastAccessed: '4 hours ago' },\\n      { name: 'Research Notes.md', interactions: 8, lastAccessed: '1 day ago' },\\n      { name: 'Meeting Notes.md', interactions: 6, lastAccessed: '3 hours ago' }\\n    ];\\n\\n    mockActiveFiles.forEach(file => {\\n      const fileItem = activeFilesList.createEl('div', { cls: 'vp-active-file-item' });\\n      \\n      const fileInfo = fileItem.createEl('div', { cls: 'vp-file-info' });\\n      fileInfo.createEl('div', { text: file.name, cls: 'vp-file-name' });\\n      fileInfo.createEl('div', { text: file.lastAccessed, cls: 'vp-file-time' });\\n      \\n      const interactionBadge = fileItem.createEl('div', { \\n        text: file.interactions.toString(),\\n        cls: 'vp-interaction-badge'\\n      });\\n    });\\n\\n    // Usage timeline\\n    const timelineCard = usageSection.createEl('div', { cls: 'vp-usage-card vp-timeline-card' });\\n    timelineCard.createEl('h5', { text: 'Activity Timeline', cls: 'vp-card-title' });\\n    \\n    const timeline = timelineCard.createEl('div', { cls: 'vp-activity-timeline' });\\n    \\n    // Mock timeline data for last 7 days\\n    const mockTimelineData = [\\n      { day: 'Mon', activity: 85 },\\n      { day: 'Tue', activity: 92 },\\n      { day: 'Wed', activity: 78 },\\n      { day: 'Thu', activity: 95 },\\n      { day: 'Fri', activity: 88 },\\n      { day: 'Sat', activity: 45 },\\n      { day: 'Sun', activity: 62 }\\n    ];\\n\\n    mockTimelineData.forEach(data => {\\n      const dayItem = timeline.createEl('div', { cls: 'vp-timeline-day' });\\n      dayItem.createEl('div', { text: data.day, cls: 'vp-timeline-label' });\\n      \\n      const activityBar = dayItem.createEl('div', { cls: 'vp-timeline-bar-container' });\\n      const bar = activityBar.createEl('div', { cls: 'vp-timeline-bar' });\\n      bar.style.height = `${data.activity}%`;\\n      bar.setAttribute('title', `${data.activity}% activity`);\\n      \\n      dayItem.createEl('div', { text: data.activity.toString(), cls: 'vp-timeline-value' });\\n    });\\n  }\\n\\n  private async createPerformanceSection(container: HTMLElement): Promise<void> {\\n    const perfSection = container.createEl('div', { cls: 'vp-analytics-section vp-performance-section' });\\n    perfSection.createEl('h4', { text: 'Performance Metrics', cls: 'vp-section-title' });\\n\\n    const perfGrid = perfSection.createEl('div', { cls: 'vp-performance-grid' });\\n\\n    // Response time metrics\\n    const responseCard = perfGrid.createEl('div', { cls: 'vp-perf-card' });\\n    responseCard.createEl('h5', { text: 'Response Times', cls: 'vp-perf-title' });\\n    \\n    const responseMetrics = responseCard.createEl('div', { cls: 'vp-response-metrics' });\\n    \\n    const avgResponse = responseMetrics.createEl('div', { cls: 'vp-response-metric' });\\n    avgResponse.createEl('span', { text: '142ms', cls: 'vp-response-value' });\\n    avgResponse.createEl('span', { text: 'Average', cls: 'vp-response-label' });\\n    \\n    const p95Response = responseMetrics.createEl('div', { cls: 'vp-response-metric' });\\n    p95Response.createEl('span', { text: '287ms', cls: 'vp-response-value' });\\n    p95Response.createEl('span', { text: '95th percentile', cls: 'vp-response-label' });\\n\\n    // System health\\n    const healthCard = perfGrid.createEl('div', { cls: 'vp-perf-card' });\\n    healthCard.createEl('h5', { text: 'System Health', cls: 'vp-perf-title' });\\n    \\n    const healthMetrics = healthCard.createEl('div', { cls: 'vp-health-metrics' });\\n    \\n    const memoryMetric = healthMetrics.createEl('div', { cls: 'vp-health-metric' });\\n    memoryMetric.createEl('span', { text: 'Memory Usage', cls: 'vp-health-label' });\\n    const memoryBar = memoryMetric.createEl('div', { cls: 'vp-health-bar' });\\n    memoryBar.createEl('div', { \\n      cls: 'vp-health-fill',\\n      attr: { style: 'width: 67%' }\\n    });\\n    memoryMetric.createEl('span', { text: '67%', cls: 'vp-health-value' });\\n    \\n    const cpuMetric = healthMetrics.createEl('div', { cls: 'vp-health-metric' });\\n    cpuMetric.createEl('span', { text: 'CPU Usage', cls: 'vp-health-label' });\\n    const cpuBar = cpuMetric.createEl('div', { cls: 'vp-health-bar' });\\n    cpuBar.createEl('div', { \\n      cls: 'vp-health-fill',\\n      attr: { style: 'width: 23%' }\\n    });\\n    cpuMetric.createEl('span', { text: '23%', cls: 'vp-health-value' });\\n\\n    // Error rates\\n    const errorCard = perfGrid.createEl('div', { cls: 'vp-perf-card' });\\n    errorCard.createEl('h5', { text: 'Error Rates', cls: 'vp-perf-title' });\\n    \\n    const errorMetrics = errorCard.createEl('div', { cls: 'vp-error-metrics' });\\n    \\n    const errorRate = errorMetrics.createEl('div', { cls: 'vp-error-metric' });\\n    errorRate.createEl('span', { text: '0.3%', cls: 'vp-error-rate' });\\n    errorRate.createEl('span', { text: 'Error Rate', cls: 'vp-error-label' });\\n    \\n    const uptime = errorMetrics.createEl('div', { cls: 'vp-error-metric' });\\n    uptime.createEl('span', { text: '99.7%', cls: 'vp-uptime-value' });\\n    uptime.createEl('span', { text: 'Uptime', cls: 'vp-error-label' });\\n  }\\n\\n  private async createAIInsightsSection(container: HTMLElement): Promise<void> {\\n    const insightsSection = container.createEl('div', { cls: 'vp-analytics-section vp-insights-section' });\\n    insightsSection.createEl('h4', { text: 'AI Insights', cls: 'vp-section-title' });\\n\\n    // AI usage metrics\\n    const aiUsageCard = insightsSection.createEl('div', { cls: 'vp-insights-card' });\\n    aiUsageCard.createEl('h5', { text: 'AI Usage Today', cls: 'vp-card-title' });\\n    \\n    const aiMetrics = aiUsageCard.createEl('div', { cls: 'vp-ai-metrics' });\\n    \\n    const chatMetric = aiMetrics.createEl('div', { cls: 'vp-ai-metric' });\\n    chatMetric.createEl('span', { text: '23', cls: 'vp-ai-count' });\\n    chatMetric.createEl('span', { text: 'Chat Messages', cls: 'vp-ai-label' });\\n    \\n    const workflowMetric = aiMetrics.createEl('div', { cls: 'vp-ai-metric' });\\n    workflowMetric.createEl('span', { text: '5', cls: 'vp-ai-count' });\\n    workflowMetric.createEl('span', { text: 'Workflows Created', cls: 'vp-ai-label' });\\n    \\n    const analysisMetric = aiMetrics.createEl('div', { cls: 'vp-ai-metric' });\\n    analysisMetric.createEl('span', { text: '8', cls: 'vp-ai-count' });\\n    analysisMetric.createEl('span', { text: 'Vault Analyses', cls: 'vp-ai-label' });\\n\\n    // Model performance\\n    const modelCard = insightsSection.createEl('div', { cls: 'vp-insights-card' });\\n    modelCard.createEl('h5', { text: 'Model Performance', cls: 'vp-card-title' });\\n    \\n    const modelMetrics = modelCard.createEl('div', { cls: 'vp-model-metrics' });\\n    \\n    const modelStatus = modelMetrics.createEl('div', { cls: 'vp-model-status' });\\n    modelStatus.createEl('div', { cls: 'vp-model-indicator vp-model-healthy' });\\n    modelStatus.createEl('span', { text: 'GPT-4 Turbo', cls: 'vp-model-name' });\\n    modelStatus.createEl('span', { text: 'Healthy', cls: 'vp-model-health' });\\n    \\n    const confMetric = modelMetrics.createEl('div', { cls: 'vp-confidence-metric' });\\n    confMetric.createEl('span', { text: 'Avg Confidence', cls: 'vp-confidence-label' });\\n    confMetric.createEl('span', { text: '94.2%', cls: 'vp-confidence-value' });\\n\\n    // Recommendations\\n    const recsCard = insightsSection.createEl('div', { cls: 'vp-insights-card' });\\n    recsCard.createEl('h5', { text: 'Recommendations', cls: 'vp-card-title' });\\n    \\n    const recsList = recsCard.createEl('div', { cls: 'vp-recommendations-list' });\\n    \\n    const mockRecommendations = [\\n      { text: 'Consider organizing your daily notes into weekly folders', priority: 'medium' },\\n      { text: 'Add more tags to improve searchability', priority: 'low' },\\n      { text: 'Review and archive old project files', priority: 'high' }\\n    ];\\n\\n    mockRecommendations.forEach(rec => {\\n      const recItem = recsList.createEl('div', { cls: `vp-recommendation-item vp-priority-${rec.priority}` });\\n      recItem.createEl('div', { cls: `vp-priority-indicator vp-priority-${rec.priority}` });\\n      recItem.createEl('span', { text: rec.text, cls: 'vp-recommendation-text' });\\n    });\\n  }\\n\\n  private async collectVaultStats(): Promise<any> {\\n    if (!this.plugin) return { totalFiles: 0, totalWords: 0, totalSize: 0, recentFiles: 0, fileTypes: {} };\\n\\n    const files = this.plugin.app.vault.getMarkdownFiles();\\n    const now = new Date();\\n    const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\\n\\n    let totalWords = 0;\\n    let totalSize = 0;\\n    let recentFiles = 0;\\n    const fileTypes: Record<string, number> = {};\\n\\n    for (const file of files) {\\n      // Count file types\\n      const ext = file.extension || 'unknown';\\n      fileTypes[ext] = (fileTypes[ext] || 0) + 1;\\n\\n      // Add to total size\\n      totalSize += file.stat.size;\\n\\n      // Check if modified today\\n      if (new Date(file.stat.mtime) >= today) {\\n        recentFiles++;\\n      }\\n\\n      // Count words in markdown files (sample for performance)\\n      if (file.extension === 'md' && totalWords < 100000) {\\n        try {\\n          const content = await this.plugin.app.vault.read(file);\\n          const words = content.split(/\\\\s+/).filter((word: string) => word.length > 0);\\n          totalWords += words.length;\\n        } catch (error) {\\n          // Skip files that can't be read\\n        }\\n      }\\n    }\\n\\n    this.vaultStats = {\\n      totalFiles: files.length,\\n      totalWords,\\n      totalSize,\\n      recentFiles,\\n      fileTypes\\n    };\\n\\n    return this.vaultStats;\\n  }\\n\\n  private formatNumber(num: number): string {\\n    if (num < 1000) return num.toString();\\n    if (num < 1000000) return Math.round(num / 100) / 10 + 'K';\\n    return Math.round(num / 100000) / 10 + 'M';\\n  }\\n\\n  private formatBytes(bytes: number): string {\\n    if (bytes < 1024) return bytes + ' B';\\n    if (bytes < 1024 * 1024) return Math.round(bytes / 1024) + ' KB';\\n    if (bytes < 1024 * 1024 * 1024) return Math.round(bytes / (1024 * 1024)) + ' MB';\\n    return Math.round(bytes / (1024 * 1024 * 1024)) + ' GB';\\n  }\\n\\n  private setupAutoRefresh(): void {\\n    // Refresh data every 30 seconds\\n    this.refreshInterval = window.setInterval(() => {\\n      this.updateLastRefreshed();\\n    }, 30000);\\n  }\\n\\n  private updateLastRefreshed(): void {\\n    const lastUpdated = this.containerEl?.querySelector('.vp-update-time');\\n    if (lastUpdated) {\\n      lastUpdated.textContent = `Last updated: ${new Date().toLocaleTimeString()}`;\\n    }\\n  }\\n\\n  private async refreshAllData(): Promise<void> {\\n    if (!this.containerEl || !this.plugin) return;\\n\\n    const notice = new Notice('Refreshing analytics data...', 2000);\\n    \\n    try {\\n      // Re-render the entire interface with fresh data\\n      this.containerEl.empty();\\n      await this.render(this.containerEl, {\\n        plugin: this.plugin,\\n        workspace: this.workspace!,\\n        contextSources: [],\\n        userPreferences: this.plugin.settings\\n      });\\n      \\n      notice.hide();\\n      new Notice('Analytics data refreshed');\\n    } catch (error) {\\n      notice.hide();\\n      new Notice('Failed to refresh analytics data');\\n    }\\n  }\\n\\n  private async exportAnalyticsReport(): Promise<void> {\\n    if (!this.plugin || !this.vaultStats) return;\\n\\n    try {\\n      const stats = this.vaultStats;\\n      const timestamp = new Date().toISOString();\\n      \\n      let report = `# VaultPilot Analytics Report\\\\n\\\\n`;\\n      report += `Generated: ${timestamp}\\\\n\\\\n`;\\n      \\n      report += `## Vault Overview\\\\n\\\\n`;\\n      report += `- **Total Files**: ${stats.totalFiles}\\\\n`;\\n      report += `- **Total Words**: ${this.formatNumber(stats.totalWords)}\\\\n`;\\n      report += `- **Vault Size**: ${this.formatBytes(stats.totalSize)}\\\\n`;\\n      report += `- **Files Modified Today**: ${stats.recentFiles}\\\\n\\\\n`;\\n      \\n      report += `## File Types\\\\n\\\\n`;\\n      Object.entries(stats.fileTypes).forEach(([type, count]) => {\\n        report += `- **${type.toUpperCase()}**: ${count} files\\\\n`;\\n      });\\n      \\n      report += `\\\\n## Performance\\\\n\\\\n`;\\n      report += `- **Average Response Time**: 142ms\\\\n`;\\n      report += `- **Error Rate**: 0.3%\\\\n`;\\n      report += `- **System Health**: 96% (Excellent)\\\\n\\\\n`;\\n      \\n      report += `## AI Usage Today\\\\n\\\\n`;\\n      report += `- **Chat Messages**: 23\\\\n`;\\n      report += `- **Workflows Created**: 5\\\\n`;\\n      report += `- **Vault Analyses**: 8\\\\n`;\\n      report += `- **Model Confidence**: 94.2%\\\\n\\\\n`;\\n      \\n      report += `---\\\\n\\\\n*Generated by VaultPilot Analytics Dashboard*`;\\n\\n      const filename = `VaultPilot Analytics Report ${new Date().toISOString().split('T')[0]}.md`;\\n      await this.plugin.app.vault.create(filename, report);\\n      new Notice(`Analytics report exported to ${filename}`);\\n    } catch (error) {\\n      new Notice('Failed to export analytics report');\\n    }\\n  }\\n\\n  private openMetricsConfig(): void {\\n    new Notice('Metrics configuration - Coming soon');\\n  }\\n\\n  cleanup(): void {\\n    if (this.refreshInterval) {\\n      clearInterval(this.refreshInterval);\\n      this.refreshInterval = undefined;\\n    }\\n    this.containerEl = undefined;\\n    this.plugin = undefined;\\n    this.workspace = undefined;\\n    this.vaultStats = undefined;\\n  }\\n}\"]}"}
