{"code":"/**\n * Command Definitions for VaultPilot Vault Management\n */\nimport { __awaiter } from \"tslib\";\nimport { Notice } from 'obsidian';\n/**\n * Vault Management Commands\n * These will be registered in the main plugin file\n */\nexport function createVaultManagementCommands() {\n    return [\n        {\n            id: 'vaultpilot-vault-structure',\n            name: 'View Vault Structure',\n            callback: function () {\n                console.log('Opening vault structure modal');\n                if (this.openVaultStructureModal) {\n                    this.openVaultStructureModal();\n                }\n                else {\n                    new Notice('Vault structure feature not available');\n                }\n            }\n        },\n        {\n            id: 'vaultpilot-smart-search',\n            name: 'Smart Vault Search',\n            callback: function () {\n                console.log('Opening smart search modal');\n                if (this.openSmartSearchModal) {\n                    this.openSmartSearchModal();\n                }\n                else {\n                    new Notice('Smart search feature not available');\n                }\n            }\n        },\n        {\n            id: 'vaultpilot-file-operations',\n            name: 'File Operations Manager',\n            callback: function () {\n                console.log('Opening file operations modal');\n                if (this.openFileOperationsModal) {\n                    this.openFileOperationsModal();\n                }\n                else {\n                    new Notice('File operations feature not available');\n                }\n            }\n        },\n        {\n            id: 'vaultpilot-organize-vault',\n            name: 'AI Vault Organization',\n            callback: function () {\n                console.log('Opening vault organizer modal');\n                if (this.openVaultOrganizerModal) {\n                    this.openVaultOrganizerModal();\n                }\n                else {\n                    new Notice('Vault organizer feature not available');\n                }\n            }\n        },\n        {\n            id: 'vaultpilot-batch-operations',\n            name: 'Batch File Operations',\n            callback: function () {\n                console.log('Opening batch operations modal');\n                if (this.openBatchOperationsModal) {\n                    this.openBatchOperationsModal();\n                }\n                else {\n                    new Notice('Batch operations feature not available');\n                }\n            }\n        },\n        {\n            id: 'vaultpilot-quick-search-selection',\n            name: 'Quick Search Selected Text',\n            editorCallback: function (editor) {\n                const selection = editor.getSelection();\n                if (selection.trim()) {\n                    console.log('Quick search for:', selection.trim());\n                    if (this.openSmartSearchModal) {\n                        this.openSmartSearchModal(selection.trim());\n                    }\n                    else {\n                        new Notice('Smart search feature not available');\n                    }\n                }\n                else {\n                    new Notice('Please select text to search for');\n                }\n            }\n        },\n        {\n            id: 'vaultpilot-vault-health-check',\n            name: 'Vault Health Check',\n            callback: function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        if (!this.vaultClient) {\n                            new Notice('Vault management not initialized');\n                            return;\n                        }\n                        new Notice('Running vault health check...');\n                        // Test basic functionality\n                        const connectionTest = yield this.vaultClient.testConnection();\n                        if (!connectionTest.success) {\n                            new Notice(`Health check failed: ${connectionTest.message}`, 5000);\n                            return;\n                        }\n                        // Get basic structure to test functionality\n                        const structure = yield this.vaultClient.getVaultStructure({\n                            include_content: false,\n                            max_depth: 1\n                        });\n                        // Test search functionality\n                        const searchTest = yield this.vaultClient.searchVault({\n                            query: 'test',\n                            max_results: 1\n                        });\n                        new Notice(`‚úÖ Vault Health Check Passed\nüìÅ ${structure.total_files} files, ${structure.total_folders} folders\nüîç Search: ${searchTest.results.length} results\nüíæ Size: ${(structure.total_size / 1024 / 1024).toFixed(2)} MB`, 8000);\n                    }\n                    catch (error) {\n                        console.error('Vault health check failed:', error);\n                        new Notice(`‚ùå Health check failed: ${error.message}`, 5000);\n                    }\n                });\n            }\n        },\n        {\n            id: 'vaultpilot-vault-backup',\n            name: 'Create Vault Backup',\n            callback: function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        if (!this.vaultClient) {\n                            new Notice('Vault management not initialized');\n                            return;\n                        }\n                        new Notice('Creating vault backup...');\n                        const backup = yield this.vaultClient.backupVault({\n                            include_settings: true,\n                            compression: true,\n                            backup_name: `vaultpilot-backup-${new Date().toISOString().split('T')[0]}`\n                        });\n                        new Notice(`‚úÖ Backup created successfully\nüì¶ ${backup.files_backed_up} files\nüíæ Size: ${(backup.backup_size / 1024 / 1024).toFixed(2)} MB\nüìÅ Location: ${backup.backup_path}`, 8000);\n                    }\n                    catch (error) {\n                        console.error('Backup failed:', error);\n                        new Notice(`‚ùå Backup failed: ${error.message}`, 5000);\n                    }\n                });\n            }\n        },\n        {\n            id: 'vaultpilot-search-content',\n            name: 'Search Content',\n            editorCallback: function (editor) {\n                const selection = editor.getSelection();\n                const query = selection.trim() || 'Enter search query';\n                if (this.openSmartSearchModal) {\n                    this.openSmartSearchModal(query, 'content');\n                }\n                else {\n                    new Notice('Smart search feature not available');\n                }\n            }\n        },\n        {\n            id: 'vaultpilot-search-filenames',\n            name: 'Search Filenames',\n            callback: function () {\n                if (this.openSmartSearchModal) {\n                    this.openSmartSearchModal('', 'filename');\n                }\n                else {\n                    new Notice('Smart search feature not available');\n                }\n            }\n        },\n        {\n            id: 'vaultpilot-recent-files',\n            name: 'View Recent Files',\n            callback: function () {\n                return __awaiter(this, void 0, void 0, function* () {\n                    try {\n                        if (!this.vaultClient) {\n                            new Notice('Vault management not initialized');\n                            return;\n                        }\n                        const structure = yield this.vaultClient.getVaultStructure({\n                            include_content: false\n                        });\n                        if (structure.recent_files.length === 0) {\n                            new Notice('No recent files found');\n                            return;\n                        }\n                        const recentList = structure.recent_files\n                            .slice(0, 10)\n                            .map((file) => `‚Ä¢ ${file.name} (${file.modified})`)\n                            .join('\\n');\n                        new Notice(`üìù Recent Files:\\n${recentList}`, 10000);\n                    }\n                    catch (error) {\n                        console.error('Failed to get recent files:', error);\n                        new Notice(`‚ùå Failed to get recent files: ${error.message}`, 5000);\n                    }\n                });\n            }\n        }\n    ];\n}\n/**\n * Hotkey definitions for vault management commands\n */\nexport const VAULT_MANAGEMENT_HOTKEYS = {\n    'vaultpilot-vault-structure': 'Ctrl+Shift+V',\n    'vaultpilot-smart-search': 'Ctrl+Shift+F',\n    'vaultpilot-quick-search-selection': 'Ctrl+Shift+S',\n    'vaultpilot-file-operations': 'Ctrl+Shift+O',\n    'vaultpilot-organize-vault': 'Ctrl+Shift+G',\n    'vaultpilot-vault-health-check': 'Ctrl+Shift+H'\n};\n/**\n * Ribbon icon definitions for commonly used commands\n */\nexport const VAULT_MANAGEMENT_RIBBON_ICONS = [\n    {\n        icon: 'folder-tree',\n        title: 'Vault Structure',\n        commandId: 'vaultpilot-vault-structure'\n    },\n    {\n        icon: 'search',\n        title: 'Smart Search',\n        commandId: 'vaultpilot-smart-search'\n    },\n    {\n        icon: 'folder-plus',\n        title: 'File Operations',\n        commandId: 'vaultpilot-file-operations'\n    }\n];\n/**\n * Command menu items for context menus\n */\nexport const VAULT_MANAGEMENT_MENU_ITEMS = [\n    {\n        title: 'Analyze Structure',\n        commandId: 'vaultpilot-vault-structure',\n        section: 'vault-analysis'\n    },\n    {\n        title: 'Smart Search',\n        commandId: 'vaultpilot-smart-search',\n        section: 'vault-search'\n    },\n    {\n        title: 'File Operations',\n        commandId: 'vaultpilot-file-operations',\n        section: 'vault-operations'\n    },\n    {\n        title: 'Organize Vault',\n        commandId: 'vaultpilot-organize-vault',\n        section: 'vault-organization'\n    },\n    {\n        title: 'Health Check',\n        commandId: 'vaultpilot-vault-health-check',\n        section: 'vault-maintenance'\n    },\n    {\n        title: 'Create Backup',\n        commandId: 'vaultpilot-vault-backup',\n        section: 'vault-maintenance'\n    }\n];\n/**\n * Helper function to register all vault management commands\n */\nexport function registerVaultManagementCommands(plugin) {\n    const commands = createVaultManagementCommands();\n    commands.forEach((command) => {\n        var _a, _b;\n        plugin.addCommand(Object.assign(Object.assign({}, command), { callback: (_a = command.callback) === null || _a === void 0 ? void 0 : _a.bind(plugin), editorCallback: (_b = command.editorCallback) === null || _b === void 0 ? void 0 : _b.bind(plugin) }));\n    });\n    // Add hotkeys if defined\n    Object.entries(VAULT_MANAGEMENT_HOTKEYS).forEach(([commandId, hotkey]) => {\n        var _a;\n        const command = (_a = plugin.commands) === null || _a === void 0 ? void 0 : _a[commandId];\n        if (command) {\n            command.hotkeys = [{ modifiers: [], key: hotkey }];\n        }\n    });\n}\n/**\n * Helper function to add vault management ribbon icons\n */\nexport function addVaultManagementRibbonIcons(plugin) {\n    VAULT_MANAGEMENT_RIBBON_ICONS.forEach(({ icon, title, commandId }) => {\n        const ribbonIcon = plugin.addRibbonIcon(icon, title, () => {\n            plugin.app.commands.executeCommandById(commandId);\n        });\n        ribbonIcon.addClass('vaultpilot-vault-management-ribbon');\n    });\n}\n//# sourceMappingURL=vault-commands.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts"],"map":"{\"version\":3,\"file\":\"vault-commands.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/vault-commands.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * Command Definitions for VaultPilot Vault Management\\n */\\n\\nimport { Command, Notice, Editor } from 'obsidian';\\n\\n// Define a type for plugin instance with vault management methods\\ninterface VaultManagementPlugin {\\n  vaultClient?: any;\\n  openVaultStructureModal?: () => void;\\n  openSmartSearchModal?: (query?: string, type?: string) => void;\\n  openFileOperationsModal?: () => void;\\n  openVaultOrganizerModal?: () => void;\\n  openBatchOperationsModal?: () => void;\\n}\\n\\n/**\\n * Vault Management Commands\\n * These will be registered in the main plugin file\\n */\\nexport function createVaultManagementCommands(): Command[] {\\n  return [\\n    {\\n      id: 'vaultpilot-vault-structure',\\n      name: 'View Vault Structure',\\n      callback: function(this: VaultManagementPlugin) {\\n        console.log('Opening vault structure modal');\\n        if (this.openVaultStructureModal) {\\n          this.openVaultStructureModal();\\n        } else {\\n          new Notice('Vault structure feature not available');\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-smart-search',\\n      name: 'Smart Vault Search',\\n      callback: function(this: VaultManagementPlugin) {\\n        console.log('Opening smart search modal');\\n        if (this.openSmartSearchModal) {\\n          this.openSmartSearchModal();\\n        } else {\\n          new Notice('Smart search feature not available');\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-file-operations',\\n      name: 'File Operations Manager',\\n      callback: function(this: VaultManagementPlugin) {\\n        console.log('Opening file operations modal');\\n        if (this.openFileOperationsModal) {\\n          this.openFileOperationsModal();\\n        } else {\\n          new Notice('File operations feature not available');\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-organize-vault',\\n      name: 'AI Vault Organization',\\n      callback: function(this: VaultManagementPlugin) {\\n        console.log('Opening vault organizer modal');\\n        if (this.openVaultOrganizerModal) {\\n          this.openVaultOrganizerModal();\\n        } else {\\n          new Notice('Vault organizer feature not available');\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-batch-operations',\\n      name: 'Batch File Operations',\\n      callback: function(this: VaultManagementPlugin) {\\n        console.log('Opening batch operations modal');\\n        if (this.openBatchOperationsModal) {\\n          this.openBatchOperationsModal();\\n        } else {\\n          new Notice('Batch operations feature not available');\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-quick-search-selection',\\n      name: 'Quick Search Selected Text',\\n      editorCallback: function(this: VaultManagementPlugin, editor: Editor) {\\n        const selection = editor.getSelection();\\n        if (selection.trim()) {\\n          console.log('Quick search for:', selection.trim());\\n          if (this.openSmartSearchModal) {\\n            this.openSmartSearchModal(selection.trim());\\n          } else {\\n            new Notice('Smart search feature not available');\\n          }\\n        } else {\\n          new Notice('Please select text to search for');\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-vault-health-check',\\n      name: 'Vault Health Check',\\n      callback: async function(this: VaultManagementPlugin) {\\n        try {\\n          if (!this.vaultClient) {\\n            new Notice('Vault management not initialized');\\n            return;\\n          }\\n          \\n          new Notice('Running vault health check...');\\n          \\n          // Test basic functionality\\n          const connectionTest = await this.vaultClient.testConnection();\\n          if (!connectionTest.success) {\\n            new Notice(`Health check failed: ${connectionTest.message}`, 5000);\\n            return;\\n          }\\n          \\n          // Get basic structure to test functionality\\n          const structure = await this.vaultClient.getVaultStructure({ \\n            include_content: false, \\n            max_depth: 1 \\n          });\\n          \\n          // Test search functionality\\n          const searchTest = await this.vaultClient.searchVault({ \\n            query: 'test', \\n            max_results: 1 \\n          });\\n          \\n          new Notice(`‚úÖ Vault Health Check Passed\\nüìÅ ${structure.total_files} files, ${structure.total_folders} folders\\nüîç Search: ${searchTest.results.length} results\\nüíæ Size: ${(structure.total_size / 1024 / 1024).toFixed(2)} MB`, 8000);\\n          \\n        } catch (error: any) {\\n          console.error('Vault health check failed:', error);\\n          new Notice(`‚ùå Health check failed: ${error.message}`, 5000);\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-vault-backup',\\n      name: 'Create Vault Backup',\\n      callback: async function(this: VaultManagementPlugin) {\\n        try {\\n          if (!this.vaultClient) {\\n            new Notice('Vault management not initialized');\\n            return;\\n          }\\n          \\n          new Notice('Creating vault backup...');\\n          \\n          const backup = await this.vaultClient.backupVault({\\n            include_settings: true,\\n            compression: true,\\n            backup_name: `vaultpilot-backup-${new Date().toISOString().split('T')[0]}`\\n          });\\n          \\n          new Notice(`‚úÖ Backup created successfully\\nüì¶ ${backup.files_backed_up} files\\nüíæ Size: ${(backup.backup_size / 1024 / 1024).toFixed(2)} MB\\nüìÅ Location: ${backup.backup_path}`, 8000);\\n          \\n        } catch (error: any) {\\n          console.error('Backup failed:', error);\\n          new Notice(`‚ùå Backup failed: ${error.message}`, 5000);\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-search-content',\\n      name: 'Search Content',\\n      editorCallback: function(this: VaultManagementPlugin, editor: Editor) {\\n        const selection = editor.getSelection();\\n        const query = selection.trim() || 'Enter search query';\\n        \\n        if (this.openSmartSearchModal) {\\n          this.openSmartSearchModal(query, 'content');\\n        } else {\\n          new Notice('Smart search feature not available');\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-search-filenames',\\n      name: 'Search Filenames',\\n      callback: function(this: VaultManagementPlugin) {\\n        if (this.openSmartSearchModal) {\\n          this.openSmartSearchModal('', 'filename');\\n        } else {\\n          new Notice('Smart search feature not available');\\n        }\\n      }\\n    },\\n    {\\n      id: 'vaultpilot-recent-files',\\n      name: 'View Recent Files',\\n      callback: async function(this: VaultManagementPlugin) {\\n        try {\\n          if (!this.vaultClient) {\\n            new Notice('Vault management not initialized');\\n            return;\\n          }\\n          \\n          const structure = await this.vaultClient.getVaultStructure({ \\n            include_content: false \\n          });\\n          \\n          if (structure.recent_files.length === 0) {\\n            new Notice('No recent files found');\\n            return;\\n          }\\n          \\n          const recentList = structure.recent_files\\n            .slice(0, 10)\\n            .map((file: any) => `‚Ä¢ ${file.name} (${file.modified})`)\\n            .join('\\\\n');\\n          \\n          new Notice(`üìù Recent Files:\\\\n${recentList}`, 10000);\\n          \\n        } catch (error: any) {\\n          console.error('Failed to get recent files:', error);\\n          new Notice(`‚ùå Failed to get recent files: ${error.message}`, 5000);\\n        }\\n      }\\n    }\\n  ];\\n}\\n\\n/**\\n * Hotkey definitions for vault management commands\\n */\\nexport const VAULT_MANAGEMENT_HOTKEYS: Record<string, string> = {\\n  'vaultpilot-vault-structure': 'Ctrl+Shift+V',\\n  'vaultpilot-smart-search': 'Ctrl+Shift+F',\\n  'vaultpilot-quick-search-selection': 'Ctrl+Shift+S',\\n  'vaultpilot-file-operations': 'Ctrl+Shift+O',\\n  'vaultpilot-organize-vault': 'Ctrl+Shift+G',\\n  'vaultpilot-vault-health-check': 'Ctrl+Shift+H'\\n};\\n\\n/**\\n * Ribbon icon definitions for commonly used commands\\n */\\nexport const VAULT_MANAGEMENT_RIBBON_ICONS = [\\n  {\\n    icon: 'folder-tree',\\n    title: 'Vault Structure',\\n    commandId: 'vaultpilot-vault-structure'\\n  },\\n  {\\n    icon: 'search',\\n    title: 'Smart Search',\\n    commandId: 'vaultpilot-smart-search'\\n  },\\n  {\\n    icon: 'folder-plus',\\n    title: 'File Operations',\\n    commandId: 'vaultpilot-file-operations'\\n  }\\n];\\n\\n/**\\n * Command menu items for context menus\\n */\\nexport const VAULT_MANAGEMENT_MENU_ITEMS = [\\n  {\\n    title: 'Analyze Structure',\\n    commandId: 'vaultpilot-vault-structure',\\n    section: 'vault-analysis'\\n  },\\n  {\\n    title: 'Smart Search',\\n    commandId: 'vaultpilot-smart-search',\\n    section: 'vault-search'\\n  },\\n  {\\n    title: 'File Operations',\\n    commandId: 'vaultpilot-file-operations',\\n    section: 'vault-operations'\\n  },\\n  {\\n    title: 'Organize Vault',\\n    commandId: 'vaultpilot-organize-vault',\\n    section: 'vault-organization'\\n  },\\n  {\\n    title: 'Health Check',\\n    commandId: 'vaultpilot-vault-health-check',\\n    section: 'vault-maintenance'\\n  },\\n  {\\n    title: 'Create Backup',\\n    commandId: 'vaultpilot-vault-backup',\\n    section: 'vault-maintenance'\\n  }\\n];\\n\\n/**\\n * Helper function to register all vault management commands\\n */\\nexport function registerVaultManagementCommands(plugin: any) {\\n  const commands = createVaultManagementCommands();\\n  commands.forEach((command: Command) => {\\n    plugin.addCommand({\\n      ...command,\\n      callback: command.callback?.bind(plugin),\\n      editorCallback: command.editorCallback?.bind(plugin)\\n    });\\n  });\\n  \\n  // Add hotkeys if defined\\n  Object.entries(VAULT_MANAGEMENT_HOTKEYS).forEach(([commandId, hotkey]) => {\\n    const command = plugin.commands?.[commandId];\\n    if (command) {\\n      command.hotkeys = [{ modifiers: [], key: hotkey }];\\n    }\\n  });\\n}\\n\\n/**\\n * Helper function to add vault management ribbon icons\\n */\\nexport function addVaultManagementRibbonIcons(plugin: any) {\\n  VAULT_MANAGEMENT_RIBBON_ICONS.forEach(({ icon, title, commandId }) => {\\n    const ribbonIcon = plugin.addRibbonIcon(icon, title, () => {\\n      plugin.app.commands.executeCommandById(commandId);\\n    });\\n    ribbonIcon.addClass('vaultpilot-vault-management-ribbon');\\n  });\\n}\\n\"]}"}
