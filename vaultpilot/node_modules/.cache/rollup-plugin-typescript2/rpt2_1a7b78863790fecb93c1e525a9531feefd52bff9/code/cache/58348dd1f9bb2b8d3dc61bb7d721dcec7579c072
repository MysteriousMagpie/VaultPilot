{"code":"import { __awaiter } from \"tslib\";\n// Global app instance - will be set by the main plugin\nexport let app;\nexport function setApp(appInstance) {\n    app = appInstance;\n}\n/**\n * Gets the content of the currently active markdown file\n * @returns The markdown content (truncated to 8000 chars) or null if no file is active\n */\nexport function getActiveMarkdown() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const file = app.workspace.getActiveFile();\n        if (!file)\n            return null;\n        // Large notes? Snip to 8000 chars to keep tokens reasonable\n        const text = yield app.vault.read(file);\n        return text.slice(0, 8000);\n    });\n}\n//# sourceMappingURL=vault-utils.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts"],"map":"{\"version\":3,\"file\":\"vault-utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/vault-utils.ts\"],\"names\":[],\"mappings\":\";AAEA,uDAAuD;AACvD,MAAM,CAAC,IAAI,GAAQ,CAAC;AAEpB,MAAM,UAAU,MAAM,CAAC,WAAgB;IACrC,GAAG,GAAG,WAAW,CAAC;AACpB,CAAC;AAED;;;GAGG;AACH,MAAM,UAAgB,iBAAiB;;QACrC,MAAM,IAAI,GAAG,GAAG,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;QAC3C,IAAI,CAAC,IAAI;YAAE,OAAO,IAAI,CAAC;QAEvB,4DAA4D;QAC5D,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxC,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,IAAK,CAAC,CAAC;IAC9B,CAAC;CAAA\",\"sourcesContent\":[\"import { App } from 'obsidian';\\n\\n// Global app instance - will be set by the main plugin\\nexport let app: App;\\n\\nexport function setApp(appInstance: App) {\\n  app = appInstance;\\n}\\n\\n/**\\n * Gets the content of the currently active markdown file\\n * @returns The markdown content (truncated to 8000 chars) or null if no file is active\\n */\\nexport async function getActiveMarkdown(): Promise<string | null> {\\n  const file = app.workspace.getActiveFile();\\n  if (!file) return null;\\n  \\n  // Large notes? Snip to 8000 chars to keep tokens reasonable\\n  const text = await app.vault.read(file);\\n  return text.slice(0, 8_000);\\n}\\n\"]}"}
