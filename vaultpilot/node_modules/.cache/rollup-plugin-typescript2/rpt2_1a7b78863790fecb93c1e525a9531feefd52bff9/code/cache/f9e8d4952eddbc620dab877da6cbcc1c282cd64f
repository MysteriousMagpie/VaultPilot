{"code":"/**\n * Modal Classes for VaultPilot Vault Management\n */\nimport { __awaiter } from \"tslib\";\nimport { Modal, Setting, Notice } from 'obsidian';\n// === VAULT STRUCTURE MODAL ===\nexport class VaultStructureModal extends Modal {\n    constructor(app, plugin) {\n        super(app);\n        this.plugin = plugin;\n        this.vaultClient = plugin.vaultClient;\n    }\n    setFocusPath(path) {\n        this.focusPath = path;\n        return this;\n    }\n    onOpen() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            const { contentEl } = this;\n            contentEl.empty();\n            contentEl.addClass('vault-structure-modal');\n            const headerEl = contentEl.createEl('div', { cls: 'modal-header' });\n            headerEl.createEl('h2', { text: 'Vault Structure Analysis' });\n            const refreshButton = headerEl.createEl('button', {\n                text: '🔄 Refresh',\n                cls: 'mod-cta'\n            });\n            // Loading state\n            const loadingEl = contentEl.createDiv({ cls: 'vault-loading' });\n            loadingEl.setText('🔍 Analyzing vault structure...');\n            try {\n                const structure = yield this.vaultClient.getVaultStructure({\n                    include_content: false,\n                    max_depth: 5\n                });\n                loadingEl.remove();\n                this.renderStructure(contentEl, structure);\n                refreshButton.onclick = () => {\n                    this.onOpen();\n                };\n            }\n            catch (error) {\n                loadingEl.remove();\n                console.error('Vault structure error:', error);\n                if (((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes('Not Found')) || ((_b = error.message) === null || _b === void 0 ? void 0 : _b.includes('404'))) {\n                    // Server doesn't have vault management - show fallback\n                    this.renderFallbackStructure(contentEl);\n                }\n                else {\n                    // Other error - show retry option\n                    const errorEl = contentEl.createDiv({ cls: 'vault-error' });\n                    errorEl.setText('❌ Failed to load vault structure');\n                    const retryButton = contentEl.createEl('button', {\n                        text: 'Retry',\n                        cls: 'mod-cta'\n                    });\n                    retryButton.onclick = () => this.onOpen();\n                }\n                refreshButton.onclick = () => {\n                    this.onOpen();\n                };\n            }\n        });\n    }\n    renderStructure(container, structure) {\n        // Stats overview\n        const statsEl = container.createDiv({ cls: 'vault-stats' });\n        statsEl.innerHTML = `\n      <div class=\"stat-grid\">\n        <div class=\"stat-item\">\n          <span class=\"stat-icon\">📁</span>\n          <span class=\"stat-label\">Files</span>\n          <span class=\"stat-value\">${structure.total_files}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-icon\">📂</span>\n          <span class=\"stat-label\">Folders</span>\n          <span class=\"stat-value\">${structure.total_folders}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-icon\">💾</span>\n          <span class=\"stat-label\">Size</span>\n          <span class=\"stat-value\">${(structure.total_size / 1024 / 1024).toFixed(2)} MB</span>\n        </div>\n      </div>\n    `;\n        // Folder tree\n        const treeContainer = container.createDiv({ cls: 'vault-tree-container' });\n        treeContainer.createEl('h3', { text: 'Folder Structure' });\n        const treeEl = treeContainer.createDiv({ cls: 'vault-tree' });\n        this.renderFolder(treeEl, structure.structure, 0);\n        // Recent files\n        if (structure.recent_files.length > 0) {\n            const recentContainer = container.createDiv({ cls: 'recent-files-container' });\n            recentContainer.createEl('h3', { text: 'Recent Files' });\n            const recentEl = recentContainer.createDiv({ cls: 'recent-files' });\n            structure.recent_files.slice(0, 10).forEach(file => {\n                const fileEl = recentEl.createDiv({ cls: 'recent-file' });\n                fileEl.innerHTML = `\n          <span class=\"file-icon\">📄</span>\n          <span class=\"file-name\">${file.name}</span>\n          <span class=\"file-date\">${new Date(file.modified).toLocaleDateString()}</span>\n        `;\n            });\n        }\n        // Orphaned files\n        if (structure.orphaned_files.length > 0) {\n            const orphanedContainer = container.createDiv({ cls: 'orphaned-files-container' });\n            orphanedContainer.createEl('h3', { text: '⚠️ Orphaned Files' });\n            const orphanedEl = orphanedContainer.createDiv({ cls: 'orphaned-files' });\n            structure.orphaned_files.forEach(file => {\n                const orphanEl = orphanedEl.createDiv({ cls: 'orphaned-file' });\n                orphanEl.innerHTML = `\n          <span class=\"file-icon\">🔗</span>\n          <span class=\"file-path\">${file.path}</span>\n        `;\n            });\n        }\n    }\n    renderFolder(container, folder, level) {\n        const folderEl = container.createDiv({\n            cls: 'folder-item',\n            attr: { 'data-level': level.toString() }\n        });\n        folderEl.innerHTML = `\n      <span class=\"folder-toggle\">▶</span>\n      <span class=\"folder-icon\">📁</span>\n      <span class=\"folder-name\">${folder.name}</span>\n      <span class=\"folder-count\">(${folder.children.length})</span>\n    `;\n        // Add children container\n        const childrenEl = container.createDiv({\n            cls: 'folder-children',\n            attr: { style: 'display: none;' }\n        });\n        // Toggle functionality\n        const toggleEl = folderEl.querySelector('.folder-toggle');\n        toggleEl.onclick = () => {\n            const isOpen = childrenEl.style.display !== 'none';\n            childrenEl.style.display = isOpen ? 'none' : 'block';\n            toggleEl.textContent = isOpen ? '▶' : '▼';\n        };\n        // Render children\n        folder.children.forEach((child) => {\n            if (child.type === 'folder') {\n                this.renderFolder(childrenEl, child, level + 1);\n            }\n            else {\n                const fileEl = childrenEl.createDiv({\n                    cls: 'file-item',\n                    attr: { 'data-level': (level + 1).toString() }\n                });\n                fileEl.innerHTML = `\n          <span class=\"file-icon\">📄</span>\n          <span class=\"file-name\">${child.name}</span>\n          <span class=\"file-size\">${(child.size / 1024).toFixed(1)}KB</span>\n        `;\n            }\n        });\n    }\n    renderFallbackStructure(container) {\n        // Local vault analysis when server endpoints aren't available\n        const fallbackEl = container.createDiv({ cls: 'vault-fallback' });\n        fallbackEl.createEl('h3', { text: '📁 Local Vault Analysis' });\n        fallbackEl.createEl('p', {\n            text: 'Server-side vault management not available. Showing local analysis.',\n            cls: 'vault-fallback-message'\n        });\n        // Get local statistics\n        const files = this.plugin.app.vault.getFiles();\n        const markdownFiles = this.plugin.app.vault.getMarkdownFiles();\n        const folders = this.plugin.app.vault.getAllLoadedFiles().filter((f) => f.children).length;\n        // Stats overview\n        const statsEl = fallbackEl.createDiv({ cls: 'vault-stats' });\n        statsEl.innerHTML = `\n      <div class=\"stat-grid\">\n        <div class=\"stat-item\">\n          <span class=\"stat-icon\">📁</span>\n          <span class=\"stat-label\">Folders</span>\n          <span class=\"stat-value\">${folders}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-icon\">📄</span>\n          <span class=\"stat-label\">Total Files</span>\n          <span class=\"stat-value\">${files.length}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-icon\">📝</span>\n          <span class=\"stat-label\">Markdown</span>\n          <span class=\"stat-value\">${markdownFiles.length}</span>\n        </div>\n        <div class=\"stat-item\">\n          <span class=\"stat-icon\">💾</span>\n          <span class=\"stat-label\">Status</span>\n          <span class=\"stat-value\">Local Only</span>\n        </div>\n      </div>\n    `;\n        // Recent files\n        const recentEl = fallbackEl.createDiv({ cls: 'recent-files-container' });\n        recentEl.createEl('h3', { text: 'Recent Files' });\n        const recentFiles = markdownFiles\n            .sort((a, b) => b.stat.mtime - a.stat.mtime)\n            .slice(0, 10);\n        const recentList = recentEl.createDiv({ cls: 'recent-files' });\n        recentFiles.forEach((file) => {\n            const fileEl = recentList.createDiv({ cls: 'recent-file' });\n            fileEl.innerHTML = `\n        <span class=\"file-icon\">📄</span>\n        <span class=\"file-name\">${file.basename}</span>\n        <span class=\"file-date\">${new Date(file.stat.mtime).toLocaleDateString()}</span>\n      `;\n            fileEl.onclick = () => {\n                this.plugin.app.workspace.openLinkText(file.path, '', false);\n                this.close();\n            };\n        });\n        // Configuration note\n        const configEl = fallbackEl.createDiv({ cls: 'vault-config-note' });\n        configEl.innerHTML = `\n      <p><strong>💡 Enable Full Features:</strong> Configure vault management endpoints on your server to access advanced features like structure analysis, smart search, and file operations.</p>\n      <p>See the dev-pipe documentation for implementation details.</p>\n    `;\n    }\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n// === SMART SEARCH MODAL ===\nexport class SmartSearchModal extends Modal {\n    constructor(app, plugin) {\n        super(app);\n        this.plugin = plugin;\n        this.vaultClient = plugin.vaultClient;\n    }\n    setInitialQuery(query, type) {\n        this.initialQuery = query;\n        this.searchType = type;\n        return this;\n    }\n    onOpen() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { contentEl } = this;\n            contentEl.empty();\n            contentEl.addClass('smart-search-modal');\n            contentEl.createEl('h2', { text: '🔍 Smart Vault Search' });\n            // Search form\n            const searchForm = contentEl.createDiv({ cls: 'search-form' });\n            const queryInput = searchForm.createEl('input', {\n                type: 'text',\n                placeholder: 'Enter search query...',\n                cls: 'search-query-input'\n            });\n            if (this.initialQuery) {\n                queryInput.value = this.initialQuery;\n            }\n            const searchTypeSelect = searchForm.createEl('select', { cls: 'search-type-select' });\n            const searchTypes = [\n                { value: 'comprehensive', label: 'Comprehensive' },\n                { value: 'content', label: 'Content' },\n                { value: 'filename', label: 'Filename' },\n                { value: 'tags', label: 'Tags' },\n                { value: 'links', label: 'Links' }\n            ];\n            searchTypes.forEach(type => {\n                const option = searchTypeSelect.createEl('option', { value: type.value });\n                option.textContent = type.label;\n                if (type.value === (this.searchType || 'comprehensive')) {\n                    option.selected = true;\n                }\n            });\n            const searchButton = searchForm.createEl('button', {\n                text: 'Search',\n                cls: 'mod-cta search-button'\n            });\n            // Results container\n            const resultsContainer = contentEl.createDiv({ cls: 'search-results-container' });\n            // Search function\n            const performSearch = () => __awaiter(this, void 0, void 0, function* () {\n                var _a;\n                const query = queryInput.value.trim();\n                if (!query) {\n                    new Notice('Please enter a search query');\n                    return;\n                }\n                searchButton.textContent = 'Searching...';\n                searchButton.disabled = true;\n                resultsContainer.empty();\n                const loadingEl = resultsContainer.createDiv({ cls: 'search-loading' });\n                loadingEl.textContent = '🔍 Searching vault...';\n                try {\n                    const results = yield this.vaultClient.searchVault({\n                        query,\n                        search_type: searchTypeSelect.value,\n                        max_results: ((_a = this.plugin.settings.vaultManagement) === null || _a === void 0 ? void 0 : _a.searchResultsLimit) || 50,\n                        include_content: true\n                    });\n                    loadingEl.remove();\n                    this.renderSearchResults(resultsContainer, results);\n                }\n                catch (error) {\n                    loadingEl.textContent = '❌ Search failed';\n                    console.error('Search error:', error);\n                }\n                finally {\n                    searchButton.textContent = 'Search';\n                    searchButton.disabled = false;\n                }\n            });\n            // Event listeners\n            searchButton.onclick = performSearch;\n            queryInput.addEventListener('keypress', (e) => {\n                if (e.key === 'Enter') {\n                    performSearch();\n                }\n            });\n            // Auto-search if initial query provided\n            if (this.initialQuery) {\n                performSearch();\n            }\n            // Focus input\n            queryInput.focus();\n        });\n    }\n    renderSearchResults(container, results) {\n        container.createEl('h3', { text: `Search Results (${results.total_found})` });\n        if (results.insights) {\n            const insightsEl = container.createDiv({ cls: 'search-insights' });\n            insightsEl.innerHTML = `\n        <div class=\"insights-header\">🧠 AI Insights</div>\n        <div class=\"insights-content\">${results.insights}</div>\n      `;\n        }\n        if (results.results.length === 0) {\n            container.createDiv({\n                cls: 'no-results',\n                text: 'No results found. Try a different search term or type.'\n            });\n            return;\n        }\n        const resultsList = container.createDiv({ cls: 'search-results-list' });\n        results.results.forEach(result => {\n            const resultEl = resultsList.createDiv({ cls: 'search-result' });\n            resultEl.innerHTML = `\n        <div class=\"result-header\">\n          <span class=\"result-file-name\">${result.file_name}</span>\n          <span class=\"result-match-type\">${result.match_type}</span>\n          <span class=\"result-score\">${(result.score * 100).toFixed(0)}%</span>\n        </div>\n        <div class=\"result-path\">${result.file_path}</div>\n        <div class=\"result-preview\">${result.preview}</div>\n        ${result.matches.length > 0 ? `\n          <div class=\"result-matches\">\n            <strong>Matches:</strong> ${result.matches.join(', ')}\n          </div>\n        ` : ''}\n      `;\n            // Click to open file\n            resultEl.onclick = () => {\n                this.app.workspace.openLinkText(result.file_path, '');\n                this.close();\n            };\n        });\n        // Suggested queries\n        if (results.suggested_queries && results.suggested_queries.length > 0) {\n            const suggestionsEl = container.createDiv({ cls: 'suggested-queries' });\n            suggestionsEl.createEl('h4', { text: '💡 Suggested Queries' });\n            const suggestionsList = suggestionsEl.createDiv({ cls: 'suggestions-list' });\n            results.suggested_queries.forEach(suggestion => {\n                const suggestionEl = suggestionsList.createEl('button', {\n                    text: suggestion,\n                    cls: 'suggestion-button'\n                });\n                suggestionEl.onclick = () => {\n                    const queryInput = this.contentEl.querySelector('.search-query-input');\n                    if (queryInput) {\n                        queryInput.value = suggestion;\n                        queryInput.dispatchEvent(new KeyboardEvent('keypress', { key: 'Enter' }));\n                    }\n                };\n            });\n        }\n    }\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n// === FILE OPERATIONS MODAL ===\nexport class FileOperationsModal extends Modal {\n    constructor(app, plugin) {\n        super(app);\n        this.plugin = plugin;\n        this.vaultClient = plugin.vaultClient;\n    }\n    setInitialPath(path) {\n        this.initialPath = path;\n        return this;\n    }\n    setOperation(operation) {\n        this.operation = operation;\n        return this;\n    }\n    onOpen() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { contentEl } = this;\n            contentEl.empty();\n            contentEl.addClass('file-operations-modal');\n            contentEl.createEl('h2', { text: '📁 File Operations Manager' });\n            // Operation selection\n            new Setting(contentEl)\n                .setName('Operation')\n                .setDesc('Select the file operation to perform')\n                .addDropdown(dropdown => dropdown\n                .addOption('create', 'Create File')\n                .addOption('update', 'Update File')\n                .addOption('delete', 'Delete File')\n                .addOption('move', 'Move File')\n                .addOption('copy', 'Copy File')\n                .setValue(this.operation || 'create')\n                .onChange(value => {\n                this.operation = value;\n                this.updateOperationForm();\n            }));\n            // Operation form container\n            const formContainer = contentEl.createDiv({ cls: 'operation-form' });\n            this.updateOperationForm();\n        });\n    }\n    updateOperationForm() {\n        const formContainer = this.contentEl.querySelector('.operation-form');\n        if (!formContainer)\n            return;\n        formContainer.empty();\n        const operation = this.operation || 'create';\n        // File path input\n        new Setting(formContainer)\n            .setName('File Path')\n            .setDesc('Path to the file (including filename)')\n            .addText(text => text\n            .setPlaceholder('path/to/file.md')\n            .setValue(this.initialPath || '')\n            .onChange(value => this.initialPath = value));\n        // Additional inputs based on operation\n        if (operation === 'move' || operation === 'copy') {\n            new Setting(formContainer)\n                .setName('New Path')\n                .setDesc('Destination path for the file')\n                .addText(text => text\n                .setPlaceholder('new/path/to/file.md'));\n        }\n        if (operation === 'create' || operation === 'update') {\n            new Setting(formContainer)\n                .setName('Content')\n                .setDesc('File content')\n                .addTextArea(textarea => {\n                textarea.setPlaceholder('Enter file content...');\n                if (operation === 'create') {\n                    textarea.setValue('# New File\\n\\nContent goes here...');\n                }\n            });\n        }\n        // Backup option\n        if (operation !== 'create') {\n            new Setting(formContainer)\n                .setName('Create Backup')\n                .setDesc('Create a backup before performing the operation')\n                .addToggle(toggle => toggle.setValue(true));\n        }\n        // Execute button\n        new Setting(formContainer)\n            .addButton(button => button\n            .setButtonText(`Execute ${operation.charAt(0).toUpperCase() + operation.slice(1)}`)\n            .setCta()\n            .onClick(() => this.executeOperation()));\n    }\n    executeOperation() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const operation = this.operation || 'create';\n            const pathInput = this.contentEl.querySelector('input[placeholder*=\"path/to/file\"]');\n            const newPathInput = this.contentEl.querySelector('input[placeholder*=\"new/path\"]');\n            const contentTextarea = this.contentEl.querySelector('textarea');\n            const backupToggle = this.contentEl.querySelector('input[type=\"checkbox\"]');\n            if (!(pathInput === null || pathInput === void 0 ? void 0 : pathInput.value)) {\n                new Notice('File path is required');\n                return;\n            }\n            const request = {\n                operation: operation,\n                file_path: pathInput.value,\n                backup: (_a = backupToggle === null || backupToggle === void 0 ? void 0 : backupToggle.checked) !== null && _a !== void 0 ? _a : true\n            };\n            if (newPathInput === null || newPathInput === void 0 ? void 0 : newPathInput.value) {\n                request.new_path = newPathInput.value;\n            }\n            if (contentTextarea === null || contentTextarea === void 0 ? void 0 : contentTextarea.value) {\n                request.content = contentTextarea.value;\n            }\n            try {\n                new Notice(`Performing ${operation}...`);\n                const result = yield this.vaultClient.performFileOperation(request);\n                new Notice(`✅ ${operation} successful: ${result.message}`);\n                this.close();\n            }\n            catch (error) {\n                new Notice(`❌ ${operation} failed: ${error.message}`);\n            }\n        });\n    }\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n//# sourceMappingURL=vault-modals.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/vault-api-client.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/vault-types.ts"],"map":"{\"version\":3,\"file\":\"vault-modals.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/vault-modals.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * Modal Classes for VaultPilot Vault Management\\n */\\n\\nimport { App, Modal, Setting, Notice } from 'obsidian';\\nimport { VaultManagementClient } from './vault-api-client';\\nimport { \\n  VaultStructureResponse, \\n  VaultSearchResponse, \\n  FileOperationRequest,\\n  SearchType,\\n  VaultOrganizationResponse\\n} from './vault-types';\\n\\n// === VAULT STRUCTURE MODAL ===\\n\\nexport class VaultStructureModal extends Modal {\\n  private plugin: any;\\n  private vaultClient: VaultManagementClient;\\n  private focusPath?: string;\\n\\n  constructor(app: App, plugin: any) {\\n    super(app);\\n    this.plugin = plugin;\\n    this.vaultClient = plugin.vaultClient;\\n  }\\n\\n  setFocusPath(path: string): this {\\n    this.focusPath = path;\\n    return this;\\n  }\\n\\n  async onOpen() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n    contentEl.addClass('vault-structure-modal');\\n    \\n    const headerEl = contentEl.createEl('div', { cls: 'modal-header' });\\n    headerEl.createEl('h2', { text: 'Vault Structure Analysis' });\\n    \\n    const refreshButton = headerEl.createEl('button', { \\n      text: '🔄 Refresh',\\n      cls: 'mod-cta'\\n    });\\n    \\n    // Loading state\\n    const loadingEl = contentEl.createDiv({ cls: 'vault-loading' });\\n    loadingEl.setText('🔍 Analyzing vault structure...');\\n\\n    try {\\n      const structure = await this.vaultClient.getVaultStructure({\\n        include_content: false,\\n        max_depth: 5\\n      });\\n\\n      loadingEl.remove();\\n      this.renderStructure(contentEl, structure);\\n      \\n      refreshButton.onclick = () => {\\n        this.onOpen();\\n      };\\n    } catch (error: any) {\\n      loadingEl.remove();\\n      console.error('Vault structure error:', error);\\n      \\n      if (error.message?.includes('Not Found') || error.message?.includes('404')) {\\n        // Server doesn't have vault management - show fallback\\n        this.renderFallbackStructure(contentEl);\\n      } else {\\n        // Other error - show retry option\\n        const errorEl = contentEl.createDiv({ cls: 'vault-error' });\\n        errorEl.setText('❌ Failed to load vault structure');\\n        \\n        const retryButton = contentEl.createEl('button', { \\n          text: 'Retry',\\n          cls: 'mod-cta'\\n        });\\n        retryButton.onclick = () => this.onOpen();\\n      }\\n      \\n      refreshButton.onclick = () => {\\n        this.onOpen();\\n      };\\n    }\\n  }\\n\\n  private renderStructure(container: HTMLElement, structure: VaultStructureResponse) {\\n    // Stats overview\\n    const statsEl = container.createDiv({ cls: 'vault-stats' });\\n    statsEl.innerHTML = `\\n      <div class=\\\"stat-grid\\\">\\n        <div class=\\\"stat-item\\\">\\n          <span class=\\\"stat-icon\\\">📁</span>\\n          <span class=\\\"stat-label\\\">Files</span>\\n          <span class=\\\"stat-value\\\">${structure.total_files}</span>\\n        </div>\\n        <div class=\\\"stat-item\\\">\\n          <span class=\\\"stat-icon\\\">📂</span>\\n          <span class=\\\"stat-label\\\">Folders</span>\\n          <span class=\\\"stat-value\\\">${structure.total_folders}</span>\\n        </div>\\n        <div class=\\\"stat-item\\\">\\n          <span class=\\\"stat-icon\\\">💾</span>\\n          <span class=\\\"stat-label\\\">Size</span>\\n          <span class=\\\"stat-value\\\">${(structure.total_size / 1024 / 1024).toFixed(2)} MB</span>\\n        </div>\\n      </div>\\n    `;\\n\\n    // Folder tree\\n    const treeContainer = container.createDiv({ cls: 'vault-tree-container' });\\n    treeContainer.createEl('h3', { text: 'Folder Structure' });\\n    \\n    const treeEl = treeContainer.createDiv({ cls: 'vault-tree' });\\n    this.renderFolder(treeEl, structure.structure, 0);\\n\\n    // Recent files\\n    if (structure.recent_files.length > 0) {\\n      const recentContainer = container.createDiv({ cls: 'recent-files-container' });\\n      recentContainer.createEl('h3', { text: 'Recent Files' });\\n      \\n      const recentEl = recentContainer.createDiv({ cls: 'recent-files' });\\n      structure.recent_files.slice(0, 10).forEach(file => {\\n        const fileEl = recentEl.createDiv({ cls: 'recent-file' });\\n        fileEl.innerHTML = `\\n          <span class=\\\"file-icon\\\">📄</span>\\n          <span class=\\\"file-name\\\">${file.name}</span>\\n          <span class=\\\"file-date\\\">${new Date(file.modified).toLocaleDateString()}</span>\\n        `;\\n      });\\n    }\\n\\n    // Orphaned files\\n    if (structure.orphaned_files.length > 0) {\\n      const orphanedContainer = container.createDiv({ cls: 'orphaned-files-container' });\\n      orphanedContainer.createEl('h3', { text: '⚠️ Orphaned Files' });\\n      \\n      const orphanedEl = orphanedContainer.createDiv({ cls: 'orphaned-files' });\\n      structure.orphaned_files.forEach(file => {\\n        const orphanEl = orphanedEl.createDiv({ cls: 'orphaned-file' });\\n        orphanEl.innerHTML = `\\n          <span class=\\\"file-icon\\\">🔗</span>\\n          <span class=\\\"file-path\\\">${file.path}</span>\\n        `;\\n      });\\n    }\\n  }\\n\\n  private renderFolder(container: HTMLElement, folder: any, level: number) {\\n    const folderEl = container.createDiv({ \\n      cls: 'folder-item',\\n      attr: { 'data-level': level.toString() }\\n    });\\n    \\n    folderEl.innerHTML = `\\n      <span class=\\\"folder-toggle\\\">▶</span>\\n      <span class=\\\"folder-icon\\\">📁</span>\\n      <span class=\\\"folder-name\\\">${folder.name}</span>\\n      <span class=\\\"folder-count\\\">(${folder.children.length})</span>\\n    `;\\n\\n    // Add children container\\n    const childrenEl = container.createDiv({ \\n      cls: 'folder-children',\\n      attr: { style: 'display: none;' }\\n    });\\n\\n    // Toggle functionality\\n    const toggleEl = folderEl.querySelector('.folder-toggle') as HTMLElement;\\n    toggleEl.onclick = () => {\\n      const isOpen = childrenEl.style.display !== 'none';\\n      childrenEl.style.display = isOpen ? 'none' : 'block';\\n      toggleEl.textContent = isOpen ? '▶' : '▼';\\n    };\\n\\n    // Render children\\n    folder.children.forEach((child: any) => {\\n      if (child.type === 'folder') {\\n        this.renderFolder(childrenEl, child, level + 1);\\n      } else {\\n        const fileEl = childrenEl.createDiv({ \\n          cls: 'file-item',\\n          attr: { 'data-level': (level + 1).toString() }\\n        });\\n        fileEl.innerHTML = `\\n          <span class=\\\"file-icon\\\">📄</span>\\n          <span class=\\\"file-name\\\">${child.name}</span>\\n          <span class=\\\"file-size\\\">${(child.size / 1024).toFixed(1)}KB</span>\\n        `;\\n      }\\n    });\\n  }\\n\\n  private renderFallbackStructure(container: HTMLElement) {\\n    // Local vault analysis when server endpoints aren't available\\n    const fallbackEl = container.createDiv({ cls: 'vault-fallback' });\\n    fallbackEl.createEl('h3', { text: '📁 Local Vault Analysis' });\\n    fallbackEl.createEl('p', { \\n      text: 'Server-side vault management not available. Showing local analysis.',\\n      cls: 'vault-fallback-message'\\n    });\\n\\n    // Get local statistics\\n    const files = this.plugin.app.vault.getFiles();\\n    const markdownFiles = this.plugin.app.vault.getMarkdownFiles();\\n    const folders = this.plugin.app.vault.getAllLoadedFiles().filter((f: any) => f.children).length;\\n\\n    // Stats overview\\n    const statsEl = fallbackEl.createDiv({ cls: 'vault-stats' });\\n    statsEl.innerHTML = `\\n      <div class=\\\"stat-grid\\\">\\n        <div class=\\\"stat-item\\\">\\n          <span class=\\\"stat-icon\\\">📁</span>\\n          <span class=\\\"stat-label\\\">Folders</span>\\n          <span class=\\\"stat-value\\\">${folders}</span>\\n        </div>\\n        <div class=\\\"stat-item\\\">\\n          <span class=\\\"stat-icon\\\">📄</span>\\n          <span class=\\\"stat-label\\\">Total Files</span>\\n          <span class=\\\"stat-value\\\">${files.length}</span>\\n        </div>\\n        <div class=\\\"stat-item\\\">\\n          <span class=\\\"stat-icon\\\">📝</span>\\n          <span class=\\\"stat-label\\\">Markdown</span>\\n          <span class=\\\"stat-value\\\">${markdownFiles.length}</span>\\n        </div>\\n        <div class=\\\"stat-item\\\">\\n          <span class=\\\"stat-icon\\\">💾</span>\\n          <span class=\\\"stat-label\\\">Status</span>\\n          <span class=\\\"stat-value\\\">Local Only</span>\\n        </div>\\n      </div>\\n    `;\\n\\n    // Recent files\\n    const recentEl = fallbackEl.createDiv({ cls: 'recent-files-container' });\\n    recentEl.createEl('h3', { text: 'Recent Files' });\\n    \\n    const recentFiles = markdownFiles\\n      .sort((a: any, b: any) => b.stat.mtime - a.stat.mtime)\\n      .slice(0, 10);\\n\\n    const recentList = recentEl.createDiv({ cls: 'recent-files' });\\n    recentFiles.forEach((file: any) => {\\n      const fileEl = recentList.createDiv({ cls: 'recent-file' });\\n      fileEl.innerHTML = `\\n        <span class=\\\"file-icon\\\">📄</span>\\n        <span class=\\\"file-name\\\">${file.basename}</span>\\n        <span class=\\\"file-date\\\">${new Date(file.stat.mtime).toLocaleDateString()}</span>\\n      `;\\n      fileEl.onclick = () => {\\n        this.plugin.app.workspace.openLinkText(file.path, '', false);\\n        this.close();\\n      };\\n    });\\n\\n    // Configuration note\\n    const configEl = fallbackEl.createDiv({ cls: 'vault-config-note' });\\n    configEl.innerHTML = `\\n      <p><strong>💡 Enable Full Features:</strong> Configure vault management endpoints on your server to access advanced features like structure analysis, smart search, and file operations.</p>\\n      <p>See the dev-pipe documentation for implementation details.</p>\\n    `;\\n  }\\n\\n  onClose() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n  }\\n}\\n\\n// === SMART SEARCH MODAL ===\\n\\nexport class SmartSearchModal extends Modal {\\n  private plugin: any;\\n  private vaultClient: VaultManagementClient;\\n  private initialQuery?: string;\\n  private searchType?: SearchType;\\n\\n  constructor(app: App, plugin: any) {\\n    super(app);\\n    this.plugin = plugin;\\n    this.vaultClient = plugin.vaultClient;\\n  }\\n\\n  setInitialQuery(query: string, type?: SearchType): this {\\n    this.initialQuery = query;\\n    this.searchType = type;\\n    return this;\\n  }\\n\\n  async onOpen() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n    contentEl.addClass('smart-search-modal');\\n    \\n    contentEl.createEl('h2', { text: '🔍 Smart Vault Search' });\\n\\n    // Search form\\n    const searchForm = contentEl.createDiv({ cls: 'search-form' });\\n    \\n    const queryInput = searchForm.createEl('input', {\\n      type: 'text',\\n      placeholder: 'Enter search query...',\\n      cls: 'search-query-input'\\n    });\\n    \\n    if (this.initialQuery) {\\n      queryInput.value = this.initialQuery;\\n    }\\n\\n    const searchTypeSelect = searchForm.createEl('select', { cls: 'search-type-select' });\\n    const searchTypes = [\\n      { value: 'comprehensive', label: 'Comprehensive' },\\n      { value: 'content', label: 'Content' },\\n      { value: 'filename', label: 'Filename' },\\n      { value: 'tags', label: 'Tags' },\\n      { value: 'links', label: 'Links' }\\n    ];\\n    \\n    searchTypes.forEach(type => {\\n      const option = searchTypeSelect.createEl('option', { value: type.value });\\n      option.textContent = type.label;\\n      if (type.value === (this.searchType || 'comprehensive')) {\\n        option.selected = true;\\n      }\\n    });\\n\\n    const searchButton = searchForm.createEl('button', { \\n      text: 'Search',\\n      cls: 'mod-cta search-button'\\n    });\\n\\n    // Results container\\n    const resultsContainer = contentEl.createDiv({ cls: 'search-results-container' });\\n\\n    // Search function\\n    const performSearch = async () => {\\n      const query = queryInput.value.trim();\\n      if (!query) {\\n        new Notice('Please enter a search query');\\n        return;\\n      }\\n\\n      searchButton.textContent = 'Searching...';\\n      searchButton.disabled = true;\\n      resultsContainer.empty();\\n      \\n      const loadingEl = resultsContainer.createDiv({ cls: 'search-loading' });\\n      loadingEl.textContent = '🔍 Searching vault...';\\n\\n      try {\\n        const results = await this.vaultClient.searchVault({\\n          query,\\n          search_type: searchTypeSelect.value as SearchType,\\n          max_results: this.plugin.settings.vaultManagement?.searchResultsLimit || 50,\\n          include_content: true\\n        });\\n\\n        loadingEl.remove();\\n        this.renderSearchResults(resultsContainer, results);\\n      } catch (error: any) {\\n        loadingEl.textContent = '❌ Search failed';\\n        console.error('Search error:', error);\\n      } finally {\\n        searchButton.textContent = 'Search';\\n        searchButton.disabled = false;\\n      }\\n    };\\n\\n    // Event listeners\\n    searchButton.onclick = performSearch;\\n    queryInput.addEventListener('keypress', (e) => {\\n      if (e.key === 'Enter') {\\n        performSearch();\\n      }\\n    });\\n\\n    // Auto-search if initial query provided\\n    if (this.initialQuery) {\\n      performSearch();\\n    }\\n\\n    // Focus input\\n    queryInput.focus();\\n  }\\n\\n  private renderSearchResults(container: HTMLElement, results: VaultSearchResponse) {\\n    container.createEl('h3', { text: `Search Results (${results.total_found})` });\\n\\n    if (results.insights) {\\n      const insightsEl = container.createDiv({ cls: 'search-insights' });\\n      insightsEl.innerHTML = `\\n        <div class=\\\"insights-header\\\">🧠 AI Insights</div>\\n        <div class=\\\"insights-content\\\">${results.insights}</div>\\n      `;\\n    }\\n\\n    if (results.results.length === 0) {\\n      container.createDiv({ \\n        cls: 'no-results',\\n        text: 'No results found. Try a different search term or type.' \\n      });\\n      return;\\n    }\\n\\n    const resultsList = container.createDiv({ cls: 'search-results-list' });\\n    \\n    results.results.forEach(result => {\\n      const resultEl = resultsList.createDiv({ cls: 'search-result' });\\n      \\n      resultEl.innerHTML = `\\n        <div class=\\\"result-header\\\">\\n          <span class=\\\"result-file-name\\\">${result.file_name}</span>\\n          <span class=\\\"result-match-type\\\">${result.match_type}</span>\\n          <span class=\\\"result-score\\\">${(result.score * 100).toFixed(0)}%</span>\\n        </div>\\n        <div class=\\\"result-path\\\">${result.file_path}</div>\\n        <div class=\\\"result-preview\\\">${result.preview}</div>\\n        ${result.matches.length > 0 ? `\\n          <div class=\\\"result-matches\\\">\\n            <strong>Matches:</strong> ${result.matches.join(', ')}\\n          </div>\\n        ` : ''}\\n      `;\\n\\n      // Click to open file\\n      resultEl.onclick = () => {\\n        this.app.workspace.openLinkText(result.file_path, '');\\n        this.close();\\n      };\\n    });\\n\\n    // Suggested queries\\n    if (results.suggested_queries && results.suggested_queries.length > 0) {\\n      const suggestionsEl = container.createDiv({ cls: 'suggested-queries' });\\n      suggestionsEl.createEl('h4', { text: '💡 Suggested Queries' });\\n      \\n      const suggestionsList = suggestionsEl.createDiv({ cls: 'suggestions-list' });\\n      results.suggested_queries.forEach(suggestion => {\\n        const suggestionEl = suggestionsList.createEl('button', { \\n          text: suggestion,\\n          cls: 'suggestion-button'\\n        });\\n        suggestionEl.onclick = () => {\\n          const queryInput = this.contentEl.querySelector('.search-query-input') as HTMLInputElement;\\n          if (queryInput) {\\n            queryInput.value = suggestion;\\n            queryInput.dispatchEvent(new KeyboardEvent('keypress', { key: 'Enter' }));\\n          }\\n        };\\n      });\\n    }\\n  }\\n\\n  onClose() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n  }\\n}\\n\\n// === FILE OPERATIONS MODAL ===\\n\\nexport class FileOperationsModal extends Modal {\\n  private plugin: any;\\n  private vaultClient: VaultManagementClient;\\n  private initialPath?: string;\\n  private operation?: string;\\n\\n  constructor(app: App, plugin: any) {\\n    super(app);\\n    this.plugin = plugin;\\n    this.vaultClient = plugin.vaultClient;\\n  }\\n\\n  setInitialPath(path: string): this {\\n    this.initialPath = path;\\n    return this;\\n  }\\n\\n  setOperation(operation: string): this {\\n    this.operation = operation;\\n    return this;\\n  }\\n\\n  async onOpen() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n    contentEl.addClass('file-operations-modal');\\n    \\n    contentEl.createEl('h2', { text: '📁 File Operations Manager' });\\n\\n    // Operation selection\\n    new Setting(contentEl)\\n      .setName('Operation')\\n      .setDesc('Select the file operation to perform')\\n      .addDropdown(dropdown => dropdown\\n        .addOption('create', 'Create File')\\n        .addOption('update', 'Update File')\\n        .addOption('delete', 'Delete File')\\n        .addOption('move', 'Move File')\\n        .addOption('copy', 'Copy File')\\n        .setValue(this.operation || 'create')\\n        .onChange(value => {\\n          this.operation = value;\\n          this.updateOperationForm();\\n        }));\\n\\n    // Operation form container\\n    const formContainer = contentEl.createDiv({ cls: 'operation-form' });\\n    this.updateOperationForm();\\n  }\\n\\n  private updateOperationForm() {\\n    const formContainer = this.contentEl.querySelector('.operation-form') as HTMLElement;\\n    if (!formContainer) return;\\n    \\n    formContainer.empty();\\n\\n    const operation = this.operation || 'create';\\n    \\n    // File path input\\n    new Setting(formContainer)\\n      .setName('File Path')\\n      .setDesc('Path to the file (including filename)')\\n      .addText(text => text\\n        .setPlaceholder('path/to/file.md')\\n        .setValue(this.initialPath || '')\\n        .onChange(value => this.initialPath = value));\\n\\n    // Additional inputs based on operation\\n    if (operation === 'move' || operation === 'copy') {\\n      new Setting(formContainer)\\n        .setName('New Path')\\n        .setDesc('Destination path for the file')\\n        .addText(text => text\\n          .setPlaceholder('new/path/to/file.md'));\\n    }\\n\\n    if (operation === 'create' || operation === 'update') {\\n      new Setting(formContainer)\\n        .setName('Content')\\n        .setDesc('File content')\\n        .addTextArea(textarea => {\\n          textarea.setPlaceholder('Enter file content...');\\n          if (operation === 'create') {\\n            textarea.setValue('# New File\\\\n\\\\nContent goes here...');\\n          }\\n        });\\n    }\\n\\n    // Backup option\\n    if (operation !== 'create') {\\n      new Setting(formContainer)\\n        .setName('Create Backup')\\n        .setDesc('Create a backup before performing the operation')\\n        .addToggle(toggle => toggle.setValue(true));\\n    }\\n\\n    // Execute button\\n    new Setting(formContainer)\\n      .addButton(button => button\\n        .setButtonText(`Execute ${operation.charAt(0).toUpperCase() + operation.slice(1)}`)\\n        .setCta()\\n        .onClick(() => this.executeOperation()));\\n  }\\n\\n  private async executeOperation() {\\n    const operation = this.operation || 'create';\\n    const pathInput = this.contentEl.querySelector('input[placeholder*=\\\"path/to/file\\\"]') as HTMLInputElement;\\n    const newPathInput = this.contentEl.querySelector('input[placeholder*=\\\"new/path\\\"]') as HTMLInputElement;\\n    const contentTextarea = this.contentEl.querySelector('textarea') as HTMLTextAreaElement;\\n    const backupToggle = this.contentEl.querySelector('input[type=\\\"checkbox\\\"]') as HTMLInputElement;\\n\\n    if (!pathInput?.value) {\\n      new Notice('File path is required');\\n      return;\\n    }\\n\\n    const request: FileOperationRequest = {\\n      operation: operation as any,\\n      file_path: pathInput.value,\\n      backup: backupToggle?.checked ?? true\\n    };\\n\\n    if (newPathInput?.value) {\\n      request.new_path = newPathInput.value;\\n    }\\n\\n    if (contentTextarea?.value) {\\n      request.content = contentTextarea.value;\\n    }\\n\\n    try {\\n      new Notice(`Performing ${operation}...`);\\n      const result = await this.vaultClient.performFileOperation(request);\\n      \\n      new Notice(`✅ ${operation} successful: ${result.message}`);\\n      this.close();\\n    } catch (error: any) {\\n      new Notice(`❌ ${operation} failed: ${error.message}`);\\n    }\\n  }\\n\\n  onClose() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n  }\\n}\\n\"]}"}
