{"code":"// Model Selection Types for DevPipe Framework Integration\nexport class ModelSelectionError extends Error {\n    constructor(code, message, details, suggestions) {\n        super(message);\n        this.name = 'ModelSelectionError';\n        this.code = code;\n        this.details = details;\n        this.suggestions = suggestions;\n    }\n}\n//# sourceMappingURL=ModelSelection.js.map","references":[],"map":"{\"version\":3,\"file\":\"ModelSelection.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/types/ModelSelection.ts\"],\"names\":[],\"mappings\":\"AAAA,0DAA0D;AA2G1D,MAAM,OAAO,mBAAoB,SAAQ,KAAK;IAK5C,YACE,IAAqG,EACrG,OAAe,EACf,OAAa,EACb,WAAsB;QAEtB,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,IAAI,GAAG,qBAAqB,CAAC;QAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;CACF\",\"sourcesContent\":[\"// Model Selection Types for DevPipe Framework Integration\\n\\nexport interface ModelSelectionRequest {\\n  task_type: TaskType;\\n  quality_requirement?: QualityRequirement;\\n  max_cost?: number;\\n  context_length?: number;\\n  preferred_providers?: string[];\\n  timeout_ms?: number;\\n  user_preferences?: UserPreferences;\\n}\\n\\nexport interface ModelSelectionResponse {\\n  selected_model: ModelInfo;\\n  reasoning: string;\\n  fallback_models: ModelInfo[];\\n  estimated_cost: number;\\n  estimated_time_ms: number;\\n  selection_metadata: {\\n    selection_time_ms: number;\\n    factors_considered: string[];\\n    confidence_score: number;\\n  };\\n}\\n\\nexport interface ModelInfo {\\n  id: string;\\n  name: string;\\n  provider: string;\\n  capabilities: ModelCapability[];\\n  cost_per_token: number;\\n  max_tokens: number;\\n  response_time_avg_ms: number;\\n  availability_score: number;\\n  quality_score: number;\\n}\\n\\nexport interface ModelCapability {\\n  type: TaskType;\\n  score: number;\\n  specializations?: string[];\\n}\\n\\nexport interface ModelHealthStatus {\\n  model_id: string;\\n  status: 'healthy' | 'degraded' | 'offline';\\n  response_time: number;\\n  error_rate: number;\\n  last_check: string;\\n  availability_percentage: number;\\n}\\n\\nexport interface UserPreferences {\\n  priority: 'performance' | 'cost' | 'balanced';\\n  max_cost_per_request: number;\\n  preferred_providers: string[];\\n  fallback_enabled: boolean;\\n  quality_threshold: number;\\n  timeout_preference: number;\\n}\\n\\nexport interface ModelPerformanceMetrics {\\n  model_id: string;\\n  task_type: TaskType;\\n  success_rate: number;\\n  average_response_time: number;\\n  average_cost: number;\\n  user_satisfaction_score: number;\\n  last_updated: string;\\n}\\n\\nexport type TaskType = \\n  | 'text-generation'\\n  | 'code-generation'\\n  | 'chat'\\n  | 'summarization'\\n  | 'translation'\\n  | 'embedding'\\n  | 'editing'\\n  | 'analysis'\\n  | 'planning'\\n  | 'workflow-execution';\\n\\nexport type QualityRequirement = 'low' | 'medium' | 'high';\\n\\nexport interface DevPipeMessage {\\n  id: string;\\n  timestamp: string;\\n  type: DevPipeMessageType;\\n  payload: any;\\n  sender: string;\\n  recipient: string;\\n  priority: 'low' | 'normal' | 'high' | 'critical';\\n  expires_at?: string;\\n}\\n\\nexport type DevPipeMessageType = \\n  | 'model-selection-request'\\n  | 'model-selection-response'\\n  | 'health-check-request'\\n  | 'health-check-response'\\n  | 'performance-metrics-request'\\n  | 'performance-metrics-response'\\n  | 'preferences-update'\\n  | 'status-update'\\n  | 'error-report';\\n\\nexport class ModelSelectionError extends Error {\\n  public code: 'NO_HEALTHY_MODELS' | 'BUDGET_EXCEEDED' | 'TIMEOUT' | 'INVALID_REQUEST' | 'SERVICE_UNAVAILABLE';\\n  public details?: any;\\n  public suggestions?: string[];\\n\\n  constructor(\\n    code: 'NO_HEALTHY_MODELS' | 'BUDGET_EXCEEDED' | 'TIMEOUT' | 'INVALID_REQUEST' | 'SERVICE_UNAVAILABLE',\\n    message: string,\\n    details?: any,\\n    suggestions?: string[]\\n  ) {\\n    super(message);\\n    this.name = 'ModelSelectionError';\\n    this.code = code;\\n    this.details = details;\\n    this.suggestions = suggestions;\\n  }\\n}\\n\\nexport interface ModelSelectionEvent {\\n  type: 'model-selected' | 'health-updated' | 'performance-metrics' | 'preferences-updated' | 'connected' | 'disconnected';\\n  data: any;\\n  timestamp: string;\\n}\\n\\n// Configuration types\\nexport interface ModelSelectionConfig {\\n  devpipe_path: string;\\n  server_url: string;\\n  monitoring_interval: number;\\n  fallback_enabled: boolean;\\n  cache_duration: number;\\n  retry_attempts: number;\\n  timeout: number;\\n  debug_mode: boolean;\\n}\\n\\nexport interface ModelProviderConfig {\\n  name: string;\\n  enabled: boolean;\\n  api_key?: string;\\n  base_url?: string;\\n  max_tokens?: number;\\n  default_temperature?: number;\\n  custom_settings?: Record<string, any>;\\n}\\n\"]}"}
