{"code":"/**\n * Transport interface for DevPipe communication\n * Supports multiple transport types: HTTP, WebSocket, FileSystem\n */\nexport var TransportType;\n(function (TransportType) {\n    TransportType[\"HTTP\"] = \"http\";\n    TransportType[\"WEBSOCKET\"] = \"websocket\";\n    TransportType[\"FILESYSTEM\"] = \"filesystem\";\n})(TransportType || (TransportType = {}));\nexport var TransportEvent;\n(function (TransportEvent) {\n    TransportEvent[\"CONNECTED\"] = \"connected\";\n    TransportEvent[\"DISCONNECTED\"] = \"disconnected\";\n    TransportEvent[\"MESSAGE\"] = \"message\";\n    TransportEvent[\"ERROR\"] = \"error\";\n    TransportEvent[\"HEALTH_CHECK\"] = \"health_check\";\n    TransportEvent[\"RECONNECTING\"] = \"reconnecting\";\n})(TransportEvent || (TransportEvent = {}));\n//# sourceMappingURL=DevPipeTransport.js.map","references":[],"map":"{\"version\":3,\"file\":\"DevPipeTransport.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/devpipe/transports/DevPipeTransport.ts\"],\"names\":[],\"mappings\":\"AAAA;;;GAGG;AAEH,MAAM,CAAN,IAAY,aAIX;AAJD,WAAY,aAAa;IACvB,8BAAa,CAAA;IACb,wCAAuB,CAAA;IACvB,0CAAyB,CAAA;AAC3B,CAAC,EAJW,aAAa,KAAb,aAAa,QAIxB;AAED,MAAM,CAAN,IAAY,cAOX;AAPD,WAAY,cAAc;IACxB,yCAAuB,CAAA;IACvB,+CAA6B,CAAA;IAC7B,qCAAmB,CAAA;IACnB,iCAAe,CAAA;IACf,+CAA6B,CAAA;IAC7B,+CAA6B,CAAA;AAC/B,CAAC,EAPW,cAAc,KAAd,cAAc,QAOzB\",\"sourcesContent\":[\"/**\\n * Transport interface for DevPipe communication\\n * Supports multiple transport types: HTTP, WebSocket, FileSystem\\n */\\n\\nexport enum TransportType {\\n  HTTP = 'http',\\n  WEBSOCKET = 'websocket',\\n  FILESYSTEM = 'filesystem'\\n}\\n\\nexport enum TransportEvent {\\n  CONNECTED = 'connected',\\n  DISCONNECTED = 'disconnected',\\n  MESSAGE = 'message',\\n  ERROR = 'error',\\n  HEALTH_CHECK = 'health_check',\\n  RECONNECTING = 'reconnecting'\\n}\\n\\nexport interface TransportCapabilities {\\n  // Feature support\\n  supportsRealtime: boolean;\\n  supportsBidirectional: boolean;\\n  supportsFileSystem: boolean;\\n  supportsStreaming: boolean;\\n  \\n  // Performance characteristics\\n  maxMessageSize: number;\\n  averageLatency: number;\\n  maxConcurrentConnections: number;\\n  \\n  // Reliability metrics\\n  reliability: number; // 0-1 based on historical data\\n  supportedEnvironments: string[];\\n}\\n\\nexport interface TransportHealthStatus {\\n  status: 'healthy' | 'degraded' | 'failing' | 'disconnected';\\n  lastCheck: number;\\n  latency: number;\\n  errorRate: number;\\n  consecutiveFailures: number;\\n  uptime: number;\\n}\\n\\nexport interface HealthCheckResult {\\n  success: boolean;\\n  latency: number;\\n  timestamp: number;\\n  error?: string;\\n}\\n\\nexport interface DevPipeMessage {\\n  id?: string;\\n  type: string;\\n  payload: any;\\n  timestamp?: number;\\n  replyTo?: string;\\n}\\n\\nexport interface DevPipeResponse {\\n  id?: string;\\n  success: boolean;\\n  payload?: any;\\n  error?: string;\\n  timestamp: number;\\n}\\n\\nexport interface TransportConfig {\\n  serverUrl?: string;\\n  devPipePath?: string;\\n  timeout: number;\\n  retryAttempts: number;\\n  debug: boolean;\\n  \\n  // Transport-specific config\\n  http?: HTTPTransportConfig;\\n  websocket?: WebSocketTransportConfig;\\n  filesystem?: FileSystemTransportConfig;\\n}\\n\\nexport interface HTTPTransportConfig {\\n  enableSSE?: boolean;\\n  maxConnections?: number;\\n  keepAlive?: boolean;\\n  compression?: boolean;\\n}\\n\\nexport interface WebSocketTransportConfig {\\n  heartbeatInterval?: number;\\n  reconnectDelay?: number;\\n  maxReconnectAttempts?: number;\\n  persistMessages?: boolean;\\n}\\n\\nexport interface FileSystemTransportConfig {\\n  watchInterval?: number;\\n  lockTimeout?: number;\\n  maxQueueSize?: number;\\n}\\n\\nexport interface EventListener {\\n  (data: any): void;\\n}\\n\\n/**\\n * Core transport interface that all transport implementations must follow\\n */\\nexport interface DevPipeTransport {\\n  readonly type: TransportType;\\n  readonly id: string;\\n  \\n  // Lifecycle management\\n  initialize(config: TransportConfig): Promise<void>;\\n  connect(): Promise<void>;\\n  disconnect(): Promise<void>;\\n  destroy(): Promise<void>;\\n  \\n  // Communication\\n  send(message: DevPipeMessage): Promise<DevPipeResponse>;\\n  \\n  // Message receiving is handled via events rather than async iterator\\n  // Listen to 'message' event to receive incoming messages\\n  \\n  // Health and capabilities\\n  isAvailable(): boolean;\\n  isConnected(): boolean;\\n  getCapabilities(): TransportCapabilities;\\n  getHealthStatus(): TransportHealthStatus;\\n  performHealthCheck(): Promise<HealthCheckResult>;\\n  \\n  // Event system\\n  on(event: TransportEvent | string, listener: EventListener): void;\\n  off(event: TransportEvent | string, listener: EventListener): void;\\n  emit(event: TransportEvent | string, data?: any): void;\\n}\\n\"]}"}
