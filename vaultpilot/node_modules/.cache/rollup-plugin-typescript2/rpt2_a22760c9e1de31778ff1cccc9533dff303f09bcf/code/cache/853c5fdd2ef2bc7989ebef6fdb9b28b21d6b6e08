{"code":"import { __awaiter } from \"tslib\";\nimport { Modal, Notice } from 'obsidian';\nexport class ChatModal extends Modal {\n    constructor(app, plugin) {\n        super(app);\n        this.currentConversationId = null;\n        this.messages = [];\n        this.currentMode = 'ask';\n        this.plugin = plugin;\n        this.currentMode = plugin.settings.defaultMode;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.empty();\n        contentEl.addClass('vaultpilot-chat-modal');\n        // Modal header\n        const headerEl = contentEl.createEl('div', { cls: 'vaultpilot-chat-header' });\n        headerEl.createEl('h2', { text: 'ðŸ¤– VaultPilot Chat' });\n        const toolbarEl = headerEl.createEl('div', { cls: 'vaultpilot-chat-toolbar' });\n        // Mode toggle\n        this.modeToggleContainer = toolbarEl.createEl('div', { cls: 'vaultpilot-mode-toggle' });\n        this.createModeToggle();\n        // Clear chat button\n        const clearBtn = toolbarEl.createEl('button', {\n            text: 'Clear Chat',\n            cls: 'mod-cta'\n        });\n        clearBtn.onclick = () => this.clearChat();\n        // Agent selector (will be populated when agents are loaded)\n        const agentSelect = toolbarEl.createEl('select', { cls: 'vaultpilot-agent-select' });\n        agentSelect.createEl('option', { text: 'Auto-select Agent', value: '' });\n        this.loadAgents(agentSelect);\n        // Chat container\n        this.chatContainer = contentEl.createEl('div', { cls: 'vaultpilot-chat-container' });\n        // Messages area\n        this.messagesEl = this.chatContainer.createEl('div', { cls: 'vaultpilot-chat-messages' });\n        // Input container\n        this.inputContainer = this.chatContainer.createEl('div', { cls: 'vaultpilot-chat-input-container' });\n        this.inputEl = this.inputContainer.createEl('input', {\n            type: 'text',\n            placeholder: this.getPlaceholderText(),\n            cls: 'vaultpilot-chat-input'\n        });\n        this.sendButton = this.inputContainer.createEl('button', {\n            text: 'Send',\n            cls: 'mod-cta vaultpilot-send-button'\n        });\n        // Event listeners\n        this.inputEl.addEventListener('keydown', (e) => {\n            if (e.key === 'Enter' && !e.shiftKey) {\n                e.preventDefault();\n                this.sendMessage();\n            }\n        });\n        this.sendButton.onclick = () => this.sendMessage();\n        // Focus the input\n        this.inputEl.focus();\n        // Load conversation history\n        this.loadConversationHistory();\n        // Add styles\n        this.addStyles();\n    }\n    loadAgents(selectEl) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield this.plugin.apiClient.getAgents();\n                if (response.success && response.data) {\n                    response.data.forEach(agent => {\n                        const option = selectEl.createEl('option', {\n                            text: agent.name,\n                            value: agent.id\n                        });\n                    });\n                }\n            }\n            catch (error) {\n                console.error('Failed to load agents:', error);\n            }\n        });\n    }\n    loadConversationHistory() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Only try to load conversation history if we have a conversation ID\n            if (this.currentConversationId) {\n                try {\n                    const response = yield this.plugin.apiClient.getConversationHistory(this.currentConversationId);\n                    if (response.success && response.data) {\n                        this.messages = response.data.messages;\n                        this.renderMessages();\n                    }\n                }\n                catch (error) {\n                    console.error('Failed to load conversation history:', error);\n                }\n            }\n            // If no conversation ID, start fresh (no history to load)\n        });\n    }\n    sendMessage() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const message = this.inputEl.value.trim();\n            if (!message)\n                return;\n            // Disable input while processing\n            this.inputEl.disabled = true;\n            this.sendButton.disabled = true;\n            this.sendButton.textContent = 'Sending...';\n            // Add user message to UI\n            this.addMessage('user', message);\n            this.inputEl.value = '';\n            try {\n                // Get vault context if available\n                const activeFile = this.app.workspace.getActiveFile();\n                let vaultContext = '';\n                if (activeFile) {\n                    const content = yield this.app.vault.read(activeFile);\n                    vaultContext = `Current file: ${activeFile.name}\\n\\nContent:\\n${content}`;\n                }\n                // Send to API\n                const response = yield this.plugin.apiClient.chat({\n                    message,\n                    conversation_id: this.currentConversationId || undefined,\n                    vault_context: vaultContext,\n                    agent_id: this.getSelectedAgent(),\n                    mode: this.currentMode\n                });\n                if (response.success && response.data) {\n                    this.currentConversationId = response.data.conversation_id;\n                    this.addMessage('assistant', response.data.response);\n                }\n                else {\n                    this.addMessage('assistant', `Error: ${response.error || 'Failed to get response'}`);\n                    new Notice(`Chat error: ${response.error}`);\n                }\n            }\n            catch (error) {\n                const errorMsg = error instanceof Error ? error.message : 'Unknown error';\n                this.addMessage('assistant', `Error: ${errorMsg}`);\n                new Notice(`Chat error: ${errorMsg}`);\n            }\n            finally {\n                // Re-enable input\n                this.inputEl.disabled = false;\n                this.sendButton.disabled = false;\n                this.sendButton.textContent = 'Send';\n                this.inputEl.focus();\n            }\n        });\n    }\n    getSelectedAgent() {\n        const selectEl = this.contentEl.querySelector('.vaultpilot-agent-select');\n        return (selectEl === null || selectEl === void 0 ? void 0 : selectEl.value) || undefined;\n    }\n    addMessage(role, content) {\n        const message = {\n            role,\n            content,\n            timestamp: new Date().toISOString()\n        };\n        this.messages.push(message);\n        this.renderMessage(message);\n        this.scrollToBottom();\n    }\n    renderMessages() {\n        this.messagesEl.empty();\n        this.messages.forEach(message => this.renderMessage(message));\n        this.scrollToBottom();\n    }\n    renderMessage(message) {\n        const messageEl = this.messagesEl.createEl('div', {\n            cls: `vaultpilot-message vaultpilot-message-${message.role}`\n        });\n        const roleEl = messageEl.createEl('div', {\n            cls: 'vaultpilot-message-role',\n            text: message.role === 'user' ? 'You' : 'VaultPilot'\n        });\n        const contentEl = messageEl.createEl('div', {\n            cls: 'vaultpilot-message-content'\n        });\n        // Simple markdown rendering for basic formatting\n        contentEl.innerHTML = this.renderMarkdown(message.content);\n        if (message.timestamp) {\n            const timeEl = messageEl.createEl('div', {\n                cls: 'vaultpilot-message-time',\n                text: new Date(message.timestamp).toLocaleTimeString()\n            });\n        }\n    }\n    renderMarkdown(text) {\n        return text\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n            .replace(/`(.*?)`/g, '<code>$1</code>')\n            .replace(/\\n/g, '<br>');\n    }\n    scrollToBottom() {\n        this.messagesEl.scrollTop = this.messagesEl.scrollHeight;\n    }\n    clearChat() {\n        this.messages = [];\n        this.currentConversationId = null;\n        this.messagesEl.empty();\n        new Notice('Chat cleared');\n    }\n    addStyles() {\n        if (!document.getElementById('vaultpilot-chat-styles')) {\n            const styleEl = document.createElement('style');\n            styleEl.id = 'vaultpilot-chat-styles';\n            styleEl.textContent = `\n        .vaultpilot-chat-modal {\n          width: 600px;\n          height: 700px;\n        }\n        .vaultpilot-chat-header {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          margin-bottom: 15px;\n          padding-bottom: 10px;\n          border-bottom: 1px solid var(--background-modifier-border);\n        }\n        .vaultpilot-chat-toolbar {\n          display: flex;\n          gap: 10px;\n          align-items: center;\n          flex-wrap: wrap;\n        }\n        .vaultpilot-mode-toggle {\n          margin-right: 15px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          padding: 8px;\n          background: var(--background-secondary);\n        }\n        .vaultpilot-mode-description {\n          font-size: 0.8em;\n          color: var(--text-muted);\n          margin-bottom: 6px;\n        }\n        .vaultpilot-mode-buttons {\n          display: flex;\n          gap: 4px;\n        }\n        .vaultpilot-mode-btn {\n          padding: 4px 12px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          background: var(--background-primary);\n          color: var(--text-muted);\n          font-size: 0.85em;\n          cursor: pointer;\n          transition: all 0.2s ease;\n        }\n        .vaultpilot-mode-btn:hover {\n          background: var(--background-primary-alt);\n          color: var(--text-normal);\n        }\n        .vaultpilot-mode-btn.active {\n          background: var(--interactive-accent);\n          color: var(--text-on-accent);\n          border-color: var(--interactive-accent);\n        }\n        .vaultpilot-agent-select {\n          padding: 4px 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-chat-container {\n          display: flex;\n          flex-direction: column;\n          height: calc(100% - 80px);\n        }\n        .vaultpilot-chat-messages {\n          flex: 1;\n          overflow-y: auto;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 8px;\n          margin-bottom: 15px;\n          background: var(--background-secondary);\n        }\n        .vaultpilot-message {\n          margin-bottom: 15px;\n          padding: 10px;\n          border-radius: 8px;\n        }\n        .vaultpilot-message-user {\n          background: var(--background-primary-alt);\n          margin-left: 20px;\n        }\n        .vaultpilot-message-assistant {\n          background: var(--background-primary);\n          margin-right: 20px;\n        }\n        .vaultpilot-message-role {\n          font-weight: bold;\n          margin-bottom: 5px;\n          color: var(--text-accent);\n        }\n        .vaultpilot-message-content {\n          line-height: 1.4;\n          color: var(--text-normal);\n          user-select: text;\n        }\n        .vaultpilot-message-time {\n          font-size: 0.8em;\n          color: var(--text-muted);\n          margin-top: 5px;\n        }\n        .vaultpilot-chat-input-container {\n          display: flex;\n          gap: 10px;\n        }\n        .vaultpilot-chat-input {\n          flex: 1;\n          padding: 10px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 6px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n        }\n        .vaultpilot-send-button {\n          padding: 10px 20px;\n        }\n        .vaultpilot-mode-toggle {\n          display: flex;\n          flex-direction: column;\n          gap: 5px;\n        }\n        .vaultpilot-mode-description {\n          font-size: 0.9em;\n          color: var(--text-muted);\n        }\n        .vaultpilot-mode-buttons {\n          display: flex;\n          gap: 10px;\n        }\n        .vaultpilot-mode-btn {\n          flex: 1;\n          padding: 8px;\n          border: 1px solid var(--background-modifier-border);\n          border-radius: 4px;\n          background: var(--background-primary);\n          color: var(--text-normal);\n          cursor: pointer;\n          text-align: center;\n        }\n        .vaultpilot-mode-btn.active {\n          background: var(--accent-color);\n          color: var(--background-primary);\n          font-weight: bold;\n        }\n      `;\n            document.head.appendChild(styleEl);\n        }\n    }\n    createModeToggle() {\n        this.modeToggleContainer.empty();\n        // Mode description\n        const modeDesc = this.modeToggleContainer.createEl('div', {\n            cls: 'vaultpilot-mode-description',\n            text: this.getModeDescription()\n        });\n        // Mode buttons\n        const modeButtons = this.modeToggleContainer.createEl('div', { cls: 'vaultpilot-mode-buttons' });\n        const askBtn = modeButtons.createEl('button', {\n            text: 'Ask Mode',\n            cls: `vaultpilot-mode-btn ${this.currentMode === 'ask' ? 'active' : ''}`\n        });\n        const agentBtn = modeButtons.createEl('button', {\n            text: 'Agent Mode',\n            cls: `vaultpilot-mode-btn ${this.currentMode === 'agent' ? 'active' : ''}`\n        });\n        askBtn.onclick = () => this.setMode('ask');\n        agentBtn.onclick = () => this.setMode('agent');\n    }\n    setMode(mode) {\n        this.currentMode = mode;\n        this.createModeToggle(); // Refresh the toggle UI\n        if (this.inputEl) {\n            this.inputEl.placeholder = this.getPlaceholderText();\n        }\n    }\n    getPlaceholderText() {\n        return this.currentMode === 'ask'\n            ? 'Ask a question...'\n            : 'Describe what you want to accomplish...';\n    }\n    getModeDescription() {\n        return this.currentMode === 'ask'\n            ? 'Simple Q&A mode for quick questions and explanations'\n            : 'Complex workflow mode for structured tasks and automation';\n    }\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n//# sourceMappingURL=chat-modal.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types.ts"],"map":"{\"version\":3,\"file\":\"chat-modal.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/chat-modal.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { Modal, App, Setting, Notice } from 'obsidian';\\nimport type VaultPilotPlugin from './main';\\nimport { ChatMessage } from './types';\\n\\nexport class ChatModal extends Modal {\\n  plugin: VaultPilotPlugin;\\n  private chatContainer!: HTMLElement;\\n  private inputContainer!: HTMLElement;\\n  private messagesEl!: HTMLElement;\\n  private inputEl!: HTMLInputElement;\\n  private sendButton!: HTMLButtonElement;\\n  private currentConversationId: string | null = null;\\n  private messages: ChatMessage[] = [];\\n  private currentMode: 'ask' | 'agent' = 'ask';\\n  private modeToggleContainer!: HTMLElement;\\n\\n  constructor(app: App, plugin: VaultPilotPlugin) {\\n    super(app);\\n    this.plugin = plugin;\\n    this.currentMode = plugin.settings.defaultMode;\\n  }\\n\\n  onOpen() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n    contentEl.addClass('vaultpilot-chat-modal');\\n\\n    // Modal header\\n    const headerEl = contentEl.createEl('div', { cls: 'vaultpilot-chat-header' });\\n    headerEl.createEl('h2', { text: 'ðŸ¤– VaultPilot Chat' });\\n    \\n    const toolbarEl = headerEl.createEl('div', { cls: 'vaultpilot-chat-toolbar' });\\n    \\n    // Mode toggle\\n    this.modeToggleContainer = toolbarEl.createEl('div', { cls: 'vaultpilot-mode-toggle' });\\n    this.createModeToggle();\\n    \\n    // Clear chat button\\n    const clearBtn = toolbarEl.createEl('button', { \\n      text: 'Clear Chat',\\n      cls: 'mod-cta'\\n    });\\n    clearBtn.onclick = () => this.clearChat();\\n\\n    // Agent selector (will be populated when agents are loaded)\\n    const agentSelect = toolbarEl.createEl('select', { cls: 'vaultpilot-agent-select' });\\n    agentSelect.createEl('option', { text: 'Auto-select Agent', value: '' });\\n    this.loadAgents(agentSelect);\\n\\n    // Chat container\\n    this.chatContainer = contentEl.createEl('div', { cls: 'vaultpilot-chat-container' });\\n    \\n    // Messages area\\n    this.messagesEl = this.chatContainer.createEl('div', { cls: 'vaultpilot-chat-messages' });\\n    \\n    // Input container\\n    this.inputContainer = this.chatContainer.createEl('div', { cls: 'vaultpilot-chat-input-container' });\\n    \\n    this.inputEl = this.inputContainer.createEl('input', {\\n      type: 'text',\\n      placeholder: this.getPlaceholderText(),\\n      cls: 'vaultpilot-chat-input'\\n    });\\n\\n    this.sendButton = this.inputContainer.createEl('button', {\\n      text: 'Send',\\n      cls: 'mod-cta vaultpilot-send-button'\\n    });\\n\\n    // Event listeners\\n    this.inputEl.addEventListener('keydown', (e) => {\\n      if (e.key === 'Enter' && !e.shiftKey) {\\n        e.preventDefault();\\n        this.sendMessage();\\n      }\\n    });\\n\\n    this.sendButton.onclick = () => this.sendMessage();\\n\\n    // Focus the input\\n    this.inputEl.focus();\\n\\n    // Load conversation history\\n    this.loadConversationHistory();\\n\\n    // Add styles\\n    this.addStyles();\\n  }\\n\\n  private async loadAgents(selectEl: HTMLSelectElement) {\\n    try {\\n      const response = await this.plugin.apiClient.getAgents();\\n      if (response.success && response.data) {\\n        response.data.forEach(agent => {\\n          const option = selectEl.createEl('option', {\\n            text: agent.name,\\n            value: agent.id\\n          });\\n        });\\n      }\\n    } catch (error) {\\n      console.error('Failed to load agents:', error);\\n    }\\n  }\\n\\n  private async loadConversationHistory() {\\n    // Only try to load conversation history if we have a conversation ID\\n    if (this.currentConversationId) {\\n      try {\\n        const response = await this.plugin.apiClient.getConversationHistory(this.currentConversationId);\\n        if (response.success && response.data) {\\n          this.messages = response.data.messages;\\n          this.renderMessages();\\n        }\\n      } catch (error) {\\n        console.error('Failed to load conversation history:', error);\\n      }\\n    }\\n    // If no conversation ID, start fresh (no history to load)\\n  }\\n\\n  private async sendMessage() {\\n    const message = this.inputEl.value.trim();\\n    if (!message) return;\\n\\n    // Disable input while processing\\n    this.inputEl.disabled = true;\\n    this.sendButton.disabled = true;\\n    this.sendButton.textContent = 'Sending...';\\n\\n    // Add user message to UI\\n    this.addMessage('user', message);\\n    this.inputEl.value = '';\\n\\n    try {\\n      // Get vault context if available\\n      const activeFile = this.app.workspace.getActiveFile();\\n      let vaultContext = '';\\n      \\n      if (activeFile) {\\n        const content = await this.app.vault.read(activeFile);\\n        vaultContext = `Current file: ${activeFile.name}\\\\n\\\\nContent:\\\\n${content}`;\\n      }\\n\\n      // Send to API\\n      const response = await this.plugin.apiClient.chat({\\n        message,\\n        conversation_id: this.currentConversationId || undefined,\\n        vault_context: vaultContext,\\n        agent_id: this.getSelectedAgent(),\\n        mode: this.currentMode\\n      });\\n\\n      if (response.success && response.data) {\\n        this.currentConversationId = response.data.conversation_id;\\n        this.addMessage('assistant', response.data.response);\\n      } else {\\n        this.addMessage('assistant', `Error: ${response.error || 'Failed to get response'}`);\\n        new Notice(`Chat error: ${response.error}`);\\n      }\\n    } catch (error) {\\n      const errorMsg = error instanceof Error ? error.message : 'Unknown error';\\n      this.addMessage('assistant', `Error: ${errorMsg}`);\\n      new Notice(`Chat error: ${errorMsg}`);\\n    } finally {\\n      // Re-enable input\\n      this.inputEl.disabled = false;\\n      this.sendButton.disabled = false;\\n      this.sendButton.textContent = 'Send';\\n      this.inputEl.focus();\\n    }\\n  }\\n\\n  private getSelectedAgent(): string | undefined {\\n    const selectEl = this.contentEl.querySelector('.vaultpilot-agent-select') as HTMLSelectElement;\\n    return selectEl?.value || undefined;\\n  }\\n\\n  private addMessage(role: 'user' | 'assistant', content: string) {\\n    const message: ChatMessage = {\\n      role,\\n      content,\\n      timestamp: new Date().toISOString()\\n    };\\n\\n    this.messages.push(message);\\n    this.renderMessage(message);\\n    this.scrollToBottom();\\n  }\\n\\n  private renderMessages() {\\n    this.messagesEl.empty();\\n    this.messages.forEach(message => this.renderMessage(message));\\n    this.scrollToBottom();\\n  }\\n\\n  private renderMessage(message: ChatMessage) {\\n    const messageEl = this.messagesEl.createEl('div', {\\n      cls: `vaultpilot-message vaultpilot-message-${message.role}`\\n    });\\n\\n    const roleEl = messageEl.createEl('div', {\\n      cls: 'vaultpilot-message-role',\\n      text: message.role === 'user' ? 'You' : 'VaultPilot'\\n    });\\n\\n    const contentEl = messageEl.createEl('div', {\\n      cls: 'vaultpilot-message-content'\\n    });\\n\\n    // Simple markdown rendering for basic formatting\\n    contentEl.innerHTML = this.renderMarkdown(message.content);\\n\\n    if (message.timestamp) {\\n      const timeEl = messageEl.createEl('div', {\\n        cls: 'vaultpilot-message-time',\\n        text: new Date(message.timestamp).toLocaleTimeString()\\n      });\\n    }\\n  }\\n\\n  private renderMarkdown(text: string): string {\\n    return text\\n      .replace(/\\\\*\\\\*(.*?)\\\\*\\\\*/g, '<strong>$1</strong>')\\n      .replace(/\\\\*(.*?)\\\\*/g, '<em>$1</em>')\\n      .replace(/`(.*?)`/g, '<code>$1</code>')\\n      .replace(/\\\\n/g, '<br>');\\n  }\\n\\n  private scrollToBottom() {\\n    this.messagesEl.scrollTop = this.messagesEl.scrollHeight;\\n  }\\n\\n  private clearChat() {\\n    this.messages = [];\\n    this.currentConversationId = null;\\n    this.messagesEl.empty();\\n    new Notice('Chat cleared');\\n  }\\n\\n  private addStyles() {\\n    if (!document.getElementById('vaultpilot-chat-styles')) {\\n      const styleEl = document.createElement('style');\\n      styleEl.id = 'vaultpilot-chat-styles';\\n      styleEl.textContent = `\\n        .vaultpilot-chat-modal {\\n          width: 600px;\\n          height: 700px;\\n        }\\n        .vaultpilot-chat-header {\\n          display: flex;\\n          justify-content: space-between;\\n          align-items: center;\\n          margin-bottom: 15px;\\n          padding-bottom: 10px;\\n          border-bottom: 1px solid var(--background-modifier-border);\\n        }\\n        .vaultpilot-chat-toolbar {\\n          display: flex;\\n          gap: 10px;\\n          align-items: center;\\n          flex-wrap: wrap;\\n        }\\n        .vaultpilot-mode-toggle {\\n          margin-right: 15px;\\n          border: 1px solid var(--background-modifier-border);\\n          border-radius: 6px;\\n          padding: 8px;\\n          background: var(--background-secondary);\\n        }\\n        .vaultpilot-mode-description {\\n          font-size: 0.8em;\\n          color: var(--text-muted);\\n          margin-bottom: 6px;\\n        }\\n        .vaultpilot-mode-buttons {\\n          display: flex;\\n          gap: 4px;\\n        }\\n        .vaultpilot-mode-btn {\\n          padding: 4px 12px;\\n          border: 1px solid var(--background-modifier-border);\\n          border-radius: 4px;\\n          background: var(--background-primary);\\n          color: var(--text-muted);\\n          font-size: 0.85em;\\n          cursor: pointer;\\n          transition: all 0.2s ease;\\n        }\\n        .vaultpilot-mode-btn:hover {\\n          background: var(--background-primary-alt);\\n          color: var(--text-normal);\\n        }\\n        .vaultpilot-mode-btn.active {\\n          background: var(--interactive-accent);\\n          color: var(--text-on-accent);\\n          border-color: var(--interactive-accent);\\n        }\\n        .vaultpilot-agent-select {\\n          padding: 4px 8px;\\n          border: 1px solid var(--background-modifier-border);\\n          border-radius: 4px;\\n          background: var(--background-primary);\\n          color: var(--text-normal);\\n        }\\n        .vaultpilot-chat-container {\\n          display: flex;\\n          flex-direction: column;\\n          height: calc(100% - 80px);\\n        }\\n        .vaultpilot-chat-messages {\\n          flex: 1;\\n          overflow-y: auto;\\n          padding: 10px;\\n          border: 1px solid var(--background-modifier-border);\\n          border-radius: 8px;\\n          margin-bottom: 15px;\\n          background: var(--background-secondary);\\n        }\\n        .vaultpilot-message {\\n          margin-bottom: 15px;\\n          padding: 10px;\\n          border-radius: 8px;\\n        }\\n        .vaultpilot-message-user {\\n          background: var(--background-primary-alt);\\n          margin-left: 20px;\\n        }\\n        .vaultpilot-message-assistant {\\n          background: var(--background-primary);\\n          margin-right: 20px;\\n        }\\n        .vaultpilot-message-role {\\n          font-weight: bold;\\n          margin-bottom: 5px;\\n          color: var(--text-accent);\\n        }\\n        .vaultpilot-message-content {\\n          line-height: 1.4;\\n          color: var(--text-normal);\\n          user-select: text;\\n        }\\n        .vaultpilot-message-time {\\n          font-size: 0.8em;\\n          color: var(--text-muted);\\n          margin-top: 5px;\\n        }\\n        .vaultpilot-chat-input-container {\\n          display: flex;\\n          gap: 10px;\\n        }\\n        .vaultpilot-chat-input {\\n          flex: 1;\\n          padding: 10px;\\n          border: 1px solid var(--background-modifier-border);\\n          border-radius: 6px;\\n          background: var(--background-primary);\\n          color: var(--text-normal);\\n        }\\n        .vaultpilot-send-button {\\n          padding: 10px 20px;\\n        }\\n        .vaultpilot-mode-toggle {\\n          display: flex;\\n          flex-direction: column;\\n          gap: 5px;\\n        }\\n        .vaultpilot-mode-description {\\n          font-size: 0.9em;\\n          color: var(--text-muted);\\n        }\\n        .vaultpilot-mode-buttons {\\n          display: flex;\\n          gap: 10px;\\n        }\\n        .vaultpilot-mode-btn {\\n          flex: 1;\\n          padding: 8px;\\n          border: 1px solid var(--background-modifier-border);\\n          border-radius: 4px;\\n          background: var(--background-primary);\\n          color: var(--text-normal);\\n          cursor: pointer;\\n          text-align: center;\\n        }\\n        .vaultpilot-mode-btn.active {\\n          background: var(--accent-color);\\n          color: var(--background-primary);\\n          font-weight: bold;\\n        }\\n      `;\\n      document.head.appendChild(styleEl);\\n    }\\n  }\\n\\n  private createModeToggle() {\\n    this.modeToggleContainer.empty();\\n    \\n    // Mode description\\n    const modeDesc = this.modeToggleContainer.createEl('div', { \\n      cls: 'vaultpilot-mode-description',\\n      text: this.getModeDescription()\\n    });\\n    \\n    // Mode buttons\\n    const modeButtons = this.modeToggleContainer.createEl('div', { cls: 'vaultpilot-mode-buttons' });\\n    \\n    const askBtn = modeButtons.createEl('button', {\\n      text: 'Ask Mode',\\n      cls: `vaultpilot-mode-btn ${this.currentMode === 'ask' ? 'active' : ''}`\\n    });\\n    \\n    const agentBtn = modeButtons.createEl('button', {\\n      text: 'Agent Mode', \\n      cls: `vaultpilot-mode-btn ${this.currentMode === 'agent' ? 'active' : ''}`\\n    });\\n    \\n    askBtn.onclick = () => this.setMode('ask');\\n    agentBtn.onclick = () => this.setMode('agent');\\n  }\\n\\n  private setMode(mode: 'ask' | 'agent') {\\n    this.currentMode = mode;\\n    this.createModeToggle(); // Refresh the toggle UI\\n    if (this.inputEl) {\\n      this.inputEl.placeholder = this.getPlaceholderText();\\n    }\\n  }\\n\\n  private getPlaceholderText(): string {\\n    return this.currentMode === 'ask' \\n      ? 'Ask a question...'\\n      : 'Describe what you want to accomplish...';\\n  }\\n\\n  private getModeDescription(): string {\\n    return this.currentMode === 'ask'\\n      ? 'Simple Q&A mode for quick questions and explanations'\\n      : 'Complex workflow mode for structured tasks and automation';\\n  }\\n\\n  onClose() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n  }\\n}\\n\"]}"}
