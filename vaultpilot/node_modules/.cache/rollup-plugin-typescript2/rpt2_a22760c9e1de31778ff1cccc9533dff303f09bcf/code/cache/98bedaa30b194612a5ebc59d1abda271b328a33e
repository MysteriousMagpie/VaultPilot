{"code":"import { __awaiter } from \"tslib\";\nexport class EvoAgentXClient {\n    constructor(baseUrl, apiKey) {\n        this.wsCallbacks = new Map();\n        this.baseUrl = baseUrl.replace(/\\/$/, ''); // Remove trailing slash\n        this.apiKey = apiKey;\n    }\n    makeRequest(endpoint_1) {\n        return __awaiter(this, arguments, void 0, function* (endpoint, options = {}) {\n            const url = `${this.baseUrl}${endpoint}`;\n            const headers = Object.assign({ 'Content-Type': 'application/json', 'Accept': 'application/json' }, (options.headers || {}));\n            if (this.apiKey) {\n                headers['Authorization'] = `Bearer ${this.apiKey}`;\n            }\n            try {\n                const response = yield fetch(url, Object.assign(Object.assign({}, options), { headers, mode: 'cors', credentials: 'omit' }));\n                // Handle non-JSON responses gracefully\n                let data;\n                const contentType = response.headers.get('content-type');\n                if (contentType && contentType.includes('application/json')) {\n                    data = yield response.json();\n                }\n                else {\n                    data = yield response.text();\n                }\n                if (!response.ok) {\n                    const errorMessage = typeof data === 'object' && data.error\n                        ? data.error\n                        : `HTTP ${response.status}: ${response.statusText}`;\n                    console.error(`API Error [${response.status}]:`, errorMessage);\n                    return {\n                        success: false,\n                        error: errorMessage,\n                    };\n                }\n                return {\n                    success: true,\n                    data: typeof data === 'string' ? { message: data } : data,\n                };\n            }\n            catch (error) {\n                console.error('API Request Error:', error);\n                return {\n                    success: false,\n                    error: error instanceof Error ? error.message : 'Unknown error occurred',\n                };\n            }\n        });\n    }\n    // Health check\n    healthCheck() {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log(`VaultPilot: Attempting health check to ${this.baseUrl}/api/obsidian/health`);\n            const result = yield this.makeRequest('/api/obsidian/health', {\n                method: 'GET',\n            });\n            console.log('VaultPilot: Health check result:', result);\n            return result;\n        });\n    }\n    // Alternative health check method if the main one fails\n    simpleHealthCheck() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const url = `${this.baseUrl}/api/obsidian/health`;\n                const response = yield fetch(url, {\n                    method: 'HEAD',\n                    mode: 'cors',\n                    credentials: 'omit',\n                });\n                if (response.ok || response.status === 405) { // 405 means server is up but doesn't support HEAD\n                    return {\n                        success: true,\n                        data: { status: 'ok' }\n                    };\n                }\n                return {\n                    success: false,\n                    error: `Server responded with status ${response.status}`\n                };\n            }\n            catch (error) {\n                return {\n                    success: false,\n                    error: error instanceof Error ? error.message : 'Connection failed'\n                };\n            }\n        });\n    }\n    // Chat functionality\n    chat(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/chat', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    getConversationHistory(conversationId_1) {\n        return __awaiter(this, arguments, void 0, function* (conversationId, limit = 50) {\n            const requestBody = {\n                conversation_id: conversationId,\n                limit: limit,\n                include_messages: true\n            };\n            return this.makeRequest('/api/obsidian/conversation/history', {\n                method: 'POST',\n                body: JSON.stringify(requestBody),\n            });\n        });\n    }\n    deleteConversation(conversationId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest(`/api/obsidian/conversations/${conversationId}`, {\n                method: 'DELETE',\n            });\n        });\n    }\n    // Copilot functionality\n    getCopilotCompletion(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/copilot/complete', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Workflow execution\n    executeWorkflow(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/workflow', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Agent management\n    getAgents() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/agents');\n        });\n    }\n    createAgent(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/agents/create', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    executeAgent(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/agent/execute', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Vault analysis\n    analyzeVaultContext(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/vault/context', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Task planning\n    planTasks(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/planning/tasks', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Intelligence parsing\n    parseIntelligence(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/intelligence/parse', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Intent classification\n    classifyIntent(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.makeRequest('/api/obsidian/intelligence/parse', {\n                method: 'POST',\n                body: JSON.stringify({ message }),\n            });\n            if (response.success && response.data) {\n                return response.data;\n            }\n            // Fallback to 'ask' mode if classification fails\n            return { intent: 'ask', confidence: 0.5 };\n        });\n    }\n    // Optional: Debug intent classification\n    explainIntent(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const response = yield this.makeRequest('/api/obsidian/intelligence/parse', {\n                method: 'POST',\n                body: JSON.stringify({ message, include_debug: true }),\n            });\n            if (response.success && response.data) {\n                return response.data;\n            }\n            // Fallback debug info\n            return {\n                intent: 'ask',\n                confidence: 0.5,\n                reasoning: 'Classification failed, defaulting to ask mode'\n            };\n        });\n    }\n    // Memory management\n    updateMemory(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/memory/update', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // WebSocket functionality\n    connectWebSocket(callbacks) {\n        const wsUrl = this.baseUrl.replace('http', 'ws') + '/ws/obsidian';\n        console.log(`VaultPilot: Attempting WebSocket connection to ${wsUrl}`);\n        this.websocket = new WebSocket(wsUrl);\n        this.websocket.onopen = () => {\n            var _a;\n            console.log('VaultPilot: WebSocket connected to EvoAgentX');\n            (_a = callbacks.onConnect) === null || _a === void 0 ? void 0 : _a.call(callbacks);\n        };\n        this.websocket.onmessage = (event) => {\n            var _a, _b, _c, _d, _e, _f, _g;\n            try {\n                const message = JSON.parse(event.data);\n                console.log('VaultPilot: WebSocket message received:', message.type);\n                switch (message.type) {\n                    case 'chat':\n                        (_a = callbacks.onChat) === null || _a === void 0 ? void 0 : _a.call(callbacks, message.data);\n                        break;\n                    case 'workflow_progress':\n                        (_b = callbacks.onWorkflowProgress) === null || _b === void 0 ? void 0 : _b.call(callbacks, message.data);\n                        break;\n                    case 'copilot':\n                        (_c = callbacks.onCopilot) === null || _c === void 0 ? void 0 : _c.call(callbacks, message.data);\n                        break;\n                    case 'vault_sync':\n                        (_d = callbacks.onVaultSync) === null || _d === void 0 ? void 0 : _d.call(callbacks, message.data);\n                        break;\n                    case 'intent_debug':\n                        (_e = callbacks.onIntentDebug) === null || _e === void 0 ? void 0 : _e.call(callbacks, message.data);\n                        break;\n                    case 'error':\n                        (_f = callbacks.onError) === null || _f === void 0 ? void 0 : _f.call(callbacks, message.data);\n                        break;\n                }\n            }\n            catch (error) {\n                console.error('VaultPilot: Error parsing WebSocket message:', error);\n                (_g = callbacks.onError) === null || _g === void 0 ? void 0 : _g.call(callbacks, 'Failed to parse WebSocket message');\n            }\n        };\n        this.websocket.onclose = (event) => {\n            var _a;\n            console.log('VaultPilot: WebSocket disconnected from EvoAgentX', event.code, event.reason);\n            (_a = callbacks.onDisconnect) === null || _a === void 0 ? void 0 : _a.call(callbacks);\n        };\n        this.websocket.onerror = (error) => {\n            var _a;\n            console.error('VaultPilot: WebSocket error:', error);\n            (_a = callbacks.onError) === null || _a === void 0 ? void 0 : _a.call(callbacks, 'WebSocket connection error');\n        };\n    }\n    disconnectWebSocket() {\n        if (this.websocket) {\n            this.websocket.close();\n            this.websocket = undefined;\n        }\n    }\n    sendWebSocketMessage(type, data) {\n        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n            this.websocket.send(JSON.stringify({ type, data }));\n        }\n    }\n    isWebSocketConnected() {\n        var _a;\n        return ((_a = this.websocket) === null || _a === void 0 ? void 0 : _a.readyState) === WebSocket.OPEN;\n    }\n}\n//# sourceMappingURL=api-client.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types.ts"],"map":"{\"version\":3,\"file\":\"api-client.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/api-client.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { \\n  APIResponse, \\n  ChatRequest, \\n  ChatResponse, \\n  ConversationHistory,\\n  ConversationHistoryRequest,\\n  CopilotRequest, \\n  CopilotResponse,\\n  WorkflowRequest,\\n  WorkflowResponse,\\n  Agent,\\n  AgentCreateRequest,\\n  AgentExecuteRequest,\\n  VaultContextRequest,\\n  VaultContextResponse,\\n  TaskPlanningRequest,\\n  TaskPlanningResponse,\\n  IntelligenceParseRequest,\\n  IntelligenceParseResponse,\\n  MemoryUpdateRequest,\\n  WebSocketMessage,\\n  ErrorResponse,\\n  Intent,\\n  IntentResult,\\n  IntentDebug\\n} from './types';\\n\\nexport class EvoAgentXClient {\\n  private baseUrl: string;\\n  private apiKey?: string;\\n  private websocket?: WebSocket;\\n  private wsCallbacks: Map<string, (data: any) => void> = new Map();\\n\\n  constructor(baseUrl: string, apiKey?: string) {\\n    this.baseUrl = baseUrl.replace(/\\\\/$/, ''); // Remove trailing slash\\n    this.apiKey = apiKey;\\n  }\\n\\n  private async makeRequest<T>(\\n    endpoint: string, \\n    options: RequestInit = {}\\n  ): Promise<APIResponse<T>> {\\n    const url = `${this.baseUrl}${endpoint}`;\\n    const headers: Record<string, string> = {\\n      'Content-Type': 'application/json',\\n      'Accept': 'application/json',\\n      ...(options.headers as Record<string, string> || {}),\\n    };\\n\\n    if (this.apiKey) {\\n      headers['Authorization'] = `Bearer ${this.apiKey}`;\\n    }\\n\\n    try {\\n      const response = await fetch(url, {\\n        ...options,\\n        headers,\\n        mode: 'cors',\\n        credentials: 'omit',\\n      });\\n\\n      // Handle non-JSON responses gracefully\\n      let data;\\n      const contentType = response.headers.get('content-type');\\n      if (contentType && contentType.includes('application/json')) {\\n        data = await response.json();\\n      } else {\\n        data = await response.text();\\n      }\\n\\n      if (!response.ok) {\\n        const errorMessage = typeof data === 'object' && data.error \\n          ? data.error \\n          : `HTTP ${response.status}: ${response.statusText}`;\\n        \\n        console.error(`API Error [${response.status}]:`, errorMessage);\\n        return {\\n          success: false,\\n          error: errorMessage,\\n        };\\n      }\\n\\n      return {\\n        success: true,\\n        data: typeof data === 'string' ? { message: data } as T : data,\\n      };\\n    } catch (error) {\\n      console.error('API Request Error:', error);\\n      return {\\n        success: false,\\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\\n      };\\n    }\\n  }\\n\\n  // Health check\\n  async healthCheck(): Promise<APIResponse<{ status: string; version: string }>> {\\n    console.log(`VaultPilot: Attempting health check to ${this.baseUrl}/api/obsidian/health`);\\n    const result = await this.makeRequest<{ status: string; version: string }>('/api/obsidian/health', {\\n      method: 'GET',\\n    });\\n    console.log('VaultPilot: Health check result:', result);\\n    return result;\\n  }\\n\\n  // Alternative health check method if the main one fails\\n  async simpleHealthCheck(): Promise<APIResponse<{ status: string }>> {\\n    try {\\n      const url = `${this.baseUrl}/api/obsidian/health`;\\n      const response = await fetch(url, {\\n        method: 'HEAD',\\n        mode: 'cors',\\n        credentials: 'omit',\\n      });\\n      \\n      if (response.ok || response.status === 405) { // 405 means server is up but doesn't support HEAD\\n        return {\\n          success: true,\\n          data: { status: 'ok' }\\n        };\\n      }\\n      \\n      return {\\n        success: false,\\n        error: `Server responded with status ${response.status}`\\n      };\\n    } catch (error) {\\n      return {\\n        success: false,\\n        error: error instanceof Error ? error.message : 'Connection failed'\\n      };\\n    }\\n  }\\n\\n  // Chat functionality\\n  async chat(request: ChatRequest): Promise<APIResponse<ChatResponse>> {\\n    return this.makeRequest('/api/obsidian/chat', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  async getConversationHistory(conversationId: string, limit: number = 50): Promise<APIResponse<ConversationHistory>> {\\n    const requestBody: ConversationHistoryRequest = {\\n      conversation_id: conversationId,\\n      limit: limit,\\n      include_messages: true\\n    };\\n    \\n    return this.makeRequest('/api/obsidian/conversation/history', {\\n      method: 'POST',\\n      body: JSON.stringify(requestBody),\\n    });\\n  }\\n\\n  async deleteConversation(conversationId: string): Promise<APIResponse<void>> {\\n    return this.makeRequest(`/api/obsidian/conversations/${conversationId}`, {\\n      method: 'DELETE',\\n    });\\n  }\\n\\n  // Copilot functionality\\n  async getCopilotCompletion(request: CopilotRequest): Promise<APIResponse<CopilotResponse>> {\\n    return this.makeRequest('/api/obsidian/copilot/complete', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Workflow execution\\n  async executeWorkflow(request: WorkflowRequest): Promise<APIResponse<WorkflowResponse>> {\\n    return this.makeRequest('/api/obsidian/workflow', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Agent management\\n  async getAgents(): Promise<APIResponse<Agent[]>> {\\n    return this.makeRequest('/api/obsidian/agents');\\n  }\\n\\n  async createAgent(request: AgentCreateRequest): Promise<APIResponse<Agent>> {\\n    return this.makeRequest('/api/obsidian/agents/create', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  async executeAgent(request: AgentExecuteRequest): Promise<APIResponse<any>> {\\n    return this.makeRequest('/api/obsidian/agent/execute', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Vault analysis\\n  async analyzeVaultContext(request: VaultContextRequest): Promise<APIResponse<VaultContextResponse>> {\\n    return this.makeRequest('/api/obsidian/vault/context', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Task planning\\n  async planTasks(request: TaskPlanningRequest): Promise<APIResponse<TaskPlanningResponse>> {\\n    return this.makeRequest('/api/obsidian/planning/tasks', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Intelligence parsing\\n  async parseIntelligence(request: IntelligenceParseRequest): Promise<APIResponse<IntelligenceParseResponse>> {\\n    return this.makeRequest('/api/obsidian/intelligence/parse', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Intent classification\\n  async classifyIntent(message: string): Promise<IntentResult> {\\n    const response = await this.makeRequest<IntentResult>('/api/obsidian/intelligence/parse', {\\n      method: 'POST',\\n      body: JSON.stringify({ message }),\\n    });\\n    \\n    if (response.success && response.data) {\\n      return response.data;\\n    }\\n    \\n    // Fallback to 'ask' mode if classification fails\\n    return { intent: 'ask', confidence: 0.5 };\\n  }\\n\\n  // Optional: Debug intent classification\\n  async explainIntent(message: string): Promise<IntentDebug> {\\n    const response = await this.makeRequest<IntentDebug>('/api/obsidian/intelligence/parse', {\\n      method: 'POST',\\n      body: JSON.stringify({ message, include_debug: true }),\\n    });\\n    \\n    if (response.success && response.data) {\\n      return response.data;\\n    }\\n    \\n    // Fallback debug info\\n    return { \\n      intent: 'ask', \\n      confidence: 0.5, \\n      reasoning: 'Classification failed, defaulting to ask mode' \\n    };\\n  }\\n\\n  // Memory management\\n  async updateMemory(request: MemoryUpdateRequest): Promise<APIResponse<void>> {\\n    return this.makeRequest('/api/obsidian/memory/update', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // WebSocket functionality\\n  connectWebSocket(callbacks: {\\n    onChat?: (data: any) => void;\\n    onWorkflowProgress?: (data: any) => void;\\n    onCopilot?: (data: any) => void;\\n    onVaultSync?: (data: any) => void;\\n    onIntentDebug?: (debug: IntentDebug) => void;\\n    onError?: (error: string) => void;\\n    onConnect?: () => void;\\n    onDisconnect?: () => void;\\n  }): void {\\n    const wsUrl = this.baseUrl.replace('http', 'ws') + '/ws/obsidian';\\n    console.log(`VaultPilot: Attempting WebSocket connection to ${wsUrl}`);\\n    \\n    this.websocket = new WebSocket(wsUrl);\\n\\n    this.websocket.onopen = () => {\\n      console.log('VaultPilot: WebSocket connected to EvoAgentX');\\n      callbacks.onConnect?.();\\n    };\\n\\n    this.websocket.onmessage = (event) => {\\n      try {\\n        const message: WebSocketMessage = JSON.parse(event.data);\\n        console.log('VaultPilot: WebSocket message received:', message.type);\\n        \\n        switch (message.type) {\\n          case 'chat':\\n            callbacks.onChat?.(message.data);\\n            break;\\n          case 'workflow_progress':\\n            callbacks.onWorkflowProgress?.(message.data);\\n            break;\\n          case 'copilot':\\n            callbacks.onCopilot?.(message.data);\\n            break;\\n          case 'vault_sync':\\n            callbacks.onVaultSync?.(message.data);\\n            break;\\n          case 'intent_debug':\\n            callbacks.onIntentDebug?.(message.data);\\n            break;\\n          case 'error':\\n            callbacks.onError?.(message.data);\\n            break;\\n        }\\n      } catch (error) {\\n        console.error('VaultPilot: Error parsing WebSocket message:', error);\\n        callbacks.onError?.('Failed to parse WebSocket message');\\n      }\\n    };\\n\\n    this.websocket.onclose = (event) => {\\n      console.log('VaultPilot: WebSocket disconnected from EvoAgentX', event.code, event.reason);\\n      callbacks.onDisconnect?.();\\n    };\\n\\n    this.websocket.onerror = (error) => {\\n      console.error('VaultPilot: WebSocket error:', error);\\n      callbacks.onError?.('WebSocket connection error');\\n    };\\n  }\\n\\n  disconnectWebSocket(): void {\\n    if (this.websocket) {\\n      this.websocket.close();\\n      this.websocket = undefined;\\n    }\\n  }\\n\\n  sendWebSocketMessage(type: string, data: any): void {\\n    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\\n      this.websocket.send(JSON.stringify({ type, data }));\\n    }\\n  }\\n\\n  isWebSocketConnected(): boolean {\\n    return this.websocket?.readyState === WebSocket.OPEN;\\n  }\\n}\\n\"]}"}
