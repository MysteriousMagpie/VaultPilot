{"code":"import { __awaiter } from \"tslib\";\nimport { Plugin, Notice, MarkdownView } from 'obsidian';\nimport { VaultPilotSettingTab, DEFAULT_SETTINGS } from './settings';\nimport { VIEW_TYPE_VAULTPILOT, VaultPilotView } from './view';\nimport { ChatModal } from './chat-modal';\nimport { WorkflowModal } from './workflow-modal';\nimport { EvoAgentXClient } from './api-client';\nimport { fetchSchedule, injectSchedule, validateScheduleMarkdown } from './planner';\nexport default class VaultPilotPlugin extends Plugin {\n    constructor() {\n        super(...arguments);\n        this.websocketConnected = false;\n        this.copilotEnabled = false;\n    }\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            yield this.loadSettings();\n            // Initialize API client\n            this.apiClient = new EvoAgentXClient(this.settings.backendUrl, this.settings.apiKey);\n            // Test backend connection\n            try {\n                let response = yield this.apiClient.healthCheck();\n                // If the main health check fails with a 400, try the simple check\n                if (!response.success && ((_a = response.error) === null || _a === void 0 ? void 0 : _a.includes('400'))) {\n                    console.warn('Main health check failed with 400, trying alternative method');\n                    const simpleResponse = yield this.apiClient.simpleHealthCheck();\n                    if (simpleResponse.success && simpleResponse.data) {\n                        response = {\n                            success: true,\n                            data: { status: simpleResponse.data.status, version: 'unknown' }\n                        };\n                    }\n                }\n                if (response.success) {\n                    new Notice('✅ VaultPilot connected to EvoAgentX', 3000);\n                    // Connect WebSocket if enabled\n                    if (this.settings.enableWebSocket) {\n                        this.connectWebSocket();\n                    }\n                }\n                else {\n                    console.error('Health check failed:', response.error);\n                    new Notice('⚠️ EvoAgentX backend offline - some features may not work', 5000);\n                }\n            }\n            catch (error) {\n                console.error('Health check error:', error);\n                new Notice('⚠️ Cannot connect to EvoAgentX backend', 5000);\n            }\n            // Register view\n            this.registerView(VIEW_TYPE_VAULTPILOT, (leaf) => new VaultPilotView(leaf, this));\n            // Add ribbon icon\n            const ribbonIconEl = this.addRibbonIcon('bot', 'VaultPilot', (evt) => {\n                this.openChatModal();\n            });\n            ribbonIconEl.addClass('vaultpilot-ribbon-class');\n            // Register commands\n            this.addCommand({\n                id: 'open-chat',\n                name: 'Open Chat',\n                callback: () => this.openChatModal()\n            });\n            this.addCommand({\n                id: 'execute-workflow',\n                name: 'Execute Workflow',\n                callback: () => this.openWorkflowModal()\n            });\n            this.addCommand({\n                id: 'analyze-vault',\n                name: 'Analyze Current Vault',\n                callback: () => this.analyzeVault()\n            });\n            this.addCommand({\n                id: 'copilot-complete',\n                name: 'Get AI Completion',\n                editorCallback: (editor) => this.getCopilotCompletion(editor)\n            });\n            this.addCommand({\n                id: 'quick-chat',\n                name: 'Quick Chat with Selection',\n                editorCallback: (editor) => this.quickChatWithSelection(editor)\n            });\n            this.addCommand({\n                id: 'plan-tasks',\n                name: 'Plan Tasks from Note',\n                editorCallback: (editor) => this.planTasksFromNote(editor)\n            });\n            this.addCommand({\n                id: 'plan-my-day',\n                name: 'Plan My Day',\n                callback: () => this.planMyDay()\n            });\n            this.addCommand({\n                id: 'open-vaultpilot-view',\n                name: 'Open VaultPilot View',\n                callback: () => this.activateView()\n            });\n            // Register editor events for copilot\n            if (this.settings.enableCopilot && this.settings.enableAutoComplete) {\n                this.registerDomEvent(document, 'keyup', this.handleKeyUp.bind(this));\n            }\n            // Add settings tab\n            this.addSettingTab(new VaultPilotSettingTab(this.app, this));\n        });\n    }\n    onunload() {\n        this.app.workspace.detachLeavesOfType(VIEW_TYPE_VAULTPILOT);\n        this.disconnectWebSocket();\n    }\n    // WebSocket Management\n    connectWebSocket() {\n        if (this.websocketConnected)\n            return;\n        this.apiClient.connectWebSocket({\n            onChat: (data) => {\n                // Handle real-time chat updates\n                console.log('WebSocket chat update:', data);\n            },\n            onWorkflowProgress: (data) => {\n                // Handle workflow progress updates\n                new Notice(`Workflow: ${data.step}`, 2000);\n            },\n            onCopilot: (data) => {\n                // Handle copilot suggestions\n                this.handleCopilotSuggestion(data);\n            },\n            onVaultSync: (data) => {\n                // Handle vault synchronization\n                console.log('Vault sync update:', data);\n            },\n            onError: (error) => {\n                new Notice(`WebSocket error: ${error}`, 5000);\n            },\n            onConnect: () => {\n                this.websocketConnected = true;\n                if (this.settings.debugMode) {\n                    new Notice('WebSocket connected', 2000);\n                }\n            },\n            onDisconnect: () => {\n                this.websocketConnected = false;\n                if (this.settings.debugMode) {\n                    new Notice('WebSocket disconnected', 2000);\n                }\n            }\n        });\n    }\n    disconnectWebSocket() {\n        this.apiClient.disconnectWebSocket();\n        this.websocketConnected = false;\n    }\n    isWebSocketConnected() {\n        return this.websocketConnected;\n    }\n    // Modal Management\n    openChatModal() {\n        new ChatModal(this.app, this).open();\n    }\n    openWorkflowModal() {\n        new WorkflowModal(this.app, this).open();\n    }\n    // Command Implementations\n    analyzeVault() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const notice = new Notice('Analyzing vault...', 0);\n            try {\n                // Get all markdown files\n                const files = this.app.vault.getMarkdownFiles();\n                let content = '';\n                // Include up to 10 files to avoid overwhelming the API\n                for (const file of files.slice(0, 10)) {\n                    const fileContent = yield this.app.vault.read(file);\n                    content += `=== ${file.name} ===\\n${fileContent}\\n\\n`;\n                }\n                const response = yield this.apiClient.analyzeVaultContext({\n                    content,\n                    analysis_type: 'insights'\n                });\n                notice.hide();\n                if (response.success && response.data) {\n                    // Create analysis note\n                    const timestamp = new Date().toISOString().split('T')[0];\n                    const filename = `Vault Analysis ${timestamp}.md`;\n                    let analysisContent = `# Vault Analysis - ${timestamp}\\n\\n`;\n                    analysisContent += `## Analysis\\n\\n${response.data.analysis}\\n\\n`;\n                    if (response.data.insights && response.data.insights.length > 0) {\n                        analysisContent += `## Key Insights\\n\\n`;\n                        response.data.insights.forEach(insight => {\n                            analysisContent += `- ${insight}\\n`;\n                        });\n                        analysisContent += '\\n';\n                    }\n                    if (response.data.recommendations && response.data.recommendations.length > 0) {\n                        analysisContent += `## Recommendations\\n\\n`;\n                        response.data.recommendations.forEach(rec => {\n                            analysisContent += `- ${rec}\\n`;\n                        });\n                    }\n                    yield this.app.vault.create(filename, analysisContent);\n                    new Notice(`Vault analysis saved as ${filename}`);\n                }\n                else {\n                    throw new Error(response.error || 'Analysis failed');\n                }\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`Analysis error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    getCopilotCompletion(editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.settings.enableCopilot) {\n                new Notice('Copilot is disabled in settings');\n                return;\n            }\n            const cursor = editor.getCursor();\n            const currentLine = editor.getLine(cursor.line);\n            const textBeforeCursor = currentLine.substring(0, cursor.ch);\n            const fullText = editor.getValue();\n            try {\n                const response = yield this.apiClient.getCopilotCompletion({\n                    text: fullText,\n                    cursor_position: editor.posToOffset(cursor),\n                    file_type: 'markdown',\n                    context: textBeforeCursor\n                });\n                if (response.success && response.data) {\n                    // Insert completion at cursor\n                    editor.replaceRange(response.data.completion, cursor);\n                    new Notice('Completion inserted', 2000);\n                }\n                else {\n                    new Notice(`Copilot error: ${response.error}`);\n                }\n            }\n            catch (error) {\n                new Notice(`Copilot error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    quickChatWithSelection(editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const selection = editor.getSelection();\n            if (!selection) {\n                new Notice('No text selected');\n                return;\n            }\n            try {\n                const response = yield this.apiClient.chat({\n                    message: `Please explain or analyze this text: \"${selection}\"`,\n                    vault_context: editor.getValue()\n                });\n                if (response.success && response.data) {\n                    // Insert response below selection\n                    const cursor = editor.getCursor('to');\n                    const newLine = `\\n\\n**VaultPilot Analysis:**\\n${response.data.response}\\n\\n`;\n                    editor.replaceRange(newLine, cursor);\n                    new Notice('Analysis inserted', 2000);\n                }\n                else {\n                    new Notice(`Chat error: ${response.error}`);\n                }\n            }\n            catch (error) {\n                new Notice(`Chat error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    planTasksFromNote(editor) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const content = editor.getValue();\n            const activeFile = this.app.workspace.getActiveFile();\n            if (!content.trim()) {\n                new Notice('No content to analyze');\n                return;\n            }\n            const notice = new Notice('Planning tasks...', 0);\n            try {\n                const response = yield this.apiClient.planTasks({\n                    goal: `Create a task plan based on this note: ${(activeFile === null || activeFile === void 0 ? void 0 : activeFile.name) || 'Untitled'}`,\n                    context: content,\n                    timeframe: '1 week'\n                });\n                notice.hide();\n                if (response.success && response.data) {\n                    // Create task plan note\n                    const timestamp = new Date().toISOString().split('T')[0];\n                    const filename = `Task Plan - ${(activeFile === null || activeFile === void 0 ? void 0 : activeFile.basename) || 'Untitled'} - ${timestamp}.md`;\n                    let taskContent = `# ${response.data.plan.title}\\n\\n`;\n                    taskContent += `${response.data.plan.description}\\n\\n`;\n                    taskContent += `**Estimated Duration:** ${response.data.plan.estimated_duration}\\n\\n`;\n                    if (response.data.plan.tasks && response.data.plan.tasks.length > 0) {\n                        taskContent += `## Tasks\\n\\n`;\n                        response.data.plan.tasks.forEach((task) => {\n                            const checkbox = task.status === 'completed' ? '[x]' : '[ ]';\n                            taskContent += `${checkbox} **${task.title}** (${task.priority} priority)\\n`;\n                            taskContent += `   ${task.description}\\n`;\n                            taskContent += `   *Estimated time: ${task.estimated_time}*\\n\\n`;\n                        });\n                    }\n                    if (response.data.milestones && response.data.milestones.length > 0) {\n                        taskContent += `## Milestones\\n\\n`;\n                        response.data.milestones.forEach((milestone) => {\n                            taskContent += `- **${milestone.title}** (${milestone.target_date})\\n`;\n                            taskContent += `  ${milestone.description}\\n\\n`;\n                        });\n                    }\n                    yield this.app.vault.create(filename, taskContent);\n                    new Notice(`Task plan saved as ${filename}`);\n                }\n                else {\n                    throw new Error(response.error || 'Task planning failed');\n                }\n            }\n            catch (error) {\n                notice.hide();\n                new Notice(`Task planning error: ${error instanceof Error ? error.message : 'Unknown error'}`);\n            }\n        });\n    }\n    planMyDay() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const activeFile = this.app.workspace.getActiveFile();\n            if (!activeFile) {\n                new Notice('No active note—open today\\'s daily note first.');\n                return;\n            }\n            const notice = new Notice('Planning your day...', 0);\n            try {\n                // Read the entire file content\n                const fileText = yield this.app.vault.read(activeFile);\n                // Fetch schedule from API\n                const { scheduleMarkdown, headline } = yield fetchSchedule(fileText);\n                // Validate the returned schedule\n                if (!validateScheduleMarkdown(scheduleMarkdown)) {\n                    throw new Error('Invalid schedule data received from API');\n                }\n                // Inject the schedule into the note\n                const updatedText = injectSchedule(fileText, scheduleMarkdown);\n                // Update the file\n                yield this.app.vault.modify(activeFile, updatedText);\n                // Hide the progress notice\n                notice.hide();\n                // Show success notice\n                const successMessage = headline ? `${headline} ✅` : 'Schedule inserted ✅';\n                new Notice(successMessage);\n            }\n            catch (error) {\n                notice.hide();\n                // Handle different types of errors\n                if (error instanceof Error) {\n                    if (error.message.includes('JSON')) {\n                        new Notice('Planner API error: Invalid response format');\n                    }\n                    else if (error.message.includes('fetch') || error.message.includes('network')) {\n                        new Notice('Planner API error: Unable to connect to localhost:3000');\n                    }\n                    else {\n                        new Notice(`Planner API error: ${error.message}`);\n                    }\n                }\n                else {\n                    new Notice('Planner API error: Unknown error occurred');\n                }\n            }\n        });\n    }\n    activateView() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_VAULTPILOT);\n            if (leaves.length === 0) {\n                const rightLeaf = this.app.workspace.getRightLeaf(false);\n                if (rightLeaf) {\n                    yield rightLeaf.setViewState({\n                        type: VIEW_TYPE_VAULTPILOT,\n                        active: true\n                    });\n                }\n            }\n            else {\n                this.app.workspace.revealLeaf(leaves[0]);\n            }\n        });\n    }\n    // Auto-completion handling\n    handleKeyUp(event) {\n        if (!this.settings.enableAutoComplete || !this.settings.enableCopilot)\n            return;\n        const target = event.target;\n        if (!target.classList.contains('cm-content'))\n            return;\n        // Debounce auto-completion requests\n        clearTimeout(this.autoCompleteTimeout);\n        this.autoCompleteTimeout = setTimeout(() => {\n            this.triggerAutoCompletion();\n        }, 1000);\n    }\n    triggerAutoCompletion() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);\n            if (!activeView)\n                return;\n            const editor = activeView.editor;\n            const cursor = editor.getCursor();\n            const currentLine = editor.getLine(cursor.line);\n            // Only trigger if line has some content and cursor is at end\n            if (currentLine.trim().length < 3 || cursor.ch !== currentLine.length)\n                return;\n            try {\n                const response = yield this.apiClient.getCopilotCompletion({\n                    text: editor.getValue(),\n                    cursor_position: editor.posToOffset(cursor),\n                    file_type: 'markdown'\n                });\n                if (response.success && response.data && response.data.suggestions.length > 0) {\n                    // Show suggestions (for now just show first suggestion)\n                    if (this.settings.debugMode) {\n                        new Notice(`Suggestion: ${response.data.suggestions[0]}`, 3000);\n                    }\n                }\n            }\n            catch (error) {\n                // Silently fail for auto-completion\n                if (this.settings.debugMode) {\n                    console.error('Auto-completion error:', error);\n                }\n            }\n        });\n    }\n    handleCopilotSuggestion(data) {\n        // Handle real-time copilot suggestions from WebSocket\n        if (this.settings.debugMode) {\n            new Notice(`Live suggestion: ${data.completion}`, 2000);\n        }\n    }\n    // Settings management\n    loadSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());\n        });\n    }\n    saveSettings() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.saveData(this.settings);\n            // Update API client if URL changed\n            this.apiClient = new EvoAgentXClient(this.settings.backendUrl, this.settings.apiKey);\n            // Reconnect WebSocket if settings changed\n            if (this.settings.enableWebSocket && !this.websocketConnected) {\n                this.connectWebSocket();\n            }\n            else if (!this.settings.enableWebSocket && this.websocketConnected) {\n                this.disconnectWebSocket();\n            }\n        });\n    }\n}\n//# sourceMappingURL=main.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/settings.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/view.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/chat-modal.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/workflow-modal.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/api-client.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/planner.ts"],"map":"{\"version\":3,\"file\":\"main.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/main.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { Plugin, Notice, Editor, MarkdownView, TFile, EditorPosition, request } from 'obsidian';\\nimport { VaultPilotSettingTab, DEFAULT_SETTINGS } from './settings';\\nimport { VIEW_TYPE_VAULTPILOT, VaultPilotView } from './view';\\nimport { ChatModal } from './chat-modal';\\nimport { WorkflowModal } from './workflow-modal';\\nimport { EvoAgentXClient } from './api-client';\\nimport { VaultPilotSettings, CopilotResponse } from './types';\\nimport { fetchSchedule, injectSchedule, validateScheduleMarkdown } from './planner';\\n\\nexport default class VaultPilotPlugin extends Plugin {\\n  settings!: VaultPilotSettings;\\n  apiClient!: EvoAgentXClient;\\n  private websocketConnected = false;\\n  private copilotEnabled = false;\\n\\n  async onload() {\\n    await this.loadSettings();\\n\\n    // Initialize API client\\n    this.apiClient = new EvoAgentXClient(this.settings.backendUrl, this.settings.apiKey);\\n\\n    // Test backend connection\\n    try {\\n      let response = await this.apiClient.healthCheck();\\n      \\n      // If the main health check fails with a 400, try the simple check\\n      if (!response.success && response.error?.includes('400')) {\\n        console.warn('Main health check failed with 400, trying alternative method');\\n        const simpleResponse = await this.apiClient.simpleHealthCheck();\\n        if (simpleResponse.success && simpleResponse.data) {\\n          response = {\\n            success: true,\\n            data: { status: simpleResponse.data.status, version: 'unknown' }\\n          };\\n        }\\n      }\\n      \\n      if (response.success) {\\n        new Notice('✅ VaultPilot connected to EvoAgentX', 3000);\\n        // Connect WebSocket if enabled\\n        if (this.settings.enableWebSocket) {\\n          this.connectWebSocket();\\n        }\\n      } else {\\n        console.error('Health check failed:', response.error);\\n        new Notice('⚠️ EvoAgentX backend offline - some features may not work', 5000);\\n      }\\n    } catch (error) {\\n      console.error('Health check error:', error);\\n      new Notice('⚠️ Cannot connect to EvoAgentX backend', 5000);\\n    }\\n\\n    // Register view\\n    this.registerView(\\n      VIEW_TYPE_VAULTPILOT,\\n      (leaf) => new VaultPilotView(leaf, this)\\n    );\\n\\n    // Add ribbon icon\\n    const ribbonIconEl = this.addRibbonIcon('bot', 'VaultPilot', (evt: MouseEvent) => {\\n      this.openChatModal();\\n    });\\n    ribbonIconEl.addClass('vaultpilot-ribbon-class');\\n\\n    // Register commands\\n    this.addCommand({\\n      id: 'open-chat',\\n      name: 'Open Chat',\\n      callback: () => this.openChatModal()\\n    });\\n\\n    this.addCommand({\\n      id: 'execute-workflow',\\n      name: 'Execute Workflow',\\n      callback: () => this.openWorkflowModal()\\n    });\\n\\n    this.addCommand({\\n      id: 'analyze-vault',\\n      name: 'Analyze Current Vault',\\n      callback: () => this.analyzeVault()\\n    });\\n\\n    this.addCommand({\\n      id: 'copilot-complete',\\n      name: 'Get AI Completion',\\n      editorCallback: (editor: Editor) => this.getCopilotCompletion(editor)\\n    });\\n\\n    this.addCommand({\\n      id: 'quick-chat',\\n      name: 'Quick Chat with Selection',\\n      editorCallback: (editor: Editor) => this.quickChatWithSelection(editor)\\n    });\\n\\n    this.addCommand({\\n      id: 'plan-tasks',\\n      name: 'Plan Tasks from Note',\\n      editorCallback: (editor: Editor) => this.planTasksFromNote(editor)\\n    });\\n\\n    this.addCommand({\\n      id: 'plan-my-day',\\n      name: 'Plan My Day',\\n      callback: () => this.planMyDay()\\n    });\\n\\n    this.addCommand({\\n      id: 'open-vaultpilot-view',\\n      name: 'Open VaultPilot View',\\n      callback: () => this.activateView()\\n    });\\n\\n    // Register editor events for copilot\\n    if (this.settings.enableCopilot && this.settings.enableAutoComplete) {\\n      this.registerDomEvent(document, 'keyup', this.handleKeyUp.bind(this));\\n    }\\n\\n    // Add settings tab\\n    this.addSettingTab(new VaultPilotSettingTab(this.app, this));\\n  }\\n\\n  onunload() {\\n    this.app.workspace.detachLeavesOfType(VIEW_TYPE_VAULTPILOT);\\n    this.disconnectWebSocket();\\n  }\\n\\n  // WebSocket Management\\n  connectWebSocket() {\\n    if (this.websocketConnected) return;\\n\\n    this.apiClient.connectWebSocket({\\n      onChat: (data) => {\\n        // Handle real-time chat updates\\n        console.log('WebSocket chat update:', data);\\n      },\\n      onWorkflowProgress: (data) => {\\n        // Handle workflow progress updates\\n        new Notice(`Workflow: ${data.step}`, 2000);\\n      },\\n      onCopilot: (data) => {\\n        // Handle copilot suggestions\\n        this.handleCopilotSuggestion(data);\\n      },\\n      onVaultSync: (data) => {\\n        // Handle vault synchronization\\n        console.log('Vault sync update:', data);\\n      },\\n      onError: (error) => {\\n        new Notice(`WebSocket error: ${error}`, 5000);\\n      },\\n      onConnect: () => {\\n        this.websocketConnected = true;\\n        if (this.settings.debugMode) {\\n          new Notice('WebSocket connected', 2000);\\n        }\\n      },\\n      onDisconnect: () => {\\n        this.websocketConnected = false;\\n        if (this.settings.debugMode) {\\n          new Notice('WebSocket disconnected', 2000);\\n        }\\n      }\\n    });\\n  }\\n\\n  disconnectWebSocket() {\\n    this.apiClient.disconnectWebSocket();\\n    this.websocketConnected = false;\\n  }\\n\\n  isWebSocketConnected(): boolean {\\n    return this.websocketConnected;\\n  }\\n\\n  // Modal Management\\n  openChatModal() {\\n    new ChatModal(this.app, this).open();\\n  }\\n\\n  openWorkflowModal() {\\n    new WorkflowModal(this.app, this).open();\\n  }\\n\\n  // Command Implementations\\n  async analyzeVault() {\\n    const notice = new Notice('Analyzing vault...', 0);\\n    \\n    try {\\n      // Get all markdown files\\n      const files = this.app.vault.getMarkdownFiles();\\n      let content = '';\\n      \\n      // Include up to 10 files to avoid overwhelming the API\\n      for (const file of files.slice(0, 10)) {\\n        const fileContent = await this.app.vault.read(file);\\n        content += `=== ${file.name} ===\\\\n${fileContent}\\\\n\\\\n`;\\n      }\\n\\n      const response = await this.apiClient.analyzeVaultContext({\\n        content,\\n        analysis_type: 'insights'\\n      });\\n\\n      notice.hide();\\n\\n      if (response.success && response.data) {\\n        // Create analysis note\\n        const timestamp = new Date().toISOString().split('T')[0];\\n        const filename = `Vault Analysis ${timestamp}.md`;\\n        \\n        let analysisContent = `# Vault Analysis - ${timestamp}\\\\n\\\\n`;\\n        analysisContent += `## Analysis\\\\n\\\\n${response.data.analysis}\\\\n\\\\n`;\\n        \\n        if (response.data.insights && response.data.insights.length > 0) {\\n          analysisContent += `## Key Insights\\\\n\\\\n`;\\n          response.data.insights.forEach(insight => {\\n            analysisContent += `- ${insight}\\\\n`;\\n          });\\n          analysisContent += '\\\\n';\\n        }\\n\\n        if (response.data.recommendations && response.data.recommendations.length > 0) {\\n          analysisContent += `## Recommendations\\\\n\\\\n`;\\n          response.data.recommendations.forEach(rec => {\\n            analysisContent += `- ${rec}\\\\n`;\\n          });\\n        }\\n\\n        await this.app.vault.create(filename, analysisContent);\\n        new Notice(`Vault analysis saved as ${filename}`);\\n      } else {\\n        throw new Error(response.error || 'Analysis failed');\\n      }\\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`Analysis error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  async getCopilotCompletion(editor: Editor) {\\n    if (!this.settings.enableCopilot) {\\n      new Notice('Copilot is disabled in settings');\\n      return;\\n    }\\n\\n    const cursor = editor.getCursor();\\n    const currentLine = editor.getLine(cursor.line);\\n    const textBeforeCursor = currentLine.substring(0, cursor.ch);\\n    const fullText = editor.getValue();\\n\\n    try {\\n      const response = await this.apiClient.getCopilotCompletion({\\n        text: fullText,\\n        cursor_position: editor.posToOffset(cursor),\\n        file_type: 'markdown',\\n        context: textBeforeCursor\\n      });\\n\\n      if (response.success && response.data) {\\n        // Insert completion at cursor\\n        editor.replaceRange(response.data.completion, cursor);\\n        new Notice('Completion inserted', 2000);\\n      } else {\\n        new Notice(`Copilot error: ${response.error}`);\\n      }\\n    } catch (error) {\\n      new Notice(`Copilot error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  async quickChatWithSelection(editor: Editor) {\\n    const selection = editor.getSelection();\\n    if (!selection) {\\n      new Notice('No text selected');\\n      return;\\n    }\\n\\n    try {\\n      const response = await this.apiClient.chat({\\n        message: `Please explain or analyze this text: \\\"${selection}\\\"`,\\n        vault_context: editor.getValue()\\n      });\\n\\n      if (response.success && response.data) {\\n        // Insert response below selection\\n        const cursor = editor.getCursor('to');\\n        const newLine = `\\\\n\\\\n**VaultPilot Analysis:**\\\\n${response.data.response}\\\\n\\\\n`;\\n        editor.replaceRange(newLine, cursor);\\n        new Notice('Analysis inserted', 2000);\\n      } else {\\n        new Notice(`Chat error: ${response.error}`);\\n      }\\n    } catch (error) {\\n      new Notice(`Chat error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  async planTasksFromNote(editor: Editor) {\\n    const content = editor.getValue();\\n    const activeFile = this.app.workspace.getActiveFile();\\n    \\n    if (!content.trim()) {\\n      new Notice('No content to analyze');\\n      return;\\n    }\\n\\n    const notice = new Notice('Planning tasks...', 0);\\n\\n    try {\\n      const response = await this.apiClient.planTasks({\\n        goal: `Create a task plan based on this note: ${activeFile?.name || 'Untitled'}`,\\n        context: content,\\n        timeframe: '1 week'\\n      });\\n\\n      notice.hide();\\n\\n      if (response.success && response.data) {\\n        // Create task plan note\\n        const timestamp = new Date().toISOString().split('T')[0];\\n        const filename = `Task Plan - ${activeFile?.basename || 'Untitled'} - ${timestamp}.md`;\\n        \\n        let taskContent = `# ${response.data.plan.title}\\\\n\\\\n`;\\n        taskContent += `${response.data.plan.description}\\\\n\\\\n`;\\n        taskContent += `**Estimated Duration:** ${response.data.plan.estimated_duration}\\\\n\\\\n`;\\n        \\n        if (response.data.plan.tasks && response.data.plan.tasks.length > 0) {\\n          taskContent += `## Tasks\\\\n\\\\n`;\\n          response.data.plan.tasks.forEach((task: any) => {\\n            const checkbox = task.status === 'completed' ? '[x]' : '[ ]';\\n            taskContent += `${checkbox} **${task.title}** (${task.priority} priority)\\\\n`;\\n            taskContent += `   ${task.description}\\\\n`;\\n            taskContent += `   *Estimated time: ${task.estimated_time}*\\\\n\\\\n`;\\n          });\\n        }\\n\\n        if (response.data.milestones && response.data.milestones.length > 0) {\\n          taskContent += `## Milestones\\\\n\\\\n`;\\n          response.data.milestones.forEach((milestone: any) => {\\n            taskContent += `- **${milestone.title}** (${milestone.target_date})\\\\n`;\\n            taskContent += `  ${milestone.description}\\\\n\\\\n`;\\n          });\\n        }\\n\\n        await this.app.vault.create(filename, taskContent);\\n        new Notice(`Task plan saved as ${filename}`);\\n      } else {\\n        throw new Error(response.error || 'Task planning failed');\\n      }\\n    } catch (error) {\\n      notice.hide();\\n      new Notice(`Task planning error: ${error instanceof Error ? error.message : 'Unknown error'}`);\\n    }\\n  }\\n\\n  async planMyDay() {\\n    const activeFile = this.app.workspace.getActiveFile();\\n    \\n    if (!activeFile) {\\n      new Notice('No active note—open today\\\\'s daily note first.');\\n      return;\\n    }\\n\\n    const notice = new Notice('Planning your day...', 0);\\n\\n    try {\\n      // Read the entire file content\\n      const fileText = await this.app.vault.read(activeFile);\\n      \\n      // Fetch schedule from API\\n      const { scheduleMarkdown, headline } = await fetchSchedule(fileText);\\n\\n      // Validate the returned schedule\\n      if (!validateScheduleMarkdown(scheduleMarkdown)) {\\n        throw new Error('Invalid schedule data received from API');\\n      }\\n\\n      // Inject the schedule into the note\\n      const updatedText = injectSchedule(fileText, scheduleMarkdown);\\n\\n      // Update the file\\n      await this.app.vault.modify(activeFile, updatedText);\\n\\n      // Hide the progress notice\\n      notice.hide();\\n\\n      // Show success notice\\n      const successMessage = headline ? `${headline} ✅` : 'Schedule inserted ✅';\\n      new Notice(successMessage);\\n\\n    } catch (error) {\\n      notice.hide();\\n      \\n      // Handle different types of errors\\n      if (error instanceof Error) {\\n        if (error.message.includes('JSON')) {\\n          new Notice('Planner API error: Invalid response format');\\n        } else if (error.message.includes('fetch') || error.message.includes('network')) {\\n          new Notice('Planner API error: Unable to connect to localhost:3000');\\n        } else {\\n          new Notice(`Planner API error: ${error.message}`);\\n        }\\n      } else {\\n        new Notice('Planner API error: Unknown error occurred');\\n      }\\n    }\\n  }\\n\\n  async activateView() {\\n    const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_VAULTPILOT);\\n    if (leaves.length === 0) {\\n      const rightLeaf = this.app.workspace.getRightLeaf(false);\\n      if (rightLeaf) {\\n        await rightLeaf.setViewState({\\n          type: VIEW_TYPE_VAULTPILOT,\\n          active: true\\n        });\\n      }\\n    } else {\\n      this.app.workspace.revealLeaf(leaves[0]);\\n    }\\n  }\\n\\n  // Auto-completion handling\\n  private handleKeyUp(event: KeyboardEvent) {\\n    if (!this.settings.enableAutoComplete || !this.settings.enableCopilot) return;\\n    \\n    const target = event.target as HTMLElement;\\n    if (!target.classList.contains('cm-content')) return;\\n\\n    // Debounce auto-completion requests\\n    clearTimeout((this as any).autoCompleteTimeout);\\n    (this as any).autoCompleteTimeout = setTimeout(() => {\\n      this.triggerAutoCompletion();\\n    }, 1000);\\n  }\\n\\n  private async triggerAutoCompletion() {\\n    const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);\\n    if (!activeView) return;\\n\\n    const editor = activeView.editor;\\n    const cursor = editor.getCursor();\\n    const currentLine = editor.getLine(cursor.line);\\n    \\n    // Only trigger if line has some content and cursor is at end\\n    if (currentLine.trim().length < 3 || cursor.ch !== currentLine.length) return;\\n\\n    try {\\n      const response = await this.apiClient.getCopilotCompletion({\\n        text: editor.getValue(),\\n        cursor_position: editor.posToOffset(cursor),\\n        file_type: 'markdown'\\n      });\\n\\n      if (response.success && response.data && response.data.suggestions.length > 0) {\\n        // Show suggestions (for now just show first suggestion)\\n        if (this.settings.debugMode) {\\n          new Notice(`Suggestion: ${response.data.suggestions[0]}`, 3000);\\n        }\\n      }\\n    } catch (error) {\\n      // Silently fail for auto-completion\\n      if (this.settings.debugMode) {\\n        console.error('Auto-completion error:', error);\\n      }\\n    }\\n  }\\n\\n  private handleCopilotSuggestion(data: CopilotResponse) {\\n    // Handle real-time copilot suggestions from WebSocket\\n    if (this.settings.debugMode) {\\n      new Notice(`Live suggestion: ${data.completion}`, 2000);\\n    }\\n  }\\n\\n  // Settings management\\n  async loadSettings() {\\n    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\\n  }\\n\\n  async saveSettings() {\\n    await this.saveData(this.settings);\\n    \\n    // Update API client if URL changed\\n    this.apiClient = new EvoAgentXClient(this.settings.backendUrl, this.settings.apiKey);\\n    \\n    // Reconnect WebSocket if settings changed\\n    if (this.settings.enableWebSocket && !this.websocketConnected) {\\n      this.connectWebSocket();\\n    } else if (!this.settings.enableWebSocket && this.websocketConnected) {\\n      this.disconnectWebSocket();\\n    }\\n  }\\n}\\n\"]}"}
