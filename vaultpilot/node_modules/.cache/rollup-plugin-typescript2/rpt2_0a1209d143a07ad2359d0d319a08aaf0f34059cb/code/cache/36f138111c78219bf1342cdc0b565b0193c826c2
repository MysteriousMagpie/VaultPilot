{"code":"/**\n * VaultPilot Enhancement Features Demo\n * Demonstrates the new keyboard shortcuts, progress indicators, and performance optimization\n */\nimport { __awaiter } from \"tslib\";\nimport { Modal, Notice } from 'obsidian';\nexport class VaultPilotEnhancementDemo extends Modal {\n    constructor(app, plugin) {\n        super(app);\n        this.plugin = plugin;\n    }\n    onOpen() {\n        const { contentEl } = this;\n        contentEl.empty();\n        contentEl.createEl('h2', { text: 'VaultPilot Enhancement Features Demo' });\n        // Demo Section 1: Keyboard Shortcuts\n        this.createKeyboardShortcutsDemo(contentEl);\n        // Demo Section 2: Progress Indicators\n        this.createProgressIndicatorDemo(contentEl);\n        // Demo Section 3: Performance Optimization\n        this.createPerformanceDemo(contentEl);\n        // Demo Section 4: WebSocket Features\n        this.createWebSocketDemo(contentEl);\n    }\n    createKeyboardShortcutsDemo(container) {\n        const section = container.createDiv({ cls: 'enhancement-demo-section' });\n        section.createEl('h3', { text: '‚å®Ô∏è Keyboard Shortcuts' });\n        const description = section.createEl('p');\n        description.innerHTML = `\n            <strong>20+ keyboard shortcuts are now available!</strong><br>\n            Try these shortcuts:\n            <ul>\n                <li><code>Ctrl+Shift+Enter</code> - Open VaultPilot Chat</li>\n                <li><code>Ctrl+Shift+S</code> - Smart Search</li>\n                <li><code>Ctrl+Space</code> - AI Completion</li>\n                <li><code>Ctrl+Shift+H</code> - Show All Shortcuts</li>\n            </ul>\n        `;\n        const button = section.createEl('button', { text: 'Show All Keyboard Shortcuts' });\n        button.onclick = () => {\n            if (this.plugin.keyboardHandler) {\n                this.plugin.keyboardHandler.getShortcuts();\n                // Manually trigger the shortcuts help\n                const shortcuts = this.plugin.keyboardHandler.getShortcuts();\n                const helpModal = new Modal(this.app);\n                helpModal.titleEl.textContent = 'VaultPilot Keyboard Shortcuts';\n                const content = helpModal.contentEl;\n                content.style.maxHeight = '70vh';\n                content.style.overflowY = 'auto';\n                shortcuts.forEach(shortcut => {\n                    const item = content.createDiv({ cls: 'shortcut-item' });\n                    item.style.cssText = `\n                        display: flex; \n                        justify-content: space-between; \n                        padding: 8px; \n                        margin: 4px 0; \n                        background: var(--background-secondary); \n                        border-radius: 4px;\n                    `;\n                    const keys = item.createSpan({ cls: 'shortcut-keys' });\n                    keys.textContent = `${shortcut.modifiers.join(' + ')} + ${shortcut.key.replace('Key', '')}`;\n                    keys.style.cssText = `\n                        font-family: monospace; \n                        background: var(--background-primary-alt); \n                        padding: 2px 6px; \n                        border-radius: 3px;\n                    `;\n                    const desc = item.createSpan({ cls: 'shortcut-desc' });\n                    desc.textContent = shortcut.description;\n                });\n                helpModal.open();\n            }\n        };\n    }\n    createProgressIndicatorDemo(container) {\n        const section = container.createDiv({ cls: 'enhancement-demo-section' });\n        section.createEl('h3', { text: 'üìä Progress Indicators' });\n        section.createEl('p', {\n            text: 'Real-time progress bars with animations, ETA calculation, and WebSocket updates.'\n        });\n        const buttonsDiv = section.createDiv({ cls: 'demo-buttons' });\n        buttonsDiv.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';\n        // Quick Progress Demo\n        const quickProgressBtn = buttonsDiv.createEl('button', { text: 'Quick Progress (3s)' });\n        quickProgressBtn.onclick = () => {\n            this.demoQuickProgress();\n        };\n        // Long Progress Demo\n        const longProgressBtn = buttonsDiv.createEl('button', { text: 'Long Progress (10s)' });\n        longProgressBtn.onclick = () => {\n            this.demoLongProgress();\n        };\n        // Multiple Progress Demo\n        const multiProgressBtn = buttonsDiv.createEl('button', { text: 'Multiple Progress' });\n        multiProgressBtn.onclick = () => {\n            this.demoMultipleProgress();\n        };\n    }\n    createPerformanceDemo(container) {\n        const section = container.createDiv({ cls: 'enhancement-demo-section' });\n        section.createEl('h3', { text: '‚ö° Performance Optimization' });\n        section.createEl('p', {\n            text: 'Intelligent caching, request deduplication, and performance metrics.'\n        });\n        const buttonsDiv = section.createDiv({ cls: 'demo-buttons' });\n        buttonsDiv.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';\n        // Cache Demo\n        const cacheBtn = buttonsDiv.createEl('button', { text: 'Test Caching' });\n        cacheBtn.onclick = () => {\n            this.demoCaching();\n        };\n        // Performance Metrics\n        const metricsBtn = buttonsDiv.createEl('button', { text: 'Show Metrics' });\n        metricsBtn.onclick = () => {\n            this.showPerformanceMetrics();\n        };\n        // Clear Cache\n        const clearBtn = buttonsDiv.createEl('button', { text: 'Clear Cache' });\n        clearBtn.onclick = () => {\n            if (this.plugin.enhancementManager) {\n                this.plugin.enhancementManager.clearCache();\n                new Notice('Cache cleared successfully');\n            }\n        };\n    }\n    createWebSocketDemo(container) {\n        var _a;\n        const section = container.createDiv({ cls: 'enhancement-demo-section' });\n        section.createEl('h3', { text: 'üîó WebSocket Features' });\n        const statusDiv = section.createDiv();\n        const isConnected = ((_a = this.plugin.enhancementManager) === null || _a === void 0 ? void 0 : _a.isWebSocketConnected()) || false;\n        statusDiv.innerHTML = `\n            <p>WebSocket Status: \n                <span style=\"color: ${isConnected ? 'var(--color-green)' : 'var(--color-red)'};\">\n                    ${isConnected ? 'üü¢ Connected' : 'üî¥ Disconnected'}\n                </span>\n            </p>\n            <p>Real-time features: Progress updates, Performance metrics, Dynamic shortcuts</p>\n        `;\n        const button = section.createEl('button', { text: 'Test WebSocket Connection' });\n        button.onclick = () => {\n            var _a;\n            const connected = (_a = this.plugin.enhancementManager) === null || _a === void 0 ? void 0 : _a.isWebSocketConnected();\n            new Notice(`WebSocket is ${connected ? 'connected' : 'disconnected'}`, 3000);\n        };\n    }\n    demoQuickProgress() {\n        if (!this.plugin.enhancementManager) {\n            new Notice('Enhancement Manager not initialized');\n            return;\n        }\n        const progressId = 'demo-quick-' + Date.now();\n        this.plugin.enhancementManager.showProgress({\n            id: progressId,\n            title: 'Quick Demo Task',\n            message: 'Processing...',\n            percentage: 0,\n            eta: 3,\n            cancelable: true\n        });\n        let progress = 0;\n        const interval = setInterval(() => {\n            var _a;\n            progress += 33.33;\n            if (progress >= 100) {\n                progress = 100;\n                clearInterval(interval);\n                setTimeout(() => {\n                    var _a;\n                    (_a = this.plugin.enhancementManager) === null || _a === void 0 ? void 0 : _a.progressIndicator.hideProgress(progressId);\n                }, 500);\n            }\n            (_a = this.plugin.enhancementManager) === null || _a === void 0 ? void 0 : _a.progressIndicator.updateProgress(progressId, {\n                percentage: progress,\n                message: progress < 100 ? 'Processing...' : 'Complete!',\n                eta: progress < 100 ? (100 - progress) / 33.33 : 0\n            });\n        }, 1000);\n    }\n    demoLongProgress() {\n        if (!this.plugin.enhancementManager) {\n            new Notice('Enhancement Manager not initialized');\n            return;\n        }\n        const progressId = 'demo-long-' + Date.now();\n        this.plugin.enhancementManager.showProgress({\n            id: progressId,\n            title: 'Long Running Task',\n            message: 'Analyzing vault structure...',\n            percentage: 0,\n            eta: 10,\n            cancelable: true\n        });\n        const stages = [\n            { msg: 'Analyzing vault structure...', duration: 2000 },\n            { msg: 'Processing files...', duration: 3000 },\n            { msg: 'Generating insights...', duration: 2000 },\n            { msg: 'Optimizing performance...', duration: 2000 },\n            { msg: 'Finalizing results...', duration: 1000 }\n        ];\n        let currentStage = 0;\n        let totalProgress = 0;\n        const runStage = () => {\n            var _a, _b;\n            if (currentStage >= stages.length) {\n                (_a = this.plugin.enhancementManager) === null || _a === void 0 ? void 0 : _a.progressIndicator.updateProgress(progressId, {\n                    percentage: 100,\n                    message: 'Complete!',\n                    eta: 0\n                });\n                setTimeout(() => {\n                    var _a;\n                    (_a = this.plugin.enhancementManager) === null || _a === void 0 ? void 0 : _a.progressIndicator.hideProgress(progressId);\n                }, 1000);\n                return;\n            }\n            const stage = stages[currentStage];\n            const stageProgress = 100 / stages.length;\n            (_b = this.plugin.enhancementManager) === null || _b === void 0 ? void 0 : _b.progressIndicator.updateProgress(progressId, {\n                percentage: totalProgress,\n                message: stage.msg,\n                eta: (stages.length - currentStage) * 2\n            });\n            setTimeout(() => {\n                totalProgress += stageProgress;\n                currentStage++;\n                runStage();\n            }, stage.duration);\n        };\n        runStage();\n    }\n    demoMultipleProgress() {\n        if (!this.plugin.enhancementManager) {\n            new Notice('Enhancement Manager not initialized');\n            return;\n        }\n        // Start 3 different progress indicators\n        const tasks = [\n            { id: 'task1', title: 'Backup Creation', duration: 5000 },\n            { id: 'task2', title: 'File Analysis', duration: 7000 },\n            { id: 'task3', title: 'Index Update', duration: 3000 }\n        ];\n        tasks.forEach((task, index) => {\n            setTimeout(() => {\n                var _a;\n                const progressId = `demo-multi-${task.id}-${Date.now()}`;\n                (_a = this.plugin.enhancementManager) === null || _a === void 0 ? void 0 : _a.showProgress({\n                    id: progressId,\n                    title: task.title,\n                    message: 'Starting...',\n                    percentage: 0,\n                    eta: task.duration / 1000,\n                    cancelable: true\n                });\n                let progress = 0;\n                const interval = setInterval(() => {\n                    var _a;\n                    progress += 10;\n                    if (progress >= 100) {\n                        progress = 100;\n                        clearInterval(interval);\n                        setTimeout(() => {\n                            var _a;\n                            (_a = this.plugin.enhancementManager) === null || _a === void 0 ? void 0 : _a.progressIndicator.hideProgress(progressId);\n                        }, 500);\n                    }\n                    (_a = this.plugin.enhancementManager) === null || _a === void 0 ? void 0 : _a.progressIndicator.updateProgress(progressId, {\n                        percentage: progress,\n                        message: progress < 100 ? 'Processing...' : 'Complete!',\n                        eta: progress < 100 ? ((100 - progress) / 10) * (task.duration / 10000) : 0\n                    });\n                }, task.duration / 10);\n            }, index * 1000);\n        });\n    }\n    demoCaching() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.plugin.enhancementManager) {\n                new Notice('Enhancement Manager not initialized');\n                return;\n            }\n            const testEndpoint = 'demo-cache-test';\n            // First request (cache miss)\n            const start1 = performance.now();\n            try {\n                yield this.plugin.enhancementManager.optimizedAPICall(testEndpoint, () => new Promise(resolve => setTimeout(() => resolve({ data: 'test response' }), 1000)));\n                const time1 = performance.now() - start1;\n                // Second request (cache hit)\n                const start2 = performance.now();\n                yield this.plugin.enhancementManager.optimizedAPICall(testEndpoint, () => new Promise(resolve => setTimeout(() => resolve({ data: 'test response' }), 1000)));\n                const time2 = performance.now() - start2;\n                new Notice(`First request: ${Math.round(time1)}ms (cache miss)\\nSecond request: ${Math.round(time2)}ms (cache hit)`, 5000);\n            }\n            catch (error) {\n                new Notice('Cache test failed: ' + error);\n            }\n        });\n    }\n    showPerformanceMetrics() {\n        if (!this.plugin.enhancementManager) {\n            new Notice('Enhancement Manager not initialized');\n            return;\n        }\n        const metrics = this.plugin.enhancementManager.getPerformanceMetrics();\n        const cacheHitRate = this.plugin.enhancementManager.getCacheHitRate();\n        const modal = new Modal(this.app);\n        modal.titleEl.textContent = 'Performance Metrics';\n        const content = modal.contentEl;\n        content.innerHTML = `\n            <div class=\"vaultpilot-metrics-container\">\n                <div class=\"metrics-grid\" style=\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;\">\n                    <div class=\"metric-item\" style=\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\">\n                        <div class=\"metric-label\">Total Requests</div>\n                        <div class=\"metric-value\">${metrics.totalRequests}</div>\n                    </div>\n                    <div class=\"metric-item\" style=\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\">\n                        <div class=\"metric-label\">Cache Hit Rate</div>\n                        <div class=\"metric-value\">${Math.round(cacheHitRate)}%</div>\n                    </div>\n                    <div class=\"metric-item\" style=\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\">\n                        <div class=\"metric-label\">Avg Response Time</div>\n                        <div class=\"metric-value\">${Math.round(metrics.averageResponseTime)}ms</div>\n                    </div>\n                    <div class=\"metric-item\" style=\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\">\n                        <div class=\"metric-label\">Cache Size</div>\n                        <div class=\"metric-value\">${metrics.currentCacheSize} items</div>\n                    </div>\n                    <div class=\"metric-item\" style=\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\">\n                        <div class=\"metric-label\">Memory Usage</div>\n                        <div class=\"metric-value\">${Math.round(metrics.memoryUsage / 1024)} KB</div>\n                    </div>\n                    <div class=\"metric-item\" style=\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\">\n                        <div class=\"metric-label\">Fastest Response</div>\n                        <div class=\"metric-value\">${Math.round(metrics.fastestResponse)}ms</div>\n                    </div>\n                </div>\n            </div>\n        `;\n        modal.open();\n    }\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n// Add styles for the demo\nconst demoStyles = `\n.enhancement-demo-section {\n    margin: 20px 0;\n    padding: 15px;\n    border: 1px solid var(--background-modifier-border);\n    border-radius: 8px;\n    background: var(--background-secondary);\n}\n\n.enhancement-demo-section h3 {\n    margin-top: 0;\n    color: var(--text-accent);\n}\n\n.demo-buttons {\n    margin-top: 10px;\n}\n\n.demo-buttons button {\n    padding: 8px 16px;\n    margin: 4px;\n    border: 1px solid var(--background-modifier-border);\n    border-radius: 4px;\n    background: var(--interactive-normal);\n    color: var(--text-normal);\n    cursor: pointer;\n    transition: background-color 0.2s;\n}\n\n.demo-buttons button:hover {\n    background: var(--interactive-hover);\n}\n\n.shortcut-item {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 8px;\n    margin: 4px 0;\n    background: var(--background-secondary);\n    border-radius: 4px;\n}\n\n.metric-label {\n    color: var(--text-muted);\n    font-size: 0.85em;\n    margin-bottom: 4px;\n    text-transform: uppercase;\n}\n\n.metric-value {\n    color: var(--text-normal);\n    font-size: 1.2em;\n    font-weight: 600;\n}\n`;\n// Inject demo styles\nconst styleId = 'vaultpilot-demo-styles';\nif (!document.getElementById(styleId)) {\n    const style = document.createElement('style');\n    style.id = styleId;\n    style.textContent = demoStyles;\n    document.head.appendChild(style);\n}\n//# sourceMappingURL=enhancement-demo.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts"],"map":"{\"version\":3,\"file\":\"enhancement-demo.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/vault-management/enhancement-demo.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * VaultPilot Enhancement Features Demo\\n * Demonstrates the new keyboard shortcuts, progress indicators, and performance optimization\\n */\\n\\nimport { App, Modal, Notice } from 'obsidian';\\nimport VaultPilotPlugin from '../main';\\n\\nexport class VaultPilotEnhancementDemo extends Modal {\\n    private plugin: VaultPilotPlugin;\\n\\n    constructor(app: App, plugin: VaultPilotPlugin) {\\n        super(app);\\n        this.plugin = plugin;\\n    }\\n\\n    onOpen() {\\n        const { contentEl } = this;\\n        contentEl.empty();\\n\\n        contentEl.createEl('h2', { text: 'VaultPilot Enhancement Features Demo' });\\n\\n        // Demo Section 1: Keyboard Shortcuts\\n        this.createKeyboardShortcutsDemo(contentEl);\\n\\n        // Demo Section 2: Progress Indicators\\n        this.createProgressIndicatorDemo(contentEl);\\n\\n        // Demo Section 3: Performance Optimization\\n        this.createPerformanceDemo(contentEl);\\n\\n        // Demo Section 4: WebSocket Features\\n        this.createWebSocketDemo(contentEl);\\n    }\\n\\n    private createKeyboardShortcutsDemo(container: HTMLElement) {\\n        const section = container.createDiv({ cls: 'enhancement-demo-section' });\\n        section.createEl('h3', { text: '‚å®Ô∏è Keyboard Shortcuts' });\\n        \\n        const description = section.createEl('p');\\n        description.innerHTML = `\\n            <strong>20+ keyboard shortcuts are now available!</strong><br>\\n            Try these shortcuts:\\n            <ul>\\n                <li><code>Ctrl+Shift+Enter</code> - Open VaultPilot Chat</li>\\n                <li><code>Ctrl+Shift+S</code> - Smart Search</li>\\n                <li><code>Ctrl+Space</code> - AI Completion</li>\\n                <li><code>Ctrl+Shift+H</code> - Show All Shortcuts</li>\\n            </ul>\\n        `;\\n\\n        const button = section.createEl('button', { text: 'Show All Keyboard Shortcuts' });\\n        button.onclick = () => {\\n            if (this.plugin.keyboardHandler) {\\n                this.plugin.keyboardHandler.getShortcuts();\\n                // Manually trigger the shortcuts help\\n                const shortcuts = this.plugin.keyboardHandler.getShortcuts();\\n                const helpModal = new Modal(this.app);\\n                helpModal.titleEl.textContent = 'VaultPilot Keyboard Shortcuts';\\n                \\n                const content = helpModal.contentEl;\\n                content.style.maxHeight = '70vh';\\n                content.style.overflowY = 'auto';\\n                \\n                shortcuts.forEach(shortcut => {\\n                    const item = content.createDiv({ cls: 'shortcut-item' });\\n                    item.style.cssText = `\\n                        display: flex; \\n                        justify-content: space-between; \\n                        padding: 8px; \\n                        margin: 4px 0; \\n                        background: var(--background-secondary); \\n                        border-radius: 4px;\\n                    `;\\n                    \\n                    const keys = item.createSpan({ cls: 'shortcut-keys' });\\n                    keys.textContent = `${shortcut.modifiers.join(' + ')} + ${shortcut.key.replace('Key', '')}`;\\n                    keys.style.cssText = `\\n                        font-family: monospace; \\n                        background: var(--background-primary-alt); \\n                        padding: 2px 6px; \\n                        border-radius: 3px;\\n                    `;\\n                    \\n                    const desc = item.createSpan({ cls: 'shortcut-desc' });\\n                    desc.textContent = shortcut.description;\\n                });\\n                \\n                helpModal.open();\\n            }\\n        };\\n    }\\n\\n    private createProgressIndicatorDemo(container: HTMLElement) {\\n        const section = container.createDiv({ cls: 'enhancement-demo-section' });\\n        section.createEl('h3', { text: 'üìä Progress Indicators' });\\n        \\n        section.createEl('p', { \\n            text: 'Real-time progress bars with animations, ETA calculation, and WebSocket updates.' \\n        });\\n\\n        const buttonsDiv = section.createDiv({ cls: 'demo-buttons' });\\n        buttonsDiv.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';\\n\\n        // Quick Progress Demo\\n        const quickProgressBtn = buttonsDiv.createEl('button', { text: 'Quick Progress (3s)' });\\n        quickProgressBtn.onclick = () => {\\n            this.demoQuickProgress();\\n        };\\n\\n        // Long Progress Demo\\n        const longProgressBtn = buttonsDiv.createEl('button', { text: 'Long Progress (10s)' });\\n        longProgressBtn.onclick = () => {\\n            this.demoLongProgress();\\n        };\\n\\n        // Multiple Progress Demo\\n        const multiProgressBtn = buttonsDiv.createEl('button', { text: 'Multiple Progress' });\\n        multiProgressBtn.onclick = () => {\\n            this.demoMultipleProgress();\\n        };\\n    }\\n\\n    private createPerformanceDemo(container: HTMLElement) {\\n        const section = container.createDiv({ cls: 'enhancement-demo-section' });\\n        section.createEl('h3', { text: '‚ö° Performance Optimization' });\\n        \\n        section.createEl('p', { \\n            text: 'Intelligent caching, request deduplication, and performance metrics.' \\n        });\\n\\n        const buttonsDiv = section.createDiv({ cls: 'demo-buttons' });\\n        buttonsDiv.style.cssText = 'display: flex; gap: 10px; flex-wrap: wrap;';\\n\\n        // Cache Demo\\n        const cacheBtn = buttonsDiv.createEl('button', { text: 'Test Caching' });\\n        cacheBtn.onclick = () => {\\n            this.demoCaching();\\n        };\\n\\n        // Performance Metrics\\n        const metricsBtn = buttonsDiv.createEl('button', { text: 'Show Metrics' });\\n        metricsBtn.onclick = () => {\\n            this.showPerformanceMetrics();\\n        };\\n\\n        // Clear Cache\\n        const clearBtn = buttonsDiv.createEl('button', { text: 'Clear Cache' });\\n        clearBtn.onclick = () => {\\n            if (this.plugin.enhancementManager) {\\n                this.plugin.enhancementManager.clearCache();\\n                new Notice('Cache cleared successfully');\\n            }\\n        };\\n    }\\n\\n    private createWebSocketDemo(container: HTMLElement) {\\n        const section = container.createDiv({ cls: 'enhancement-demo-section' });\\n        section.createEl('h3', { text: 'üîó WebSocket Features' });\\n        \\n        const statusDiv = section.createDiv();\\n        const isConnected = this.plugin.enhancementManager?.isWebSocketConnected() || false;\\n        \\n        statusDiv.innerHTML = `\\n            <p>WebSocket Status: \\n                <span style=\\\"color: ${isConnected ? 'var(--color-green)' : 'var(--color-red)'};\\\">\\n                    ${isConnected ? 'üü¢ Connected' : 'üî¥ Disconnected'}\\n                </span>\\n            </p>\\n            <p>Real-time features: Progress updates, Performance metrics, Dynamic shortcuts</p>\\n        `;\\n\\n        const button = section.createEl('button', { text: 'Test WebSocket Connection' });\\n        button.onclick = () => {\\n            const connected = this.plugin.enhancementManager?.isWebSocketConnected();\\n            new Notice(`WebSocket is ${connected ? 'connected' : 'disconnected'}`, 3000);\\n        };\\n    }\\n\\n    private demoQuickProgress() {\\n        if (!this.plugin.enhancementManager) {\\n            new Notice('Enhancement Manager not initialized');\\n            return;\\n        }\\n\\n        const progressId = 'demo-quick-' + Date.now();\\n        this.plugin.enhancementManager.showProgress({\\n            id: progressId,\\n            title: 'Quick Demo Task',\\n            message: 'Processing...',\\n            percentage: 0,\\n            eta: 3,\\n            cancelable: true\\n        });\\n\\n        let progress = 0;\\n        const interval = setInterval(() => {\\n            progress += 33.33;\\n            if (progress >= 100) {\\n                progress = 100;\\n                clearInterval(interval);\\n                setTimeout(() => {\\n                    this.plugin.enhancementManager?.progressIndicator.hideProgress(progressId);\\n                }, 500);\\n            }\\n\\n            this.plugin.enhancementManager?.progressIndicator.updateProgress(progressId, {\\n                percentage: progress,\\n                message: progress < 100 ? 'Processing...' : 'Complete!',\\n                eta: progress < 100 ? (100 - progress) / 33.33 : 0\\n            });\\n        }, 1000);\\n    }\\n\\n    private demoLongProgress() {\\n        if (!this.plugin.enhancementManager) {\\n            new Notice('Enhancement Manager not initialized');\\n            return;\\n        }\\n\\n        const progressId = 'demo-long-' + Date.now();\\n        this.plugin.enhancementManager.showProgress({\\n            id: progressId,\\n            title: 'Long Running Task',\\n            message: 'Analyzing vault structure...',\\n            percentage: 0,\\n            eta: 10,\\n            cancelable: true\\n        });\\n\\n        const stages = [\\n            { msg: 'Analyzing vault structure...', duration: 2000 },\\n            { msg: 'Processing files...', duration: 3000 },\\n            { msg: 'Generating insights...', duration: 2000 },\\n            { msg: 'Optimizing performance...', duration: 2000 },\\n            { msg: 'Finalizing results...', duration: 1000 }\\n        ];\\n\\n        let currentStage = 0;\\n        let totalProgress = 0;\\n\\n        const runStage = () => {\\n            if (currentStage >= stages.length) {\\n                this.plugin.enhancementManager?.progressIndicator.updateProgress(progressId, {\\n                    percentage: 100,\\n                    message: 'Complete!',\\n                    eta: 0\\n                });\\n                setTimeout(() => {\\n                    this.plugin.enhancementManager?.progressIndicator.hideProgress(progressId);\\n                }, 1000);\\n                return;\\n            }\\n\\n            const stage = stages[currentStage];\\n            const stageProgress = 100 / stages.length;\\n            \\n            this.plugin.enhancementManager?.progressIndicator.updateProgress(progressId, {\\n                percentage: totalProgress,\\n                message: stage.msg,\\n                eta: (stages.length - currentStage) * 2\\n            });\\n\\n            setTimeout(() => {\\n                totalProgress += stageProgress;\\n                currentStage++;\\n                runStage();\\n            }, stage.duration);\\n        };\\n\\n        runStage();\\n    }\\n\\n    private demoMultipleProgress() {\\n        if (!this.plugin.enhancementManager) {\\n            new Notice('Enhancement Manager not initialized');\\n            return;\\n        }\\n\\n        // Start 3 different progress indicators\\n        const tasks = [\\n            { id: 'task1', title: 'Backup Creation', duration: 5000 },\\n            { id: 'task2', title: 'File Analysis', duration: 7000 },\\n            { id: 'task3', title: 'Index Update', duration: 3000 }\\n        ];\\n\\n        tasks.forEach((task, index) => {\\n            setTimeout(() => {\\n                const progressId = `demo-multi-${task.id}-${Date.now()}`;\\n                this.plugin.enhancementManager?.showProgress({\\n                    id: progressId,\\n                    title: task.title,\\n                    message: 'Starting...',\\n                    percentage: 0,\\n                    eta: task.duration / 1000,\\n                    cancelable: true\\n                });\\n\\n                let progress = 0;\\n                const interval = setInterval(() => {\\n                    progress += 10;\\n                    if (progress >= 100) {\\n                        progress = 100;\\n                        clearInterval(interval);\\n                        setTimeout(() => {\\n                            this.plugin.enhancementManager?.progressIndicator.hideProgress(progressId);\\n                        }, 500);\\n                    }\\n\\n                    this.plugin.enhancementManager?.progressIndicator.updateProgress(progressId, {\\n                        percentage: progress,\\n                        message: progress < 100 ? 'Processing...' : 'Complete!',\\n                        eta: progress < 100 ? ((100 - progress) / 10) * (task.duration / 10000) : 0\\n                    });\\n                }, task.duration / 10);\\n            }, index * 1000);\\n        });\\n    }\\n\\n    private async demoCaching() {\\n        if (!this.plugin.enhancementManager) {\\n            new Notice('Enhancement Manager not initialized');\\n            return;\\n        }\\n\\n        const testEndpoint = 'demo-cache-test';\\n        \\n        // First request (cache miss)\\n        const start1 = performance.now();\\n        try {\\n            await this.plugin.enhancementManager.optimizedAPICall(\\n                testEndpoint,\\n                () => new Promise(resolve => setTimeout(() => resolve({ data: 'test response' }), 1000))\\n            );\\n            const time1 = performance.now() - start1;\\n            \\n            // Second request (cache hit)\\n            const start2 = performance.now();\\n            await this.plugin.enhancementManager.optimizedAPICall(\\n                testEndpoint,\\n                () => new Promise(resolve => setTimeout(() => resolve({ data: 'test response' }), 1000))\\n            );\\n            const time2 = performance.now() - start2;\\n            \\n            new Notice(`First request: ${Math.round(time1)}ms (cache miss)\\\\nSecond request: ${Math.round(time2)}ms (cache hit)`, 5000);\\n        } catch (error) {\\n            new Notice('Cache test failed: ' + error);\\n        }\\n    }\\n\\n    private showPerformanceMetrics() {\\n        if (!this.plugin.enhancementManager) {\\n            new Notice('Enhancement Manager not initialized');\\n            return;\\n        }\\n\\n        const metrics = this.plugin.enhancementManager.getPerformanceMetrics();\\n        const cacheHitRate = this.plugin.enhancementManager.getCacheHitRate();\\n\\n        const modal = new Modal(this.app);\\n        modal.titleEl.textContent = 'Performance Metrics';\\n        \\n        const content = modal.contentEl;\\n        content.innerHTML = `\\n            <div class=\\\"vaultpilot-metrics-container\\\">\\n                <div class=\\\"metrics-grid\\\" style=\\\"display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 16px;\\\">\\n                    <div class=\\\"metric-item\\\" style=\\\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\\\">\\n                        <div class=\\\"metric-label\\\">Total Requests</div>\\n                        <div class=\\\"metric-value\\\">${metrics.totalRequests}</div>\\n                    </div>\\n                    <div class=\\\"metric-item\\\" style=\\\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\\\">\\n                        <div class=\\\"metric-label\\\">Cache Hit Rate</div>\\n                        <div class=\\\"metric-value\\\">${Math.round(cacheHitRate)}%</div>\\n                    </div>\\n                    <div class=\\\"metric-item\\\" style=\\\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\\\">\\n                        <div class=\\\"metric-label\\\">Avg Response Time</div>\\n                        <div class=\\\"metric-value\\\">${Math.round(metrics.averageResponseTime)}ms</div>\\n                    </div>\\n                    <div class=\\\"metric-item\\\" style=\\\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\\\">\\n                        <div class=\\\"metric-label\\\">Cache Size</div>\\n                        <div class=\\\"metric-value\\\">${metrics.currentCacheSize} items</div>\\n                    </div>\\n                    <div class=\\\"metric-item\\\" style=\\\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\\\">\\n                        <div class=\\\"metric-label\\\">Memory Usage</div>\\n                        <div class=\\\"metric-value\\\">${Math.round(metrics.memoryUsage / 1024)} KB</div>\\n                    </div>\\n                    <div class=\\\"metric-item\\\" style=\\\"background: var(--background-secondary); padding: 12px; border-radius: 6px;\\\">\\n                        <div class=\\\"metric-label\\\">Fastest Response</div>\\n                        <div class=\\\"metric-value\\\">${Math.round(metrics.fastestResponse)}ms</div>\\n                    </div>\\n                </div>\\n            </div>\\n        `;\\n        \\n        modal.open();\\n    }\\n\\n    onClose() {\\n        const { contentEl } = this;\\n        contentEl.empty();\\n    }\\n}\\n\\n// Add styles for the demo\\nconst demoStyles = `\\n.enhancement-demo-section {\\n    margin: 20px 0;\\n    padding: 15px;\\n    border: 1px solid var(--background-modifier-border);\\n    border-radius: 8px;\\n    background: var(--background-secondary);\\n}\\n\\n.enhancement-demo-section h3 {\\n    margin-top: 0;\\n    color: var(--text-accent);\\n}\\n\\n.demo-buttons {\\n    margin-top: 10px;\\n}\\n\\n.demo-buttons button {\\n    padding: 8px 16px;\\n    margin: 4px;\\n    border: 1px solid var(--background-modifier-border);\\n    border-radius: 4px;\\n    background: var(--interactive-normal);\\n    color: var(--text-normal);\\n    cursor: pointer;\\n    transition: background-color 0.2s;\\n}\\n\\n.demo-buttons button:hover {\\n    background: var(--interactive-hover);\\n}\\n\\n.shortcut-item {\\n    display: flex;\\n    justify-content: space-between;\\n    align-items: center;\\n    padding: 8px;\\n    margin: 4px 0;\\n    background: var(--background-secondary);\\n    border-radius: 4px;\\n}\\n\\n.metric-label {\\n    color: var(--text-muted);\\n    font-size: 0.85em;\\n    margin-bottom: 4px;\\n    text-transform: uppercase;\\n}\\n\\n.metric-value {\\n    color: var(--text-normal);\\n    font-size: 1.2em;\\n    font-weight: 600;\\n}\\n`;\\n\\n// Inject demo styles\\nconst styleId = 'vaultpilot-demo-styles';\\nif (!document.getElementById(styleId)) {\\n    const style = document.createElement('style');\\n    style.id = styleId;\\n    style.textContent = demoStyles;\\n    document.head.appendChild(style);\\n}\\n\"]}"}
