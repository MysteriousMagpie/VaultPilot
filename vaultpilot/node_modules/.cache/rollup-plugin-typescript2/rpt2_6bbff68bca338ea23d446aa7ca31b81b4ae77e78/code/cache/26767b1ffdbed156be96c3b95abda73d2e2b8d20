{"code":"import { __awaiter } from \"tslib\";\nexport class EvoAgentXClient {\n    constructor(baseUrl, apiKey) {\n        this.wsCallbacks = new Map();\n        this.baseUrl = baseUrl.replace(/\\/$/, ''); // Remove trailing slash\n        this.apiKey = apiKey;\n    }\n    makeRequest(endpoint_1) {\n        return __awaiter(this, arguments, void 0, function* (endpoint, options = {}) {\n            const url = `${this.baseUrl}${endpoint}`;\n            const headers = Object.assign({ 'Content-Type': 'application/json' }, (options.headers || {}));\n            if (this.apiKey) {\n                headers['Authorization'] = `Bearer ${this.apiKey}`;\n            }\n            try {\n                const response = yield fetch(url, Object.assign(Object.assign({}, options), { headers }));\n                const data = yield response.json();\n                if (!response.ok) {\n                    return {\n                        success: false,\n                        error: data.error || `HTTP ${response.status}: ${response.statusText}`,\n                    };\n                }\n                return {\n                    success: true,\n                    data,\n                };\n            }\n            catch (error) {\n                return {\n                    success: false,\n                    error: error instanceof Error ? error.message : 'Unknown error occurred',\n                };\n            }\n        });\n    }\n    // Health check\n    healthCheck() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/health');\n        });\n    }\n    // Chat functionality\n    chat(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/chat', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    getConversationHistory(conversationId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const endpoint = conversationId\n                ? `/api/obsidian/conversation/history?conversation_id=${conversationId}`\n                : '/api/obsidian/conversation/history';\n            return this.makeRequest(endpoint, { method: 'POST' });\n        });\n    }\n    deleteConversation(conversationId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest(`/api/obsidian/conversations/${conversationId}`, {\n                method: 'DELETE',\n            });\n        });\n    }\n    // Copilot functionality\n    getCopilotCompletion(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/copilot/complete', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Workflow execution\n    executeWorkflow(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/workflow', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Agent management\n    getAgents() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/agents');\n        });\n    }\n    createAgent(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/agents/create', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    executeAgent(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/agent/execute', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Vault analysis\n    analyzeVaultContext(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/vault/context', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Task planning\n    planTasks(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/planning/tasks', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Intelligence parsing\n    parseIntelligence(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/intelligence/parse', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // Memory management\n    updateMemory(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.makeRequest('/api/obsidian/memory/update', {\n                method: 'POST',\n                body: JSON.stringify(request),\n            });\n        });\n    }\n    // WebSocket functionality\n    connectWebSocket(callbacks) {\n        const wsUrl = this.baseUrl.replace('http', 'ws') + '/ws/obsidian';\n        this.websocket = new WebSocket(wsUrl);\n        this.websocket.onopen = () => {\n            var _a;\n            console.log('WebSocket connected to EvoAgentX');\n            (_a = callbacks.onConnect) === null || _a === void 0 ? void 0 : _a.call(callbacks);\n        };\n        this.websocket.onmessage = (event) => {\n            var _a, _b, _c, _d, _e, _f;\n            try {\n                const message = JSON.parse(event.data);\n                switch (message.type) {\n                    case 'chat':\n                        (_a = callbacks.onChat) === null || _a === void 0 ? void 0 : _a.call(callbacks, message.data);\n                        break;\n                    case 'workflow_progress':\n                        (_b = callbacks.onWorkflowProgress) === null || _b === void 0 ? void 0 : _b.call(callbacks, message.data);\n                        break;\n                    case 'copilot':\n                        (_c = callbacks.onCopilot) === null || _c === void 0 ? void 0 : _c.call(callbacks, message.data);\n                        break;\n                    case 'vault_sync':\n                        (_d = callbacks.onVaultSync) === null || _d === void 0 ? void 0 : _d.call(callbacks, message.data);\n                        break;\n                    case 'error':\n                        (_e = callbacks.onError) === null || _e === void 0 ? void 0 : _e.call(callbacks, message.data);\n                        break;\n                }\n            }\n            catch (error) {\n                console.error('Error parsing WebSocket message:', error);\n                (_f = callbacks.onError) === null || _f === void 0 ? void 0 : _f.call(callbacks, 'Failed to parse WebSocket message');\n            }\n        };\n        this.websocket.onclose = () => {\n            var _a;\n            console.log('WebSocket disconnected from EvoAgentX');\n            (_a = callbacks.onDisconnect) === null || _a === void 0 ? void 0 : _a.call(callbacks);\n        };\n        this.websocket.onerror = (error) => {\n            var _a;\n            console.error('WebSocket error:', error);\n            (_a = callbacks.onError) === null || _a === void 0 ? void 0 : _a.call(callbacks, 'WebSocket connection error');\n        };\n    }\n    disconnectWebSocket() {\n        if (this.websocket) {\n            this.websocket.close();\n            this.websocket = undefined;\n        }\n    }\n    sendWebSocketMessage(type, data) {\n        if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\n            this.websocket.send(JSON.stringify({ type, data }));\n        }\n    }\n    isWebSocketConnected() {\n        var _a;\n        return ((_a = this.websocket) === null || _a === void 0 ? void 0 : _a.readyState) === WebSocket.OPEN;\n    }\n}\n//# sourceMappingURL=api-client.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/types.ts"],"map":"{\"version\":3,\"file\":\"api-client.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/api-client.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"import { \\n  APIResponse, \\n  ChatRequest, \\n  ChatResponse, \\n  ConversationHistory,\\n  CopilotRequest, \\n  CopilotResponse,\\n  WorkflowRequest,\\n  WorkflowResponse,\\n  Agent,\\n  AgentCreateRequest,\\n  AgentExecuteRequest,\\n  VaultContextRequest,\\n  VaultContextResponse,\\n  TaskPlanningRequest,\\n  TaskPlanningResponse,\\n  IntelligenceParseRequest,\\n  IntelligenceParseResponse,\\n  MemoryUpdateRequest,\\n  WebSocketMessage,\\n  ErrorResponse\\n} from './types';\\n\\nexport class EvoAgentXClient {\\n  private baseUrl: string;\\n  private apiKey?: string;\\n  private websocket?: WebSocket;\\n  private wsCallbacks: Map<string, (data: any) => void> = new Map();\\n\\n  constructor(baseUrl: string, apiKey?: string) {\\n    this.baseUrl = baseUrl.replace(/\\\\/$/, ''); // Remove trailing slash\\n    this.apiKey = apiKey;\\n  }\\n\\n  private async makeRequest<T>(\\n    endpoint: string, \\n    options: RequestInit = {}\\n  ): Promise<APIResponse<T>> {\\n    const url = `${this.baseUrl}${endpoint}`;\\n    const headers: Record<string, string> = {\\n      'Content-Type': 'application/json',\\n      ...(options.headers as Record<string, string> || {}),\\n    };\\n\\n    if (this.apiKey) {\\n      headers['Authorization'] = `Bearer ${this.apiKey}`;\\n    }\\n\\n    try {\\n      const response = await fetch(url, {\\n        ...options,\\n        headers,\\n      });\\n\\n      const data = await response.json();\\n\\n      if (!response.ok) {\\n        return {\\n          success: false,\\n          error: data.error || `HTTP ${response.status}: ${response.statusText}`,\\n        };\\n      }\\n\\n      return {\\n        success: true,\\n        data,\\n      };\\n    } catch (error) {\\n      return {\\n        success: false,\\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\\n      };\\n    }\\n  }\\n\\n  // Health check\\n  async healthCheck(): Promise<APIResponse<{ status: string; version: string }>> {\\n    return this.makeRequest('/api/obsidian/health');\\n  }\\n\\n  // Chat functionality\\n  async chat(request: ChatRequest): Promise<APIResponse<ChatResponse>> {\\n    return this.makeRequest('/api/obsidian/chat', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  async getConversationHistory(conversationId?: string): Promise<APIResponse<ConversationHistory[]>> {\\n    const endpoint = conversationId \\n      ? `/api/obsidian/conversation/history?conversation_id=${conversationId}`\\n      : '/api/obsidian/conversation/history';\\n    return this.makeRequest(endpoint, { method: 'POST' });\\n  }\\n\\n  async deleteConversation(conversationId: string): Promise<APIResponse<void>> {\\n    return this.makeRequest(`/api/obsidian/conversations/${conversationId}`, {\\n      method: 'DELETE',\\n    });\\n  }\\n\\n  // Copilot functionality\\n  async getCopilotCompletion(request: CopilotRequest): Promise<APIResponse<CopilotResponse>> {\\n    return this.makeRequest('/api/obsidian/copilot/complete', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Workflow execution\\n  async executeWorkflow(request: WorkflowRequest): Promise<APIResponse<WorkflowResponse>> {\\n    return this.makeRequest('/api/obsidian/workflow', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Agent management\\n  async getAgents(): Promise<APIResponse<Agent[]>> {\\n    return this.makeRequest('/api/obsidian/agents');\\n  }\\n\\n  async createAgent(request: AgentCreateRequest): Promise<APIResponse<Agent>> {\\n    return this.makeRequest('/api/obsidian/agents/create', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  async executeAgent(request: AgentExecuteRequest): Promise<APIResponse<any>> {\\n    return this.makeRequest('/api/obsidian/agent/execute', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Vault analysis\\n  async analyzeVaultContext(request: VaultContextRequest): Promise<APIResponse<VaultContextResponse>> {\\n    return this.makeRequest('/api/obsidian/vault/context', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Task planning\\n  async planTasks(request: TaskPlanningRequest): Promise<APIResponse<TaskPlanningResponse>> {\\n    return this.makeRequest('/api/obsidian/planning/tasks', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Intelligence parsing\\n  async parseIntelligence(request: IntelligenceParseRequest): Promise<APIResponse<IntelligenceParseResponse>> {\\n    return this.makeRequest('/api/obsidian/intelligence/parse', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // Memory management\\n  async updateMemory(request: MemoryUpdateRequest): Promise<APIResponse<void>> {\\n    return this.makeRequest('/api/obsidian/memory/update', {\\n      method: 'POST',\\n      body: JSON.stringify(request),\\n    });\\n  }\\n\\n  // WebSocket functionality\\n  connectWebSocket(callbacks: {\\n    onChat?: (data: any) => void;\\n    onWorkflowProgress?: (data: any) => void;\\n    onCopilot?: (data: any) => void;\\n    onVaultSync?: (data: any) => void;\\n    onError?: (error: string) => void;\\n    onConnect?: () => void;\\n    onDisconnect?: () => void;\\n  }): void {\\n    const wsUrl = this.baseUrl.replace('http', 'ws') + '/ws/obsidian';\\n    \\n    this.websocket = new WebSocket(wsUrl);\\n\\n    this.websocket.onopen = () => {\\n      console.log('WebSocket connected to EvoAgentX');\\n      callbacks.onConnect?.();\\n    };\\n\\n    this.websocket.onmessage = (event) => {\\n      try {\\n        const message: WebSocketMessage = JSON.parse(event.data);\\n        \\n        switch (message.type) {\\n          case 'chat':\\n            callbacks.onChat?.(message.data);\\n            break;\\n          case 'workflow_progress':\\n            callbacks.onWorkflowProgress?.(message.data);\\n            break;\\n          case 'copilot':\\n            callbacks.onCopilot?.(message.data);\\n            break;\\n          case 'vault_sync':\\n            callbacks.onVaultSync?.(message.data);\\n            break;\\n          case 'error':\\n            callbacks.onError?.(message.data);\\n            break;\\n        }\\n      } catch (error) {\\n        console.error('Error parsing WebSocket message:', error);\\n        callbacks.onError?.('Failed to parse WebSocket message');\\n      }\\n    };\\n\\n    this.websocket.onclose = () => {\\n      console.log('WebSocket disconnected from EvoAgentX');\\n      callbacks.onDisconnect?.();\\n    };\\n\\n    this.websocket.onerror = (error) => {\\n      console.error('WebSocket error:', error);\\n      callbacks.onError?.('WebSocket connection error');\\n    };\\n  }\\n\\n  disconnectWebSocket(): void {\\n    if (this.websocket) {\\n      this.websocket.close();\\n      this.websocket = undefined;\\n    }\\n  }\\n\\n  sendWebSocketMessage(type: string, data: any): void {\\n    if (this.websocket && this.websocket.readyState === WebSocket.OPEN) {\\n      this.websocket.send(JSON.stringify({ type, data }));\\n    }\\n  }\\n\\n  isWebSocketConnected(): boolean {\\n    return this.websocket?.readyState === WebSocket.OPEN;\\n  }\\n}\\n\"]}"}
