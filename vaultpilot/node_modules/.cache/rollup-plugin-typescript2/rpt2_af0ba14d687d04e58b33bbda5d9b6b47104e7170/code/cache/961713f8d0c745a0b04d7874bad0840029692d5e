{"code":"/**\n * TransportDashboard - Real-time transport status monitoring and management\n */\nimport { __awaiter } from \"tslib\";\nimport { Component, Notice } from 'obsidian';\nimport { TransportType } from '../devpipe/transports/DevPipeTransport';\nexport class TransportDashboard extends Component {\n    constructor(containerEl, plugin, config = {\n        updateInterval: 2000,\n        showAdvancedMetrics: true,\n        enableRealTimeUpdates: true\n    }) {\n        super();\n        this.statusCards = new Map();\n        this.isRealTimeEnabled = true;\n        this.containerEl = containerEl;\n        this.plugin = plugin;\n        this.config = config;\n        // Transport manager will be initialized when available\n        this.isRealTimeEnabled = config.enableRealTimeUpdates;\n    }\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.initializeDashboard();\n            if (this.isRealTimeEnabled) {\n                this.startRealTimeUpdates();\n                this.setupEventListeners();\n            }\n            // Initial load\n            yield this.updateDashboard();\n        });\n    }\n    onunload() {\n        this.stopRealTimeUpdates();\n        this.removeEventListeners();\n    }\n    initializeDashboard() {\n        this.containerEl.empty();\n        this.containerEl.addClass('transport-dashboard');\n        // Create header\n        this.createHeader();\n        // Create system health overview\n        this.createSystemHealthSection();\n        // Create transport status cards\n        this.createTransportStatusSection();\n        // Create performance metrics\n        this.createPerformanceMetricsSection();\n        // Create charts section\n        this.createChartsSection();\n        // Create controls\n        this.createControlsSection();\n    }\n    createHeader() {\n        const header = this.containerEl.createDiv('dashboard-header');\n        header.createEl('h2', { text: 'Transport Dashboard' });\n        const lastUpdate = header.createDiv('last-update');\n        lastUpdate.createSpan({ text: 'Last updated: ', cls: 'label' });\n        const timestamp = lastUpdate.createSpan({ cls: 'timestamp' });\n        timestamp.textContent = new Date().toLocaleTimeString();\n        // Real-time indicator\n        const indicator = header.createDiv('realtime-indicator');\n        if (this.isRealTimeEnabled) {\n            indicator.createSpan({ text: '🟢 Real-time', cls: 'realtime-active' });\n        }\n        else {\n            indicator.createSpan({ text: '⚪ Manual refresh', cls: 'realtime-inactive' });\n        }\n    }\n    createSystemHealthSection() {\n        const section = this.containerEl.createDiv('system-health-section');\n        section.createEl('h3', { text: 'System Health' });\n        this.systemHealthContainer = section.createDiv('system-health-container');\n        // Placeholder content\n        this.renderSystemHealthPlaceholder();\n    }\n    createTransportStatusSection() {\n        const section = this.containerEl.createDiv('transport-status-section');\n        section.createEl('h3', { text: 'Transport Status' });\n        const cardsContainer = section.createDiv('transport-cards-container');\n        // Create cards for all supported transport types\n        const supportedTransports = [TransportType.HTTP, TransportType.WEBSOCKET, TransportType.FILESYSTEM];\n        supportedTransports.forEach(transportType => {\n            const card = this.createTransportCard(cardsContainer, transportType);\n            this.statusCards.set(transportType, card);\n        });\n    }\n    createTransportCard(container, transportType) {\n        const card = container.createDiv('transport-status-card');\n        card.addClass(`transport-${transportType}`);\n        card.addClass('status-unknown');\n        // Header\n        const header = card.createDiv('card-header');\n        header.createEl('h4', { text: transportType.toUpperCase() });\n        const statusBadge = header.createDiv('status-badge');\n        statusBadge.textContent = 'Unknown';\n        // Metrics\n        const metrics = card.createDiv('card-metrics');\n        const responseTime = metrics.createDiv('metric');\n        responseTime.createSpan({ text: 'Response Time', cls: 'metric-label' });\n        responseTime.createSpan({ text: '--', cls: 'metric-value response-time' });\n        const successRate = metrics.createDiv('metric');\n        successRate.createSpan({ text: 'Success Rate', cls: 'metric-label' });\n        successRate.createSpan({ text: '--', cls: 'metric-value success-rate' });\n        const errorCount = metrics.createDiv('metric');\n        errorCount.createSpan({ text: 'Errors', cls: 'metric-label' });\n        errorCount.createSpan({ text: '--', cls: 'metric-value error-count' });\n        // Connection state\n        const connection = card.createDiv('connection-state');\n        connection.createSpan({ text: 'Disconnected', cls: 'connection-status' });\n        // Actions\n        const actions = card.createDiv('card-actions');\n        const testButton = actions.createEl('button', { text: 'Test', cls: 'mod-muted' });\n        testButton.onclick = () => this.testTransport(transportType);\n        const switchButton = actions.createEl('button', { text: 'Switch To', cls: 'mod-cta' });\n        switchButton.onclick = () => this.switchToTransport(transportType);\n        return card;\n    }\n    createPerformanceMetricsSection() {\n        const section = this.containerEl.createDiv('performance-metrics-section');\n        section.createEl('h3', { text: 'Performance Metrics' });\n        this.metricsContainer = section.createDiv('metrics-container');\n        // Placeholder content\n        this.renderPerformanceMetricsPlaceholder();\n    }\n    createChartsSection() {\n        const section = this.containerEl.createDiv('charts-section');\n        section.createEl('h3', { text: 'Performance Trends' });\n        this.chartsContainer = section.createDiv('charts-container');\n        // For now, create placeholder charts\n        this.renderChartsPlaceholder();\n    }\n    createControlsSection() {\n        const section = this.containerEl.createDiv('controls-section');\n        const controls = section.createDiv('dashboard-controls');\n        // Refresh button\n        const refreshButton = controls.createEl('button', { text: '🔄 Refresh', cls: 'mod-cta' });\n        refreshButton.onclick = () => this.manualRefresh();\n        // Export button\n        const exportButton = controls.createEl('button', { text: '📊 Export Data', cls: 'mod-muted' });\n        exportButton.onclick = () => this.exportData();\n        // Settings button\n        const settingsButton = controls.createEl('button', { text: '⚙️ Settings', cls: 'mod-muted' });\n        settingsButton.onclick = () => this.openDashboardSettings();\n        // Real-time toggle\n        const realtimeToggle = controls.createDiv('realtime-toggle');\n        realtimeToggle.createSpan({ text: 'Real-time updates: ' });\n        const toggle = realtimeToggle.createEl('input', { type: 'checkbox' });\n        toggle.checked = this.isRealTimeEnabled;\n        toggle.onchange = () => this.toggleRealTimeUpdates(toggle.checked);\n    }\n    updateDashboard() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Update system health\n                this.currentHealth = yield this.getSystemHealth();\n                this.renderSystemHealth(this.currentHealth);\n                // Update transport statuses\n                yield this.updateTransportStatuses();\n                // Update performance metrics\n                this.currentMetrics = yield this.getPerformanceMetrics();\n                this.renderPerformanceMetrics(this.currentMetrics);\n                // Update timestamp\n                this.updateTimestamp();\n            }\n            catch (error) {\n                console.error('Failed to update dashboard:', error);\n                this.renderError('Failed to update dashboard data');\n            }\n        });\n    }\n    getSystemHealth() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Get health from transport manager\n            const transportManager = this.transportManager;\n            // Simulate getting comprehensive health data\n            const health = {\n                overall: 'good',\n                activeTransport: 'http',\n                availableTransports: ['http', 'websocket'],\n                lastHealthCheck: new Date(),\n                uptime: Date.now() - this.plugin.app.vault.adapter.started || 0,\n                totalRequests: Math.floor(Math.random() * 10000),\n                totalErrors: Math.floor(Math.random() * 100)\n            };\n            // Determine overall health based on error rate\n            const errorRate = health.totalErrors / health.totalRequests;\n            if (errorRate < 0.01) {\n                health.overall = 'excellent';\n            }\n            else if (errorRate < 0.05) {\n                health.overall = 'good';\n            }\n            else if (errorRate < 0.1) {\n                health.overall = 'fair';\n            }\n            else if (errorRate < 0.2) {\n                health.overall = 'poor';\n            }\n            else {\n                health.overall = 'critical';\n            }\n            return health;\n        });\n    }\n    getPerformanceMetrics() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Get metrics from transport manager\n            const metrics = {\n                averageResponseTime: 150 + Math.random() * 100,\n                p95ResponseTime: 300 + Math.random() * 200,\n                requestsPerMinute: 100 + Math.random() * 50,\n                errorRate: Math.random() * 0.05,\n                transportDistribution: {\n                    'http': 0.7,\n                    'websocket': 0.25,\n                    'filesystem': 0.05\n                },\n                trends: {\n                    responseTime: this.generateTrendData(150, 20),\n                    errorRate: this.generateTrendData(0.02, 0.01),\n                    throughput: this.generateTrendData(100, 20),\n                    timestamps: this.generateTimestamps(20)\n                }\n            };\n            return metrics;\n        });\n    }\n    generateTrendData(baseline, variance, points = 20) {\n        const data = [];\n        for (let i = 0; i < points; i++) {\n            data.push(baseline + (Math.random() - 0.5) * variance * 2);\n        }\n        return data;\n    }\n    generateTimestamps(points) {\n        const timestamps = [];\n        const now = new Date();\n        for (let i = points - 1; i >= 0; i--) {\n            timestamps.push(new Date(now.getTime() - i * 60000)); // 1 minute intervals\n        }\n        return timestamps;\n    }\n    updateTransportStatuses() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const supportedTransports = [TransportType.HTTP, TransportType.WEBSOCKET, TransportType.FILESYSTEM];\n            for (const transportType of supportedTransports) {\n                const status = yield this.getTransportStatus(transportType);\n                this.updateTransportCard(transportType, status);\n            }\n        });\n    }\n    getTransportStatus(transportType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Simulate getting transport status\n            const isActive = Math.random() > 0.2; // 80% chance of being active\n            const responseTime = 100 + Math.random() * 200;\n            const successRate = 0.9 + Math.random() * 0.1;\n            const status = {\n                type: transportType,\n                status: isActive ? (successRate > 0.95 ? 'healthy' : 'degraded') : 'disconnected',\n                lastResponseTime: responseTime,\n                successRate: successRate,\n                errorCount: Math.floor(Math.random() * 10),\n                capabilities: this.getTransportCapabilities(transportType),\n                connectionState: isActive ? 'connected' : 'disconnected'\n            };\n            if (!isActive) {\n                status.lastError = 'Connection timeout';\n            }\n            return status;\n        });\n    }\n    getTransportCapabilities(transportType) {\n        switch (transportType) {\n            case TransportType.HTTP:\n                return ['RESTful API', 'Connection Pooling', 'Retry Logic'];\n            case TransportType.WEBSOCKET:\n                return ['Real-time', 'Bidirectional', 'Auto-reconnect'];\n            case TransportType.FILESYSTEM:\n                return ['Local Storage', 'File Locking', 'Offline Support'];\n            default:\n                return [];\n        }\n    }\n    updateTransportCard(transportType, status) {\n        const card = this.statusCards.get(transportType);\n        if (!card)\n            return;\n        // Update status class\n        card.className = `transport-status-card transport-${transportType} status-${status.status}`;\n        // Update status badge\n        const statusBadge = card.querySelector('.status-badge');\n        statusBadge.textContent = status.status.charAt(0).toUpperCase() + status.status.slice(1);\n        // Update metrics\n        const responseTimeEl = card.querySelector('.response-time');\n        responseTimeEl.textContent = `${status.lastResponseTime.toFixed(0)}ms`;\n        const successRateEl = card.querySelector('.success-rate');\n        successRateEl.textContent = `${(status.successRate * 100).toFixed(1)}%`;\n        const errorCountEl = card.querySelector('.error-count');\n        errorCountEl.textContent = status.errorCount.toString();\n        // Update connection state\n        const connectionEl = card.querySelector('.connection-status');\n        connectionEl.textContent = status.connectionState.charAt(0).toUpperCase() + status.connectionState.slice(1);\n        connectionEl.className = `connection-status state-${status.connectionState}`;\n        // Update action buttons\n        const switchButton = card.querySelector('.mod-cta');\n        switchButton.disabled = status.status === 'failing' || status.connectionState === 'disconnected';\n    }\n    renderSystemHealth(health) {\n        this.systemHealthContainer.empty();\n        const healthGrid = this.systemHealthContainer.createDiv('health-grid');\n        // Overall health\n        const overallHealth = healthGrid.createDiv('health-item overall-health');\n        overallHealth.addClass(`health-${health.overall}`);\n        overallHealth.createEl('h4', { text: 'Overall Health' });\n        overallHealth.createEl('span', {\n            text: health.overall.charAt(0).toUpperCase() + health.overall.slice(1),\n            cls: 'health-value'\n        });\n        // Active transport\n        const activeTransport = healthGrid.createDiv('health-item');\n        activeTransport.createEl('h4', { text: 'Active Transport' });\n        activeTransport.createEl('span', {\n            text: health.activeTransport.toUpperCase(),\n            cls: 'health-value'\n        });\n        // Uptime\n        const uptime = healthGrid.createDiv('health-item');\n        uptime.createEl('h4', { text: 'Uptime' });\n        uptime.createEl('span', {\n            text: this.formatUptime(health.uptime),\n            cls: 'health-value'\n        });\n        // Total requests\n        const requests = healthGrid.createDiv('health-item');\n        requests.createEl('h4', { text: 'Total Requests' });\n        requests.createEl('span', {\n            text: health.totalRequests.toLocaleString(),\n            cls: 'health-value'\n        });\n        // Error rate\n        const errorRate = healthGrid.createDiv('health-item');\n        errorRate.createEl('h4', { text: 'Error Rate' });\n        const rate = (health.totalErrors / health.totalRequests * 100);\n        errorRate.createEl('span', {\n            text: `${rate.toFixed(2)}%`,\n            cls: 'health-value'\n        });\n    }\n    renderPerformanceMetrics(metrics) {\n        this.metricsContainer.empty();\n        const metricsGrid = this.metricsContainer.createDiv('metrics-grid');\n        // Average response time\n        const avgResponse = metricsGrid.createDiv('metric-item');\n        avgResponse.createEl('h4', { text: 'Avg Response Time' });\n        avgResponse.createEl('span', {\n            text: `${metrics.averageResponseTime.toFixed(0)}ms`,\n            cls: 'metric-value'\n        });\n        // P95 response time\n        const p95Response = metricsGrid.createDiv('metric-item');\n        p95Response.createEl('h4', { text: 'P95 Response Time' });\n        p95Response.createEl('span', {\n            text: `${metrics.p95ResponseTime.toFixed(0)}ms`,\n            cls: 'metric-value'\n        });\n        // Requests per minute\n        const rpm = metricsGrid.createDiv('metric-item');\n        rpm.createEl('h4', { text: 'Requests/Min' });\n        rpm.createEl('span', {\n            text: metrics.requestsPerMinute.toFixed(0),\n            cls: 'metric-value'\n        });\n        // Error rate\n        const errorRate = metricsGrid.createDiv('metric-item');\n        errorRate.createEl('h4', { text: 'Error Rate' });\n        errorRate.createEl('span', {\n            text: `${(metrics.errorRate * 100).toFixed(2)}%`,\n            cls: 'metric-value'\n        });\n        // Transport distribution\n        const distribution = this.metricsContainer.createDiv('transport-distribution');\n        distribution.createEl('h4', { text: 'Transport Usage Distribution' });\n        const distributionBars = distribution.createDiv('distribution-bars');\n        Object.entries(metrics.transportDistribution).forEach(([transport, percentage]) => {\n            const bar = distributionBars.createDiv('distribution-bar');\n            bar.createSpan({ text: transport.toUpperCase(), cls: 'transport-label' });\n            const barContainer = bar.createDiv('bar-container');\n            const barFill = barContainer.createDiv('bar-fill');\n            barFill.style.width = `${percentage * 100}%`;\n            bar.createSpan({ text: `${(percentage * 100).toFixed(1)}%`, cls: 'percentage-label' });\n        });\n    }\n    renderSystemHealthPlaceholder() {\n        this.systemHealthContainer.createEl('p', {\n            text: 'Loading system health data...',\n            cls: 'placeholder-text'\n        });\n    }\n    renderPerformanceMetricsPlaceholder() {\n        this.metricsContainer.createEl('p', {\n            text: 'Loading performance metrics...',\n            cls: 'placeholder-text'\n        });\n    }\n    renderChartsPlaceholder() {\n        this.chartsContainer.createEl('p', {\n            text: 'Performance charts will be displayed here',\n            cls: 'placeholder-text'\n        });\n    }\n    renderError(message) {\n        const errorEl = this.containerEl.createDiv('dashboard-error');\n        errorEl.createEl('p', { text: `Error: ${message}`, cls: 'error-message' });\n    }\n    formatUptime(uptime) {\n        const seconds = Math.floor(uptime / 1000);\n        const minutes = Math.floor(seconds / 60);\n        const hours = Math.floor(minutes / 60);\n        const days = Math.floor(hours / 24);\n        if (days > 0) {\n            return `${days}d ${hours % 24}h`;\n        }\n        else if (hours > 0) {\n            return `${hours}h ${minutes % 60}m`;\n        }\n        else {\n            return `${minutes}m ${seconds % 60}s`;\n        }\n    }\n    updateTimestamp() {\n        const timestampEl = this.containerEl.querySelector('.timestamp');\n        if (timestampEl) {\n            timestampEl.textContent = new Date().toLocaleTimeString();\n        }\n    }\n    startRealTimeUpdates() {\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n        }\n        this.updateInterval = window.setInterval(() => {\n            this.updateDashboard();\n        }, this.config.updateInterval);\n    }\n    stopRealTimeUpdates() {\n        if (this.updateInterval) {\n            clearInterval(this.updateInterval);\n            this.updateInterval = undefined;\n        }\n    }\n    setupEventListeners() {\n        // Listen for transport events if transport manager is available\n        if (this.transportManager) {\n            // Note: Actual event handling will depend on the TransportManager implementation\n            // For now, we'll use a simpler approach\n            console.log('Setting up transport event listeners');\n        }\n    }\n    removeEventListeners() {\n        // Remove transport event listeners if needed\n        if (this.transportManager) {\n            console.log('Removing transport event listeners');\n        }\n    }\n    onTransportSwitched(event) {\n        var _a;\n        new Notice(`Transport switched to ${((_a = event.transport) === null || _a === void 0 ? void 0 : _a.toUpperCase()) || 'unknown'}`);\n        this.updateDashboard();\n    }\n    onHealthChanged(event) {\n        console.log('Health changed:', event);\n        this.updateDashboard();\n    }\n    onErrorOccurred(event) {\n        console.warn('Transport error occurred:', event);\n        this.updateDashboard();\n    }\n    toggleRealTimeUpdates(enabled) {\n        this.isRealTimeEnabled = enabled;\n        this.config.enableRealTimeUpdates = enabled;\n        if (enabled) {\n            this.startRealTimeUpdates();\n            new Notice('Real-time updates enabled');\n        }\n        else {\n            this.stopRealTimeUpdates();\n            new Notice('Real-time updates disabled');\n        }\n        // Update indicator\n        const indicator = this.containerEl.querySelector('.realtime-indicator');\n        if (indicator) {\n            indicator.empty();\n            if (enabled) {\n                indicator.createSpan({ text: '🟢 Real-time', cls: 'realtime-active' });\n            }\n            else {\n                indicator.createSpan({ text: '⚪ Manual refresh', cls: 'realtime-inactive' });\n            }\n        }\n    }\n    manualRefresh() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const button = this.containerEl.querySelector('.mod-cta');\n            if (button) {\n                button.disabled = true;\n                button.textContent = '🔄 Refreshing...';\n            }\n            try {\n                yield this.updateDashboard();\n                new Notice('Dashboard refreshed successfully');\n            }\n            catch (error) {\n                new Notice('Failed to refresh dashboard');\n                console.error('Manual refresh failed:', error);\n            }\n            finally {\n                if (button) {\n                    button.disabled = false;\n                    button.textContent = '🔄 Refresh';\n                }\n            }\n        });\n    }\n    testTransport(transportType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            new Notice(`Testing ${transportType} transport...`);\n            try {\n                // Test the specific transport\n                const result = yield this.performTransportTest(transportType);\n                if (result.success) {\n                    new Notice(`✅ ${transportType} transport test successful`);\n                }\n                else {\n                    new Notice(`❌ ${transportType} transport test failed: ${result.error}`);\n                }\n                // Update the specific card\n                const status = yield this.getTransportStatus(transportType);\n                this.updateTransportCard(transportType, status);\n            }\n            catch (error) {\n                new Notice(`❌ ${transportType} transport test failed`);\n                console.error(`Transport test failed for ${transportType}:`, error);\n            }\n        });\n    }\n    performTransportTest(transportType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Simulate transport test\n            yield new Promise(resolve => setTimeout(resolve, 1000));\n            // Random success/failure for demonstration\n            const success = Math.random() > 0.2;\n            return {\n                success,\n                error: success ? undefined : 'Connection timeout'\n            };\n        });\n    }\n    switchToTransport(transportType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const confirmed = confirm(`Switch to ${transportType} transport as primary?`);\n            if (!confirmed)\n                return;\n            try {\n                // Switch transport via transport manager\n                // await this.transportManager.switchPrimaryTransport(transportType);\n                new Notice(`✅ Switched to ${transportType} transport`);\n                yield this.updateDashboard();\n            }\n            catch (error) {\n                new Notice(`❌ Failed to switch to ${transportType} transport`);\n                console.error('Transport switch failed:', error);\n            }\n        });\n    }\n    exportData() {\n        const data = {\n            timestamp: new Date().toISOString(),\n            systemHealth: this.currentHealth,\n            performanceMetrics: this.currentMetrics,\n            exportedBy: 'VaultPilot Transport Dashboard'\n        };\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `vaultpilot-dashboard-${new Date().toISOString().split('T')[0]}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n        new Notice('Dashboard data exported successfully');\n    }\n    openDashboardSettings() {\n        new Notice('Dashboard settings will open in a future update');\n        // TODO: Implement dashboard settings modal\n    }\n}\n//# sourceMappingURL=TransportDashboard.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/devpipe/TransportManager.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/devpipe/transports/DevPipeTransport.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts"],"map":"{\"version\":3,\"file\":\"TransportDashboard.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/TransportDashboard.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * TransportDashboard - Real-time transport status monitoring and management\\n */\\n\\nimport { Component, Notice } from 'obsidian';\\nimport { TransportManager, TransportManagerConfig } from '../devpipe/TransportManager';\\nimport { TransportType, TransportEvent } from '../devpipe/transports/DevPipeTransport';\\nimport VaultPilotPlugin from '../main';\\n\\nexport interface DashboardConfig {\\n  updateInterval: number;\\n  showAdvancedMetrics: boolean;\\n  enableRealTimeUpdates: boolean;\\n}\\n\\nexport interface TransportStatusData {\\n  type: TransportType;\\n  status: 'healthy' | 'degraded' | 'failing' | 'disconnected';\\n  lastResponseTime: number;\\n  successRate: number;\\n  errorCount: number;\\n  lastError?: string;\\n  capabilities: string[];\\n  connectionState: 'connected' | 'connecting' | 'disconnected' | 'error';\\n}\\n\\nexport interface SystemHealth {\\n  overall: 'excellent' | 'good' | 'fair' | 'poor' | 'critical';\\n  activeTransport: TransportType;\\n  availableTransports: TransportType[];\\n  lastHealthCheck: Date;\\n  uptime: number;\\n  totalRequests: number;\\n  totalErrors: number;\\n}\\n\\nexport interface PerformanceMetrics {\\n  averageResponseTime: number;\\n  p95ResponseTime: number;\\n  requestsPerMinute: number;\\n  errorRate: number;\\n  transportDistribution: Record<TransportType, number>;\\n  trends: {\\n    responseTime: number[];\\n    errorRate: number[];\\n    throughput: number[];\\n    timestamps: Date[];\\n  };\\n}\\n\\nexport class TransportDashboard extends Component {\\n  private containerEl: HTMLElement;\\n  private transportManager?: TransportManager;\\n  private plugin: VaultPilotPlugin;\\n  private config: DashboardConfig;\\n  \\n  private updateInterval?: number;\\n  private statusCards: Map<TransportType, HTMLElement> = new Map();\\n  private metricsContainer!: HTMLElement;\\n  private systemHealthContainer!: HTMLElement;\\n  private chartsContainer!: HTMLElement;\\n  \\n  private currentHealth?: SystemHealth;\\n  private currentMetrics?: PerformanceMetrics;\\n  private isRealTimeEnabled: boolean = true;\\n\\n  constructor(\\n    containerEl: HTMLElement, \\n    plugin: VaultPilotPlugin, \\n    config: DashboardConfig = {\\n      updateInterval: 2000,\\n      showAdvancedMetrics: true,\\n      enableRealTimeUpdates: true\\n    }\\n  ) {\\n    super();\\n    this.containerEl = containerEl;\\n    this.plugin = plugin;\\n    this.config = config;\\n    // Transport manager will be initialized when available\\n    this.isRealTimeEnabled = config.enableRealTimeUpdates;\\n  }\\n\\n  async onload() {\\n    this.initializeDashboard();\\n    \\n    if (this.isRealTimeEnabled) {\\n      this.startRealTimeUpdates();\\n      this.setupEventListeners();\\n    }\\n    \\n    // Initial load\\n    await this.updateDashboard();\\n  }\\n\\n  onunload() {\\n    this.stopRealTimeUpdates();\\n    this.removeEventListeners();\\n  }\\n\\n  private initializeDashboard() {\\n    this.containerEl.empty();\\n    this.containerEl.addClass('transport-dashboard');\\n    \\n    // Create header\\n    this.createHeader();\\n    \\n    // Create system health overview\\n    this.createSystemHealthSection();\\n    \\n    // Create transport status cards\\n    this.createTransportStatusSection();\\n    \\n    // Create performance metrics\\n    this.createPerformanceMetricsSection();\\n    \\n    // Create charts section\\n    this.createChartsSection();\\n    \\n    // Create controls\\n    this.createControlsSection();\\n  }\\n\\n  private createHeader() {\\n    const header = this.containerEl.createDiv('dashboard-header');\\n    header.createEl('h2', { text: 'Transport Dashboard' });\\n    \\n    const lastUpdate = header.createDiv('last-update');\\n    lastUpdate.createSpan({ text: 'Last updated: ', cls: 'label' });\\n    const timestamp = lastUpdate.createSpan({ cls: 'timestamp' });\\n    timestamp.textContent = new Date().toLocaleTimeString();\\n    \\n    // Real-time indicator\\n    const indicator = header.createDiv('realtime-indicator');\\n    if (this.isRealTimeEnabled) {\\n      indicator.createSpan({ text: '🟢 Real-time', cls: 'realtime-active' });\\n    } else {\\n      indicator.createSpan({ text: '⚪ Manual refresh', cls: 'realtime-inactive' });\\n    }\\n  }\\n\\n  private createSystemHealthSection() {\\n    const section = this.containerEl.createDiv('system-health-section');\\n    section.createEl('h3', { text: 'System Health' });\\n    \\n    this.systemHealthContainer = section.createDiv('system-health-container');\\n    \\n    // Placeholder content\\n    this.renderSystemHealthPlaceholder();\\n  }\\n\\n  private createTransportStatusSection() {\\n    const section = this.containerEl.createDiv('transport-status-section');\\n    section.createEl('h3', { text: 'Transport Status' });\\n    \\n    const cardsContainer = section.createDiv('transport-cards-container');\\n    \\n    // Create cards for all supported transport types\\n    const supportedTransports = [TransportType.HTTP, TransportType.WEBSOCKET, TransportType.FILESYSTEM];\\n    \\n    supportedTransports.forEach(transportType => {\\n      const card = this.createTransportCard(cardsContainer, transportType);\\n      this.statusCards.set(transportType, card);\\n    });\\n  }\\n\\n  private createTransportCard(container: HTMLElement, transportType: TransportType): HTMLElement {\\n    const card = container.createDiv('transport-status-card');\\n    card.addClass(`transport-${transportType}`);\\n    card.addClass('status-unknown');\\n    \\n    // Header\\n    const header = card.createDiv('card-header');\\n    header.createEl('h4', { text: transportType.toUpperCase() });\\n    \\n    const statusBadge = header.createDiv('status-badge');\\n    statusBadge.textContent = 'Unknown';\\n    \\n    // Metrics\\n    const metrics = card.createDiv('card-metrics');\\n    \\n    const responseTime = metrics.createDiv('metric');\\n    responseTime.createSpan({ text: 'Response Time', cls: 'metric-label' });\\n    responseTime.createSpan({ text: '--', cls: 'metric-value response-time' });\\n    \\n    const successRate = metrics.createDiv('metric');\\n    successRate.createSpan({ text: 'Success Rate', cls: 'metric-label' });\\n    successRate.createSpan({ text: '--', cls: 'metric-value success-rate' });\\n    \\n    const errorCount = metrics.createDiv('metric');\\n    errorCount.createSpan({ text: 'Errors', cls: 'metric-label' });\\n    errorCount.createSpan({ text: '--', cls: 'metric-value error-count' });\\n    \\n    // Connection state\\n    const connection = card.createDiv('connection-state');\\n    connection.createSpan({ text: 'Disconnected', cls: 'connection-status' });\\n    \\n    // Actions\\n    const actions = card.createDiv('card-actions');\\n    \\n    const testButton = actions.createEl('button', { text: 'Test', cls: 'mod-muted' });\\n    testButton.onclick = () => this.testTransport(transportType);\\n    \\n    const switchButton = actions.createEl('button', { text: 'Switch To', cls: 'mod-cta' });\\n    switchButton.onclick = () => this.switchToTransport(transportType);\\n    \\n    return card;\\n  }\\n\\n  private createPerformanceMetricsSection() {\\n    const section = this.containerEl.createDiv('performance-metrics-section');\\n    section.createEl('h3', { text: 'Performance Metrics' });\\n    \\n    this.metricsContainer = section.createDiv('metrics-container');\\n    \\n    // Placeholder content\\n    this.renderPerformanceMetricsPlaceholder();\\n  }\\n\\n  private createChartsSection() {\\n    const section = this.containerEl.createDiv('charts-section');\\n    section.createEl('h3', { text: 'Performance Trends' });\\n    \\n    this.chartsContainer = section.createDiv('charts-container');\\n    \\n    // For now, create placeholder charts\\n    this.renderChartsPlaceholder();\\n  }\\n\\n  private createControlsSection() {\\n    const section = this.containerEl.createDiv('controls-section');\\n    \\n    const controls = section.createDiv('dashboard-controls');\\n    \\n    // Refresh button\\n    const refreshButton = controls.createEl('button', { text: '🔄 Refresh', cls: 'mod-cta' });\\n    refreshButton.onclick = () => this.manualRefresh();\\n    \\n    // Export button\\n    const exportButton = controls.createEl('button', { text: '📊 Export Data', cls: 'mod-muted' });\\n    exportButton.onclick = () => this.exportData();\\n    \\n    // Settings button\\n    const settingsButton = controls.createEl('button', { text: '⚙️ Settings', cls: 'mod-muted' });\\n    settingsButton.onclick = () => this.openDashboardSettings();\\n    \\n    // Real-time toggle\\n    const realtimeToggle = controls.createDiv('realtime-toggle');\\n    realtimeToggle.createSpan({ text: 'Real-time updates: ' });\\n    \\n    const toggle = realtimeToggle.createEl('input', { type: 'checkbox' });\\n    toggle.checked = this.isRealTimeEnabled;\\n    toggle.onchange = () => this.toggleRealTimeUpdates(toggle.checked);\\n  }\\n\\n  private async updateDashboard() {\\n    try {\\n      // Update system health\\n      this.currentHealth = await this.getSystemHealth();\\n      this.renderSystemHealth(this.currentHealth);\\n      \\n      // Update transport statuses\\n      await this.updateTransportStatuses();\\n      \\n      // Update performance metrics\\n      this.currentMetrics = await this.getPerformanceMetrics();\\n      this.renderPerformanceMetrics(this.currentMetrics);\\n      \\n      // Update timestamp\\n      this.updateTimestamp();\\n      \\n    } catch (error) {\\n      console.error('Failed to update dashboard:', error);\\n      this.renderError('Failed to update dashboard data');\\n    }\\n  }\\n\\n  private async getSystemHealth(): Promise<SystemHealth> {\\n    // Get health from transport manager\\n    const transportManager = this.transportManager;\\n    \\n    // Simulate getting comprehensive health data\\n    const health: SystemHealth = {\\n      overall: 'good',\\n      activeTransport: 'http' as TransportType,\\n      availableTransports: ['http', 'websocket'] as TransportType[],\\n      lastHealthCheck: new Date(),\\n      uptime: Date.now() - (this.plugin.app as any).vault.adapter.started || 0,\\n      totalRequests: Math.floor(Math.random() * 10000),\\n      totalErrors: Math.floor(Math.random() * 100)\\n    };\\n    \\n    // Determine overall health based on error rate\\n    const errorRate = health.totalErrors / health.totalRequests;\\n    if (errorRate < 0.01) {\\n      health.overall = 'excellent';\\n    } else if (errorRate < 0.05) {\\n      health.overall = 'good';\\n    } else if (errorRate < 0.1) {\\n      health.overall = 'fair';\\n    } else if (errorRate < 0.2) {\\n      health.overall = 'poor';\\n    } else {\\n      health.overall = 'critical';\\n    }\\n    \\n    return health;\\n  }\\n\\n  private async getPerformanceMetrics(): Promise<PerformanceMetrics> {\\n    // Get metrics from transport manager\\n    const metrics: PerformanceMetrics = {\\n      averageResponseTime: 150 + Math.random() * 100,\\n      p95ResponseTime: 300 + Math.random() * 200,\\n      requestsPerMinute: 100 + Math.random() * 50,\\n      errorRate: Math.random() * 0.05,\\n      transportDistribution: {\\n        'http': 0.7,\\n        'websocket': 0.25,\\n        'filesystem': 0.05\\n      },\\n      trends: {\\n        responseTime: this.generateTrendData(150, 20),\\n        errorRate: this.generateTrendData(0.02, 0.01),\\n        throughput: this.generateTrendData(100, 20),\\n        timestamps: this.generateTimestamps(20)\\n      }\\n    };\\n    \\n    return metrics;\\n  }\\n\\n  private generateTrendData(baseline: number, variance: number, points: number = 20): number[] {\\n    const data: number[] = [];\\n    for (let i = 0; i < points; i++) {\\n      data.push(baseline + (Math.random() - 0.5) * variance * 2);\\n    }\\n    return data;\\n  }\\n\\n  private generateTimestamps(points: number): Date[] {\\n    const timestamps: Date[] = [];\\n    const now = new Date();\\n    for (let i = points - 1; i >= 0; i--) {\\n      timestamps.push(new Date(now.getTime() - i * 60000)); // 1 minute intervals\\n    }\\n    return timestamps;\\n  }\\n\\n  private async updateTransportStatuses() {\\n    const supportedTransports = [TransportType.HTTP, TransportType.WEBSOCKET, TransportType.FILESYSTEM];\\n    \\n    for (const transportType of supportedTransports) {\\n      const status = await this.getTransportStatus(transportType);\\n      this.updateTransportCard(transportType, status);\\n    }\\n  }\\n\\n  private async getTransportStatus(transportType: TransportType): Promise<TransportStatusData> {\\n    // Simulate getting transport status\\n    const isActive = Math.random() > 0.2; // 80% chance of being active\\n    const responseTime = 100 + Math.random() * 200;\\n    const successRate = 0.9 + Math.random() * 0.1;\\n    \\n    const status: TransportStatusData = {\\n      type: transportType,\\n      status: isActive ? (successRate > 0.95 ? 'healthy' : 'degraded') : 'disconnected',\\n      lastResponseTime: responseTime,\\n      successRate: successRate,\\n      errorCount: Math.floor(Math.random() * 10),\\n      capabilities: this.getTransportCapabilities(transportType),\\n      connectionState: isActive ? 'connected' : 'disconnected'\\n    };\\n    \\n    if (!isActive) {\\n      status.lastError = 'Connection timeout';\\n    }\\n    \\n    return status;\\n  }\\n\\n  private getTransportCapabilities(transportType: TransportType): string[] {\\n    switch (transportType) {\\n      case TransportType.HTTP:\\n        return ['RESTful API', 'Connection Pooling', 'Retry Logic'];\\n      case TransportType.WEBSOCKET:\\n        return ['Real-time', 'Bidirectional', 'Auto-reconnect'];\\n      case TransportType.FILESYSTEM:\\n        return ['Local Storage', 'File Locking', 'Offline Support'];\\n      default:\\n        return [];\\n    }\\n  }\\n\\n  private updateTransportCard(transportType: TransportType, status: TransportStatusData) {\\n    const card = this.statusCards.get(transportType);\\n    if (!card) return;\\n    \\n    // Update status class\\n    card.className = `transport-status-card transport-${transportType} status-${status.status}`;\\n    \\n    // Update status badge\\n    const statusBadge = card.querySelector('.status-badge') as HTMLElement;\\n    statusBadge.textContent = status.status.charAt(0).toUpperCase() + status.status.slice(1);\\n    \\n    // Update metrics\\n    const responseTimeEl = card.querySelector('.response-time') as HTMLElement;\\n    responseTimeEl.textContent = `${status.lastResponseTime.toFixed(0)}ms`;\\n    \\n    const successRateEl = card.querySelector('.success-rate') as HTMLElement;\\n    successRateEl.textContent = `${(status.successRate * 100).toFixed(1)}%`;\\n    \\n    const errorCountEl = card.querySelector('.error-count') as HTMLElement;\\n    errorCountEl.textContent = status.errorCount.toString();\\n    \\n    // Update connection state\\n    const connectionEl = card.querySelector('.connection-status') as HTMLElement;\\n    connectionEl.textContent = status.connectionState.charAt(0).toUpperCase() + status.connectionState.slice(1);\\n    connectionEl.className = `connection-status state-${status.connectionState}`;\\n    \\n    // Update action buttons\\n    const switchButton = card.querySelector('.mod-cta') as HTMLButtonElement;\\n    switchButton.disabled = status.status === 'failing' || status.connectionState === 'disconnected';\\n  }\\n\\n  private renderSystemHealth(health: SystemHealth) {\\n    this.systemHealthContainer.empty();\\n    \\n    const healthGrid = this.systemHealthContainer.createDiv('health-grid');\\n    \\n    // Overall health\\n    const overallHealth = healthGrid.createDiv('health-item overall-health');\\n    overallHealth.addClass(`health-${health.overall}`);\\n    overallHealth.createEl('h4', { text: 'Overall Health' });\\n    overallHealth.createEl('span', { \\n      text: health.overall.charAt(0).toUpperCase() + health.overall.slice(1),\\n      cls: 'health-value'\\n    });\\n    \\n    // Active transport\\n    const activeTransport = healthGrid.createDiv('health-item');\\n    activeTransport.createEl('h4', { text: 'Active Transport' });\\n    activeTransport.createEl('span', { \\n      text: health.activeTransport.toUpperCase(),\\n      cls: 'health-value'\\n    });\\n    \\n    // Uptime\\n    const uptime = healthGrid.createDiv('health-item');\\n    uptime.createEl('h4', { text: 'Uptime' });\\n    uptime.createEl('span', { \\n      text: this.formatUptime(health.uptime),\\n      cls: 'health-value'\\n    });\\n    \\n    // Total requests\\n    const requests = healthGrid.createDiv('health-item');\\n    requests.createEl('h4', { text: 'Total Requests' });\\n    requests.createEl('span', { \\n      text: health.totalRequests.toLocaleString(),\\n      cls: 'health-value'\\n    });\\n    \\n    // Error rate\\n    const errorRate = healthGrid.createDiv('health-item');\\n    errorRate.createEl('h4', { text: 'Error Rate' });\\n    const rate = (health.totalErrors / health.totalRequests * 100);\\n    errorRate.createEl('span', { \\n      text: `${rate.toFixed(2)}%`,\\n      cls: 'health-value'\\n    });\\n  }\\n\\n  private renderPerformanceMetrics(metrics: PerformanceMetrics) {\\n    this.metricsContainer.empty();\\n    \\n    const metricsGrid = this.metricsContainer.createDiv('metrics-grid');\\n    \\n    // Average response time\\n    const avgResponse = metricsGrid.createDiv('metric-item');\\n    avgResponse.createEl('h4', { text: 'Avg Response Time' });\\n    avgResponse.createEl('span', { \\n      text: `${metrics.averageResponseTime.toFixed(0)}ms`,\\n      cls: 'metric-value'\\n    });\\n    \\n    // P95 response time\\n    const p95Response = metricsGrid.createDiv('metric-item');\\n    p95Response.createEl('h4', { text: 'P95 Response Time' });\\n    p95Response.createEl('span', { \\n      text: `${metrics.p95ResponseTime.toFixed(0)}ms`,\\n      cls: 'metric-value'\\n    });\\n    \\n    // Requests per minute\\n    const rpm = metricsGrid.createDiv('metric-item');\\n    rpm.createEl('h4', { text: 'Requests/Min' });\\n    rpm.createEl('span', { \\n      text: metrics.requestsPerMinute.toFixed(0),\\n      cls: 'metric-value'\\n    });\\n    \\n    // Error rate\\n    const errorRate = metricsGrid.createDiv('metric-item');\\n    errorRate.createEl('h4', { text: 'Error Rate' });\\n    errorRate.createEl('span', { \\n      text: `${(metrics.errorRate * 100).toFixed(2)}%`,\\n      cls: 'metric-value'\\n    });\\n    \\n    // Transport distribution\\n    const distribution = this.metricsContainer.createDiv('transport-distribution');\\n    distribution.createEl('h4', { text: 'Transport Usage Distribution' });\\n    \\n    const distributionBars = distribution.createDiv('distribution-bars');\\n    Object.entries(metrics.transportDistribution).forEach(([transport, percentage]) => {\\n      const bar = distributionBars.createDiv('distribution-bar');\\n      bar.createSpan({ text: transport.toUpperCase(), cls: 'transport-label' });\\n      \\n      const barContainer = bar.createDiv('bar-container');\\n      const barFill = barContainer.createDiv('bar-fill');\\n      barFill.style.width = `${percentage * 100}%`;\\n      \\n      bar.createSpan({ text: `${(percentage * 100).toFixed(1)}%`, cls: 'percentage-label' });\\n    });\\n  }\\n\\n  private renderSystemHealthPlaceholder() {\\n    this.systemHealthContainer.createEl('p', { \\n      text: 'Loading system health data...',\\n      cls: 'placeholder-text'\\n    });\\n  }\\n\\n  private renderPerformanceMetricsPlaceholder() {\\n    this.metricsContainer.createEl('p', { \\n      text: 'Loading performance metrics...',\\n      cls: 'placeholder-text'\\n    });\\n  }\\n\\n  private renderChartsPlaceholder() {\\n    this.chartsContainer.createEl('p', { \\n      text: 'Performance charts will be displayed here',\\n      cls: 'placeholder-text'\\n    });\\n  }\\n\\n  private renderError(message: string) {\\n    const errorEl = this.containerEl.createDiv('dashboard-error');\\n    errorEl.createEl('p', { text: `Error: ${message}`, cls: 'error-message' });\\n  }\\n\\n  private formatUptime(uptime: number): string {\\n    const seconds = Math.floor(uptime / 1000);\\n    const minutes = Math.floor(seconds / 60);\\n    const hours = Math.floor(minutes / 60);\\n    const days = Math.floor(hours / 24);\\n    \\n    if (days > 0) {\\n      return `${days}d ${hours % 24}h`;\\n    } else if (hours > 0) {\\n      return `${hours}h ${minutes % 60}m`;\\n    } else {\\n      return `${minutes}m ${seconds % 60}s`;\\n    }\\n  }\\n\\n  private updateTimestamp() {\\n    const timestampEl = this.containerEl.querySelector('.timestamp') as HTMLElement;\\n    if (timestampEl) {\\n      timestampEl.textContent = new Date().toLocaleTimeString();\\n    }\\n  }\\n\\n  private startRealTimeUpdates() {\\n    if (this.updateInterval) {\\n      clearInterval(this.updateInterval);\\n    }\\n    \\n    this.updateInterval = window.setInterval(() => {\\n      this.updateDashboard();\\n    }, this.config.updateInterval);\\n  }\\n\\n  private stopRealTimeUpdates() {\\n    if (this.updateInterval) {\\n      clearInterval(this.updateInterval);\\n      this.updateInterval = undefined;\\n    }\\n  }\\n\\n  private setupEventListeners() {\\n    // Listen for transport events if transport manager is available\\n    if (this.transportManager) {\\n      // Note: Actual event handling will depend on the TransportManager implementation\\n      // For now, we'll use a simpler approach\\n      console.log('Setting up transport event listeners');\\n    }\\n  }\\n\\n  private removeEventListeners() {\\n    // Remove transport event listeners if needed\\n    if (this.transportManager) {\\n      console.log('Removing transport event listeners');\\n    }\\n  }\\n\\n  private onTransportSwitched(event: any) {\\n    new Notice(`Transport switched to ${event.transport?.toUpperCase() || 'unknown'}`);\\n    this.updateDashboard();\\n  }\\n\\n  private onHealthChanged(event: any) {\\n    console.log('Health changed:', event);\\n    this.updateDashboard();\\n  }\\n\\n  private onErrorOccurred(event: any) {\\n    console.warn('Transport error occurred:', event);\\n    this.updateDashboard();\\n  }\\n\\n  private toggleRealTimeUpdates(enabled: boolean) {\\n    this.isRealTimeEnabled = enabled;\\n    this.config.enableRealTimeUpdates = enabled;\\n    \\n    if (enabled) {\\n      this.startRealTimeUpdates();\\n      new Notice('Real-time updates enabled');\\n    } else {\\n      this.stopRealTimeUpdates();\\n      new Notice('Real-time updates disabled');\\n    }\\n    \\n    // Update indicator\\n    const indicator = this.containerEl.querySelector('.realtime-indicator') as HTMLElement;\\n    if (indicator) {\\n      indicator.empty();\\n      if (enabled) {\\n        indicator.createSpan({ text: '🟢 Real-time', cls: 'realtime-active' });\\n      } else {\\n        indicator.createSpan({ text: '⚪ Manual refresh', cls: 'realtime-inactive' });\\n      }\\n    }\\n  }\\n\\n  private async manualRefresh() {\\n    const button = this.containerEl.querySelector('.mod-cta') as HTMLButtonElement;\\n    if (button) {\\n      button.disabled = true;\\n      button.textContent = '🔄 Refreshing...';\\n    }\\n    \\n    try {\\n      await this.updateDashboard();\\n      new Notice('Dashboard refreshed successfully');\\n    } catch (error) {\\n      new Notice('Failed to refresh dashboard');\\n      console.error('Manual refresh failed:', error);\\n    } finally {\\n      if (button) {\\n        button.disabled = false;\\n        button.textContent = '🔄 Refresh';\\n      }\\n    }\\n  }\\n\\n  private async testTransport(transportType: TransportType) {\\n    new Notice(`Testing ${transportType} transport...`);\\n    \\n    try {\\n      // Test the specific transport\\n      const result = await this.performTransportTest(transportType);\\n      \\n      if (result.success) {\\n        new Notice(`✅ ${transportType} transport test successful`);\\n      } else {\\n        new Notice(`❌ ${transportType} transport test failed: ${result.error}`);\\n      }\\n      \\n      // Update the specific card\\n      const status = await this.getTransportStatus(transportType);\\n      this.updateTransportCard(transportType, status);\\n      \\n    } catch (error) {\\n      new Notice(`❌ ${transportType} transport test failed`);\\n      console.error(`Transport test failed for ${transportType}:`, error);\\n    }\\n  }\\n\\n  private async performTransportTest(transportType: TransportType): Promise<{success: boolean, error?: string}> {\\n    // Simulate transport test\\n    await new Promise(resolve => setTimeout(resolve, 1000));\\n    \\n    // Random success/failure for demonstration\\n    const success = Math.random() > 0.2;\\n    \\n    return {\\n      success,\\n      error: success ? undefined : 'Connection timeout'\\n    };\\n  }\\n\\n  private async switchToTransport(transportType: TransportType) {\\n    const confirmed = confirm(`Switch to ${transportType} transport as primary?`);\\n    if (!confirmed) return;\\n    \\n    try {\\n      // Switch transport via transport manager\\n      // await this.transportManager.switchPrimaryTransport(transportType);\\n      \\n      new Notice(`✅ Switched to ${transportType} transport`);\\n      await this.updateDashboard();\\n      \\n    } catch (error) {\\n      new Notice(`❌ Failed to switch to ${transportType} transport`);\\n      console.error('Transport switch failed:', error);\\n    }\\n  }\\n\\n  private exportData() {\\n    const data = {\\n      timestamp: new Date().toISOString(),\\n      systemHealth: this.currentHealth,\\n      performanceMetrics: this.currentMetrics,\\n      exportedBy: 'VaultPilot Transport Dashboard'\\n    };\\n    \\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\\n    const url = URL.createObjectURL(blob);\\n    \\n    const a = document.createElement('a');\\n    a.href = url;\\n    a.download = `vaultpilot-dashboard-${new Date().toISOString().split('T')[0]}.json`;\\n    a.click();\\n    \\n    URL.revokeObjectURL(url);\\n    new Notice('Dashboard data exported successfully');\\n  }\\n\\n  private openDashboardSettings() {\\n    new Notice('Dashboard settings will open in a future update');\\n    // TODO: Implement dashboard settings modal\\n  }\\n}\\n\"]}"}
