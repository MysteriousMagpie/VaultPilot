{"code":"/**\n * AdvancedSettings - Visual configuration interface for VaultPilot\n */\nimport { __awaiter } from \"tslib\";\nimport { Setting, Component, Notice } from 'obsidian';\nimport { TransportType } from '../devpipe/transports/DevPipeTransport';\nexport class AdvancedSettings extends Component {\n    constructor(containerEl, plugin, config = {\n        showExpertOptions: false,\n        enableRealTimeValidation: true,\n        allowImportExport: true\n    }) {\n        super();\n        this.profiles = [];\n        this.hasUnsavedChanges = false;\n        this.containerEl = containerEl;\n        this.plugin = plugin;\n        this.config = config;\n        this.currentConfiguration = this.getDefaultConfiguration();\n        this.loadProfiles();\n    }\n    onload() {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.initializeInterface();\n            yield this.loadCurrentConfiguration();\n            this.renderSettings();\n            if (this.config.enableRealTimeValidation) {\n                this.startRealTimeValidation();\n            }\n        });\n    }\n    onunload() {\n        if (this.validationTimeout) {\n            clearTimeout(this.validationTimeout);\n        }\n        if (this.hasUnsavedChanges) {\n            const shouldSave = confirm('You have unsaved changes. Would you like to save them?');\n            if (shouldSave) {\n                this.saveConfiguration();\n            }\n        }\n    }\n    initializeInterface() {\n        this.containerEl.empty();\n        this.containerEl.addClass('advanced-settings');\n        // Create header\n        this.createHeader();\n        // Create profile management section\n        this.createProfileManagement();\n        // Create validation section\n        this.createValidationSection();\n        // Create configuration sections\n        this.createConfigurationSections();\n        // Create preview section\n        this.createPreviewSection();\n        // Create action buttons\n        this.createActionButtons();\n    }\n    createHeader() {\n        const header = this.containerEl.createDiv('settings-header');\n        header.createEl('h2', { text: 'Advanced Settings' });\n        header.createEl('p', {\n            text: 'Fine-tune VaultPilot configuration for optimal performance',\n            cls: 'settings-subtitle'\n        });\n        // Expert mode toggle\n        const expertToggle = header.createDiv('expert-toggle');\n        const expertLabel = expertToggle.createEl('label');\n        expertLabel.createSpan({ text: 'Expert Mode' });\n        const expertCheckbox = expertLabel.createEl('input', { type: 'checkbox' });\n        expertCheckbox.checked = this.config.showExpertOptions;\n        expertCheckbox.addEventListener('change', () => {\n            this.config.showExpertOptions = expertCheckbox.checked;\n            this.updateExpertOptionsVisibility();\n        });\n    }\n    createProfileManagement() {\n        const section = this.containerEl.createDiv('profile-management-section');\n        section.createEl('h3', { text: 'Configuration Profiles' });\n        const profileControls = section.createDiv('profile-controls');\n        // Profile selector\n        const selectorContainer = profileControls.createDiv('profile-selector-container');\n        selectorContainer.createSpan({ text: 'Current Profile:', cls: 'profile-label' });\n        this.profileSelector = selectorContainer.createEl('select', { cls: 'profile-selector' });\n        this.updateProfileSelector();\n        this.profileSelector.addEventListener('change', () => {\n            this.loadProfile(this.profileSelector.value);\n        });\n        // Profile action buttons\n        const profileActions = profileControls.createDiv('profile-actions');\n        const saveProfileBtn = profileActions.createEl('button', { text: 'Save as New Profile', cls: 'mod-muted' });\n        saveProfileBtn.addEventListener('click', () => this.showSaveProfileModal());\n        const deleteProfileBtn = profileActions.createEl('button', { text: 'Delete Profile', cls: 'mod-warning' });\n        deleteProfileBtn.addEventListener('click', () => this.deleteCurrentProfile());\n        if (this.config.allowImportExport) {\n            const importBtn = profileActions.createEl('button', { text: 'Import', cls: 'mod-muted' });\n            importBtn.addEventListener('click', () => this.importConfiguration());\n            const exportBtn = profileActions.createEl('button', { text: 'Export', cls: 'mod-muted' });\n            exportBtn.addEventListener('click', () => this.exportConfiguration());\n        }\n    }\n    createValidationSection() {\n        const section = this.containerEl.createDiv('validation-section');\n        section.createEl('h3', { text: 'Configuration Status' });\n        this.validationContainer = section.createDiv('validation-container');\n        this.renderValidationPlaceholder();\n    }\n    createConfigurationSections() {\n        this.configurationContainer = this.containerEl.createDiv('configuration-sections');\n        // Transport settings\n        this.createTransportSettings();\n        // Performance settings\n        this.createPerformanceSettings();\n        // Monitoring settings\n        this.createMonitoringSettings();\n        // UI settings\n        this.createUISettings();\n        // Privacy settings\n        this.createPrivacySettings();\n    }\n    createTransportSettings() {\n        const section = this.configurationContainer.createDiv('config-section transport-section');\n        section.createEl('h4', { text: '🚀 Transport Configuration' });\n        const settingsContainer = section.createDiv('settings-container');\n        // Primary transport selection\n        new Setting(settingsContainer)\n            .setName('Primary Transport')\n            .setDesc('Choose the preferred transport method')\n            .addDropdown(dropdown => {\n            dropdown.addOption(TransportType.HTTP, 'HTTP (Reliable)');\n            dropdown.addOption(TransportType.WEBSOCKET, 'WebSocket (Real-time)');\n            dropdown.addOption(TransportType.FILESYSTEM, 'FileSystem (Offline)');\n            dropdown.setValue(this.currentConfiguration.transport.primaryTransport);\n            dropdown.onChange(value => {\n                this.currentConfiguration.transport.primaryTransport = value;\n                this.onConfigurationChange();\n            });\n        });\n        // Fallback chain configuration\n        this.createFallbackChainConfig(settingsContainer);\n        // Selection criteria sliders\n        this.createSelectionCriteriaConfig(settingsContainer);\n        // Timeout configuration\n        this.createTimeoutConfig(settingsContainer);\n        // Retry policy configuration\n        this.createRetryPolicyConfig(settingsContainer);\n    }\n    createFallbackChainConfig(container) {\n        const fallbackSetting = new Setting(container)\n            .setName('Fallback Chain')\n            .setDesc('Configure transport fallback order');\n        const fallbackContainer = fallbackSetting.controlEl.createDiv('fallback-chain-config');\n        // Current fallback chain display\n        const chainDisplay = fallbackContainer.createDiv('chain-display');\n        this.updateFallbackChainDisplay(chainDisplay);\n        // Add transport buttons\n        const addButtons = fallbackContainer.createDiv('add-transport-buttons');\n        [TransportType.HTTP, TransportType.WEBSOCKET, TransportType.FILESYSTEM].forEach(transport => {\n            const button = addButtons.createEl('button', {\n                text: `Add ${transport.toUpperCase()}`,\n                cls: 'mod-muted add-transport-btn'\n            });\n            button.addEventListener('click', () => {\n                if (!this.currentConfiguration.transport.fallbackChain.includes(transport)) {\n                    this.currentConfiguration.transport.fallbackChain.push(transport);\n                    this.updateFallbackChainDisplay(chainDisplay);\n                    this.onConfigurationChange();\n                }\n            });\n        });\n    }\n    updateFallbackChainDisplay(container) {\n        container.empty();\n        const chain = this.currentConfiguration.transport.fallbackChain;\n        chain.forEach((transport, index) => {\n            const item = container.createDiv('chain-item');\n            item.createSpan({ text: `${index + 1}. ${transport.toUpperCase()}`, cls: 'chain-label' });\n            const actions = item.createDiv('chain-actions');\n            if (index > 0) {\n                const moveUpBtn = actions.createEl('button', { text: '↑', cls: 'mod-muted chain-btn' });\n                moveUpBtn.addEventListener('click', () => {\n                    [chain[index], chain[index - 1]] = [chain[index - 1], chain[index]];\n                    this.updateFallbackChainDisplay(container);\n                    this.onConfigurationChange();\n                });\n            }\n            if (index < chain.length - 1) {\n                const moveDownBtn = actions.createEl('button', { text: '↓', cls: 'mod-muted chain-btn' });\n                moveDownBtn.addEventListener('click', () => {\n                    [chain[index], chain[index + 1]] = [chain[index + 1], chain[index]];\n                    this.updateFallbackChainDisplay(container);\n                    this.onConfigurationChange();\n                });\n            }\n            const removeBtn = actions.createEl('button', { text: '✕', cls: 'mod-warning chain-btn' });\n            removeBtn.addEventListener('click', () => {\n                chain.splice(index, 1);\n                this.updateFallbackChainDisplay(container);\n                this.onConfigurationChange();\n            });\n        });\n    }\n    createSelectionCriteriaConfig(container) {\n        const criteriaContainer = container.createDiv('selection-criteria-container');\n        criteriaContainer.createEl('h5', { text: 'Transport Selection Criteria' });\n        const criteria = this.currentConfiguration.transport.selectionCriteria;\n        // Latency weight\n        new Setting(criteriaContainer)\n            .setName('Latency Priority')\n            .setDesc('How much to prioritize low latency (0-100%)')\n            .addSlider(slider => {\n            slider.setLimits(0, 100, 5);\n            slider.setValue(criteria.latencyWeight * 100);\n            slider.onChange(value => {\n                criteria.latencyWeight = value / 100;\n                this.normalizeSelectionCriteria();\n                this.onConfigurationChange();\n            });\n            slider.setDynamicTooltip();\n        });\n        // Reliability weight\n        new Setting(criteriaContainer)\n            .setName('Reliability Priority')\n            .setDesc('How much to prioritize reliability (0-100%)')\n            .addSlider(slider => {\n            slider.setLimits(0, 100, 5);\n            slider.setValue(criteria.reliabilityWeight * 100);\n            slider.onChange(value => {\n                criteria.reliabilityWeight = value / 100;\n                this.normalizeSelectionCriteria();\n                this.onConfigurationChange();\n            });\n            slider.setDynamicTooltip();\n        });\n        // Capability weight\n        new Setting(criteriaContainer)\n            .setName('Feature Priority')\n            .setDesc('How much to prioritize advanced features (0-100%)')\n            .addSlider(slider => {\n            slider.setLimits(0, 100, 5);\n            slider.setValue(criteria.capabilityWeight * 100);\n            slider.onChange(value => {\n                criteria.capabilityWeight = value / 100;\n                this.normalizeSelectionCriteria();\n                this.onConfigurationChange();\n            });\n            slider.setDynamicTooltip();\n        });\n        // Cost weight\n        new Setting(criteriaContainer)\n            .setName('Efficiency Priority')\n            .setDesc('How much to prioritize resource efficiency (0-100%)')\n            .addSlider(slider => {\n            slider.setLimits(0, 100, 5);\n            slider.setValue(criteria.costWeight * 100);\n            slider.onChange(value => {\n                criteria.costWeight = value / 100;\n                this.normalizeSelectionCriteria();\n                this.onConfigurationChange();\n            });\n            slider.setDynamicTooltip();\n        });\n    }\n    createTimeoutConfig(container) {\n        if (!this.config.showExpertOptions)\n            return;\n        const timeoutContainer = container.createDiv('timeout-config-container expert-option');\n        timeoutContainer.createEl('h5', { text: 'Timeout Configuration' });\n        const timeouts = this.currentConfiguration.transport.timeouts;\n        new Setting(timeoutContainer)\n            .setName('Connection Timeout')\n            .setDesc('Maximum time to wait for initial connection (ms)')\n            .addText(text => {\n            text.setValue(timeouts.connection.toString());\n            text.onChange(value => {\n                const parsed = parseInt(value, 10);\n                if (!isNaN(parsed) && parsed > 0) {\n                    timeouts.connection = parsed;\n                    this.onConfigurationChange();\n                }\n            });\n        });\n        new Setting(timeoutContainer)\n            .setName('Request Timeout')\n            .setDesc('Maximum time to wait for request completion (ms)')\n            .addText(text => {\n            text.setValue(timeouts.request.toString());\n            text.onChange(value => {\n                const parsed = parseInt(value, 10);\n                if (!isNaN(parsed) && parsed > 0) {\n                    timeouts.request = parsed;\n                    this.onConfigurationChange();\n                }\n            });\n        });\n    }\n    createRetryPolicyConfig(container) {\n        if (!this.config.showExpertOptions)\n            return;\n        const retryContainer = container.createDiv('retry-policy-container expert-option');\n        retryContainer.createEl('h5', { text: 'Retry Policy' });\n        const retry = this.currentConfiguration.transport.retryPolicy;\n        new Setting(retryContainer)\n            .setName('Max Retry Attempts')\n            .setDesc('Maximum number of retry attempts for failed requests')\n            .addSlider(slider => {\n            slider.setLimits(0, 10, 1);\n            slider.setValue(retry.maxAttempts);\n            slider.onChange(value => {\n                retry.maxAttempts = value;\n                this.onConfigurationChange();\n            });\n            slider.setDynamicTooltip();\n        });\n        new Setting(retryContainer)\n            .setName('Backoff Multiplier')\n            .setDesc('Exponential backoff multiplier for retry delays')\n            .addSlider(slider => {\n            slider.setLimits(1, 5, 0.1);\n            slider.setValue(retry.backoffMultiplier);\n            slider.onChange(value => {\n                retry.backoffMultiplier = value;\n                this.onConfigurationChange();\n            });\n            slider.setDynamicTooltip();\n        });\n    }\n    createPerformanceSettings() {\n        const section = this.configurationContainer.createDiv('config-section performance-section');\n        section.createEl('h4', { text: '⚡ Performance Configuration' });\n        const settingsContainer = section.createDiv('settings-container');\n        // Performance mode\n        new Setting(settingsContainer)\n            .setName('Performance Mode')\n            .setDesc('Balance between speed, reliability, and resource usage')\n            .addDropdown(dropdown => {\n            dropdown.addOption('performance', 'Performance (Prioritize Speed)');\n            dropdown.addOption('balanced', 'Balanced (Recommended)');\n            dropdown.addOption('reliability', 'Reliability (Prioritize Stability)');\n            dropdown.setValue(this.currentConfiguration.performance.mode);\n            dropdown.onChange(value => {\n                this.currentConfiguration.performance.mode = value;\n                this.applyPerformanceModePreset(value);\n                this.onConfigurationChange();\n            });\n        });\n        // Connection pooling\n        new Setting(settingsContainer)\n            .setName('Connection Pooling')\n            .setDesc('Reuse connections to improve performance')\n            .addToggle(toggle => {\n            toggle.setValue(this.currentConfiguration.performance.enableConnectionPooling);\n            toggle.onChange(value => {\n                this.currentConfiguration.performance.enableConnectionPooling = value;\n                this.onConfigurationChange();\n            });\n        });\n        // Compression\n        new Setting(settingsContainer)\n            .setName('Compression')\n            .setDesc('Enable data compression to reduce bandwidth usage')\n            .addToggle(toggle => {\n            toggle.setValue(this.currentConfiguration.performance.enableCompression);\n            toggle.onChange(value => {\n                this.currentConfiguration.performance.enableCompression = value;\n                this.onConfigurationChange();\n            });\n        });\n        // Caching\n        new Setting(settingsContainer)\n            .setName('Response Caching')\n            .setDesc('Cache responses to improve performance')\n            .addToggle(toggle => {\n            toggle.setValue(this.currentConfiguration.performance.enableCaching);\n            toggle.onChange(value => {\n                this.currentConfiguration.performance.enableCaching = value;\n                this.onConfigurationChange();\n            });\n        });\n        if (this.config.showExpertOptions) {\n            // Max concurrent requests\n            new Setting(settingsContainer)\n                .setName('Max Concurrent Requests')\n                .setDesc('Maximum number of simultaneous requests')\n                .setClass('expert-option')\n                .addSlider(slider => {\n                slider.setLimits(1, 20, 1);\n                slider.setValue(this.currentConfiguration.performance.maxConcurrentRequests);\n                slider.onChange(value => {\n                    this.currentConfiguration.performance.maxConcurrentRequests = value;\n                    this.onConfigurationChange();\n                });\n                slider.setDynamicTooltip();\n            });\n            // Cache size\n            new Setting(settingsContainer)\n                .setName('Cache Size (MB)')\n                .setDesc('Maximum cache size in megabytes')\n                .setClass('expert-option')\n                .addSlider(slider => {\n                slider.setLimits(1, 100, 5);\n                slider.setValue(this.currentConfiguration.performance.cacheSize);\n                slider.onChange(value => {\n                    this.currentConfiguration.performance.cacheSize = value;\n                    this.onConfigurationChange();\n                });\n                slider.setDynamicTooltip();\n            });\n        }\n    }\n    createMonitoringSettings() {\n        const section = this.configurationContainer.createDiv('config-section monitoring-section');\n        section.createEl('h4', { text: '📊 Monitoring Configuration' });\n        const settingsContainer = section.createDiv('settings-container');\n        // Health checks\n        new Setting(settingsContainer)\n            .setName('Health Checks')\n            .setDesc('Monitor transport health automatically')\n            .addToggle(toggle => {\n            toggle.setValue(this.currentConfiguration.monitoring.enableHealthChecks);\n            toggle.onChange(value => {\n                this.currentConfiguration.monitoring.enableHealthChecks = value;\n                this.onConfigurationChange();\n            });\n        });\n        // Metrics collection\n        new Setting(settingsContainer)\n            .setName('Performance Metrics')\n            .setDesc('Collect detailed performance metrics')\n            .addToggle(toggle => {\n            toggle.setValue(this.currentConfiguration.monitoring.enableMetrics);\n            toggle.onChange(value => {\n                this.currentConfiguration.monitoring.enableMetrics = value;\n                this.onConfigurationChange();\n            });\n        });\n        // Predictive alerts\n        new Setting(settingsContainer)\n            .setName('Predictive Alerts')\n            .setDesc('Get early warnings about potential issues')\n            .addToggle(toggle => {\n            toggle.setValue(this.currentConfiguration.monitoring.enablePredictiveAlerts);\n            toggle.onChange(value => {\n                this.currentConfiguration.monitoring.enablePredictiveAlerts = value;\n                this.onConfigurationChange();\n            });\n        });\n    }\n    createUISettings() {\n        const section = this.configurationContainer.createDiv('config-section ui-section');\n        section.createEl('h4', { text: '🎨 User Interface' });\n        const settingsContainer = section.createDiv('settings-container');\n        // Theme\n        new Setting(settingsContainer)\n            .setName('Theme')\n            .setDesc('Choose the interface theme')\n            .addDropdown(dropdown => {\n            dropdown.addOption('auto', 'Auto (Follow Obsidian)');\n            dropdown.addOption('light', 'Light');\n            dropdown.addOption('dark', 'Dark');\n            dropdown.setValue(this.currentConfiguration.ui.theme);\n            dropdown.onChange(value => {\n                this.currentConfiguration.ui.theme = value;\n                this.onConfigurationChange();\n            });\n        });\n        // Animations\n        new Setting(settingsContainer)\n            .setName('Animations')\n            .setDesc('Enable UI animations and transitions')\n            .addToggle(toggle => {\n            toggle.setValue(this.currentConfiguration.ui.enableAnimations);\n            toggle.onChange(value => {\n                this.currentConfiguration.ui.enableAnimations = value;\n                this.onConfigurationChange();\n            });\n        });\n        // Advanced metrics\n        new Setting(settingsContainer)\n            .setName('Advanced Metrics')\n            .setDesc('Show detailed metrics in dashboard')\n            .addToggle(toggle => {\n            toggle.setValue(this.currentConfiguration.ui.showAdvancedMetrics);\n            toggle.onChange(value => {\n                this.currentConfiguration.ui.showAdvancedMetrics = value;\n                this.onConfigurationChange();\n            });\n        });\n        // Dashboard refresh rate\n        new Setting(settingsContainer)\n            .setName('Dashboard Refresh Rate')\n            .setDesc('How often to update the dashboard (seconds)')\n            .addSlider(slider => {\n            slider.setLimits(1, 60, 1);\n            slider.setValue(this.currentConfiguration.ui.dashboardRefreshRate);\n            slider.onChange(value => {\n                this.currentConfiguration.ui.dashboardRefreshRate = value;\n                this.onConfigurationChange();\n            });\n            slider.setDynamicTooltip();\n        });\n    }\n    createPrivacySettings() {\n        const section = this.configurationContainer.createDiv('config-section privacy-section');\n        section.createEl('h4', { text: '🔒 Privacy & Data' });\n        const settingsContainer = section.createDiv('settings-container');\n        // Analytics\n        new Setting(settingsContainer)\n            .setName('Usage Analytics')\n            .setDesc('Help improve VaultPilot by sharing anonymous usage data')\n            .addToggle(toggle => {\n            toggle.setValue(this.currentConfiguration.privacy.enableAnalytics);\n            toggle.onChange(value => {\n                this.currentConfiguration.privacy.enableAnalytics = value;\n                this.onConfigurationChange();\n            });\n        });\n        // Data retention\n        new Setting(settingsContainer)\n            .setName('Data Retention')\n            .setDesc('How long to keep performance and usage data (days)')\n            .addSlider(slider => {\n            slider.setLimits(1, 90, 1);\n            slider.setValue(this.currentConfiguration.privacy.dataRetentionDays);\n            slider.onChange(value => {\n                this.currentConfiguration.privacy.dataRetentionDays = value;\n                this.onConfigurationChange();\n            });\n            slider.setDynamicTooltip();\n        });\n    }\n    createPreviewSection() {\n        const section = this.containerEl.createDiv('preview-section');\n        section.createEl('h3', { text: 'Configuration Preview' });\n        this.previewContainer = section.createDiv('preview-container');\n        this.updatePreview();\n    }\n    createActionButtons() {\n        const actions = this.containerEl.createDiv('settings-actions');\n        const saveBtn = actions.createEl('button', { text: 'Save Configuration', cls: 'mod-cta' });\n        saveBtn.addEventListener('click', () => this.saveConfiguration());\n        const resetBtn = actions.createEl('button', { text: 'Reset to Defaults', cls: 'mod-warning' });\n        resetBtn.addEventListener('click', () => this.resetToDefaults());\n        const testBtn = actions.createEl('button', { text: 'Test Configuration', cls: 'mod-muted' });\n        testBtn.addEventListener('click', () => this.testConfiguration());\n    }\n    renderSettings() {\n        // Trigger initial rendering and validation\n        this.onConfigurationChange();\n    }\n    loadCurrentConfiguration() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Load configuration from plugin settings\n                if (this.plugin.settings.advancedConfiguration) {\n                    this.currentConfiguration = Object.assign({}, this.plugin.settings.advancedConfiguration);\n                }\n            }\n            catch (error) {\n                console.error('Failed to load current configuration:', error);\n                new Notice('Failed to load configuration, using defaults');\n            }\n        });\n    }\n    getDefaultConfiguration() {\n        return {\n            transport: {\n                primaryTransport: TransportType.HTTP,\n                fallbackChain: [TransportType.HTTP, TransportType.WEBSOCKET],\n                selectionCriteria: {\n                    latencyWeight: 0.3,\n                    reliabilityWeight: 0.3,\n                    capabilityWeight: 0.2,\n                    costWeight: 0.2\n                },\n                timeouts: {\n                    connection: 5000,\n                    request: 30000,\n                    retry: 1000\n                },\n                retryPolicy: {\n                    maxAttempts: 3,\n                    backoffMultiplier: 2,\n                    maxBackoffTime: 10000\n                }\n            },\n            performance: {\n                mode: 'balanced',\n                enableConnectionPooling: true,\n                maxConcurrentRequests: 5,\n                enableCompression: true,\n                enableCaching: true,\n                cacheSize: 10\n            },\n            monitoring: {\n                enableHealthChecks: true,\n                healthCheckInterval: 30000,\n                enableMetrics: true,\n                metricsRetention: 7,\n                enablePredictiveAlerts: true\n            },\n            ui: {\n                theme: 'auto',\n                enableAnimations: true,\n                showAdvancedMetrics: false,\n                dashboardRefreshRate: 2,\n                enableNotifications: true\n            },\n            privacy: {\n                enableAnalytics: true,\n                shareUsageData: false,\n                dataRetentionDays: 30\n            }\n        };\n    }\n    onConfigurationChange() {\n        this.hasUnsavedChanges = true;\n        if (this.config.enableRealTimeValidation) {\n            this.scheduleValidation();\n        }\n        this.updatePreview();\n    }\n    scheduleValidation() {\n        if (this.validationTimeout) {\n            clearTimeout(this.validationTimeout);\n        }\n        this.validationTimeout = window.setTimeout(() => {\n            this.validateConfiguration();\n        }, 500); // Debounce validation\n    }\n    validateConfiguration() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const errors = [];\n            const warnings = [];\n            // Validate transport configuration\n            if (this.currentConfiguration.transport.fallbackChain.length === 0) {\n                errors.push({\n                    field: 'transport.fallbackChain',\n                    message: 'At least one transport must be configured in the fallback chain',\n                    severity: 'error',\n                    suggestion: 'Add at least one transport to the fallback chain'\n                });\n            }\n            // Validate selection criteria\n            const criteria = this.currentConfiguration.transport.selectionCriteria;\n            const totalWeight = criteria.latencyWeight + criteria.reliabilityWeight +\n                criteria.capabilityWeight + criteria.costWeight;\n            if (Math.abs(totalWeight - 1) > 0.01) {\n                warnings.push({\n                    field: 'transport.selectionCriteria',\n                    message: 'Selection criteria weights should sum to 100%',\n                    impact: 'medium',\n                    recommendation: 'Adjust the weights so they total 100%'\n                });\n            }\n            // Validate timeouts\n            const timeouts = this.currentConfiguration.transport.timeouts;\n            if (timeouts.connection >= timeouts.request) {\n                warnings.push({\n                    field: 'transport.timeouts',\n                    message: 'Connection timeout should be less than request timeout',\n                    impact: 'low',\n                    recommendation: 'Set connection timeout to be less than request timeout'\n                });\n            }\n            // Validate performance settings\n            if (this.currentConfiguration.performance.maxConcurrentRequests > 10) {\n                warnings.push({\n                    field: 'performance.maxConcurrentRequests',\n                    message: 'High concurrent request limit may impact performance',\n                    impact: 'medium',\n                    recommendation: 'Consider reducing to 5-10 for optimal performance'\n                });\n            }\n            // Estimate impact\n            const estimatedImpact = this.estimateConfigurationImpact();\n            const result = {\n                isValid: errors.length === 0,\n                errors,\n                warnings,\n                estimatedImpact\n            };\n            this.validationResult = result;\n            this.renderValidationResult(result);\n            return result;\n        });\n    }\n    estimateConfigurationImpact() {\n        // Simple heuristic-based impact estimation\n        let performanceChange = 0;\n        let reliabilityChange = 0;\n        let resourceUsage = 0;\n        const config = this.currentConfiguration;\n        // Performance mode impact\n        switch (config.performance.mode) {\n            case 'performance':\n                performanceChange += 20;\n                reliabilityChange -= 5;\n                resourceUsage += 15;\n                break;\n            case 'reliability':\n                performanceChange -= 5;\n                reliabilityChange += 20;\n                resourceUsage += 5;\n                break;\n            default: // balanced\n                break;\n        }\n        // Connection pooling impact\n        if (config.performance.enableConnectionPooling) {\n            performanceChange += 15;\n            resourceUsage += 10;\n        }\n        // Compression impact\n        if (config.performance.enableCompression) {\n            performanceChange += 5;\n            resourceUsage += 5;\n        }\n        // Caching impact\n        if (config.performance.enableCaching) {\n            performanceChange += 10;\n            resourceUsage += config.performance.cacheSize;\n        }\n        return {\n            performanceChange: Math.max(-50, Math.min(50, performanceChange)),\n            reliabilityChange: Math.max(-50, Math.min(50, reliabilityChange)),\n            resourceUsage: Math.max(0, Math.min(100, resourceUsage))\n        };\n    }\n    renderValidationResult(result) {\n        this.validationContainer.empty();\n        if (result.isValid && result.warnings.length === 0) {\n            const success = this.validationContainer.createDiv('validation-success');\n            success.createSpan({ text: '✅ Configuration is valid', cls: 'validation-message' });\n        }\n        else {\n            // Show errors\n            result.errors.forEach(error => {\n                const errorEl = this.validationContainer.createDiv('validation-error');\n                errorEl.createSpan({ text: '❌', cls: 'validation-icon' });\n                errorEl.createSpan({ text: error.message, cls: 'validation-message' });\n                if (error.suggestion) {\n                    errorEl.createSpan({ text: error.suggestion, cls: 'validation-suggestion' });\n                }\n            });\n            // Show warnings\n            result.warnings.forEach(warning => {\n                const warningEl = this.validationContainer.createDiv('validation-warning');\n                warningEl.createSpan({ text: '⚠️', cls: 'validation-icon' });\n                warningEl.createSpan({ text: warning.message, cls: 'validation-message' });\n                if (warning.recommendation) {\n                    warningEl.createSpan({ text: warning.recommendation, cls: 'validation-suggestion' });\n                }\n            });\n        }\n        // Show estimated impact\n        const impact = result.estimatedImpact;\n        const impactEl = this.validationContainer.createDiv('validation-impact');\n        impactEl.createEl('h5', { text: 'Estimated Impact:' });\n        const impactGrid = impactEl.createDiv('impact-grid');\n        const perfImpact = impactGrid.createDiv('impact-item');\n        perfImpact.createSpan({ text: 'Performance:', cls: 'impact-label' });\n        perfImpact.createSpan({\n            text: `${impact.performanceChange > 0 ? '+' : ''}${impact.performanceChange}%`,\n            cls: `impact-value ${impact.performanceChange > 0 ? 'positive' : impact.performanceChange < 0 ? 'negative' : 'neutral'}`\n        });\n        const reliabilityImpact = impactGrid.createDiv('impact-item');\n        reliabilityImpact.createSpan({ text: 'Reliability:', cls: 'impact-label' });\n        reliabilityImpact.createSpan({\n            text: `${impact.reliabilityChange > 0 ? '+' : ''}${impact.reliabilityChange}%`,\n            cls: `impact-value ${impact.reliabilityChange > 0 ? 'positive' : impact.reliabilityChange < 0 ? 'negative' : 'neutral'}`\n        });\n        const resourceImpact = impactGrid.createDiv('impact-item');\n        resourceImpact.createSpan({ text: 'Resource Usage:', cls: 'impact-label' });\n        resourceImpact.createSpan({\n            text: `${impact.resourceUsage}%`,\n            cls: `impact-value ${impact.resourceUsage > 70 ? 'high' : impact.resourceUsage > 30 ? 'medium' : 'low'}`\n        });\n    }\n    renderValidationPlaceholder() {\n        this.validationContainer.createEl('p', {\n            text: 'Configuration validation will appear here...',\n            cls: 'validation-placeholder'\n        });\n    }\n    updatePreview() {\n        this.previewContainer.empty();\n        const preview = this.previewContainer.createEl('pre', { cls: 'config-preview' });\n        preview.textContent = JSON.stringify(this.currentConfiguration, null, 2);\n    }\n    normalizeSelectionCriteria() {\n        const criteria = this.currentConfiguration.transport.selectionCriteria;\n        const total = criteria.latencyWeight + criteria.reliabilityWeight +\n            criteria.capabilityWeight + criteria.costWeight;\n        if (total > 0) {\n            criteria.latencyWeight /= total;\n            criteria.reliabilityWeight /= total;\n            criteria.capabilityWeight /= total;\n            criteria.costWeight /= total;\n        }\n    }\n    applyPerformanceModePreset(mode) {\n        const perf = this.currentConfiguration.performance;\n        switch (mode) {\n            case 'performance':\n                perf.enableConnectionPooling = true;\n                perf.maxConcurrentRequests = 10;\n                perf.enableCompression = false;\n                perf.enableCaching = true;\n                break;\n            case 'reliability':\n                perf.enableConnectionPooling = true;\n                perf.maxConcurrentRequests = 3;\n                perf.enableCompression = true;\n                perf.enableCaching = false;\n                break;\n            default: // balanced\n                perf.enableConnectionPooling = true;\n                perf.maxConcurrentRequests = 5;\n                perf.enableCompression = true;\n                perf.enableCaching = true;\n                break;\n        }\n    }\n    updateExpertOptionsVisibility() {\n        const expertOptions = this.containerEl.querySelectorAll('.expert-option');\n        expertOptions.forEach(el => {\n            if (this.config.showExpertOptions) {\n                el.removeClass('hidden');\n            }\n            else {\n                el.addClass('hidden');\n            }\n        });\n    }\n    updateProfileSelector() {\n        this.profileSelector.empty();\n        // Add default profile\n        const defaultOption = this.profileSelector.createEl('option', { value: 'default' });\n        defaultOption.textContent = 'Default Configuration';\n        // Add custom profiles\n        this.profiles.forEach(profile => {\n            const option = this.profileSelector.createEl('option', { value: profile.id });\n            option.textContent = profile.name;\n        });\n    }\n    loadProfiles() {\n        // Load saved profiles from storage\n        try {\n            const savedProfiles = this.plugin.settings.configurationProfiles || [];\n            this.profiles = savedProfiles.map((p) => (Object.assign(Object.assign({}, p), { created: new Date(p.created), lastModified: new Date(p.lastModified) })));\n        }\n        catch (error) {\n            console.error('Failed to load configuration profiles:', error);\n            this.profiles = [];\n        }\n    }\n    loadProfile(profileId) {\n        if (profileId === 'default') {\n            this.currentConfiguration = this.getDefaultConfiguration();\n        }\n        else {\n            const profile = this.profiles.find(p => p.id === profileId);\n            if (profile) {\n                this.currentConfiguration = Object.assign({}, profile.config);\n            }\n        }\n        this.renderSettings();\n        this.onConfigurationChange();\n    }\n    showSaveProfileModal() {\n        const name = prompt('Enter profile name:');\n        if (!name)\n            return;\n        const description = prompt('Enter profile description (optional):') || '';\n        this.saveAsProfile(name, description);\n    }\n    saveAsProfile(name, description) {\n        const profile = {\n            id: `profile-${Date.now()}`,\n            name,\n            description,\n            config: Object.assign({}, this.currentConfiguration),\n            created: new Date(),\n            lastModified: new Date(),\n            isDefault: false\n        };\n        this.profiles.push(profile);\n        this.updateProfileSelector();\n        this.saveProfiles();\n        new Notice(`Profile \"${name}\" saved successfully`);\n    }\n    deleteCurrentProfile() {\n        const currentProfileId = this.profileSelector.value;\n        if (currentProfileId === 'default') {\n            new Notice('Cannot delete the default profile');\n            return;\n        }\n        const profile = this.profiles.find(p => p.id === currentProfileId);\n        if (!profile)\n            return;\n        const confirmed = confirm(`Delete profile \"${profile.name}\"?`);\n        if (confirmed) {\n            this.profiles = this.profiles.filter(p => p.id !== currentProfileId);\n            this.updateProfileSelector();\n            this.saveProfiles();\n            this.loadProfile('default');\n            new Notice(`Profile \"${profile.name}\" deleted`);\n        }\n    }\n    saveConfiguration() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const validation = yield this.validateConfiguration();\n                if (!validation.isValid) {\n                    const proceed = confirm('Configuration has errors. Save anyway?');\n                    if (!proceed)\n                        return;\n                }\n                // Save to plugin settings\n                this.plugin.settings.advancedConfiguration = Object.assign({}, this.currentConfiguration);\n                yield this.plugin.saveSettings();\n                this.hasUnsavedChanges = false;\n                new Notice('✅ Configuration saved successfully');\n            }\n            catch (error) {\n                console.error('Failed to save configuration:', error);\n                new Notice('❌ Failed to save configuration');\n            }\n        });\n    }\n    resetToDefaults() {\n        const confirmed = confirm('Reset all settings to default values? This cannot be undone.');\n        if (confirmed) {\n            this.currentConfiguration = this.getDefaultConfiguration();\n            this.renderSettings();\n            this.onConfigurationChange();\n            new Notice('Configuration reset to defaults');\n        }\n    }\n    testConfiguration() {\n        return __awaiter(this, void 0, void 0, function* () {\n            new Notice('Testing configuration...');\n            try {\n                // Simulate configuration test\n                yield new Promise(resolve => setTimeout(resolve, 2000));\n                const testResult = {\n                    success: Math.random() > 0.2, // 80% success rate for demo\n                    latency: Math.random() * 200 + 50,\n                    errors: Math.random() > 0.8 ? ['Connection timeout'] : []\n                };\n                if (testResult.success) {\n                    new Notice(`✅ Configuration test passed (${testResult.latency.toFixed(0)}ms average)`);\n                }\n                else {\n                    new Notice(`❌ Configuration test failed: ${testResult.errors.join(', ')}`);\n                }\n            }\n            catch (error) {\n                console.error('Configuration test failed:', error);\n                new Notice('❌ Configuration test failed');\n            }\n        });\n    }\n    exportConfiguration() {\n        const exportData = {\n            version: '1.0',\n            timestamp: new Date().toISOString(),\n            configuration: this.currentConfiguration,\n            profiles: this.profiles\n        };\n        const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `vaultpilot-config-${new Date().toISOString().split('T')[0]}.json`;\n        a.click();\n        URL.revokeObjectURL(url);\n        new Notice('Configuration exported successfully');\n    }\n    importConfiguration() {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = '.json';\n        input.onchange = (e) => {\n            var _a;\n            const file = (_a = e.target.files) === null || _a === void 0 ? void 0 : _a[0];\n            if (!file)\n                return;\n            const reader = new FileReader();\n            reader.onload = (e) => {\n                var _a;\n                try {\n                    const data = JSON.parse((_a = e.target) === null || _a === void 0 ? void 0 : _a.result);\n                    if (data.configuration) {\n                        this.currentConfiguration = data.configuration;\n                        this.renderSettings();\n                        this.onConfigurationChange();\n                        new Notice('Configuration imported successfully');\n                    }\n                    if (data.profiles) {\n                        this.profiles = data.profiles.map((p) => (Object.assign(Object.assign({}, p), { created: new Date(p.created), lastModified: new Date(p.lastModified) })));\n                        this.updateProfileSelector();\n                        this.saveProfiles();\n                    }\n                }\n                catch (error) {\n                    console.error('Failed to import configuration:', error);\n                    new Notice('❌ Failed to import configuration: Invalid file format');\n                }\n            };\n            reader.readAsText(file);\n        };\n        input.click();\n    }\n    saveProfiles() {\n        try {\n            this.plugin.settings.configurationProfiles = this.profiles;\n            this.plugin.saveSettings();\n        }\n        catch (error) {\n            console.error('Failed to save profiles:', error);\n        }\n    }\n    startRealTimeValidation() {\n        // Real-time validation is handled by onConfigurationChange\n        // This could be extended with more sophisticated validation\n        console.log('Real-time validation enabled');\n    }\n}\n//# sourceMappingURL=AdvancedSettings.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/devpipe/transports/DevPipeTransport.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/devpipe/TransportManager.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts"],"map":"{\"version\":3,\"file\":\"AdvancedSettings.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/AdvancedSettings.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * AdvancedSettings - Visual configuration interface for VaultPilot\\n */\\n\\nimport { Setting, Component, Notice, Modal, App } from 'obsidian';\\nimport { TransportType } from '../devpipe/transports/DevPipeTransport';\\nimport { TransportManagerConfig } from '../devpipe/TransportManager';\\nimport VaultPilotPlugin from '../main';\\n\\nexport interface AdvancedSettingsConfig {\\n  showExpertOptions: boolean;\\n  enableRealTimeValidation: boolean;\\n  allowImportExport: boolean;\\n}\\n\\nexport interface ConfigurationProfile {\\n  id: string;\\n  name: string;\\n  description: string;\\n  config: VaultPilotConfiguration;\\n  created: Date;\\n  lastModified: Date;\\n  isDefault: boolean;\\n}\\n\\nexport interface VaultPilotConfiguration {\\n  transport: {\\n    primaryTransport: TransportType;\\n    fallbackChain: TransportType[];\\n    selectionCriteria: {\\n      latencyWeight: number;\\n      reliabilityWeight: number;\\n      capabilityWeight: number;\\n      costWeight: number;\\n    };\\n    timeouts: {\\n      connection: number;\\n      request: number;\\n      retry: number;\\n    };\\n    retryPolicy: {\\n      maxAttempts: number;\\n      backoffMultiplier: number;\\n      maxBackoffTime: number;\\n    };\\n  };\\n  performance: {\\n    mode: 'performance' | 'balanced' | 'reliability';\\n    enableConnectionPooling: boolean;\\n    maxConcurrentRequests: number;\\n    enableCompression: boolean;\\n    enableCaching: boolean;\\n    cacheSize: number;\\n  };\\n  monitoring: {\\n    enableHealthChecks: boolean;\\n    healthCheckInterval: number;\\n    enableMetrics: boolean;\\n    metricsRetention: number;\\n    enablePredictiveAlerts: boolean;\\n  };\\n  ui: {\\n    theme: 'auto' | 'light' | 'dark';\\n    enableAnimations: boolean;\\n    showAdvancedMetrics: boolean;\\n    dashboardRefreshRate: number;\\n    enableNotifications: boolean;\\n  };\\n  privacy: {\\n    enableAnalytics: boolean;\\n    shareUsageData: boolean;\\n    dataRetentionDays: number;\\n  };\\n}\\n\\nexport interface ConfigurationValidationResult {\\n  isValid: boolean;\\n  errors: ValidationError[];\\n  warnings: ValidationWarning[];\\n  estimatedImpact: {\\n    performanceChange: number;\\n    reliabilityChange: number;\\n    resourceUsage: number;\\n  };\\n}\\n\\nexport interface ValidationError {\\n  field: string;\\n  message: string;\\n  severity: 'error' | 'warning';\\n  suggestion?: string;\\n}\\n\\nexport interface ValidationWarning {\\n  field: string;\\n  message: string;\\n  impact: 'low' | 'medium' | 'high';\\n  recommendation?: string;\\n}\\n\\nexport class AdvancedSettings extends Component {\\n  private containerEl: HTMLElement;\\n  private plugin: VaultPilotPlugin;\\n  private config: AdvancedSettingsConfig;\\n  private currentConfiguration: VaultPilotConfiguration;\\n  private profiles: ConfigurationProfile[] = [];\\n  private validationResult?: ConfigurationValidationResult;\\n  \\n  // UI Elements\\n  private profileSelector!: HTMLSelectElement;\\n  private validationContainer!: HTMLElement;\\n  private configurationContainer!: HTMLElement;\\n  private previewContainer!: HTMLElement;\\n  \\n  private validationTimeout?: number;\\n  private hasUnsavedChanges: boolean = false;\\n\\n  constructor(\\n    containerEl: HTMLElement,\\n    plugin: VaultPilotPlugin,\\n    config: AdvancedSettingsConfig = {\\n      showExpertOptions: false,\\n      enableRealTimeValidation: true,\\n      allowImportExport: true\\n    }\\n  ) {\\n    super();\\n    this.containerEl = containerEl;\\n    this.plugin = plugin;\\n    this.config = config;\\n    this.currentConfiguration = this.getDefaultConfiguration();\\n    this.loadProfiles();\\n  }\\n\\n  async onload() {\\n    this.initializeInterface();\\n    await this.loadCurrentConfiguration();\\n    this.renderSettings();\\n    \\n    if (this.config.enableRealTimeValidation) {\\n      this.startRealTimeValidation();\\n    }\\n  }\\n\\n  onunload() {\\n    if (this.validationTimeout) {\\n      clearTimeout(this.validationTimeout);\\n    }\\n    \\n    if (this.hasUnsavedChanges) {\\n      const shouldSave = confirm('You have unsaved changes. Would you like to save them?');\\n      if (shouldSave) {\\n        this.saveConfiguration();\\n      }\\n    }\\n  }\\n\\n  private initializeInterface() {\\n    this.containerEl.empty();\\n    this.containerEl.addClass('advanced-settings');\\n    \\n    // Create header\\n    this.createHeader();\\n    \\n    // Create profile management section\\n    this.createProfileManagement();\\n    \\n    // Create validation section\\n    this.createValidationSection();\\n    \\n    // Create configuration sections\\n    this.createConfigurationSections();\\n    \\n    // Create preview section\\n    this.createPreviewSection();\\n    \\n    // Create action buttons\\n    this.createActionButtons();\\n  }\\n\\n  private createHeader() {\\n    const header = this.containerEl.createDiv('settings-header');\\n    header.createEl('h2', { text: 'Advanced Settings' });\\n    header.createEl('p', { \\n      text: 'Fine-tune VaultPilot configuration for optimal performance',\\n      cls: 'settings-subtitle'\\n    });\\n    \\n    // Expert mode toggle\\n    const expertToggle = header.createDiv('expert-toggle');\\n    const expertLabel = expertToggle.createEl('label');\\n    expertLabel.createSpan({ text: 'Expert Mode' });\\n    const expertCheckbox = expertLabel.createEl('input', { type: 'checkbox' });\\n    expertCheckbox.checked = this.config.showExpertOptions;\\n    expertCheckbox.addEventListener('change', () => {\\n      this.config.showExpertOptions = expertCheckbox.checked;\\n      this.updateExpertOptionsVisibility();\\n    });\\n  }\\n\\n  private createProfileManagement() {\\n    const section = this.containerEl.createDiv('profile-management-section');\\n    section.createEl('h3', { text: 'Configuration Profiles' });\\n    \\n    const profileControls = section.createDiv('profile-controls');\\n    \\n    // Profile selector\\n    const selectorContainer = profileControls.createDiv('profile-selector-container');\\n    selectorContainer.createSpan({ text: 'Current Profile:', cls: 'profile-label' });\\n    this.profileSelector = selectorContainer.createEl('select', { cls: 'profile-selector' });\\n    this.updateProfileSelector();\\n    \\n    this.profileSelector.addEventListener('change', () => {\\n      this.loadProfile(this.profileSelector.value);\\n    });\\n    \\n    // Profile action buttons\\n    const profileActions = profileControls.createDiv('profile-actions');\\n    \\n    const saveProfileBtn = profileActions.createEl('button', { text: 'Save as New Profile', cls: 'mod-muted' });\\n    saveProfileBtn.addEventListener('click', () => this.showSaveProfileModal());\\n    \\n    const deleteProfileBtn = profileActions.createEl('button', { text: 'Delete Profile', cls: 'mod-warning' });\\n    deleteProfileBtn.addEventListener('click', () => this.deleteCurrentProfile());\\n    \\n    if (this.config.allowImportExport) {\\n      const importBtn = profileActions.createEl('button', { text: 'Import', cls: 'mod-muted' });\\n      importBtn.addEventListener('click', () => this.importConfiguration());\\n      \\n      const exportBtn = profileActions.createEl('button', { text: 'Export', cls: 'mod-muted' });\\n      exportBtn.addEventListener('click', () => this.exportConfiguration());\\n    }\\n  }\\n\\n  private createValidationSection() {\\n    const section = this.containerEl.createDiv('validation-section');\\n    section.createEl('h3', { text: 'Configuration Status' });\\n    \\n    this.validationContainer = section.createDiv('validation-container');\\n    this.renderValidationPlaceholder();\\n  }\\n\\n  private createConfigurationSections() {\\n    this.configurationContainer = this.containerEl.createDiv('configuration-sections');\\n    \\n    // Transport settings\\n    this.createTransportSettings();\\n    \\n    // Performance settings\\n    this.createPerformanceSettings();\\n    \\n    // Monitoring settings\\n    this.createMonitoringSettings();\\n    \\n    // UI settings\\n    this.createUISettings();\\n    \\n    // Privacy settings\\n    this.createPrivacySettings();\\n  }\\n\\n  private createTransportSettings() {\\n    const section = this.configurationContainer.createDiv('config-section transport-section');\\n    section.createEl('h4', { text: '🚀 Transport Configuration' });\\n    \\n    const settingsContainer = section.createDiv('settings-container');\\n    \\n    // Primary transport selection\\n    new Setting(settingsContainer)\\n      .setName('Primary Transport')\\n      .setDesc('Choose the preferred transport method')\\n      .addDropdown(dropdown => {\\n        dropdown.addOption(TransportType.HTTP, 'HTTP (Reliable)');\\n        dropdown.addOption(TransportType.WEBSOCKET, 'WebSocket (Real-time)');\\n        dropdown.addOption(TransportType.FILESYSTEM, 'FileSystem (Offline)');\\n        dropdown.setValue(this.currentConfiguration.transport.primaryTransport);\\n        dropdown.onChange(value => {\\n          this.currentConfiguration.transport.primaryTransport = value as TransportType;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Fallback chain configuration\\n    this.createFallbackChainConfig(settingsContainer);\\n    \\n    // Selection criteria sliders\\n    this.createSelectionCriteriaConfig(settingsContainer);\\n    \\n    // Timeout configuration\\n    this.createTimeoutConfig(settingsContainer);\\n    \\n    // Retry policy configuration\\n    this.createRetryPolicyConfig(settingsContainer);\\n  }\\n\\n  private createFallbackChainConfig(container: HTMLElement) {\\n    const fallbackSetting = new Setting(container)\\n      .setName('Fallback Chain')\\n      .setDesc('Configure transport fallback order');\\n    \\n    const fallbackContainer = fallbackSetting.controlEl.createDiv('fallback-chain-config');\\n    \\n    // Current fallback chain display\\n    const chainDisplay = fallbackContainer.createDiv('chain-display');\\n    this.updateFallbackChainDisplay(chainDisplay);\\n    \\n    // Add transport buttons\\n    const addButtons = fallbackContainer.createDiv('add-transport-buttons');\\n    [TransportType.HTTP, TransportType.WEBSOCKET, TransportType.FILESYSTEM].forEach(transport => {\\n      const button = addButtons.createEl('button', { \\n        text: `Add ${transport.toUpperCase()}`,\\n        cls: 'mod-muted add-transport-btn'\\n      });\\n      button.addEventListener('click', () => {\\n        if (!this.currentConfiguration.transport.fallbackChain.includes(transport)) {\\n          this.currentConfiguration.transport.fallbackChain.push(transport);\\n          this.updateFallbackChainDisplay(chainDisplay);\\n          this.onConfigurationChange();\\n        }\\n      });\\n    });\\n  }\\n\\n  private updateFallbackChainDisplay(container: HTMLElement) {\\n    container.empty();\\n    \\n    const chain = this.currentConfiguration.transport.fallbackChain;\\n    chain.forEach((transport, index) => {\\n      const item = container.createDiv('chain-item');\\n      item.createSpan({ text: `${index + 1}. ${transport.toUpperCase()}`, cls: 'chain-label' });\\n      \\n      const actions = item.createDiv('chain-actions');\\n      \\n      if (index > 0) {\\n        const moveUpBtn = actions.createEl('button', { text: '↑', cls: 'mod-muted chain-btn' });\\n        moveUpBtn.addEventListener('click', () => {\\n          [chain[index], chain[index - 1]] = [chain[index - 1], chain[index]];\\n          this.updateFallbackChainDisplay(container);\\n          this.onConfigurationChange();\\n        });\\n      }\\n      \\n      if (index < chain.length - 1) {\\n        const moveDownBtn = actions.createEl('button', { text: '↓', cls: 'mod-muted chain-btn' });\\n        moveDownBtn.addEventListener('click', () => {\\n          [chain[index], chain[index + 1]] = [chain[index + 1], chain[index]];\\n          this.updateFallbackChainDisplay(container);\\n          this.onConfigurationChange();\\n        });\\n      }\\n      \\n      const removeBtn = actions.createEl('button', { text: '✕', cls: 'mod-warning chain-btn' });\\n      removeBtn.addEventListener('click', () => {\\n        chain.splice(index, 1);\\n        this.updateFallbackChainDisplay(container);\\n        this.onConfigurationChange();\\n      });\\n    });\\n  }\\n\\n  private createSelectionCriteriaConfig(container: HTMLElement) {\\n    const criteriaContainer = container.createDiv('selection-criteria-container');\\n    criteriaContainer.createEl('h5', { text: 'Transport Selection Criteria' });\\n    \\n    const criteria = this.currentConfiguration.transport.selectionCriteria;\\n    \\n    // Latency weight\\n    new Setting(criteriaContainer)\\n      .setName('Latency Priority')\\n      .setDesc('How much to prioritize low latency (0-100%)')\\n      .addSlider(slider => {\\n        slider.setLimits(0, 100, 5);\\n        slider.setValue(criteria.latencyWeight * 100);\\n        slider.onChange(value => {\\n          criteria.latencyWeight = value / 100;\\n          this.normalizeSelectionCriteria();\\n          this.onConfigurationChange();\\n        });\\n        slider.setDynamicTooltip();\\n      });\\n    \\n    // Reliability weight\\n    new Setting(criteriaContainer)\\n      .setName('Reliability Priority')\\n      .setDesc('How much to prioritize reliability (0-100%)')\\n      .addSlider(slider => {\\n        slider.setLimits(0, 100, 5);\\n        slider.setValue(criteria.reliabilityWeight * 100);\\n        slider.onChange(value => {\\n          criteria.reliabilityWeight = value / 100;\\n          this.normalizeSelectionCriteria();\\n          this.onConfigurationChange();\\n        });\\n        slider.setDynamicTooltip();\\n      });\\n    \\n    // Capability weight\\n    new Setting(criteriaContainer)\\n      .setName('Feature Priority')\\n      .setDesc('How much to prioritize advanced features (0-100%)')\\n      .addSlider(slider => {\\n        slider.setLimits(0, 100, 5);\\n        slider.setValue(criteria.capabilityWeight * 100);\\n        slider.onChange(value => {\\n          criteria.capabilityWeight = value / 100;\\n          this.normalizeSelectionCriteria();\\n          this.onConfigurationChange();\\n        });\\n        slider.setDynamicTooltip();\\n      });\\n    \\n    // Cost weight\\n    new Setting(criteriaContainer)\\n      .setName('Efficiency Priority')\\n      .setDesc('How much to prioritize resource efficiency (0-100%)')\\n      .addSlider(slider => {\\n        slider.setLimits(0, 100, 5);\\n        slider.setValue(criteria.costWeight * 100);\\n        slider.onChange(value => {\\n          criteria.costWeight = value / 100;\\n          this.normalizeSelectionCriteria();\\n          this.onConfigurationChange();\\n        });\\n        slider.setDynamicTooltip();\\n      });\\n  }\\n\\n  private createTimeoutConfig(container: HTMLElement) {\\n    if (!this.config.showExpertOptions) return;\\n    \\n    const timeoutContainer = container.createDiv('timeout-config-container expert-option');\\n    timeoutContainer.createEl('h5', { text: 'Timeout Configuration' });\\n    \\n    const timeouts = this.currentConfiguration.transport.timeouts;\\n    \\n    new Setting(timeoutContainer)\\n      .setName('Connection Timeout')\\n      .setDesc('Maximum time to wait for initial connection (ms)')\\n      .addText(text => {\\n        text.setValue(timeouts.connection.toString());\\n        text.onChange(value => {\\n          const parsed = parseInt(value, 10);\\n          if (!isNaN(parsed) && parsed > 0) {\\n            timeouts.connection = parsed;\\n            this.onConfigurationChange();\\n          }\\n        });\\n      });\\n    \\n    new Setting(timeoutContainer)\\n      .setName('Request Timeout')\\n      .setDesc('Maximum time to wait for request completion (ms)')\\n      .addText(text => {\\n        text.setValue(timeouts.request.toString());\\n        text.onChange(value => {\\n          const parsed = parseInt(value, 10);\\n          if (!isNaN(parsed) && parsed > 0) {\\n            timeouts.request = parsed;\\n            this.onConfigurationChange();\\n          }\\n        });\\n      });\\n  }\\n\\n  private createRetryPolicyConfig(container: HTMLElement) {\\n    if (!this.config.showExpertOptions) return;\\n    \\n    const retryContainer = container.createDiv('retry-policy-container expert-option');\\n    retryContainer.createEl('h5', { text: 'Retry Policy' });\\n    \\n    const retry = this.currentConfiguration.transport.retryPolicy;\\n    \\n    new Setting(retryContainer)\\n      .setName('Max Retry Attempts')\\n      .setDesc('Maximum number of retry attempts for failed requests')\\n      .addSlider(slider => {\\n        slider.setLimits(0, 10, 1);\\n        slider.setValue(retry.maxAttempts);\\n        slider.onChange(value => {\\n          retry.maxAttempts = value;\\n          this.onConfigurationChange();\\n        });\\n        slider.setDynamicTooltip();\\n      });\\n    \\n    new Setting(retryContainer)\\n      .setName('Backoff Multiplier')\\n      .setDesc('Exponential backoff multiplier for retry delays')\\n      .addSlider(slider => {\\n        slider.setLimits(1, 5, 0.1);\\n        slider.setValue(retry.backoffMultiplier);\\n        slider.onChange(value => {\\n          retry.backoffMultiplier = value;\\n          this.onConfigurationChange();\\n        });\\n        slider.setDynamicTooltip();\\n      });\\n  }\\n\\n  private createPerformanceSettings() {\\n    const section = this.configurationContainer.createDiv('config-section performance-section');\\n    section.createEl('h4', { text: '⚡ Performance Configuration' });\\n    \\n    const settingsContainer = section.createDiv('settings-container');\\n    \\n    // Performance mode\\n    new Setting(settingsContainer)\\n      .setName('Performance Mode')\\n      .setDesc('Balance between speed, reliability, and resource usage')\\n      .addDropdown(dropdown => {\\n        dropdown.addOption('performance', 'Performance (Prioritize Speed)');\\n        dropdown.addOption('balanced', 'Balanced (Recommended)');\\n        dropdown.addOption('reliability', 'Reliability (Prioritize Stability)');\\n        dropdown.setValue(this.currentConfiguration.performance.mode);\\n        dropdown.onChange(value => {\\n          this.currentConfiguration.performance.mode = value as any;\\n          this.applyPerformanceModePreset(value as any);\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Connection pooling\\n    new Setting(settingsContainer)\\n      .setName('Connection Pooling')\\n      .setDesc('Reuse connections to improve performance')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.currentConfiguration.performance.enableConnectionPooling);\\n        toggle.onChange(value => {\\n          this.currentConfiguration.performance.enableConnectionPooling = value;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Compression\\n    new Setting(settingsContainer)\\n      .setName('Compression')\\n      .setDesc('Enable data compression to reduce bandwidth usage')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.currentConfiguration.performance.enableCompression);\\n        toggle.onChange(value => {\\n          this.currentConfiguration.performance.enableCompression = value;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Caching\\n    new Setting(settingsContainer)\\n      .setName('Response Caching')\\n      .setDesc('Cache responses to improve performance')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.currentConfiguration.performance.enableCaching);\\n        toggle.onChange(value => {\\n          this.currentConfiguration.performance.enableCaching = value;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    if (this.config.showExpertOptions) {\\n      // Max concurrent requests\\n      new Setting(settingsContainer)\\n        .setName('Max Concurrent Requests')\\n        .setDesc('Maximum number of simultaneous requests')\\n        .setClass('expert-option')\\n        .addSlider(slider => {\\n          slider.setLimits(1, 20, 1);\\n          slider.setValue(this.currentConfiguration.performance.maxConcurrentRequests);\\n          slider.onChange(value => {\\n            this.currentConfiguration.performance.maxConcurrentRequests = value;\\n            this.onConfigurationChange();\\n          });\\n          slider.setDynamicTooltip();\\n        });\\n      \\n      // Cache size\\n      new Setting(settingsContainer)\\n        .setName('Cache Size (MB)')\\n        .setDesc('Maximum cache size in megabytes')\\n        .setClass('expert-option')\\n        .addSlider(slider => {\\n          slider.setLimits(1, 100, 5);\\n          slider.setValue(this.currentConfiguration.performance.cacheSize);\\n          slider.onChange(value => {\\n            this.currentConfiguration.performance.cacheSize = value;\\n            this.onConfigurationChange();\\n          });\\n          slider.setDynamicTooltip();\\n        });\\n    }\\n  }\\n\\n  private createMonitoringSettings() {\\n    const section = this.configurationContainer.createDiv('config-section monitoring-section');\\n    section.createEl('h4', { text: '📊 Monitoring Configuration' });\\n    \\n    const settingsContainer = section.createDiv('settings-container');\\n    \\n    // Health checks\\n    new Setting(settingsContainer)\\n      .setName('Health Checks')\\n      .setDesc('Monitor transport health automatically')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.currentConfiguration.monitoring.enableHealthChecks);\\n        toggle.onChange(value => {\\n          this.currentConfiguration.monitoring.enableHealthChecks = value;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Metrics collection\\n    new Setting(settingsContainer)\\n      .setName('Performance Metrics')\\n      .setDesc('Collect detailed performance metrics')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.currentConfiguration.monitoring.enableMetrics);\\n        toggle.onChange(value => {\\n          this.currentConfiguration.monitoring.enableMetrics = value;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Predictive alerts\\n    new Setting(settingsContainer)\\n      .setName('Predictive Alerts')\\n      .setDesc('Get early warnings about potential issues')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.currentConfiguration.monitoring.enablePredictiveAlerts);\\n        toggle.onChange(value => {\\n          this.currentConfiguration.monitoring.enablePredictiveAlerts = value;\\n          this.onConfigurationChange();\\n        });\\n      });\\n  }\\n\\n  private createUISettings() {\\n    const section = this.configurationContainer.createDiv('config-section ui-section');\\n    section.createEl('h4', { text: '🎨 User Interface' });\\n    \\n    const settingsContainer = section.createDiv('settings-container');\\n    \\n    // Theme\\n    new Setting(settingsContainer)\\n      .setName('Theme')\\n      .setDesc('Choose the interface theme')\\n      .addDropdown(dropdown => {\\n        dropdown.addOption('auto', 'Auto (Follow Obsidian)');\\n        dropdown.addOption('light', 'Light');\\n        dropdown.addOption('dark', 'Dark');\\n        dropdown.setValue(this.currentConfiguration.ui.theme);\\n        dropdown.onChange(value => {\\n          this.currentConfiguration.ui.theme = value as any;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Animations\\n    new Setting(settingsContainer)\\n      .setName('Animations')\\n      .setDesc('Enable UI animations and transitions')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.currentConfiguration.ui.enableAnimations);\\n        toggle.onChange(value => {\\n          this.currentConfiguration.ui.enableAnimations = value;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Advanced metrics\\n    new Setting(settingsContainer)\\n      .setName('Advanced Metrics')\\n      .setDesc('Show detailed metrics in dashboard')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.currentConfiguration.ui.showAdvancedMetrics);\\n        toggle.onChange(value => {\\n          this.currentConfiguration.ui.showAdvancedMetrics = value;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Dashboard refresh rate\\n    new Setting(settingsContainer)\\n      .setName('Dashboard Refresh Rate')\\n      .setDesc('How often to update the dashboard (seconds)')\\n      .addSlider(slider => {\\n        slider.setLimits(1, 60, 1);\\n        slider.setValue(this.currentConfiguration.ui.dashboardRefreshRate);\\n        slider.onChange(value => {\\n          this.currentConfiguration.ui.dashboardRefreshRate = value;\\n          this.onConfigurationChange();\\n        });\\n        slider.setDynamicTooltip();\\n      });\\n  }\\n\\n  private createPrivacySettings() {\\n    const section = this.configurationContainer.createDiv('config-section privacy-section');\\n    section.createEl('h4', { text: '🔒 Privacy & Data' });\\n    \\n    const settingsContainer = section.createDiv('settings-container');\\n    \\n    // Analytics\\n    new Setting(settingsContainer)\\n      .setName('Usage Analytics')\\n      .setDesc('Help improve VaultPilot by sharing anonymous usage data')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.currentConfiguration.privacy.enableAnalytics);\\n        toggle.onChange(value => {\\n          this.currentConfiguration.privacy.enableAnalytics = value;\\n          this.onConfigurationChange();\\n        });\\n      });\\n    \\n    // Data retention\\n    new Setting(settingsContainer)\\n      .setName('Data Retention')\\n      .setDesc('How long to keep performance and usage data (days)')\\n      .addSlider(slider => {\\n        slider.setLimits(1, 90, 1);\\n        slider.setValue(this.currentConfiguration.privacy.dataRetentionDays);\\n        slider.onChange(value => {\\n          this.currentConfiguration.privacy.dataRetentionDays = value;\\n          this.onConfigurationChange();\\n        });\\n        slider.setDynamicTooltip();\\n      });\\n  }\\n\\n  private createPreviewSection() {\\n    const section = this.containerEl.createDiv('preview-section');\\n    section.createEl('h3', { text: 'Configuration Preview' });\\n    \\n    this.previewContainer = section.createDiv('preview-container');\\n    this.updatePreview();\\n  }\\n\\n  private createActionButtons() {\\n    const actions = this.containerEl.createDiv('settings-actions');\\n    \\n    const saveBtn = actions.createEl('button', { text: 'Save Configuration', cls: 'mod-cta' });\\n    saveBtn.addEventListener('click', () => this.saveConfiguration());\\n    \\n    const resetBtn = actions.createEl('button', { text: 'Reset to Defaults', cls: 'mod-warning' });\\n    resetBtn.addEventListener('click', () => this.resetToDefaults());\\n    \\n    const testBtn = actions.createEl('button', { text: 'Test Configuration', cls: 'mod-muted' });\\n    testBtn.addEventListener('click', () => this.testConfiguration());\\n  }\\n\\n  private renderSettings() {\\n    // Trigger initial rendering and validation\\n    this.onConfigurationChange();\\n  }\\n\\n  private async loadCurrentConfiguration() {\\n    try {\\n      // Load configuration from plugin settings\\n      if (this.plugin.settings.advancedConfiguration) {\\n        this.currentConfiguration = { ...this.plugin.settings.advancedConfiguration };\\n      }\\n    } catch (error) {\\n      console.error('Failed to load current configuration:', error);\\n      new Notice('Failed to load configuration, using defaults');\\n    }\\n  }\\n\\n  private getDefaultConfiguration(): VaultPilotConfiguration {\\n    return {\\n      transport: {\\n        primaryTransport: TransportType.HTTP,\\n        fallbackChain: [TransportType.HTTP, TransportType.WEBSOCKET],\\n        selectionCriteria: {\\n          latencyWeight: 0.3,\\n          reliabilityWeight: 0.3,\\n          capabilityWeight: 0.2,\\n          costWeight: 0.2\\n        },\\n        timeouts: {\\n          connection: 5000,\\n          request: 30000,\\n          retry: 1000\\n        },\\n        retryPolicy: {\\n          maxAttempts: 3,\\n          backoffMultiplier: 2,\\n          maxBackoffTime: 10000\\n        }\\n      },\\n      performance: {\\n        mode: 'balanced',\\n        enableConnectionPooling: true,\\n        maxConcurrentRequests: 5,\\n        enableCompression: true,\\n        enableCaching: true,\\n        cacheSize: 10\\n      },\\n      monitoring: {\\n        enableHealthChecks: true,\\n        healthCheckInterval: 30000,\\n        enableMetrics: true,\\n        metricsRetention: 7,\\n        enablePredictiveAlerts: true\\n      },\\n      ui: {\\n        theme: 'auto',\\n        enableAnimations: true,\\n        showAdvancedMetrics: false,\\n        dashboardRefreshRate: 2,\\n        enableNotifications: true\\n      },\\n      privacy: {\\n        enableAnalytics: true,\\n        shareUsageData: false,\\n        dataRetentionDays: 30\\n      }\\n    };\\n  }\\n\\n  private onConfigurationChange() {\\n    this.hasUnsavedChanges = true;\\n    \\n    if (this.config.enableRealTimeValidation) {\\n      this.scheduleValidation();\\n    }\\n    \\n    this.updatePreview();\\n  }\\n\\n  private scheduleValidation() {\\n    if (this.validationTimeout) {\\n      clearTimeout(this.validationTimeout);\\n    }\\n    \\n    this.validationTimeout = window.setTimeout(() => {\\n      this.validateConfiguration();\\n    }, 500); // Debounce validation\\n  }\\n\\n  private async validateConfiguration(): Promise<ConfigurationValidationResult> {\\n    const errors: ValidationError[] = [];\\n    const warnings: ValidationWarning[] = [];\\n    \\n    // Validate transport configuration\\n    if (this.currentConfiguration.transport.fallbackChain.length === 0) {\\n      errors.push({\\n        field: 'transport.fallbackChain',\\n        message: 'At least one transport must be configured in the fallback chain',\\n        severity: 'error',\\n        suggestion: 'Add at least one transport to the fallback chain'\\n      });\\n    }\\n    \\n    // Validate selection criteria\\n    const criteria = this.currentConfiguration.transport.selectionCriteria;\\n    const totalWeight = criteria.latencyWeight + criteria.reliabilityWeight + \\n                       criteria.capabilityWeight + criteria.costWeight;\\n    \\n    if (Math.abs(totalWeight - 1) > 0.01) {\\n      warnings.push({\\n        field: 'transport.selectionCriteria',\\n        message: 'Selection criteria weights should sum to 100%',\\n        impact: 'medium',\\n        recommendation: 'Adjust the weights so they total 100%'\\n      });\\n    }\\n    \\n    // Validate timeouts\\n    const timeouts = this.currentConfiguration.transport.timeouts;\\n    if (timeouts.connection >= timeouts.request) {\\n      warnings.push({\\n        field: 'transport.timeouts',\\n        message: 'Connection timeout should be less than request timeout',\\n        impact: 'low',\\n        recommendation: 'Set connection timeout to be less than request timeout'\\n      });\\n    }\\n    \\n    // Validate performance settings\\n    if (this.currentConfiguration.performance.maxConcurrentRequests > 10) {\\n      warnings.push({\\n        field: 'performance.maxConcurrentRequests',\\n        message: 'High concurrent request limit may impact performance',\\n        impact: 'medium',\\n        recommendation: 'Consider reducing to 5-10 for optimal performance'\\n      });\\n    }\\n    \\n    // Estimate impact\\n    const estimatedImpact = this.estimateConfigurationImpact();\\n    \\n    const result: ConfigurationValidationResult = {\\n      isValid: errors.length === 0,\\n      errors,\\n      warnings,\\n      estimatedImpact\\n    };\\n    \\n    this.validationResult = result;\\n    this.renderValidationResult(result);\\n    \\n    return result;\\n  }\\n\\n  private estimateConfigurationImpact() {\\n    // Simple heuristic-based impact estimation\\n    let performanceChange = 0;\\n    let reliabilityChange = 0;\\n    let resourceUsage = 0;\\n    \\n    const config = this.currentConfiguration;\\n    \\n    // Performance mode impact\\n    switch (config.performance.mode) {\\n      case 'performance':\\n        performanceChange += 20;\\n        reliabilityChange -= 5;\\n        resourceUsage += 15;\\n        break;\\n      case 'reliability':\\n        performanceChange -= 5;\\n        reliabilityChange += 20;\\n        resourceUsage += 5;\\n        break;\\n      default: // balanced\\n        break;\\n    }\\n    \\n    // Connection pooling impact\\n    if (config.performance.enableConnectionPooling) {\\n      performanceChange += 15;\\n      resourceUsage += 10;\\n    }\\n    \\n    // Compression impact\\n    if (config.performance.enableCompression) {\\n      performanceChange += 5;\\n      resourceUsage += 5;\\n    }\\n    \\n    // Caching impact\\n    if (config.performance.enableCaching) {\\n      performanceChange += 10;\\n      resourceUsage += config.performance.cacheSize;\\n    }\\n    \\n    return {\\n      performanceChange: Math.max(-50, Math.min(50, performanceChange)),\\n      reliabilityChange: Math.max(-50, Math.min(50, reliabilityChange)),\\n      resourceUsage: Math.max(0, Math.min(100, resourceUsage))\\n    };\\n  }\\n\\n  private renderValidationResult(result: ConfigurationValidationResult) {\\n    this.validationContainer.empty();\\n    \\n    if (result.isValid && result.warnings.length === 0) {\\n      const success = this.validationContainer.createDiv('validation-success');\\n      success.createSpan({ text: '✅ Configuration is valid', cls: 'validation-message' });\\n    } else {\\n      // Show errors\\n      result.errors.forEach(error => {\\n        const errorEl = this.validationContainer.createDiv('validation-error');\\n        errorEl.createSpan({ text: '❌', cls: 'validation-icon' });\\n        errorEl.createSpan({ text: error.message, cls: 'validation-message' });\\n        if (error.suggestion) {\\n          errorEl.createSpan({ text: error.suggestion, cls: 'validation-suggestion' });\\n        }\\n      });\\n      \\n      // Show warnings\\n      result.warnings.forEach(warning => {\\n        const warningEl = this.validationContainer.createDiv('validation-warning');\\n        warningEl.createSpan({ text: '⚠️', cls: 'validation-icon' });\\n        warningEl.createSpan({ text: warning.message, cls: 'validation-message' });\\n        if (warning.recommendation) {\\n          warningEl.createSpan({ text: warning.recommendation, cls: 'validation-suggestion' });\\n        }\\n      });\\n    }\\n    \\n    // Show estimated impact\\n    const impact = result.estimatedImpact;\\n    const impactEl = this.validationContainer.createDiv('validation-impact');\\n    impactEl.createEl('h5', { text: 'Estimated Impact:' });\\n    \\n    const impactGrid = impactEl.createDiv('impact-grid');\\n    \\n    const perfImpact = impactGrid.createDiv('impact-item');\\n    perfImpact.createSpan({ text: 'Performance:', cls: 'impact-label' });\\n    perfImpact.createSpan({ \\n      text: `${impact.performanceChange > 0 ? '+' : ''}${impact.performanceChange}%`,\\n      cls: `impact-value ${impact.performanceChange > 0 ? 'positive' : impact.performanceChange < 0 ? 'negative' : 'neutral'}`\\n    });\\n    \\n    const reliabilityImpact = impactGrid.createDiv('impact-item');\\n    reliabilityImpact.createSpan({ text: 'Reliability:', cls: 'impact-label' });\\n    reliabilityImpact.createSpan({ \\n      text: `${impact.reliabilityChange > 0 ? '+' : ''}${impact.reliabilityChange}%`,\\n      cls: `impact-value ${impact.reliabilityChange > 0 ? 'positive' : impact.reliabilityChange < 0 ? 'negative' : 'neutral'}`\\n    });\\n    \\n    const resourceImpact = impactGrid.createDiv('impact-item');\\n    resourceImpact.createSpan({ text: 'Resource Usage:', cls: 'impact-label' });\\n    resourceImpact.createSpan({ \\n      text: `${impact.resourceUsage}%`,\\n      cls: `impact-value ${impact.resourceUsage > 70 ? 'high' : impact.resourceUsage > 30 ? 'medium' : 'low'}`\\n    });\\n  }\\n\\n  private renderValidationPlaceholder() {\\n    this.validationContainer.createEl('p', { \\n      text: 'Configuration validation will appear here...',\\n      cls: 'validation-placeholder'\\n    });\\n  }\\n\\n  private updatePreview() {\\n    this.previewContainer.empty();\\n    \\n    const preview = this.previewContainer.createEl('pre', { cls: 'config-preview' });\\n    preview.textContent = JSON.stringify(this.currentConfiguration, null, 2);\\n  }\\n\\n  private normalizeSelectionCriteria() {\\n    const criteria = this.currentConfiguration.transport.selectionCriteria;\\n    const total = criteria.latencyWeight + criteria.reliabilityWeight + \\n                  criteria.capabilityWeight + criteria.costWeight;\\n    \\n    if (total > 0) {\\n      criteria.latencyWeight /= total;\\n      criteria.reliabilityWeight /= total;\\n      criteria.capabilityWeight /= total;\\n      criteria.costWeight /= total;\\n    }\\n  }\\n\\n  private applyPerformanceModePreset(mode: 'performance' | 'balanced' | 'reliability') {\\n    const perf = this.currentConfiguration.performance;\\n    \\n    switch (mode) {\\n      case 'performance':\\n        perf.enableConnectionPooling = true;\\n        perf.maxConcurrentRequests = 10;\\n        perf.enableCompression = false;\\n        perf.enableCaching = true;\\n        break;\\n      case 'reliability':\\n        perf.enableConnectionPooling = true;\\n        perf.maxConcurrentRequests = 3;\\n        perf.enableCompression = true;\\n        perf.enableCaching = false;\\n        break;\\n      default: // balanced\\n        perf.enableConnectionPooling = true;\\n        perf.maxConcurrentRequests = 5;\\n        perf.enableCompression = true;\\n        perf.enableCaching = true;\\n        break;\\n    }\\n  }\\n\\n  private updateExpertOptionsVisibility() {\\n    const expertOptions = this.containerEl.querySelectorAll('.expert-option');\\n    expertOptions.forEach(el => {\\n      if (this.config.showExpertOptions) {\\n        el.removeClass('hidden');\\n      } else {\\n        el.addClass('hidden');\\n      }\\n    });\\n  }\\n\\n  private updateProfileSelector() {\\n    this.profileSelector.empty();\\n    \\n    // Add default profile\\n    const defaultOption = this.profileSelector.createEl('option', { value: 'default' });\\n    defaultOption.textContent = 'Default Configuration';\\n    \\n    // Add custom profiles\\n    this.profiles.forEach(profile => {\\n      const option = this.profileSelector.createEl('option', { value: profile.id });\\n      option.textContent = profile.name;\\n    });\\n  }\\n\\n  private loadProfiles() {\\n    // Load saved profiles from storage\\n    try {\\n      const savedProfiles = this.plugin.settings.configurationProfiles || [];\\n      this.profiles = savedProfiles.map((p: any) => ({\\n        ...p,\\n        created: new Date(p.created),\\n        lastModified: new Date(p.lastModified)\\n      }));\\n    } catch (error) {\\n      console.error('Failed to load configuration profiles:', error);\\n      this.profiles = [];\\n    }\\n  }\\n\\n  private loadProfile(profileId: string) {\\n    if (profileId === 'default') {\\n      this.currentConfiguration = this.getDefaultConfiguration();\\n    } else {\\n      const profile = this.profiles.find(p => p.id === profileId);\\n      if (profile) {\\n        this.currentConfiguration = { ...profile.config };\\n      }\\n    }\\n    \\n    this.renderSettings();\\n    this.onConfigurationChange();\\n  }\\n\\n  private showSaveProfileModal() {\\n    const name = prompt('Enter profile name:');\\n    if (!name) return;\\n    \\n    const description = prompt('Enter profile description (optional):') || '';\\n    this.saveAsProfile(name, description);\\n  }\\n\\n  private saveAsProfile(name: string, description: string) {\\n    const profile: ConfigurationProfile = {\\n      id: `profile-${Date.now()}`,\\n      name,\\n      description,\\n      config: { ...this.currentConfiguration },\\n      created: new Date(),\\n      lastModified: new Date(),\\n      isDefault: false\\n    };\\n    \\n    this.profiles.push(profile);\\n    this.updateProfileSelector();\\n    this.saveProfiles();\\n    \\n    new Notice(`Profile \\\"${name}\\\" saved successfully`);\\n  }\\n\\n  private deleteCurrentProfile() {\\n    const currentProfileId = this.profileSelector.value;\\n    if (currentProfileId === 'default') {\\n      new Notice('Cannot delete the default profile');\\n      return;\\n    }\\n    \\n    const profile = this.profiles.find(p => p.id === currentProfileId);\\n    if (!profile) return;\\n    \\n    const confirmed = confirm(`Delete profile \\\"${profile.name}\\\"?`);\\n    if (confirmed) {\\n      this.profiles = this.profiles.filter(p => p.id !== currentProfileId);\\n      this.updateProfileSelector();\\n      this.saveProfiles();\\n      this.loadProfile('default');\\n      \\n      new Notice(`Profile \\\"${profile.name}\\\" deleted`);\\n    }\\n  }\\n\\n  private async saveConfiguration() {\\n    try {\\n      const validation = await this.validateConfiguration();\\n      \\n      if (!validation.isValid) {\\n        const proceed = confirm('Configuration has errors. Save anyway?');\\n        if (!proceed) return;\\n      }\\n      \\n      // Save to plugin settings\\n      this.plugin.settings.advancedConfiguration = { ...this.currentConfiguration };\\n      await this.plugin.saveSettings();\\n      \\n      this.hasUnsavedChanges = false;\\n      new Notice('✅ Configuration saved successfully');\\n      \\n    } catch (error) {\\n      console.error('Failed to save configuration:', error);\\n      new Notice('❌ Failed to save configuration');\\n    }\\n  }\\n\\n  private resetToDefaults() {\\n    const confirmed = confirm('Reset all settings to default values? This cannot be undone.');\\n    if (confirmed) {\\n      this.currentConfiguration = this.getDefaultConfiguration();\\n      this.renderSettings();\\n      this.onConfigurationChange();\\n      new Notice('Configuration reset to defaults');\\n    }\\n  }\\n\\n  private async testConfiguration() {\\n    new Notice('Testing configuration...');\\n    \\n    try {\\n      // Simulate configuration test\\n      await new Promise(resolve => setTimeout(resolve, 2000));\\n      \\n      const testResult = {\\n        success: Math.random() > 0.2, // 80% success rate for demo\\n        latency: Math.random() * 200 + 50,\\n        errors: Math.random() > 0.8 ? ['Connection timeout'] : []\\n      };\\n      \\n      if (testResult.success) {\\n        new Notice(`✅ Configuration test passed (${testResult.latency.toFixed(0)}ms average)`);\\n      } else {\\n        new Notice(`❌ Configuration test failed: ${testResult.errors.join(', ')}`);\\n      }\\n      \\n    } catch (error) {\\n      console.error('Configuration test failed:', error);\\n      new Notice('❌ Configuration test failed');\\n    }\\n  }\\n\\n  private exportConfiguration() {\\n    const exportData = {\\n      version: '1.0',\\n      timestamp: new Date().toISOString(),\\n      configuration: this.currentConfiguration,\\n      profiles: this.profiles\\n    };\\n    \\n    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });\\n    const url = URL.createObjectURL(blob);\\n    \\n    const a = document.createElement('a');\\n    a.href = url;\\n    a.download = `vaultpilot-config-${new Date().toISOString().split('T')[0]}.json`;\\n    a.click();\\n    \\n    URL.revokeObjectURL(url);\\n    new Notice('Configuration exported successfully');\\n  }\\n\\n  private importConfiguration() {\\n    const input = document.createElement('input');\\n    input.type = 'file';\\n    input.accept = '.json';\\n    \\n    input.onchange = (e) => {\\n      const file = (e.target as HTMLInputElement).files?.[0];\\n      if (!file) return;\\n      \\n      const reader = new FileReader();\\n      reader.onload = (e) => {\\n        try {\\n          const data = JSON.parse(e.target?.result as string);\\n          \\n          if (data.configuration) {\\n            this.currentConfiguration = data.configuration;\\n            this.renderSettings();\\n            this.onConfigurationChange();\\n            new Notice('Configuration imported successfully');\\n          }\\n          \\n          if (data.profiles) {\\n            this.profiles = data.profiles.map((p: any) => ({\\n              ...p,\\n              created: new Date(p.created),\\n              lastModified: new Date(p.lastModified)\\n            }));\\n            this.updateProfileSelector();\\n            this.saveProfiles();\\n          }\\n          \\n        } catch (error) {\\n          console.error('Failed to import configuration:', error);\\n          new Notice('❌ Failed to import configuration: Invalid file format');\\n        }\\n      };\\n      \\n      reader.readAsText(file);\\n    };\\n    \\n    input.click();\\n  }\\n\\n  private saveProfiles() {\\n    try {\\n      this.plugin.settings.configurationProfiles = this.profiles;\\n      this.plugin.saveSettings();\\n    } catch (error) {\\n      console.error('Failed to save profiles:', error);\\n    }\\n  }\\n\\n  private startRealTimeValidation() {\\n    // Real-time validation is handled by onConfigurationChange\\n    // This could be extended with more sophisticated validation\\n    console.log('Real-time validation enabled');\\n  }\\n}\\n\"]}"}
