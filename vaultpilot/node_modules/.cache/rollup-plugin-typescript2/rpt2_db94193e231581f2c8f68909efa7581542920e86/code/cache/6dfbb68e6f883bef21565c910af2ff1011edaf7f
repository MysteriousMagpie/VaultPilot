{"code":"/**\n * Enhanced Commands System for VaultPilot\n * Provides keyboard shortcuts and enhanced command definitions\n */\nimport { Notice, Modal, MarkdownView } from 'obsidian';\nexport class KeyboardShortcutHandler {\n    constructor(plugin) {\n        this.shortcuts = new Map();\n        this.contextMenuEnabled = true;\n        this.plugin = plugin;\n        this.app = plugin.app;\n        this.initializeDefaultShortcuts();\n    }\n    initializeDefaultShortcuts() {\n        const defaultShortcuts = [\n            // Core VaultPilot shortcuts\n            {\n                key: 'Enter',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:open-chat',\n                description: 'Open VaultPilot Chat',\n                context: 'global'\n            },\n            {\n                key: 'KeyS',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:smart-search',\n                description: 'Smart Search',\n                context: 'global'\n            },\n            {\n                key: 'KeyC',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:quick-chat',\n                description: 'Quick Chat with Selection',\n                context: 'editor'\n            },\n            {\n                key: 'Space',\n                modifiers: ['Ctrl'],\n                command: 'vaultpilot:copilot-complete',\n                description: 'Get AI Completion',\n                context: 'editor'\n            },\n            {\n                key: 'KeyW',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:execute-workflow',\n                description: 'Execute Workflow',\n                context: 'global'\n            },\n            {\n                key: 'KeyA',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:analyze-vault',\n                description: 'Analyze Current Vault',\n                context: 'global'\n            },\n            {\n                key: 'KeyD',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:open-dashboard',\n                description: 'Open VaultPilot Dashboard',\n                context: 'global'\n            },\n            {\n                key: 'KeyP',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:plan-my-day',\n                description: 'Plan My Day',\n                context: 'global'\n            },\n            // Vault Management shortcuts\n            {\n                key: 'KeyV',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:vault-structure',\n                description: 'View Vault Structure',\n                context: 'global'\n            },\n            {\n                key: 'KeyF',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:file-operations',\n                description: 'File Operations',\n                context: 'global'\n            },\n            {\n                key: 'KeyO',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:vault-organizer',\n                description: 'Vault Organizer',\n                context: 'global'\n            },\n            {\n                key: 'KeyB',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:batch-operations',\n                description: 'Batch Operations',\n                context: 'global'\n            },\n            // Enhanced shortcuts\n            {\n                key: 'KeyH',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:show-shortcuts',\n                description: 'Show Keyboard Shortcuts',\n                context: 'global'\n            },\n            {\n                key: 'KeyR',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:refresh-cache',\n                description: 'Refresh Cache',\n                context: 'global'\n            },\n            {\n                key: 'KeyM',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:performance-metrics',\n                description: 'Show Performance Metrics',\n                context: 'global'\n            },\n            // Agent management\n            {\n                key: 'KeyG',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:agent-marketplace',\n                description: 'Agent Marketplace',\n                context: 'global'\n            },\n            {\n                key: 'KeyE',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:agent-evolution',\n                description: 'Agent Evolution Status',\n                context: 'global'\n            },\n            // Quick actions\n            {\n                key: 'KeyQ',\n                modifiers: ['Alt'],\n                command: 'vaultpilot:quick-note',\n                description: 'Quick Note Creation',\n                context: 'global'\n            },\n            {\n                key: 'KeyI',\n                modifiers: ['Ctrl', 'Alt'],\n                command: 'vaultpilot:insert-template',\n                description: 'Insert Template',\n                context: 'editor'\n            },\n            {\n                key: 'KeyL',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:link-analyzer',\n                description: 'Analyze Links',\n                context: 'editor'\n            },\n            {\n                key: 'KeyT',\n                modifiers: ['Ctrl', 'Shift'],\n                command: 'vaultpilot:tag-manager',\n                description: 'Tag Manager',\n                context: 'global'\n            }\n        ];\n        defaultShortcuts.forEach(shortcut => {\n            this.addShortcut(shortcut);\n        });\n    }\n    addShortcut(shortcut) {\n        const key = this.getShortcutKey(shortcut);\n        this.shortcuts.set(key, shortcut);\n    }\n    removeShortcut(shortcut) {\n        const key = this.getShortcutKey(shortcut);\n        this.shortcuts.delete(key);\n    }\n    getShortcutKey(shortcut) {\n        return `${shortcut.modifiers.sort().join('+')}_${shortcut.key}`;\n    }\n    handleKeyDown(event) {\n        const modifiers = [];\n        if (event.ctrlKey)\n            modifiers.push('Ctrl');\n        if (event.shiftKey)\n            modifiers.push('Shift');\n        if (event.altKey)\n            modifiers.push('Alt');\n        if (event.metaKey)\n            modifiers.push('Meta');\n        const key = event.code;\n        const shortcutKey = `${modifiers.sort().join('+')}_${key}`;\n        const shortcut = this.shortcuts.get(shortcutKey);\n        if (shortcut && (shortcut.enabled !== false)) {\n            const context = this.getCurrentContext();\n            if (this.isShortcutValidForContext(shortcut, context)) {\n                event.preventDefault();\n                event.stopPropagation();\n                this.executeCommand(shortcut.command);\n                return true;\n            }\n        }\n        return false;\n    }\n    getCurrentContext() {\n        const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);\n        if (activeView) {\n            return 'editor';\n        }\n        // Check if modal is open\n        const modals = document.querySelectorAll('.modal');\n        if (modals.length > 0) {\n            return 'modal';\n        }\n        return 'global';\n    }\n    isShortcutValidForContext(shortcut, context) {\n        if (!shortcut.context)\n            return true;\n        return shortcut.context === context || shortcut.context === 'global';\n    }\n    executeCommand(commandId) {\n        var _a, _b;\n        const command = commandId.replace('vaultpilot:', '');\n        switch (command) {\n            case 'open-chat':\n                this.plugin.openChatModal();\n                break;\n            case 'smart-search':\n                this.plugin.openSmartSearchModal();\n                break;\n            case 'quick-chat':\n                const editor = (_a = this.app.workspace.getActiveViewOfType(MarkdownView)) === null || _a === void 0 ? void 0 : _a.editor;\n                if (editor) {\n                    this.plugin.quickChatWithSelection(editor);\n                }\n                break;\n            case 'copilot-complete':\n                const activeEditor = (_b = this.app.workspace.getActiveViewOfType(MarkdownView)) === null || _b === void 0 ? void 0 : _b.editor;\n                if (activeEditor) {\n                    this.plugin.getCopilotCompletion(activeEditor);\n                }\n                break;\n            case 'execute-workflow':\n                this.plugin.openWorkflowModal();\n                break;\n            case 'analyze-vault':\n                this.plugin.analyzeVault();\n                break;\n            case 'open-dashboard':\n                this.plugin.activateFullTabView();\n                break;\n            case 'plan-my-day':\n                this.plugin.planMyDay();\n                break;\n            case 'vault-structure':\n                this.plugin.openVaultStructureModal();\n                break;\n            case 'file-operations':\n                this.plugin.openFileOperationsModal();\n                break;\n            case 'vault-organizer':\n                this.plugin.openVaultOrganizerModal();\n                break;\n            case 'batch-operations':\n                this.plugin.openBatchOperationsModal();\n                break;\n            case 'show-shortcuts':\n                this.showShortcutsHelp();\n                break;\n            case 'refresh-cache':\n                this.refreshCache();\n                break;\n            case 'performance-metrics':\n                this.showPerformanceMetrics();\n                break;\n            case 'agent-marketplace':\n                this.openAgentMarketplace();\n                break;\n            case 'agent-evolution':\n                this.showAgentEvolution();\n                break;\n            case 'quick-note':\n                this.createQuickNote();\n                break;\n            case 'insert-template':\n                this.insertTemplate();\n                break;\n            case 'link-analyzer':\n                this.analyzeLinks();\n                break;\n            case 'tag-manager':\n                this.openTagManager();\n                break;\n            default:\n                new Notice(`Unknown command: ${command}`);\n        }\n    }\n    showShortcutsHelp() {\n        const shortcuts = Array.from(this.shortcuts.values());\n        const content = this.generateShortcutsHelpContent(shortcuts);\n        const modal = new Modal(this.app);\n        modal.titleEl.textContent = 'VaultPilot Keyboard Shortcuts';\n        modal.contentEl.innerHTML = content;\n        modal.open();\n    }\n    generateShortcutsHelpContent(shortcuts) {\n        const categorized = this.categorizeShortcuts(shortcuts);\n        let html = '<div class=\"vaultpilot-shortcuts-help\">';\n        for (const [category, categoryShortcuts] of Object.entries(categorized)) {\n            html += `<div class=\"shortcut-category\">`;\n            html += `<h3>${category}</h3>`;\n            html += `<div class=\"shortcut-list\">`;\n            categoryShortcuts.forEach(shortcut => {\n                const keyCombo = `${shortcut.modifiers.join(' + ')} + ${shortcut.key.replace('Key', '')}`;\n                html += `<div class=\"shortcut-item\">`;\n                html += `<span class=\"shortcut-keys\">${keyCombo}</span>`;\n                html += `<span class=\"shortcut-desc\">${shortcut.description}</span>`;\n                html += `</div>`;\n            });\n            html += `</div></div>`;\n        }\n        html += '</div>';\n        return html;\n    }\n    categorizeShortcuts(shortcuts) {\n        const categories = {\n            'Core Features': [],\n            'Vault Management': [],\n            'Agent Features': [],\n            'Quick Actions': [],\n            'System': []\n        };\n        shortcuts.forEach(shortcut => {\n            const command = shortcut.command.replace('vaultpilot:', '');\n            if (['open-chat', 'copilot-complete', 'execute-workflow', 'analyze-vault'].includes(command)) {\n                categories['Core Features'].push(shortcut);\n            }\n            else if (['vault-structure', 'file-operations', 'vault-organizer', 'batch-operations'].includes(command)) {\n                categories['Vault Management'].push(shortcut);\n            }\n            else if (['agent-marketplace', 'agent-evolution'].includes(command)) {\n                categories['Agent Features'].push(shortcut);\n            }\n            else if (['quick-note', 'insert-template', 'link-analyzer', 'tag-manager'].includes(command)) {\n                categories['Quick Actions'].push(shortcut);\n            }\n            else {\n                categories['System'].push(shortcut);\n            }\n        });\n        return categories;\n    }\n    refreshCache() {\n        // Implement cache refresh functionality\n        new Notice('Cache refreshed successfully');\n    }\n    showPerformanceMetrics() {\n        // This will be implemented with ProgressIndicatorUI\n        new Notice('Performance metrics feature coming soon');\n    }\n    openAgentMarketplace() {\n        // Use existing agent marketplace if available\n        new Notice('Agent marketplace feature coming soon');\n    }\n    showAgentEvolution() {\n        new Notice('Agent evolution status feature coming soon');\n    }\n    createQuickNote() {\n        const newFile = this.app.vault.create(`Quick Note ${new Date().toISOString().slice(0, 19)}.md`, '# Quick Note\\n\\n');\n        newFile.then(file => {\n            this.app.workspace.getLeaf().openFile(file);\n        });\n    }\n    insertTemplate() {\n        new Notice('Template insertion feature coming soon');\n    }\n    analyzeLinks() {\n        new Notice('Link analyzer feature coming soon');\n    }\n    openTagManager() {\n        new Notice('Tag manager feature coming soon');\n    }\n    getShortcuts() {\n        return Array.from(this.shortcuts.values());\n    }\n    isEnabled() {\n        return this.contextMenuEnabled;\n    }\n    setEnabled(enabled) {\n        this.contextMenuEnabled = enabled;\n    }\n}\n/**\n * Enhanced Commands Factory\n * Creates enhanced command definitions for VaultPilot\n */\nexport class EnhancedCommandsFactory {\n    static createEnhancedCommands(plugin) {\n        return [\n            {\n                id: 'vaultpilot-enhanced-chat',\n                name: 'Enhanced AI Chat',\n                description: 'Open enhanced AI chat with real-time progress',\n                callback: () => plugin.openChatModal(),\n                category: 'AI Features',\n                priority: 1\n            },\n            {\n                id: 'vaultpilot-smart-search',\n                name: 'Smart Search',\n                description: 'AI-powered search with context awareness',\n                callback: () => plugin.openSmartSearchModal(),\n                category: 'Search',\n                priority: 2\n            },\n            {\n                id: 'vaultpilot-quick-completion',\n                name: 'Quick AI Completion',\n                description: 'Get AI completion for current context',\n                editorCallback: (editor) => plugin.getCopilotCompletion(editor),\n                category: 'AI Features',\n                priority: 3\n            },\n            {\n                id: 'vaultpilot-workflow-enhanced',\n                name: 'Enhanced Workflow Execution',\n                description: 'Execute workflows with progress tracking',\n                callback: () => plugin.openWorkflowModal(),\n                category: 'Automation',\n                priority: 4\n            },\n            {\n                id: 'vaultpilot-vault-analysis',\n                name: 'Enhanced Vault Analysis',\n                description: 'Comprehensive vault analysis with optimization',\n                callback: () => plugin.analyzeVault(),\n                category: 'Analytics',\n                priority: 5\n            }\n        ];\n    }\n}\nexport default { KeyboardShortcutHandler, EnhancedCommandsFactory };\n//# sourceMappingURL=enhanced-commands.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts"],"map":"{\"version\":3,\"file\":\"enhanced-commands.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/vault-management/enhanced-commands.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * Enhanced Commands System for VaultPilot\\n * Provides keyboard shortcuts and enhanced command definitions\\n */\\n\\nimport { App, Notice, Editor, TFile, Modal, MarkdownView } from 'obsidian';\\nimport VaultPilotPlugin from '../main';\\n\\nexport interface KeyboardShortcut {\\n    key: string;\\n    modifiers: string[];\\n    command: string;\\n    description: string;\\n    context?: 'editor' | 'global' | 'modal';\\n    enabled?: boolean;\\n}\\n\\nexport interface EnhancedCommand {\\n    id: string;\\n    name: string;\\n    description: string;\\n    callback?: () => void;\\n    editorCallback?: (editor: Editor, view: any) => void;\\n    checkCallback?: (checking: boolean) => boolean | void;\\n    hotkeys?: KeyboardShortcut[];\\n    category?: string;\\n    priority?: number;\\n}\\n\\nexport class KeyboardShortcutHandler {\\n    private plugin: VaultPilotPlugin;\\n    private app: App;\\n    private shortcuts: Map<string, KeyboardShortcut> = new Map();\\n    private contextMenuEnabled = true;\\n    \\n    constructor(plugin: VaultPilotPlugin) {\\n        this.plugin = plugin;\\n        this.app = plugin.app;\\n        this.initializeDefaultShortcuts();\\n    }\\n\\n    private initializeDefaultShortcuts() {\\n        const defaultShortcuts: KeyboardShortcut[] = [\\n            // Core VaultPilot shortcuts\\n            {\\n                key: 'Enter',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:open-chat',\\n                description: 'Open VaultPilot Chat',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyS',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:smart-search',\\n                description: 'Smart Search',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyC',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:quick-chat',\\n                description: 'Quick Chat with Selection',\\n                context: 'editor'\\n            },\\n            {\\n                key: 'Space',\\n                modifiers: ['Ctrl'],\\n                command: 'vaultpilot:copilot-complete',\\n                description: 'Get AI Completion',\\n                context: 'editor'\\n            },\\n            {\\n                key: 'KeyW',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:execute-workflow',\\n                description: 'Execute Workflow',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyA',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:analyze-vault',\\n                description: 'Analyze Current Vault',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyD',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:open-dashboard',\\n                description: 'Open VaultPilot Dashboard',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyP',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:plan-my-day',\\n                description: 'Plan My Day',\\n                context: 'global'\\n            },\\n            // Vault Management shortcuts\\n            {\\n                key: 'KeyV',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:vault-structure',\\n                description: 'View Vault Structure',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyF',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:file-operations',\\n                description: 'File Operations',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyO',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:vault-organizer',\\n                description: 'Vault Organizer',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyB',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:batch-operations',\\n                description: 'Batch Operations',\\n                context: 'global'\\n            },\\n            // Enhanced shortcuts\\n            {\\n                key: 'KeyH',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:show-shortcuts',\\n                description: 'Show Keyboard Shortcuts',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyR',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:refresh-cache',\\n                description: 'Refresh Cache',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyM',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:performance-metrics',\\n                description: 'Show Performance Metrics',\\n                context: 'global'\\n            },\\n            // Agent management\\n            {\\n                key: 'KeyG',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:agent-marketplace',\\n                description: 'Agent Marketplace',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyE',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:agent-evolution',\\n                description: 'Agent Evolution Status',\\n                context: 'global'\\n            },\\n            // Quick actions\\n            {\\n                key: 'KeyQ',\\n                modifiers: ['Alt'],\\n                command: 'vaultpilot:quick-note',\\n                description: 'Quick Note Creation',\\n                context: 'global'\\n            },\\n            {\\n                key: 'KeyI',\\n                modifiers: ['Ctrl', 'Alt'],\\n                command: 'vaultpilot:insert-template',\\n                description: 'Insert Template',\\n                context: 'editor'\\n            },\\n            {\\n                key: 'KeyL',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:link-analyzer',\\n                description: 'Analyze Links',\\n                context: 'editor'\\n            },\\n            {\\n                key: 'KeyT',\\n                modifiers: ['Ctrl', 'Shift'],\\n                command: 'vaultpilot:tag-manager',\\n                description: 'Tag Manager',\\n                context: 'global'\\n            }\\n        ];\\n\\n        defaultShortcuts.forEach(shortcut => {\\n            this.addShortcut(shortcut);\\n        });\\n    }\\n\\n    addShortcut(shortcut: KeyboardShortcut) {\\n        const key = this.getShortcutKey(shortcut);\\n        this.shortcuts.set(key, shortcut);\\n    }\\n\\n    removeShortcut(shortcut: KeyboardShortcut) {\\n        const key = this.getShortcutKey(shortcut);\\n        this.shortcuts.delete(key);\\n    }\\n\\n    private getShortcutKey(shortcut: KeyboardShortcut): string {\\n        return `${shortcut.modifiers.sort().join('+')}_${shortcut.key}`;\\n    }\\n\\n    handleKeyDown(event: KeyboardEvent): boolean {\\n        const modifiers = [];\\n        if (event.ctrlKey) modifiers.push('Ctrl');\\n        if (event.shiftKey) modifiers.push('Shift');\\n        if (event.altKey) modifiers.push('Alt');\\n        if (event.metaKey) modifiers.push('Meta');\\n\\n        const key = event.code;\\n        const shortcutKey = `${modifiers.sort().join('+')}_${key}`;\\n        \\n        const shortcut = this.shortcuts.get(shortcutKey);\\n        if (shortcut && (shortcut.enabled !== false)) {\\n            const context = this.getCurrentContext();\\n            if (this.isShortcutValidForContext(shortcut, context)) {\\n                event.preventDefault();\\n                event.stopPropagation();\\n                this.executeCommand(shortcut.command);\\n                return true;\\n            }\\n        }\\n        \\n        return false;\\n    }\\n\\n    private getCurrentContext(): 'editor' | 'global' | 'modal' {\\n        const activeView = this.app.workspace.getActiveViewOfType(MarkdownView);\\n        if (activeView) {\\n            return 'editor';\\n        }\\n        \\n        // Check if modal is open\\n        const modals = document.querySelectorAll('.modal');\\n        if (modals.length > 0) {\\n            return 'modal';\\n        }\\n        \\n        return 'global';\\n    }\\n\\n    private isShortcutValidForContext(shortcut: KeyboardShortcut, context: string): boolean {\\n        if (!shortcut.context) return true;\\n        return shortcut.context === context || shortcut.context === 'global';\\n    }\\n\\n    private executeCommand(commandId: string) {\\n        const command = commandId.replace('vaultpilot:', '');\\n        \\n        switch (command) {\\n            case 'open-chat':\\n                this.plugin.openChatModal();\\n                break;\\n            case 'smart-search':\\n                this.plugin.openSmartSearchModal();\\n                break;\\n            case 'quick-chat':\\n                const editor = this.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\\n                if (editor) {\\n                    this.plugin.quickChatWithSelection(editor);\\n                }\\n                break;\\n            case 'copilot-complete':\\n                const activeEditor = this.app.workspace.getActiveViewOfType(MarkdownView)?.editor;\\n                if (activeEditor) {\\n                    this.plugin.getCopilotCompletion(activeEditor);\\n                }\\n                break;\\n            case 'execute-workflow':\\n                this.plugin.openWorkflowModal();\\n                break;\\n            case 'analyze-vault':\\n                this.plugin.analyzeVault();\\n                break;\\n            case 'open-dashboard':\\n                this.plugin.activateFullTabView();\\n                break;\\n            case 'plan-my-day':\\n                this.plugin.planMyDay();\\n                break;\\n            case 'vault-structure':\\n                this.plugin.openVaultStructureModal();\\n                break;\\n            case 'file-operations':\\n                this.plugin.openFileOperationsModal();\\n                break;\\n            case 'vault-organizer':\\n                this.plugin.openVaultOrganizerModal();\\n                break;\\n            case 'batch-operations':\\n                this.plugin.openBatchOperationsModal();\\n                break;\\n            case 'show-shortcuts':\\n                this.showShortcutsHelp();\\n                break;\\n            case 'refresh-cache':\\n                this.refreshCache();\\n                break;\\n            case 'performance-metrics':\\n                this.showPerformanceMetrics();\\n                break;\\n            case 'agent-marketplace':\\n                this.openAgentMarketplace();\\n                break;\\n            case 'agent-evolution':\\n                this.showAgentEvolution();\\n                break;\\n            case 'quick-note':\\n                this.createQuickNote();\\n                break;\\n            case 'insert-template':\\n                this.insertTemplate();\\n                break;\\n            case 'link-analyzer':\\n                this.analyzeLinks();\\n                break;\\n            case 'tag-manager':\\n                this.openTagManager();\\n                break;\\n            default:\\n                new Notice(`Unknown command: ${command}`);\\n        }\\n    }\\n\\n    private showShortcutsHelp() {\\n        const shortcuts = Array.from(this.shortcuts.values());\\n        const content = this.generateShortcutsHelpContent(shortcuts);\\n        \\n        const modal = new Modal(this.app);\\n        modal.titleEl.textContent = 'VaultPilot Keyboard Shortcuts';\\n        modal.contentEl.innerHTML = content;\\n        modal.open();\\n    }\\n\\n    private generateShortcutsHelpContent(shortcuts: KeyboardShortcut[]): string {\\n        const categorized = this.categorizeShortcuts(shortcuts);\\n        \\n        let html = '<div class=\\\"vaultpilot-shortcuts-help\\\">';\\n        \\n        for (const [category, categoryShortcuts] of Object.entries(categorized)) {\\n            html += `<div class=\\\"shortcut-category\\\">`;\\n            html += `<h3>${category}</h3>`;\\n            html += `<div class=\\\"shortcut-list\\\">`;\\n            \\n            categoryShortcuts.forEach(shortcut => {\\n                const keyCombo = `${shortcut.modifiers.join(' + ')} + ${shortcut.key.replace('Key', '')}`;\\n                html += `<div class=\\\"shortcut-item\\\">`;\\n                html += `<span class=\\\"shortcut-keys\\\">${keyCombo}</span>`;\\n                html += `<span class=\\\"shortcut-desc\\\">${shortcut.description}</span>`;\\n                html += `</div>`;\\n            });\\n            \\n            html += `</div></div>`;\\n        }\\n        \\n        html += '</div>';\\n        return html;\\n    }\\n\\n    private categorizeShortcuts(shortcuts: KeyboardShortcut[]): Record<string, KeyboardShortcut[]> {\\n        const categories: Record<string, KeyboardShortcut[]> = {\\n            'Core Features': [],\\n            'Vault Management': [],\\n            'Agent Features': [],\\n            'Quick Actions': [],\\n            'System': []\\n        };\\n\\n        shortcuts.forEach(shortcut => {\\n            const command = shortcut.command.replace('vaultpilot:', '');\\n            \\n            if (['open-chat', 'copilot-complete', 'execute-workflow', 'analyze-vault'].includes(command)) {\\n                categories['Core Features'].push(shortcut);\\n            } else if (['vault-structure', 'file-operations', 'vault-organizer', 'batch-operations'].includes(command)) {\\n                categories['Vault Management'].push(shortcut);\\n            } else if (['agent-marketplace', 'agent-evolution'].includes(command)) {\\n                categories['Agent Features'].push(shortcut);\\n            } else if (['quick-note', 'insert-template', 'link-analyzer', 'tag-manager'].includes(command)) {\\n                categories['Quick Actions'].push(shortcut);\\n            } else {\\n                categories['System'].push(shortcut);\\n            }\\n        });\\n\\n        return categories;\\n    }\\n\\n    private refreshCache() {\\n        // Implement cache refresh functionality\\n        new Notice('Cache refreshed successfully');\\n    }\\n\\n    private showPerformanceMetrics() {\\n        // This will be implemented with ProgressIndicatorUI\\n        new Notice('Performance metrics feature coming soon');\\n    }\\n\\n    private openAgentMarketplace() {\\n        // Use existing agent marketplace if available\\n        new Notice('Agent marketplace feature coming soon');\\n    }\\n\\n    private showAgentEvolution() {\\n        new Notice('Agent evolution status feature coming soon');\\n    }\\n\\n    private createQuickNote() {\\n        const newFile = this.app.vault.create(\\n            `Quick Note ${new Date().toISOString().slice(0, 19)}.md`,\\n            '# Quick Note\\\\n\\\\n'\\n        );\\n        \\n        newFile.then(file => {\\n            this.app.workspace.getLeaf().openFile(file);\\n        });\\n    }\\n\\n    private insertTemplate() {\\n        new Notice('Template insertion feature coming soon');\\n    }\\n\\n    private analyzeLinks() {\\n        new Notice('Link analyzer feature coming soon');\\n    }\\n\\n    private openTagManager() {\\n        new Notice('Tag manager feature coming soon');\\n    }\\n\\n    getShortcuts(): KeyboardShortcut[] {\\n        return Array.from(this.shortcuts.values());\\n    }\\n\\n    isEnabled(): boolean {\\n        return this.contextMenuEnabled;\\n    }\\n\\n    setEnabled(enabled: boolean) {\\n        this.contextMenuEnabled = enabled;\\n    }\\n}\\n\\n/**\\n * Enhanced Commands Factory\\n * Creates enhanced command definitions for VaultPilot\\n */\\nexport class EnhancedCommandsFactory {\\n    static createEnhancedCommands(plugin: VaultPilotPlugin): EnhancedCommand[] {\\n        return [\\n            {\\n                id: 'vaultpilot-enhanced-chat',\\n                name: 'Enhanced AI Chat',\\n                description: 'Open enhanced AI chat with real-time progress',\\n                callback: () => plugin.openChatModal(),\\n                category: 'AI Features',\\n                priority: 1\\n            },\\n            {\\n                id: 'vaultpilot-smart-search',\\n                name: 'Smart Search',\\n                description: 'AI-powered search with context awareness',\\n                callback: () => plugin.openSmartSearchModal(),\\n                category: 'Search',\\n                priority: 2\\n            },\\n            {\\n                id: 'vaultpilot-quick-completion',\\n                name: 'Quick AI Completion',\\n                description: 'Get AI completion for current context',\\n                editorCallback: (editor: Editor) => plugin.getCopilotCompletion(editor),\\n                category: 'AI Features',\\n                priority: 3\\n            },\\n            {\\n                id: 'vaultpilot-workflow-enhanced',\\n                name: 'Enhanced Workflow Execution',\\n                description: 'Execute workflows with progress tracking',\\n                callback: () => plugin.openWorkflowModal(),\\n                category: 'Automation',\\n                priority: 4\\n            },\\n            {\\n                id: 'vaultpilot-vault-analysis',\\n                name: 'Enhanced Vault Analysis',\\n                description: 'Comprehensive vault analysis with optimization',\\n                callback: () => plugin.analyzeVault(),\\n                category: 'Analytics',\\n                priority: 5\\n            }\\n        ];\\n    }\\n}\\n\\nexport default { KeyboardShortcutHandler, EnhancedCommandsFactory };\\n\"]}"}
