{"code":"/**\n * OnboardingWizard - Intelligent first-time setup and transport optimization\n */\nimport { __awaiter } from \"tslib\";\nimport { Modal, Setting, Notice, ButtonComponent } from 'obsidian';\nimport { TransportManager } from '../devpipe/TransportManager';\nimport { TransportType } from '../devpipe/transports/DevPipeTransport';\nimport { EnvironmentDetector } from '../utils/EnvironmentDetector';\nvar OnboardingStep;\n(function (OnboardingStep) {\n    OnboardingStep[OnboardingStep[\"WELCOME\"] = 0] = \"WELCOME\";\n    OnboardingStep[OnboardingStep[\"ENVIRONMENT_DETECTION\"] = 1] = \"ENVIRONMENT_DETECTION\";\n    OnboardingStep[OnboardingStep[\"PREFERENCES\"] = 2] = \"PREFERENCES\";\n    OnboardingStep[OnboardingStep[\"VALIDATION\"] = 3] = \"VALIDATION\";\n    OnboardingStep[OnboardingStep[\"COMPLETION\"] = 4] = \"COMPLETION\";\n})(OnboardingStep || (OnboardingStep = {}));\nexport class OnboardingWizard extends Modal {\n    constructor(app, plugin, config = {}) {\n        super(app);\n        this.currentStep = 0;\n        this.totalSteps = 5;\n        this.stepElements = [];\n        this.plugin = plugin;\n        this.config = config;\n        // Initialize transport manager with default config\n        const transportConfig = {\n            selectionCriteria: {\n                latencyWeight: 0.3,\n                reliabilityWeight: 0.4,\n                capabilityWeight: 0.2,\n                costWeight: 0.1\n            },\n            fallbackChain: [TransportType.HTTP, TransportType.WEBSOCKET, TransportType.FILESYSTEM],\n            transportConfigs: {\n                http: {\n                    serverUrl: plugin.settings.backendUrl,\n                    timeout: 30000,\n                    retryAttempts: 3,\n                    debug: plugin.settings.debugMode\n                }\n            }\n        };\n        this.transportManager = new TransportManager(transportConfig);\n        this.progress = {\n            currentStep: 0,\n            totalSteps: this.totalSteps,\n            completedSteps: new Array(this.totalSteps).fill(false),\n            userPreferences: {\n                enableRealTimeUpdates: true,\n                performanceMode: 'balanced',\n                enableAnalytics: true\n            }\n        };\n        this.modalEl.addClass('vaultpilot-onboarding');\n    }\n    onOpen() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { contentEl } = this;\n            contentEl.empty();\n            // Add CSS classes for styling\n            this.modalEl.addClass('vaultpilot-onboarding-modal');\n            // Create header\n            this.createHeader();\n            // Create progress bar\n            this.createProgressBar();\n            // Create step container\n            const stepContainer = contentEl.createDiv('onboarding-step-container');\n            // Create navigation\n            this.createNavigation();\n            // Start with first step\n            yield this.renderCurrentStep();\n        });\n    }\n    createHeader() {\n        const { contentEl } = this;\n        const header = contentEl.createDiv('onboarding-header');\n        header.createEl('h2', { text: 'Welcome to VaultPilot' });\n        header.createEl('p', {\n            text: 'Let\\'s set up your optimal configuration for the best experience',\n            cls: 'onboarding-subtitle'\n        });\n    }\n    createProgressBar() {\n        const { contentEl } = this;\n        const progressContainer = contentEl.createDiv('onboarding-progress');\n        // Step indicators\n        const stepsContainer = progressContainer.createDiv('progress-steps');\n        for (let i = 0; i < this.totalSteps; i++) {\n            const step = stepsContainer.createDiv('progress-step');\n            step.addClass(i === 0 ? 'active' : 'inactive');\n            step.createSpan({ text: (i + 1).toString() });\n            this.stepElements.push(step);\n        }\n        // Progress bar\n        this.progressBar = progressContainer.createDiv('progress-bar');\n        const progressFill = this.progressBar.createDiv('progress-fill');\n        progressFill.style.width = `${(1 / this.totalSteps) * 100}%`;\n    }\n    createNavigation() {\n        const { contentEl } = this;\n        const navigation = contentEl.createDiv('onboarding-navigation');\n        // Previous button\n        this.previousButton = new ButtonComponent(navigation)\n            .setButtonText('Previous')\n            .setClass('mod-muted')\n            .onClick(() => this.previousStep());\n        // Skip button\n        this.skipButton = new ButtonComponent(navigation)\n            .setButtonText('Skip Setup')\n            .setClass('mod-muted')\n            .onClick(() => this.skipOnboarding());\n        // Next button\n        this.nextButton = new ButtonComponent(navigation)\n            .setButtonText('Next')\n            .setCta()\n            .onClick(() => this.nextStep());\n        this.updateNavigationState();\n    }\n    renderCurrentStep() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { contentEl } = this;\n            const stepContainer = contentEl.querySelector('.onboarding-step-container');\n            stepContainer.empty();\n            this.updateProgressIndicators();\n            switch (this.currentStep) {\n                case OnboardingStep.WELCOME:\n                    yield this.renderWelcomeStep(stepContainer);\n                    break;\n                case OnboardingStep.ENVIRONMENT_DETECTION:\n                    yield this.renderEnvironmentStep(stepContainer);\n                    break;\n                case OnboardingStep.PREFERENCES:\n                    yield this.renderPreferencesStep(stepContainer);\n                    break;\n                case OnboardingStep.VALIDATION:\n                    yield this.renderValidationStep(stepContainer);\n                    break;\n                case OnboardingStep.COMPLETION:\n                    yield this.renderCompletionStep(stepContainer);\n                    break;\n            }\n            this.updateNavigationState();\n        });\n    }\n    renderWelcomeStep(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const step = container.createDiv('onboarding-step welcome-step');\n            step.createEl('h3', { text: 'Welcome to VaultPilot' });\n            step.createEl('p', {\n                text: 'VaultPilot provides intelligent transport management and optimization for your Obsidian experience. This wizard will help you configure the optimal settings for your environment.'\n            });\n            const features = step.createDiv('welcome-features');\n            features.createEl('h4', { text: 'What you\\'ll get:' });\n            const featureList = features.createEl('ul');\n            featureList.createEl('li', { text: '🚀 Intelligent transport selection and failover' });\n            featureList.createEl('li', { text: '📊 Real-time performance monitoring' });\n            featureList.createEl('li', { text: '💡 AI-powered optimization suggestions' });\n            featureList.createEl('li', { text: '🔧 Advanced configuration options' });\n            featureList.createEl('li', { text: '📈 Usage analytics and insights' });\n            const estimatedTime = step.createDiv('estimated-time');\n            estimatedTime.createEl('p', {\n                text: '⏱️ Estimated setup time: 2-3 minutes',\n                cls: 'muted'\n            });\n        });\n    }\n    renderEnvironmentStep(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const step = container.createDiv('onboarding-step environment-step');\n            step.createEl('h3', { text: 'Environment Detection' });\n            step.createEl('p', { text: 'Analyzing your environment to recommend optimal transport configuration...' });\n            if (!this.config.skipEnvironmentDetection && !this.progress.detectedCapabilities) {\n                const detectionStatus = step.createDiv('detection-status');\n                detectionStatus.createEl('p', { text: '🔍 Detecting capabilities...', cls: 'detection-loading' });\n                try {\n                    this.progress.detectedCapabilities = yield this.detectEnvironment();\n                    this.renderEnvironmentResults(step);\n                }\n                catch (error) {\n                    this.renderEnvironmentError(step, error);\n                }\n            }\n            else if (this.progress.detectedCapabilities) {\n                this.renderEnvironmentResults(step);\n            }\n        });\n    }\n    detectEnvironment() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Simulate detection process with progress updates\n            yield new Promise(resolve => setTimeout(resolve, 1000));\n            const envInfo = EnvironmentDetector.detect();\n            // Ensure platform matches our interface\n            let platform = 'obsidian';\n            if (envInfo.platform === 'browser' || envInfo.platform === 'node' || envInfo.platform === 'obsidian') {\n                platform = envInfo.platform;\n            }\n            const capabilities = {\n                platform,\n                webSocketSupported: envInfo.hasWebSocket,\n                fileSystemAccess: envInfo.hasFileSystem,\n                httpCapabilities: envInfo.hasHTTP,\n                recommendedTransport: 'http', // Will be determined by analysis\n                performanceEstimate: 'good'\n            };\n            // Determine recommended transport\n            if (capabilities.webSocketSupported && capabilities.httpCapabilities) {\n                capabilities.recommendedTransport = 'websocket';\n                capabilities.performanceEstimate = 'excellent';\n            }\n            else if (capabilities.httpCapabilities) {\n                capabilities.recommendedTransport = 'http';\n                capabilities.performanceEstimate = 'good';\n            }\n            else if (capabilities.fileSystemAccess) {\n                capabilities.recommendedTransport = 'filesystem';\n                capabilities.performanceEstimate = 'fair';\n            }\n            return capabilities;\n        });\n    }\n    renderEnvironmentResults(container) {\n        const resultsContainer = container.createDiv('environment-results');\n        const capabilities = this.progress.detectedCapabilities;\n        resultsContainer.createEl('h4', { text: '✅ Detection Complete' });\n        const capabilitiesList = resultsContainer.createDiv('capabilities-list');\n        // WebSocket capability\n        const wsCapability = capabilitiesList.createDiv('capability-item');\n        wsCapability.createSpan({\n            text: capabilities.webSocketSupported ? '✅' : '❌',\n            cls: 'capability-icon'\n        });\n        wsCapability.createSpan({ text: 'WebSocket Support' });\n        // HTTP capability\n        const httpCapability = capabilitiesList.createDiv('capability-item');\n        httpCapability.createSpan({\n            text: capabilities.httpCapabilities ? '✅' : '❌',\n            cls: 'capability-icon'\n        });\n        httpCapability.createSpan({ text: 'HTTP Transport' });\n        // FileSystem capability\n        const fsCapability = capabilitiesList.createDiv('capability-item');\n        fsCapability.createSpan({\n            text: capabilities.fileSystemAccess ? '✅' : '❌',\n            cls: 'capability-icon'\n        });\n        fsCapability.createSpan({ text: 'FileSystem Access' });\n        // Recommendation\n        const recommendation = resultsContainer.createDiv('environment-recommendation');\n        recommendation.createEl('h4', { text: 'Recommendation' });\n        recommendation.createEl('p', {\n            text: `Based on your environment, we recommend using ${capabilities.recommendedTransport} transport for ${capabilities.performanceEstimate} performance.`\n        });\n    }\n    renderEnvironmentError(container, error) {\n        const errorContainer = container.createDiv('environment-error');\n        errorContainer.createEl('h4', { text: '⚠️ Detection Failed' });\n        errorContainer.createEl('p', {\n            text: 'Unable to automatically detect your environment capabilities. You can proceed with default settings or manually configure later.'\n        });\n        if (this.plugin.settings.debugMode) {\n            errorContainer.createEl('p', {\n                text: `Error: ${error.message}`,\n                cls: 'error-details'\n            });\n        }\n    }\n    renderPreferencesStep(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const step = container.createDiv('onboarding-step preferences-step');\n            step.createEl('h3', { text: 'Performance Preferences' });\n            step.createEl('p', { text: 'Configure your preferences for optimal performance:' });\n            const preferencesContainer = step.createDiv('preferences-container');\n            // Performance mode setting\n            new Setting(preferencesContainer)\n                .setName('Performance Mode')\n                .setDesc('Choose your preferred balance between speed and reliability')\n                .addDropdown(dropdown => {\n                dropdown.addOption('performance', 'Performance (Prioritize Speed)');\n                dropdown.addOption('balanced', 'Balanced (Recommended)');\n                dropdown.addOption('reliability', 'Reliability (Prioritize Stability)');\n                dropdown.setValue(this.progress.userPreferences.performanceMode);\n                dropdown.onChange(value => {\n                    this.progress.userPreferences.performanceMode = value;\n                });\n            });\n            // Real-time updates setting\n            new Setting(preferencesContainer)\n                .setName('Real-time Updates')\n                .setDesc('Enable real-time dashboard updates and live monitoring')\n                .addToggle(toggle => {\n                toggle.setValue(this.progress.userPreferences.enableRealTimeUpdates);\n                toggle.onChange(value => {\n                    this.progress.userPreferences.enableRealTimeUpdates = value;\n                });\n            });\n            // Analytics setting\n            new Setting(preferencesContainer)\n                .setName('Usage Analytics')\n                .setDesc('Enable anonymous usage analytics to improve recommendations')\n                .addToggle(toggle => {\n                toggle.setValue(this.progress.userPreferences.enableAnalytics);\n                toggle.onChange(value => {\n                    this.progress.userPreferences.enableAnalytics = value;\n                });\n            });\n        });\n    }\n    renderValidationStep(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const step = container.createDiv('onboarding-step validation-step');\n            step.createEl('h3', { text: 'Configuration Validation' });\n            step.createEl('p', { text: 'Testing your configuration and establishing performance baseline...' });\n            if (!this.config.skipValidation && !this.progress.validationResults) {\n                const validationStatus = step.createDiv('validation-status');\n                validationStatus.createEl('p', { text: '🧪 Running validation tests...', cls: 'validation-loading' });\n                try {\n                    this.progress.validationResults = yield this.validateConfiguration();\n                    this.renderValidationResults(step);\n                }\n                catch (error) {\n                    this.renderValidationError(step, error);\n                }\n            }\n            else if (this.progress.validationResults) {\n                this.renderValidationResults(step);\n            }\n        });\n    }\n    validateConfiguration() {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a, _b;\n            // Simulate validation process\n            yield new Promise(resolve => setTimeout(resolve, 2000));\n            const results = {\n                transportsWorking: ['http'],\n                transportsFailing: [],\n                recommendedConfiguration: {},\n                performanceBaseline: {\n                    avgResponseTime: 150,\n                    reliability: 0.98,\n                    throughput: 1000\n                }\n            };\n            // Test WebSocket if supported\n            if ((_a = this.progress.detectedCapabilities) === null || _a === void 0 ? void 0 : _a.webSocketSupported) {\n                results.transportsWorking.push('websocket');\n            }\n            // Test FileSystem if supported\n            if ((_b = this.progress.detectedCapabilities) === null || _b === void 0 ? void 0 : _b.fileSystemAccess) {\n                results.transportsWorking.push('filesystem');\n            }\n            return results;\n        });\n    }\n    renderValidationResults(container) {\n        const resultsContainer = container.createDiv('validation-results');\n        const results = this.progress.validationResults;\n        resultsContainer.createEl('h4', { text: '✅ Validation Complete' });\n        // Working transports\n        const workingContainer = resultsContainer.createDiv('working-transports');\n        workingContainer.createEl('h5', { text: 'Working Transports:' });\n        const workingList = workingContainer.createEl('ul');\n        results.transportsWorking.forEach(transport => {\n            workingList.createEl('li', { text: `✅ ${transport.toUpperCase()}` });\n        });\n        // Performance baseline\n        const performanceContainer = resultsContainer.createDiv('performance-baseline');\n        performanceContainer.createEl('h5', { text: 'Performance Baseline:' });\n        const perfList = performanceContainer.createEl('ul');\n        perfList.createEl('li', { text: `Average Response Time: ${results.performanceBaseline.avgResponseTime}ms` });\n        perfList.createEl('li', { text: `Reliability: ${(results.performanceBaseline.reliability * 100).toFixed(1)}%` });\n        perfList.createEl('li', { text: `Throughput: ${results.performanceBaseline.throughput} requests/min` });\n    }\n    renderValidationError(container, error) {\n        const errorContainer = container.createDiv('validation-error');\n        errorContainer.createEl('h4', { text: '⚠️ Validation Issues' });\n        errorContainer.createEl('p', {\n            text: 'Some validation tests failed, but you can still proceed. You can adjust settings later if needed.'\n        });\n        if (this.plugin.settings.debugMode) {\n            errorContainer.createEl('p', {\n                text: `Error: ${error.message}`,\n                cls: 'error-details'\n            });\n        }\n    }\n    renderCompletionStep(container) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const step = container.createDiv('onboarding-step completion-step');\n            step.createEl('h3', { text: '🎉 Setup Complete!' });\n            step.createEl('p', { text: 'VaultPilot has been configured with your optimal settings.' });\n            const summary = step.createDiv('setup-summary');\n            summary.createEl('h4', { text: 'Configuration Summary:' });\n            const summaryList = summary.createEl('ul');\n            summaryList.createEl('li', {\n                text: `Performance Mode: ${this.progress.userPreferences.performanceMode}`\n            });\n            summaryList.createEl('li', {\n                text: `Real-time Updates: ${this.progress.userPreferences.enableRealTimeUpdates ? 'Enabled' : 'Disabled'}`\n            });\n            summaryList.createEl('li', {\n                text: `Analytics: ${this.progress.userPreferences.enableAnalytics ? 'Enabled' : 'Disabled'}`\n            });\n            if (this.progress.detectedCapabilities) {\n                summaryList.createEl('li', {\n                    text: `Recommended Transport: ${this.progress.detectedCapabilities.recommendedTransport}`\n                });\n            }\n            const nextSteps = step.createDiv('next-steps');\n            nextSteps.createEl('h4', { text: 'What\\'s Next:' });\n            const nextList = nextSteps.createEl('ul');\n            nextList.createEl('li', { text: '📊 Check the dashboard for real-time status' });\n            nextList.createEl('li', { text: '⚙️ Adjust advanced settings as needed' });\n            nextList.createEl('li', { text: '💡 Review AI-powered recommendations' });\n            nextList.createEl('li', { text: '📈 Monitor performance analytics' });\n        });\n    }\n    updateProgressIndicators() {\n        // Update step indicators\n        this.stepElements.forEach((element, index) => {\n            element.removeClass('active', 'completed', 'inactive');\n            if (index < this.currentStep) {\n                element.addClass('completed');\n            }\n            else if (index === this.currentStep) {\n                element.addClass('active');\n            }\n            else {\n                element.addClass('inactive');\n            }\n        });\n        // Update progress bar\n        const progressFill = this.progressBar.querySelector('.progress-fill');\n        if (progressFill) {\n            const progress = ((this.currentStep + 1) / this.totalSteps) * 100;\n            progressFill.style.width = `${progress}%`;\n        }\n    }\n    updateNavigationState() {\n        // Previous button\n        this.previousButton.setDisabled(this.currentStep === 0);\n        // Next button\n        if (this.currentStep === this.totalSteps - 1) {\n            this.nextButton.setButtonText('Finish');\n        }\n        else {\n            this.nextButton.setButtonText('Next');\n        }\n        // Skip button - hide on last step\n        if (this.currentStep === this.totalSteps - 1) {\n            this.skipButton.buttonEl.style.display = 'none';\n        }\n        else {\n            this.skipButton.buttonEl.style.display = '';\n        }\n    }\n    nextStep() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.currentStep < this.totalSteps - 1) {\n                this.progress.completedSteps[this.currentStep] = true;\n                this.currentStep++;\n                yield this.renderCurrentStep();\n            }\n            else {\n                // Finish onboarding\n                yield this.finishOnboarding();\n            }\n        });\n    }\n    previousStep() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.currentStep > 0) {\n                this.currentStep--;\n                yield this.renderCurrentStep();\n            }\n        });\n    }\n    skipOnboarding() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const confirmed = confirm('Are you sure you want to skip the setup wizard? You can access these settings later in the plugin settings.');\n            if (confirmed) {\n                yield this.finishOnboarding(true);\n            }\n        });\n    }\n    finishOnboarding() {\n        return __awaiter(this, arguments, void 0, function* (skipped = false) {\n            try {\n                if (!skipped) {\n                    // Apply the configuration\n                    yield this.applyConfiguration();\n                    new Notice('✅ VaultPilot configuration applied successfully!');\n                }\n                else {\n                    new Notice('⚠️ Onboarding skipped - using default settings');\n                }\n                // Mark onboarding as complete\n                this.plugin.settings.onboardingComplete = true;\n                yield this.plugin.saveSettings();\n                this.close();\n            }\n            catch (error) {\n                console.error('Failed to apply onboarding configuration:', error);\n                new Notice('❌ Failed to apply configuration. Please check settings manually.');\n            }\n        });\n    }\n    applyConfiguration() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Apply user preferences to plugin settings\n            const preferences = this.progress.userPreferences;\n            this.plugin.settings.performanceMode = preferences.performanceMode;\n            this.plugin.settings.enableRealTimeUpdates = preferences.enableRealTimeUpdates;\n            this.plugin.settings.enableAnalytics = preferences.enableAnalytics;\n            if (this.progress.detectedCapabilities) {\n                // Apply recommended transport configuration\n                const capabilities = this.progress.detectedCapabilities;\n                // Configure transport manager with detected capabilities\n                const transportConfig = {\n                    selectionCriteria: this.getSelectionCriteriaForMode(preferences.performanceMode),\n                    fallbackChain: this.buildFallbackChain(capabilities),\n                    transportConfigs: {\n                        http: { baseUrl: this.plugin.settings.backendUrl },\n                        websocket: capabilities.webSocketSupported ? { url: this.plugin.settings.webSocketUrl } : undefined,\n                        filesystem: capabilities.fileSystemAccess ? { basePath: '.vaultpilot' } : undefined\n                    },\n                    autoFailover: true,\n                    debug: this.plugin.settings.debugMode\n                };\n                // Store configuration for transport manager\n                this.plugin.settings.transportConfig = transportConfig;\n            }\n            yield this.plugin.saveSettings();\n        });\n    }\n    getSelectionCriteriaForMode(mode) {\n        switch (mode) {\n            case 'performance':\n                return {\n                    latencyWeight: 0.6,\n                    reliabilityWeight: 0.2,\n                    capabilityWeight: 0.1,\n                    costWeight: 0.1\n                };\n            case 'reliability':\n                return {\n                    latencyWeight: 0.1,\n                    reliabilityWeight: 0.6,\n                    capabilityWeight: 0.2,\n                    costWeight: 0.1\n                };\n            default: // balanced\n                return {\n                    latencyWeight: 0.3,\n                    reliabilityWeight: 0.3,\n                    capabilityWeight: 0.2,\n                    costWeight: 0.2\n                };\n        }\n    }\n    buildFallbackChain(capabilities) {\n        const chain = [];\n        if (capabilities.webSocketSupported) {\n            chain.push('websocket');\n        }\n        if (capabilities.httpCapabilities) {\n            chain.push('http');\n        }\n        if (capabilities.fileSystemAccess) {\n            chain.push('filesystem');\n        }\n        return chain;\n    }\n    onClose() {\n        const { contentEl } = this;\n        contentEl.empty();\n    }\n}\n//# sourceMappingURL=OnboardingWizard.js.map","references":["/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/node_modules/obsidian/obsidian.d.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/devpipe/TransportManager.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/devpipe/transports/DevPipeTransport.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/utils/EnvironmentDetector.ts","/Users/malachiledbetter/Documents/GitHub/VaultPilot/vaultpilot/src/main.ts"],"map":"{\"version\":3,\"file\":\"OnboardingWizard.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../src/components/OnboardingWizard.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"/**\\n * OnboardingWizard - Intelligent first-time setup and transport optimization\\n */\\n\\nimport { Modal, App, Setting, Notice, ButtonComponent } from 'obsidian';\\nimport { TransportManager } from '../devpipe/TransportManager';\\nimport { TransportType } from '../devpipe/transports/DevPipeTransport';\\nimport { EnvironmentDetector } from '../utils/EnvironmentDetector';\\nimport VaultPilotPlugin from '../main';\\n\\nexport interface OnboardingWizardConfig {\\n  skipEnvironmentDetection?: boolean;\\n  enableTelemetry?: boolean;\\n  skipValidation?: boolean;\\n}\\n\\nexport interface EnvironmentCapabilities {\\n  platform: 'browser' | 'node' | 'obsidian';\\n  webSocketSupported: boolean;\\n  fileSystemAccess: boolean;\\n  httpCapabilities: boolean;\\n  recommendedTransport: string;\\n  performanceEstimate: 'excellent' | 'good' | 'fair' | 'poor';\\n}\\n\\nexport interface OnboardingProgress {\\n  currentStep: number;\\n  totalSteps: number;\\n  completedSteps: boolean[];\\n  userPreferences: OnboardingPreferences;\\n  detectedCapabilities?: EnvironmentCapabilities;\\n  validationResults?: ValidationResults;\\n}\\n\\ninterface OnboardingPreferences {\\n  primaryTransport?: string;\\n  enableRealTimeUpdates: boolean;\\n  performanceMode: 'balanced' | 'performance' | 'reliability';\\n  enableAnalytics: boolean;\\n}\\n\\ninterface ValidationResults {\\n  transportsWorking: string[];\\n  transportsFailing: string[];\\n  recommendedConfiguration: any;\\n  performanceBaseline: any;\\n}\\n\\nenum OnboardingStep {\\n  WELCOME = 0,\\n  ENVIRONMENT_DETECTION = 1,\\n  PREFERENCES = 2,\\n  VALIDATION = 3,\\n  COMPLETION = 4\\n}\\n\\nexport class OnboardingWizard extends Modal {\\n  private currentStep: number = 0;\\n  private totalSteps: number = 5;\\n  private progress: OnboardingProgress;\\n  private config: OnboardingWizardConfig;\\n  private transportManager: TransportManager;\\n  private plugin: VaultPilotPlugin;\\n  \\n  private stepElements: HTMLElement[] = [];\\n  private progressBar!: HTMLElement;\\n  private nextButton!: ButtonComponent;\\n  private previousButton!: ButtonComponent;\\n  private skipButton!: ButtonComponent;\\n\\n  constructor(app: App, plugin: VaultPilotPlugin, config: OnboardingWizardConfig = {}) {\\n    super(app);\\n    this.plugin = plugin;\\n    this.config = config;\\n    \\n    // Initialize transport manager with default config\\n    const transportConfig = {\\n      selectionCriteria: {\\n        latencyWeight: 0.3,\\n        reliabilityWeight: 0.4,\\n        capabilityWeight: 0.2,\\n        costWeight: 0.1\\n      },\\n      fallbackChain: [TransportType.HTTP, TransportType.WEBSOCKET, TransportType.FILESYSTEM],\\n      transportConfigs: {\\n        http: { \\n          serverUrl: plugin.settings.backendUrl,\\n          timeout: 30000,\\n          retryAttempts: 3,\\n          debug: plugin.settings.debugMode\\n        }\\n      }\\n    };\\n    this.transportManager = new TransportManager(transportConfig);\\n    \\n    this.progress = {\\n      currentStep: 0,\\n      totalSteps: this.totalSteps,\\n      completedSteps: new Array(this.totalSteps).fill(false),\\n      userPreferences: {\\n        enableRealTimeUpdates: true,\\n        performanceMode: 'balanced',\\n        enableAnalytics: true\\n      }\\n    };\\n\\n    this.modalEl.addClass('vaultpilot-onboarding');\\n  }\\n\\n  async onOpen() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n    \\n    // Add CSS classes for styling\\n    this.modalEl.addClass('vaultpilot-onboarding-modal');\\n    \\n    // Create header\\n    this.createHeader();\\n    \\n    // Create progress bar\\n    this.createProgressBar();\\n    \\n    // Create step container\\n    const stepContainer = contentEl.createDiv('onboarding-step-container');\\n    \\n    // Create navigation\\n    this.createNavigation();\\n    \\n    // Start with first step\\n    await this.renderCurrentStep();\\n  }\\n\\n  private createHeader() {\\n    const { contentEl } = this;\\n    const header = contentEl.createDiv('onboarding-header');\\n    header.createEl('h2', { text: 'Welcome to VaultPilot' });\\n    header.createEl('p', { \\n      text: 'Let\\\\'s set up your optimal configuration for the best experience',\\n      cls: 'onboarding-subtitle'\\n    });\\n  }\\n\\n  private createProgressBar() {\\n    const { contentEl } = this;\\n    const progressContainer = contentEl.createDiv('onboarding-progress');\\n    \\n    // Step indicators\\n    const stepsContainer = progressContainer.createDiv('progress-steps');\\n    for (let i = 0; i < this.totalSteps; i++) {\\n      const step = stepsContainer.createDiv('progress-step');\\n      step.addClass(i === 0 ? 'active' : 'inactive');\\n      step.createSpan({ text: (i + 1).toString() });\\n      this.stepElements.push(step);\\n    }\\n    \\n    // Progress bar\\n    this.progressBar = progressContainer.createDiv('progress-bar');\\n    const progressFill = this.progressBar.createDiv('progress-fill');\\n    progressFill.style.width = `${(1 / this.totalSteps) * 100}%`;\\n  }\\n\\n  private createNavigation() {\\n    const { contentEl } = this;\\n    const navigation = contentEl.createDiv('onboarding-navigation');\\n    \\n    // Previous button\\n    this.previousButton = new ButtonComponent(navigation)\\n      .setButtonText('Previous')\\n      .setClass('mod-muted')\\n      .onClick(() => this.previousStep());\\n    \\n    // Skip button\\n    this.skipButton = new ButtonComponent(navigation)\\n      .setButtonText('Skip Setup')\\n      .setClass('mod-muted')\\n      .onClick(() => this.skipOnboarding());\\n    \\n    // Next button\\n    this.nextButton = new ButtonComponent(navigation)\\n      .setButtonText('Next')\\n      .setCta()\\n      .onClick(() => this.nextStep());\\n    \\n    this.updateNavigationState();\\n  }\\n\\n  private async renderCurrentStep() {\\n    const { contentEl } = this;\\n    const stepContainer = contentEl.querySelector('.onboarding-step-container') as HTMLElement;\\n    stepContainer.empty();\\n    \\n    this.updateProgressIndicators();\\n    \\n    switch (this.currentStep) {\\n      case OnboardingStep.WELCOME:\\n        await this.renderWelcomeStep(stepContainer);\\n        break;\\n      case OnboardingStep.ENVIRONMENT_DETECTION:\\n        await this.renderEnvironmentStep(stepContainer);\\n        break;\\n      case OnboardingStep.PREFERENCES:\\n        await this.renderPreferencesStep(stepContainer);\\n        break;\\n      case OnboardingStep.VALIDATION:\\n        await this.renderValidationStep(stepContainer);\\n        break;\\n      case OnboardingStep.COMPLETION:\\n        await this.renderCompletionStep(stepContainer);\\n        break;\\n    }\\n    \\n    this.updateNavigationState();\\n  }\\n\\n  private async renderWelcomeStep(container: HTMLElement) {\\n    const step = container.createDiv('onboarding-step welcome-step');\\n    \\n    step.createEl('h3', { text: 'Welcome to VaultPilot' });\\n    step.createEl('p', { \\n      text: 'VaultPilot provides intelligent transport management and optimization for your Obsidian experience. This wizard will help you configure the optimal settings for your environment.'\\n    });\\n    \\n    const features = step.createDiv('welcome-features');\\n    features.createEl('h4', { text: 'What you\\\\'ll get:' });\\n    \\n    const featureList = features.createEl('ul');\\n    featureList.createEl('li', { text: '🚀 Intelligent transport selection and failover' });\\n    featureList.createEl('li', { text: '📊 Real-time performance monitoring' });\\n    featureList.createEl('li', { text: '💡 AI-powered optimization suggestions' });\\n    featureList.createEl('li', { text: '🔧 Advanced configuration options' });\\n    featureList.createEl('li', { text: '📈 Usage analytics and insights' });\\n    \\n    const estimatedTime = step.createDiv('estimated-time');\\n    estimatedTime.createEl('p', { \\n      text: '⏱️ Estimated setup time: 2-3 minutes',\\n      cls: 'muted'\\n    });\\n  }\\n\\n  private async renderEnvironmentStep(container: HTMLElement) {\\n    const step = container.createDiv('onboarding-step environment-step');\\n    \\n    step.createEl('h3', { text: 'Environment Detection' });\\n    step.createEl('p', { text: 'Analyzing your environment to recommend optimal transport configuration...' });\\n    \\n    if (!this.config.skipEnvironmentDetection && !this.progress.detectedCapabilities) {\\n      const detectionStatus = step.createDiv('detection-status');\\n      detectionStatus.createEl('p', { text: '🔍 Detecting capabilities...', cls: 'detection-loading' });\\n      \\n      try {\\n        this.progress.detectedCapabilities = await this.detectEnvironment();\\n        this.renderEnvironmentResults(step);\\n      } catch (error) {\\n        this.renderEnvironmentError(step, error);\\n      }\\n    } else if (this.progress.detectedCapabilities) {\\n      this.renderEnvironmentResults(step);\\n    }\\n  }\\n\\n  private async detectEnvironment(): Promise<EnvironmentCapabilities> {\\n    // Simulate detection process with progress updates\\n    await new Promise(resolve => setTimeout(resolve, 1000));\\n    \\n    const envInfo = EnvironmentDetector.detect();\\n    \\n    // Ensure platform matches our interface\\n    let platform: 'browser' | 'node' | 'obsidian' = 'obsidian';\\n    if (envInfo.platform === 'browser' || envInfo.platform === 'node' || envInfo.platform === 'obsidian') {\\n      platform = envInfo.platform;\\n    }\\n    \\n    const capabilities: EnvironmentCapabilities = {\\n      platform,\\n      webSocketSupported: envInfo.hasWebSocket,\\n      fileSystemAccess: envInfo.hasFileSystem,\\n      httpCapabilities: envInfo.hasHTTP,\\n      recommendedTransport: 'http', // Will be determined by analysis\\n      performanceEstimate: 'good'\\n    };\\n    \\n    // Determine recommended transport\\n    if (capabilities.webSocketSupported && capabilities.httpCapabilities) {\\n      capabilities.recommendedTransport = 'websocket';\\n      capabilities.performanceEstimate = 'excellent';\\n    } else if (capabilities.httpCapabilities) {\\n      capabilities.recommendedTransport = 'http';\\n      capabilities.performanceEstimate = 'good';\\n    } else if (capabilities.fileSystemAccess) {\\n      capabilities.recommendedTransport = 'filesystem';\\n      capabilities.performanceEstimate = 'fair';\\n    }\\n    \\n    return capabilities;\\n  }\\n\\n  private renderEnvironmentResults(container: HTMLElement) {\\n    const resultsContainer = container.createDiv('environment-results');\\n    const capabilities = this.progress.detectedCapabilities!;\\n    \\n    resultsContainer.createEl('h4', { text: '✅ Detection Complete' });\\n    \\n    const capabilitiesList = resultsContainer.createDiv('capabilities-list');\\n    \\n    // WebSocket capability\\n    const wsCapability = capabilitiesList.createDiv('capability-item');\\n    wsCapability.createSpan({ \\n      text: capabilities.webSocketSupported ? '✅' : '❌',\\n      cls: 'capability-icon'\\n    });\\n    wsCapability.createSpan({ text: 'WebSocket Support' });\\n    \\n    // HTTP capability\\n    const httpCapability = capabilitiesList.createDiv('capability-item');\\n    httpCapability.createSpan({ \\n      text: capabilities.httpCapabilities ? '✅' : '❌',\\n      cls: 'capability-icon'\\n    });\\n    httpCapability.createSpan({ text: 'HTTP Transport' });\\n    \\n    // FileSystem capability\\n    const fsCapability = capabilitiesList.createDiv('capability-item');\\n    fsCapability.createSpan({ \\n      text: capabilities.fileSystemAccess ? '✅' : '❌',\\n      cls: 'capability-icon'\\n    });\\n    fsCapability.createSpan({ text: 'FileSystem Access' });\\n    \\n    // Recommendation\\n    const recommendation = resultsContainer.createDiv('environment-recommendation');\\n    recommendation.createEl('h4', { text: 'Recommendation' });\\n    recommendation.createEl('p', { \\n      text: `Based on your environment, we recommend using ${capabilities.recommendedTransport} transport for ${capabilities.performanceEstimate} performance.`\\n    });\\n  }\\n\\n  private renderEnvironmentError(container: HTMLElement, error: any) {\\n    const errorContainer = container.createDiv('environment-error');\\n    errorContainer.createEl('h4', { text: '⚠️ Detection Failed' });\\n    errorContainer.createEl('p', { \\n      text: 'Unable to automatically detect your environment capabilities. You can proceed with default settings or manually configure later.'\\n    });\\n    \\n    if (this.plugin.settings.debugMode) {\\n      errorContainer.createEl('p', { \\n        text: `Error: ${error.message}`,\\n        cls: 'error-details'\\n      });\\n    }\\n  }\\n\\n  private async renderPreferencesStep(container: HTMLElement) {\\n    const step = container.createDiv('onboarding-step preferences-step');\\n    \\n    step.createEl('h3', { text: 'Performance Preferences' });\\n    step.createEl('p', { text: 'Configure your preferences for optimal performance:' });\\n    \\n    const preferencesContainer = step.createDiv('preferences-container');\\n    \\n    // Performance mode setting\\n    new Setting(preferencesContainer)\\n      .setName('Performance Mode')\\n      .setDesc('Choose your preferred balance between speed and reliability')\\n      .addDropdown(dropdown => {\\n        dropdown.addOption('performance', 'Performance (Prioritize Speed)');\\n        dropdown.addOption('balanced', 'Balanced (Recommended)');\\n        dropdown.addOption('reliability', 'Reliability (Prioritize Stability)');\\n        dropdown.setValue(this.progress.userPreferences.performanceMode);\\n        dropdown.onChange(value => {\\n          this.progress.userPreferences.performanceMode = value as any;\\n        });\\n      });\\n    \\n    // Real-time updates setting\\n    new Setting(preferencesContainer)\\n      .setName('Real-time Updates')\\n      .setDesc('Enable real-time dashboard updates and live monitoring')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.progress.userPreferences.enableRealTimeUpdates);\\n        toggle.onChange(value => {\\n          this.progress.userPreferences.enableRealTimeUpdates = value;\\n        });\\n      });\\n    \\n    // Analytics setting\\n    new Setting(preferencesContainer)\\n      .setName('Usage Analytics')\\n      .setDesc('Enable anonymous usage analytics to improve recommendations')\\n      .addToggle(toggle => {\\n        toggle.setValue(this.progress.userPreferences.enableAnalytics);\\n        toggle.onChange(value => {\\n          this.progress.userPreferences.enableAnalytics = value;\\n        });\\n      });\\n  }\\n\\n  private async renderValidationStep(container: HTMLElement) {\\n    const step = container.createDiv('onboarding-step validation-step');\\n    \\n    step.createEl('h3', { text: 'Configuration Validation' });\\n    step.createEl('p', { text: 'Testing your configuration and establishing performance baseline...' });\\n    \\n    if (!this.config.skipValidation && !this.progress.validationResults) {\\n      const validationStatus = step.createDiv('validation-status');\\n      validationStatus.createEl('p', { text: '🧪 Running validation tests...', cls: 'validation-loading' });\\n      \\n      try {\\n        this.progress.validationResults = await this.validateConfiguration();\\n        this.renderValidationResults(step);\\n      } catch (error) {\\n        this.renderValidationError(step, error);\\n      }\\n    } else if (this.progress.validationResults) {\\n      this.renderValidationResults(step);\\n    }\\n  }\\n\\n  private async validateConfiguration(): Promise<ValidationResults> {\\n    // Simulate validation process\\n    await new Promise(resolve => setTimeout(resolve, 2000));\\n    \\n    const results: ValidationResults = {\\n      transportsWorking: ['http'],\\n      transportsFailing: [],\\n      recommendedConfiguration: {},\\n      performanceBaseline: {\\n        avgResponseTime: 150,\\n        reliability: 0.98,\\n        throughput: 1000\\n      }\\n    };\\n    \\n    // Test WebSocket if supported\\n    if (this.progress.detectedCapabilities?.webSocketSupported) {\\n      results.transportsWorking.push('websocket');\\n    }\\n    \\n    // Test FileSystem if supported\\n    if (this.progress.detectedCapabilities?.fileSystemAccess) {\\n      results.transportsWorking.push('filesystem');\\n    }\\n    \\n    return results;\\n  }\\n\\n  private renderValidationResults(container: HTMLElement) {\\n    const resultsContainer = container.createDiv('validation-results');\\n    const results = this.progress.validationResults!;\\n    \\n    resultsContainer.createEl('h4', { text: '✅ Validation Complete' });\\n    \\n    // Working transports\\n    const workingContainer = resultsContainer.createDiv('working-transports');\\n    workingContainer.createEl('h5', { text: 'Working Transports:' });\\n    const workingList = workingContainer.createEl('ul');\\n    results.transportsWorking.forEach(transport => {\\n      workingList.createEl('li', { text: `✅ ${transport.toUpperCase()}` });\\n    });\\n    \\n    // Performance baseline\\n    const performanceContainer = resultsContainer.createDiv('performance-baseline');\\n    performanceContainer.createEl('h5', { text: 'Performance Baseline:' });\\n    const perfList = performanceContainer.createEl('ul');\\n    perfList.createEl('li', { text: `Average Response Time: ${results.performanceBaseline.avgResponseTime}ms` });\\n    perfList.createEl('li', { text: `Reliability: ${(results.performanceBaseline.reliability * 100).toFixed(1)}%` });\\n    perfList.createEl('li', { text: `Throughput: ${results.performanceBaseline.throughput} requests/min` });\\n  }\\n\\n  private renderValidationError(container: HTMLElement, error: any) {\\n    const errorContainer = container.createDiv('validation-error');\\n    errorContainer.createEl('h4', { text: '⚠️ Validation Issues' });\\n    errorContainer.createEl('p', { \\n      text: 'Some validation tests failed, but you can still proceed. You can adjust settings later if needed.'\\n    });\\n    \\n    if (this.plugin.settings.debugMode) {\\n      errorContainer.createEl('p', { \\n        text: `Error: ${error.message}`,\\n        cls: 'error-details'\\n      });\\n    }\\n  }\\n\\n  private async renderCompletionStep(container: HTMLElement) {\\n    const step = container.createDiv('onboarding-step completion-step');\\n    \\n    step.createEl('h3', { text: '🎉 Setup Complete!' });\\n    step.createEl('p', { text: 'VaultPilot has been configured with your optimal settings.' });\\n    \\n    const summary = step.createDiv('setup-summary');\\n    summary.createEl('h4', { text: 'Configuration Summary:' });\\n    \\n    const summaryList = summary.createEl('ul');\\n    summaryList.createEl('li', { \\n      text: `Performance Mode: ${this.progress.userPreferences.performanceMode}` \\n    });\\n    summaryList.createEl('li', { \\n      text: `Real-time Updates: ${this.progress.userPreferences.enableRealTimeUpdates ? 'Enabled' : 'Disabled'}` \\n    });\\n    summaryList.createEl('li', { \\n      text: `Analytics: ${this.progress.userPreferences.enableAnalytics ? 'Enabled' : 'Disabled'}` \\n    });\\n    \\n    if (this.progress.detectedCapabilities) {\\n      summaryList.createEl('li', { \\n        text: `Recommended Transport: ${this.progress.detectedCapabilities.recommendedTransport}` \\n      });\\n    }\\n    \\n    const nextSteps = step.createDiv('next-steps');\\n    nextSteps.createEl('h4', { text: 'What\\\\'s Next:' });\\n    const nextList = nextSteps.createEl('ul');\\n    nextList.createEl('li', { text: '📊 Check the dashboard for real-time status' });\\n    nextList.createEl('li', { text: '⚙️ Adjust advanced settings as needed' });\\n    nextList.createEl('li', { text: '💡 Review AI-powered recommendations' });\\n    nextList.createEl('li', { text: '📈 Monitor performance analytics' });\\n  }\\n\\n  private updateProgressIndicators() {\\n    // Update step indicators\\n    this.stepElements.forEach((element, index) => {\\n      element.removeClass('active', 'completed', 'inactive');\\n      if (index < this.currentStep) {\\n        element.addClass('completed');\\n      } else if (index === this.currentStep) {\\n        element.addClass('active');\\n      } else {\\n        element.addClass('inactive');\\n      }\\n    });\\n    \\n    // Update progress bar\\n    const progressFill = this.progressBar.querySelector('.progress-fill') as HTMLElement;\\n    if (progressFill) {\\n      const progress = ((this.currentStep + 1) / this.totalSteps) * 100;\\n      progressFill.style.width = `${progress}%`;\\n    }\\n  }\\n\\n  private updateNavigationState() {\\n    // Previous button\\n    this.previousButton.setDisabled(this.currentStep === 0);\\n    \\n    // Next button\\n    if (this.currentStep === this.totalSteps - 1) {\\n      this.nextButton.setButtonText('Finish');\\n    } else {\\n      this.nextButton.setButtonText('Next');\\n    }\\n    \\n    // Skip button - hide on last step\\n    if (this.currentStep === this.totalSteps - 1) {\\n      this.skipButton.buttonEl.style.display = 'none';\\n    } else {\\n      this.skipButton.buttonEl.style.display = '';\\n    }\\n  }\\n\\n  private async nextStep() {\\n    if (this.currentStep < this.totalSteps - 1) {\\n      this.progress.completedSteps[this.currentStep] = true;\\n      this.currentStep++;\\n      await this.renderCurrentStep();\\n    } else {\\n      // Finish onboarding\\n      await this.finishOnboarding();\\n    }\\n  }\\n\\n  private async previousStep() {\\n    if (this.currentStep > 0) {\\n      this.currentStep--;\\n      await this.renderCurrentStep();\\n    }\\n  }\\n\\n  private async skipOnboarding() {\\n    const confirmed = confirm('Are you sure you want to skip the setup wizard? You can access these settings later in the plugin settings.');\\n    if (confirmed) {\\n      await this.finishOnboarding(true);\\n    }\\n  }\\n\\n  private async finishOnboarding(skipped: boolean = false) {\\n    try {\\n      if (!skipped) {\\n        // Apply the configuration\\n        await this.applyConfiguration();\\n        new Notice('✅ VaultPilot configuration applied successfully!');\\n      } else {\\n        new Notice('⚠️ Onboarding skipped - using default settings');\\n      }\\n      \\n      // Mark onboarding as complete\\n      this.plugin.settings.onboardingComplete = true;\\n      await this.plugin.saveSettings();\\n      \\n      this.close();\\n    } catch (error) {\\n      console.error('Failed to apply onboarding configuration:', error);\\n      new Notice('❌ Failed to apply configuration. Please check settings manually.');\\n    }\\n  }\\n\\n  private async applyConfiguration() {\\n    // Apply user preferences to plugin settings\\n    const preferences = this.progress.userPreferences;\\n    \\n    this.plugin.settings.performanceMode = preferences.performanceMode;\\n    this.plugin.settings.enableRealTimeUpdates = preferences.enableRealTimeUpdates;\\n    this.plugin.settings.enableAnalytics = preferences.enableAnalytics;\\n    \\n    if (this.progress.detectedCapabilities) {\\n      // Apply recommended transport configuration\\n      const capabilities = this.progress.detectedCapabilities;\\n      \\n      // Configure transport manager with detected capabilities\\n      const transportConfig = {\\n        selectionCriteria: this.getSelectionCriteriaForMode(preferences.performanceMode),\\n        fallbackChain: this.buildFallbackChain(capabilities),\\n        transportConfigs: {\\n          http: { baseUrl: this.plugin.settings.backendUrl },\\n          websocket: capabilities.webSocketSupported ? { url: this.plugin.settings.webSocketUrl } : undefined,\\n          filesystem: capabilities.fileSystemAccess ? { basePath: '.vaultpilot' } : undefined\\n        },\\n        autoFailover: true,\\n        debug: this.plugin.settings.debugMode\\n      };\\n      \\n      // Store configuration for transport manager\\n      this.plugin.settings.transportConfig = transportConfig;\\n    }\\n    \\n    await this.plugin.saveSettings();\\n  }\\n\\n  private getSelectionCriteriaForMode(mode: string) {\\n    switch (mode) {\\n      case 'performance':\\n        return {\\n          latencyWeight: 0.6,\\n          reliabilityWeight: 0.2,\\n          capabilityWeight: 0.1,\\n          costWeight: 0.1\\n        };\\n      case 'reliability':\\n        return {\\n          latencyWeight: 0.1,\\n          reliabilityWeight: 0.6,\\n          capabilityWeight: 0.2,\\n          costWeight: 0.1\\n        };\\n      default: // balanced\\n        return {\\n          latencyWeight: 0.3,\\n          reliabilityWeight: 0.3,\\n          capabilityWeight: 0.2,\\n          costWeight: 0.2\\n        };\\n    }\\n  }\\n\\n  private buildFallbackChain(capabilities: EnvironmentCapabilities): string[] {\\n    const chain: string[] = [];\\n    \\n    if (capabilities.webSocketSupported) {\\n      chain.push('websocket');\\n    }\\n    if (capabilities.httpCapabilities) {\\n      chain.push('http');\\n    }\\n    if (capabilities.fileSystemAccess) {\\n      chain.push('filesystem');\\n    }\\n    \\n    return chain;\\n  }\\n\\n  onClose() {\\n    const { contentEl } = this;\\n    contentEl.empty();\\n  }\\n}\\n\"]}"}
