{"code":"import { __awaiter } from \"tslib\";\n// Debug utilities for Plan My Day feature\nexport class PlanMyDayDebugger {\n    constructor() {\n        this.logs = [];\n        this.maxLogs = 100;\n    }\n    static getInstance() {\n        if (!PlanMyDayDebugger.instance) {\n            PlanMyDayDebugger.instance = new PlanMyDayDebugger();\n        }\n        return PlanMyDayDebugger.instance;\n    }\n    log(message, data) {\n        const timestamp = new Date().toISOString();\n        const logEntry = `[${timestamp}] ${message}${data ? ` | ${JSON.stringify(data)}` : ''}`;\n        console.log(logEntry);\n        this.logs.push(logEntry);\n        // Keep only the most recent logs\n        if (this.logs.length > this.maxLogs) {\n            this.logs = this.logs.slice(-this.maxLogs);\n        }\n    }\n    error(message, error) {\n        const timestamp = new Date().toISOString();\n        const errorData = error instanceof Error ? {\n            message: error.message,\n            stack: error.stack,\n            name: error.name\n        } : error;\n        const logEntry = `[${timestamp}] ERROR: ${message}${errorData ? ` | ${JSON.stringify(errorData)}` : ''}`;\n        console.error(logEntry);\n        this.logs.push(logEntry);\n        if (this.logs.length > this.maxLogs) {\n            this.logs = this.logs.slice(-this.maxLogs);\n        }\n    }\n    getLogs() {\n        return [...this.logs];\n    }\n    clearLogs() {\n        this.logs = [];\n    }\n    exportLogs() {\n        return this.logs.join('\\n');\n    }\n    // Helper to analyze API client state\n    analyzeApiClient(apiClient) {\n        if (!apiClient) {\n            return { status: 'null', available: false };\n        }\n        return {\n            status: 'available',\n            available: true,\n            type: typeof apiClient,\n            methods: Object.getOwnPropertyNames(Object.getPrototypeOf(apiClient)).filter(name => typeof apiClient[name] === 'function'),\n            hasPlanTasks: typeof apiClient.planTasks === 'function',\n            hasHealthCheck: typeof apiClient.healthCheck === 'function'\n        };\n    }\n    // Helper to test EvoAgentX connection\n    testConnection(apiClient) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                this.log('🔗 Testing EvoAgentX connection...');\n                if (!apiClient) {\n                    throw new Error('API client is null or undefined');\n                }\n                if (!apiClient.healthCheck) {\n                    throw new Error('API client does not have healthCheck method');\n                }\n                const result = yield apiClient.healthCheck();\n                this.log('✅ Connection test successful', result);\n                return { success: true, result };\n            }\n            catch (error) {\n                this.error('❌ Connection test failed', error);\n                return { success: false, error: error instanceof Error ? error.message : String(error) };\n            }\n        });\n    }\n    // Helper to test task planning specifically\n    testTaskPlanning(apiClient_1) {\n        return __awaiter(this, arguments, void 0, function* (apiClient, testNote = 'Test note for schedule generation') {\n            var _a, _b, _c, _d;\n            try {\n                this.log('📋 Testing task planning...');\n                if (!apiClient) {\n                    throw new Error('API client is null or undefined');\n                }\n                if (!apiClient.planTasks) {\n                    throw new Error('API client does not have planTasks method');\n                }\n                const result = yield apiClient.planTasks({\n                    goal: 'Create a test schedule',\n                    context: testNote,\n                    timeframe: '1 day'\n                });\n                this.log('✅ Task planning test successful', {\n                    success: result.success,\n                    hasData: !!result.data,\n                    hasPlan: !!((_a = result.data) === null || _a === void 0 ? void 0 : _a.plan),\n                    taskCount: ((_d = (_c = (_b = result.data) === null || _b === void 0 ? void 0 : _b.plan) === null || _c === void 0 ? void 0 : _c.tasks) === null || _d === void 0 ? void 0 : _d.length) || 0\n                });\n                return { success: true, result };\n            }\n            catch (error) {\n                this.error('❌ Task planning test failed', error);\n                return { success: false, error: error instanceof Error ? error.message : String(error) };\n            }\n        });\n    }\n}\n// Export singleton instance\nexport const planMyDayDebugger = PlanMyDayDebugger.getInstance();\n//# sourceMappingURL=plan-my-day-debug.js.map","references":[],"map":"{\"version\":3,\"file\":\"plan-my-day-debug.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/plan-my-day-debug.ts\"],\"names\":[],\"mappings\":\"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\",\"sourcesContent\":[\"// Debug utilities for Plan My Day feature\\nexport class PlanMyDayDebugger {\\n  private static instance: PlanMyDayDebugger;\\n  private logs: string[] = [];\\n  private maxLogs = 100;\\n\\n  static getInstance(): PlanMyDayDebugger {\\n    if (!PlanMyDayDebugger.instance) {\\n      PlanMyDayDebugger.instance = new PlanMyDayDebugger();\\n    }\\n    return PlanMyDayDebugger.instance;\\n  }\\n\\n  log(message: string, data?: any) {\\n    const timestamp = new Date().toISOString();\\n    const logEntry = `[${timestamp}] ${message}${data ? ` | ${JSON.stringify(data)}` : ''}`;\\n    \\n    console.log(logEntry);\\n    this.logs.push(logEntry);\\n    \\n    // Keep only the most recent logs\\n    if (this.logs.length > this.maxLogs) {\\n      this.logs = this.logs.slice(-this.maxLogs);\\n    }\\n  }\\n\\n  error(message: string, error?: any) {\\n    const timestamp = new Date().toISOString();\\n    const errorData = error instanceof Error ? {\\n      message: error.message,\\n      stack: error.stack,\\n      name: error.name\\n    } : error;\\n    \\n    const logEntry = `[${timestamp}] ERROR: ${message}${errorData ? ` | ${JSON.stringify(errorData)}` : ''}`;\\n    \\n    console.error(logEntry);\\n    this.logs.push(logEntry);\\n    \\n    if (this.logs.length > this.maxLogs) {\\n      this.logs = this.logs.slice(-this.maxLogs);\\n    }\\n  }\\n\\n  getLogs(): string[] {\\n    return [...this.logs];\\n  }\\n\\n  clearLogs() {\\n    this.logs = [];\\n  }\\n\\n  exportLogs(): string {\\n    return this.logs.join('\\\\n');\\n  }\\n\\n  // Helper to analyze API client state\\n  analyzeApiClient(apiClient: any): any {\\n    if (!apiClient) {\\n      return { status: 'null', available: false };\\n    }\\n\\n    return {\\n      status: 'available',\\n      available: true,\\n      type: typeof apiClient,\\n      methods: Object.getOwnPropertyNames(Object.getPrototypeOf(apiClient)).filter(name => typeof apiClient[name] === 'function'),\\n      hasPlanTasks: typeof apiClient.planTasks === 'function',\\n      hasHealthCheck: typeof apiClient.healthCheck === 'function'\\n    };\\n  }\\n\\n  // Helper to test EvoAgentX connection\\n  async testConnection(apiClient: any): Promise<any> {\\n    try {\\n      this.log('🔗 Testing EvoAgentX connection...');\\n      \\n      if (!apiClient) {\\n        throw new Error('API client is null or undefined');\\n      }\\n\\n      if (!apiClient.healthCheck) {\\n        throw new Error('API client does not have healthCheck method');\\n      }\\n\\n      const result = await apiClient.healthCheck();\\n      this.log('✅ Connection test successful', result);\\n      return { success: true, result };\\n      \\n    } catch (error) {\\n      this.error('❌ Connection test failed', error);\\n      return { success: false, error: error instanceof Error ? error.message : String(error) };\\n    }\\n  }\\n\\n  // Helper to test task planning specifically\\n  async testTaskPlanning(apiClient: any, testNote: string = 'Test note for schedule generation'): Promise<any> {\\n    try {\\n      this.log('📋 Testing task planning...');\\n      \\n      if (!apiClient) {\\n        throw new Error('API client is null or undefined');\\n      }\\n\\n      if (!apiClient.planTasks) {\\n        throw new Error('API client does not have planTasks method');\\n      }\\n\\n      const result = await apiClient.planTasks({\\n        goal: 'Create a test schedule',\\n        context: testNote,\\n        timeframe: '1 day'\\n      });\\n\\n      this.log('✅ Task planning test successful', {\\n        success: result.success,\\n        hasData: !!result.data,\\n        hasPlan: !!result.data?.plan,\\n        taskCount: result.data?.plan?.tasks?.length || 0\\n      });\\n\\n      return { success: true, result };\\n      \\n    } catch (error) {\\n      this.error('❌ Task planning test failed', error);\\n      return { success: false, error: error instanceof Error ? error.message : String(error) };\\n    }\\n  }\\n}\\n\\n// Export singleton instance\\nexport const planMyDayDebugger = PlanMyDayDebugger.getInstance();\\n\"]}"}
